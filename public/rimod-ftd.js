var app_name="rimod-ftd";
var global_api=document.querySelector('script[id="rimod-ftd_js"][api]').getAttribute('api');
var browser={};
var result;

/*!
 * jQuery JavaScript Library v1.12.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:17Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";
var deletedIds = [];

var document = window.document;

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.12.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type( obj ) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {

		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		var realStringObj = obj && obj.toString();
		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {

			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call( obj, "constructor" ) &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}
		} catch ( e ) {

			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( !support.ownFirst ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {

			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data ); // jscs:ignore requireDotNotation
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {

				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[ j ] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, nidselect, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
					while ( i-- ) {
						groups[i] = nidselect + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// init accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt( 0 ) === "<" &&
				selector.charAt( selector.length - 1 ) === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {

						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[ 2 ] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[ 0 ] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof root.ready !== "undefined" ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter( function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

				// Always skip document fragments
				if ( cur.nodeType < 11 && ( pos ?
					pos.index( cur ) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector( cur, selectors ) ) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[ 0 ], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.uniqueSort( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = true;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this === promise ? newDefer.promise() : this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add( function() {

					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 ||
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred.
			// If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.progress( updateFunc( i, progressContexts, progressValues ) )
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
} );


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {

	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
} );

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {

	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener ||
		window.event.type === "load" ||
		document.readyState === "complete" ) {

		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// Support: IE6-10
		// Older IE sometimes signals "interactive" too soon
		if ( document.readyState === "complete" ||
			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed );

		// If IE event model is used
		} else {

			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch ( e ) {}

			if ( top && top.doScroll ) {
				( function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {

							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll( "left" );
						} catch ( e ) {
							return window.setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				} )();
			}
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownFirst = i === "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery( function() {

	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {

		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== "undefined" ) {

		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {

			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
} );


( function() {
	var div = document.createElement( "div" );

	// Support: IE<9
	support.deleteExpando = true;
	try {
		delete div.test;
	} catch ( e ) {
		support.deleteExpando = false;
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();
var acceptData = function( elem ) {
	var noData = jQuery.noData[ ( elem.nodeName + " " ).toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute( "classid" ) === noData;
};




var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[ name ] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&
		data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {

		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {

		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split( " " );
					}
				}
			} else {

				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[ i ] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, undefined
	} else {
		cache[ id ] = undefined;
	}
}

jQuery.extend( {
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,

		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				jQuery.data( this, key );
			} );
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each( function() {
				jQuery.data( this, key, value );
			} ) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each( function() {
			jQuery.removeData( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object,
	// or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );


( function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {

			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== "undefined" ) {

			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

} )();
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" ||
			!jQuery.contains( elem.ownerDocument, elem );
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn(
					elems[ i ],
					key,
					raw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[ 0 ], key ) : emptyGet;
};
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([\w:-]+)/ );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );

var rleadingWhitespace = ( /^\s+/ );

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +
		"details|dialog|figcaption|figure|footer|header|hgroup|main|" +
		"mark|meter|nav|output|picture|progress|section|summary|template|time|video";



function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}


( function() {
	var div = document.createElement( "div" ),
		fragment = document.createDocumentFragment(),
		input = document.createElement( "input" );

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );

	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input = document.createElement( "input" );
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
	support.noCloneEvent = !!div.addEventListener;

	// Support: IE<9
	// Since attributes and properties are the same in IE,
	// cleanData must set properties to undefined rather than use removeAttribute
	div[ jQuery.expando ] = 1;
	support.attributes = !div.getAttribute( jQuery.expando );
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {
	option: [ 1, "<select multiple='multiple'>", "</select>" ],
	legend: [ 1, "<fieldset>", "</fieldset>" ],
	area: [ 1, "<map>", "</map>" ],

	// Support: IE8
	param: [ 1, "<object>", "</object>" ],
	thead: [ 1, "<table>", "</table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
	// unless wrapped in a div with non-breaking characters in front of it.
	_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
};

// Support: IE8-IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
				undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context;
			( elem = elems[ i ] ) != null;
			i++
		) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; ( elem = elems[ i ] ) != null; i++ ) {
		jQuery._data(
			elem,
			"globalEval",
			!refElements || jQuery._data( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/,
	rtbody = /<tbody/i;

function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

function buildFragment( elems, context, scripts, selection, ignored ) {
	var j, elem, contains,
		tmp, tag, tbody, wrap,
		l = elems.length,

		// Ensure a safe fragment
		safe = createSafeFragment( context ),

		nodes = [],
		i = 0;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || safe.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;

				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Manually add leading whitespace removed by IE
				if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
					nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );
				}

				// Remove IE's autoinserted <tbody> from table fragments
				if ( !support.tbody ) {

					// String was a <table>, *may* have spurious <tbody>
					elem = tag === "table" && !rtbody.test( elem ) ?
						tmp.firstChild :

						// String was a bare <thead> or <tfoot>
						wrap[ 1 ] === "<table>" && !rtbody.test( elem ) ?
							tmp :
							0;

					j = elem && elem.childNodes.length;
					while ( j-- ) {
						if ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), "tbody" ) &&
							!tbody.childNodes.length ) {

							elem.removeChild( tbody );
						}
					}
				}

				jQuery.merge( nodes, tmp.childNodes );

				// Fix #12392 for WebKit and IE > 9
				tmp.textContent = "";

				// Fix #12392 for oldIE
				while ( tmp.firstChild ) {
					tmp.removeChild( tmp.firstChild );
				}

				// Remember the top-level container for proper cleanup
				tmp = safe.lastChild;
			}
		}
	}

	// Fix #11356: Clear elements from fragment
	if ( tmp ) {
		safe.removeChild( tmp );
	}

	// Reset defaultChecked for any radios and checkboxes
	// about to be appended to the DOM in IE 6/7 (#8060)
	if ( !support.appendChecked ) {
		jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
	}

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}

			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( safe.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	tmp = null;

	return safe;
}


( function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
	for ( i in { submit: true, change: true, focusin: true } ) {
		eventName = "on" + i;

		if ( !( support[ i ] = eventName in window ) ) {

			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE9
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" &&
					( !e || jQuery.event.triggered !== e.type ) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};

			// Add elem as a property of the handle fn to prevent a memory leak
			// with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] &&
				jQuery._data( cur, "handle" );

			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if (
				( !special._default ||
				 special._default.apply( eventPath.pop(), data ) === false
				) && acceptData( elem )
			) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {

						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support (at least): Chrome, IE9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox<=42+
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Safari 6-8+
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split( " " ),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: ( "button buttons clientX clientY fromElement offsetX offsetY " +
			"pageX pageY screenX screenY toElement" ).split( " " ),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX +
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
					( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY +
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
					( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ?
					original.toElement :
					fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {

						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	// Piggyback on a donor event to simulate a different one
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true

				// Previously, `originalEvent: {}` was set here, so stopPropagation call
				// would not be triggered on donor event, since in our own
				// jQuery.event.stopPropagation function we had a check for existence of
				// originalEvent.stopPropagation method, so, consequently it would be a noop.
				//
				// Guard for simulated events was moved to jQuery.event.stopPropagation function
				// since `originalEvent` should point to the original event for the
				// constancy with other events and for more focused logic
			}
		);

		jQuery.event.trigger( e, null, elem );

		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event,
			// to properly expose it to GC
			if ( typeof elem[ name ] === "undefined" ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( !e || this.isSimulated ) {
			return;
		}

		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

// IE submit delegation
if ( !support.submit ) {

	jQuery.event.special.submit = {
		setup: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {

				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ?

						// Support: IE <=8
						// We use jQuery.prop instead of elem.form
						// to allow fixing the IE8 delegated submit issue (gh-2332)
						// by 3rd party polyfills/workarounds.
						jQuery.prop( elem, "form" ) :
						undefined;

				if ( form && !jQuery._data( form, "submit" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submitBubble = true;
					} );
					jQuery._data( form, "submit", true );
				}
			} );

			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {

			// If form was submitted by the user, bubble the event up the tree
			if ( event._submitBubble ) {
				delete event._submitBubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event );
				}
			}
		},

		teardown: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.change ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {

				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._justChanged = true;
						}
					} );
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._justChanged && !event.isTrigger ) {
							this._justChanged = false;
						}

						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event );
					} );
				}
				return false;
			}

			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "change" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event );
						}
					} );
					jQuery._data( elem, "change", true );
				}
			} );
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger ||
				( elem.type !== "radio" && elem.type !== "checkbox" ) ) {

				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	} );
}

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	},

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp( "<(?:" + nodeNames + ")[\\s/>]", "i" ),
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement( "div" ) );

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName( "tbody" )[ 0 ] ||
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( jQuery.find.attr( elem, "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}
	return elem;
}

function cloneCopyEvent( src, dest ) {
	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {

		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var first, node, hasScripts,
		scripts, doc, fragment,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!jQuery._data( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							jQuery.globalEval(
								( node.text || node.textContent || node.innerHTML || "" )
									.replace( rcleanScript, "" )
							);
						}
					}
				}
			}

			// Fix #11809: Avoid leaking memory
			fragment = first = null;
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		elems = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = elems[ i ] ) != null; i++ ) {

		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc( elem ) ||
			!rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {

			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( ( !support.noCloneEvent || !support.noCloneChecked ) &&
				( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {

				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[ i ] ) {
					fixCloneNodeIssues( node, destElements[ i ] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {
					cloneCopyEvent( node, destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems, /* internal */ forceAcceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			attributes = support.attributes,
			special = jQuery.event.special;

		for ( ; ( elem = elems[ i ] ) != null; i++ ) {
			if ( forceAcceptData || acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// Support: IE<9
						// IE does not allow us to delete expando properties from nodes
						// IE creates expando attributes along with the property
						// IE does not have a removeAttribute function on Document nodes
						if ( !attributes && typeof elem.removeAttribute !== "undefined" ) {
							elem.removeAttribute( internalKey );

						// Webkit & Blink performance suffers when deleting properties
						// from DOM nodes, so set to undefined instead
						// https://code.google.com/p/chromium/issues/detail?id=378607
						} else {
							elem[ internalKey ] = undefined;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
} );

jQuery.fn.extend( {

	// Keep domManip exposed until 3.0 (gh-2225)
	domManip: domManip,

	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append(
					( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )
				);
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {

			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {

						// Remove element nodes and prevent memory leaks
						elem = this[ i ] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );


var iframe,
	elemdisplay = {

		// Support: Firefox
		// We have to pre-define these values for FF (#10227)
		HTML: "block",
		BODY: "block"
	};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */

// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		display = jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
				.appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var documentElement = document.documentElement;



( function() {
	var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	div.style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = div.style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!div.style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container = document.createElement( "div" );
	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	div.innerHTML = "";
	container.appendChild( div );

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" ||
		div.style.WebkitBoxSizing === "";

	jQuery.extend( support, {
		reliableHiddenOffsets: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {

			// We're checking for pixelPositionVal here instead of boxSizingReliableVal
			// since that compresses better and they're computed together anyway.
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelMarginRight: function() {

			// Support: Android 4.0-4.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelMarginRightVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		reliableMarginRight: function() {

			// Support: Android 2.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		},

		reliableMarginLeft: function() {

			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginLeftVal;
		}
	} );

	function computeStyleTests() {
		var contents, divStyle,
			documentElement = document.documentElement;

		// Setup
		documentElement.appendChild( container );

		div.style.cssText =

			// Support: Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
		pixelMarginRightVal = reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			divStyle = window.getComputedStyle( div );
			pixelPositionVal = ( divStyle || {} ).top !== "1%";
			reliableMarginLeftVal = ( divStyle || {} ).marginLeft === "2px";
			boxSizingReliableVal = ( divStyle || { width: "4px" } ).width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = ( divStyle || { marginRight: "4px" } ).marginRight === "4px";

			// Support: Android 2.3 only
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );

			div.removeChild( contents );
		}

		// Support: IE6-8
		// First check that getClientRects works as expected
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.style.display = "none";
		reliableHiddenOffsetsVal = div.getClientRects().length === 0;
		if ( reliableHiddenOffsetsVal ) {
			div.style.display = "";
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			div.childNodes[ 0 ].style.borderCollapse = "separate";
			contents = div.getElementsByTagName( "td" );
			contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			if ( reliableHiddenOffsetsVal ) {
				contents[ 0 ].style.display = "";
				contents[ 1 ].style.display = "none";
				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			}
		}

		// Teardown
		documentElement.removeChild( container );
	}

} )();


var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		if ( computed ) {

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value"
			// instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values,
			// but width seems to be reliably pixels
			// this is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are
		// proportional to the parent element instead
		// and we can't measure the parent instead because it
		// might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/i,

	// swappable if display is none or starts with table except
	// "table", "table-cell", or "table-caption"
	// see here for display values:
	// https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {

			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] =
					jQuery._data( elem, "olddisplay", defaultDisplay( elem.nodeName ) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data(
					elem,
					"olddisplay",
					hidden ? display : jQuery.css( elem, "display" )
				);
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {

		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight
			// (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch ( e ) {}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
					elem.offsetWidth === 0 ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing &&
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
} );

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {

			// IE uses filters for opacity
			return ropacity.test( ( computed && elem.currentStyle ?
				elem.currentStyle.filter :
				elem.style.filter ) || "" ) ?
					( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
					computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist -
			// attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule
				// or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return (
				parseFloat( curCSS( elem, "marginLeft" ) ) ||

				// Support: IE<=11+
				// Running getBoundingClientRect on a disconnected node in IE throws an error
				// Support: IE8 only
				// getClientRects() errors on disconnected elems
				( jQuery.contains( elem.ownerDocument, elem ) ?
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} ) :
					0
				)
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show
				// and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done( function() {
				jQuery( elem ).hide();
			} );
		}
		anim.done( function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		} );
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ?
			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	window.clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var a,
		input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Support: Windows Web Apps (WWA)
	// `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "checkbox" );
	div.appendChild( input );

	a = div.getElementsByTagName( "a" )[ 0 ];

	// First batch of tests.
	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class.
	// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute( "style" ) );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute( "href" ) === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement( "form" ).enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
} )();


var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if (
					hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// handle most common string cases
					ret.replace( rreturn, "" ) :

					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ?
								!option.disabled :
								option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {

					// Setting the type on a radio button after the value resets the value in IE8-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {

					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;

					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {

			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		} else {

			// Support: IE<9
			// Use defaultChecked and defaultSelected for oldIE
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} else {
		attrHandle[ name ] = function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
	}
} );

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {

				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {

				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {

			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					( ret = elem.ownerDocument.createAttribute( name ) )
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return ( ret = elem.getAttributeNode( name ) ) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each( [ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	} );
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {

			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case sensitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each( function() {

			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch ( e ) {}
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each( [ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	} );
}

// Support: Safari, IE9+
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return jQuery.attr( elem, "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// store className if set
					jQuery._data( this, "__className__", className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				jQuery.attr( this, "class",
					className || value === false ?
					"" :
					jQuery._data( this, "__className__" ) || ""
				);
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




// Return jQuery for attributes-only inclusion


jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );


var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {

	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {

		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	} ) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new window.DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new window.ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch ( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,

	// IE leaves an \r character at EOL
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) { // jscs:ignore requireDotNotation
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var

			// Cross-domain detection vars
			parts,

			// Loop variable
			i,

			// URL without anti-cache param
			cacheURL,

			// Response headers as string
			responseHeadersString,

			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,

			// Response headers
			responseHeaders,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {

								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" )
			.replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );

				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapAll( html.call( this, i ) );
			} );
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			var wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function() {
		return this.parent().each( function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		} ).end();
	}
} );


function getDisplay( elem ) {
	return elem.style && elem.style.display || jQuery.css( elem, "display" );
}

function filterHidden( elem ) {

	// Disconnected elements are considered hidden
	if ( !jQuery.contains( elem.ownerDocument || document, elem ) ) {
		return true;
	}
	while ( elem && elem.nodeType === 1 ) {
		if ( getDisplay( elem ) === "none" || elem.type === "hidden" ) {
			return true;
		}
		elem = elem.parentNode;
	}
	return false;
}

jQuery.expr.filters.hidden = function( elem ) {

	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return support.reliableHiddenOffsets() ?
		( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&
			!elem.getClientRects().length ) :
			filterHidden( elem );
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {

			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?

	// Support: IE6-IE8
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		if ( this.isLocal ) {
			return createActiveXHR();
		}

		// Support: IE 9-11
		// IE seems to error on cross-domain PATCH requests when ActiveX XHR
		// is used. In IE 9+ always use the native XHR.
		// Note: this condition won't catch Edge as it doesn't define
		// document.documentMode but it also doesn't support ActiveX so it won't
		// reach this code.
		if ( document.documentMode > 8 ) {
			return createStandardXHR();
		}

		// Support: IE<9
		// oldIE XHR does not support non-RFC2616 methods (#13240)
		// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
		// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
		// Although this check for six methods instead of eight
		// since IE also does not support "trace" and "connect"
		return /^(get|post|head|put|delete|options)$/i.test( this.type ) &&
			createStandardXHR() || createActiveXHR();
	} :

	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	} );
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport( function( options ) {

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {

						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch ( e ) {

									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;

								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					// Do send the request
					// `xhr.send` may raise an exception, but it will be
					// handled in jQuery.ajax (so no try/catch here)
					if ( !options.async ) {

						// If we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {

						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						window.setTimeout( callback );
					} else {

						// Register the callback, but delay it in case `xhr.send` throws
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	} );
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch ( e ) {}
}




// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery( "head" )[ 0 ] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// data: string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};





/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray( "auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left
		// is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== "undefined" ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? ( prop in win ) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
} );

// Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
	function( defaultExtra, funcName ) {

		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only,
					// but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}



var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}

return jQuery;
}));
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).vega={})}(this,(function(t){"use strict";function e(t,e,n){return t.fields=e||[],t.fname=n,t}function n(t){return null==t?null:t.fname}function r(t){return null==t?null:t.fields}function i(t){return 1===t.length?a(t[0]):o(t)}const a=t=>function(e){return e[t]},o=t=>{const e=t.length;return function(n){for(let r=0;r<e;++r)n=n[t[r]];return n}};function u(t){throw Error(t)}function s(t){const e=[],n=t.length;let r,i,a,o=null,s=0,l="";function c(){e.push(l+t.substring(r,i)),l="",r=i+1}for(t+="",r=i=0;i<n;++i)if(a=t[i],"\\"===a)l+=t.substring(r,i),l+=t.substring(++i,++i),r=i;else if(a===o)c(),o=null,s=-1;else{if(o)continue;r===s&&'"'===a||r===s&&"'"===a?(r=i+1,o=a):"."!==a||s?"["===a?(i>r&&c(),s=r=i+1):"]"===a&&(s||u("Access path missing open bracket: "+t),s>0&&c(),s=0,r=i+1):i>r?c():r=i+1}return s&&u("Access path missing closing bracket: "+t),o&&u("Access path missing closing quote: "+t),i>r&&(i++,c()),e}function l(t,n,r){const a=s(t);return t=1===a.length?a[0]:t,e((r&&r.get||i)(a),[t],n||t)}const c=l("id"),f=e(t=>t,[],"identity"),h=e(()=>0,[],"zero"),d=e(()=>1,[],"one"),p=e(()=>!0,[],"true"),g=e(()=>!1,[],"false");function m(t,e,n){const r=[e].concat([].slice.call(n));console[t].apply(console,r)}function y(t,e){let n=t||0;return{level(t){return arguments.length?(n=+t,this):n},error(){return n>=1&&m(e||"error","ERROR",arguments),this},warn(){return n>=2&&m(e||"warn","WARN",arguments),this},info(){return n>=3&&m(e||"log","INFO",arguments),this},debug(){return n>=4&&m(e||"log","DEBUG",arguments),this}}}var v=Array.isArray;function _(t){return t===Object(t)}const x=t=>"__proto__"!==t;function b(...t){return t.reduce((t,e)=>{for(const n in e)if("signals"===n)t.signals=k(t.signals,e.signals);else{const r="legend"===n?{layout:1}:"style"===n||null;w(t,n,e[n],r)}return t},{})}function w(t,e,n,r){if(!x(e))return;let i,a;if(_(n)&&!v(n))for(i in a=_(t[e])?t[e]:t[e]={},n)r&&(!0===r||r[i])?w(a,i,n[i]):x(i)&&(a[i]=n[i]);else t[e]=n}function k(t,e){if(null==t)return e;const n={},r=[];function i(t){n[t.name]||(n[t.name]=1,r.push(t))}return e.forEach(i),t.forEach(i),r}function A(t){return t[t.length-1]}function M(t){return null==t||""===t?null:+t}const E=t=>e=>t*Math.exp(e),D=t=>e=>Math.log(t*e),C=t=>e=>Math.sign(e)*Math.log1p(Math.abs(e/t)),F=t=>e=>Math.sign(e)*Math.expm1(Math.abs(e))*t,S=t=>e=>e<0?-Math.pow(-e,t):Math.pow(e,t);function B(t,e,n,r){const i=n(t[0]),a=n(A(t)),o=(a-i)*e;return[r(i-o),r(a-o)]}function T(t,e){return B(t,e,M,f)}function z(t,e){var n=Math.sign(t[0]);return B(t,e,D(n),E(n))}function N(t,e,n){return B(t,e,S(n),S(1/n))}function O(t,e,n){return B(t,e,C(n),F(n))}function R(t,e,n,r,i){const a=r(t[0]),o=r(A(t)),u=null!=e?r(e):(a+o)/2;return[i(u+(a-u)*n),i(u+(o-u)*n)]}function $(t,e,n){return R(t,e,n,M,f)}function q(t,e,n){const r=Math.sign(t[0]);return R(t,e,n,D(r),E(r))}function L(t,e,n,r){return R(t,e,n,S(r),S(1/r))}function U(t,e,n,r){return R(t,e,n,C(r),F(r))}function P(t){return 1+~~(new Date(t).getMonth()/3)}function j(t){return 1+~~(new Date(t).getUTCMonth()/3)}function I(t){return null!=t?v(t)?t:[t]:[]}function W(t,e,n){let r,i=t[0],a=t[1];return a<i&&(r=a,a=i,i=r),r=a-i,r>=n-e?[e,n]:[i=Math.min(Math.max(i,e),n-r),i+r]}function H(t){return"function"==typeof t}function Y(t,n,i){i=i||{},n=I(n)||[];const a=[],o=[],u={},s=i.comparator||G;return I(t).forEach((t,e)=>{null!=t&&(a.push("descending"===n[e]?-1:1),o.push(t=H(t)?t:l(t,null,i)),(r(t)||[]).forEach(t=>u[t]=1))}),0===o.length?null:e(s(o,a),Object.keys(u))}const V=(t,e)=>(t<e||null==t)&&null!=e?-1:(t>e||null==e)&&null!=t?1:(e=e instanceof Date?+e:e,(t=t instanceof Date?+t:t)!==t&&e==e?-1:e!=e&&t==t?1:0),G=(t,e)=>1===t.length?X(t[0],e[0]):J(t,e,t.length),X=(t,e)=>function(n,r){return V(t(n),t(r))*e},J=(t,e,n)=>(e.push(0),function(r,i){let a,o=0,u=-1;for(;0===o&&++u<n;)a=t[u],o=V(a(r),a(i));return o*e[u]});function Z(t){return H(t)?t:()=>t}function Q(t,e){let n;return r=>{n&&clearTimeout(n),n=setTimeout(()=>(e(r),n=null),t)}}function K(t){for(let e,n,r=1,i=arguments.length;r<i;++r)for(n in e=arguments[r],e)t[n]=e[n];return t}function tt(t,e){let n,r,i,a,o=0;if(t&&(n=t.length))if(null==e){for(r=t[o];o<n&&(null==r||r!=r);r=t[++o]);for(i=a=r;o<n;++o)r=t[o],null!=r&&(r<i&&(i=r),r>a&&(a=r))}else{for(r=e(t[o]);o<n&&(null==r||r!=r);r=e(t[++o]));for(i=a=r;o<n;++o)r=e(t[o]),null!=r&&(r<i&&(i=r),r>a&&(a=r))}return[i,a]}function et(t,e){const n=t.length;let r,i,a,o,u,s=-1;if(null==e){for(;++s<n;)if(i=t[s],null!=i&&i>=i){r=a=i;break}if(s===n)return[-1,-1];for(o=u=s;++s<n;)i=t[s],null!=i&&(r>i&&(r=i,o=s),a<i&&(a=i,u=s))}else{for(;++s<n;)if(i=e(t[s],s,t),null!=i&&i>=i){r=a=i;break}if(s===n)return[-1,-1];for(o=u=s;++s<n;)i=e(t[s],s,t),null!=i&&(r>i&&(r=i,o=s),a<i&&(a=i,u=s))}return[o,u]}const nt=Object.prototype.hasOwnProperty;function rt(t,e){return nt.call(t,e)}const it={};function at(t){let e,n={};function r(t){return rt(n,t)&&n[t]!==it}const i={size:0,empty:0,object:n,has:r,get:t=>r(t)?n[t]:void 0,set(t,e){return r(t)||(++i.size,n[t]===it&&--i.empty),n[t]=e,this},delete(t){return r(t)&&(--i.size,++i.empty,n[t]=it),this},clear(){i.size=i.empty=0,i.object=n={}},test(t){return arguments.length?(e=t,i):e},clean(){const t={};let r=0;for(const i in n){const a=n[i];a===it||e&&e(a)||(t[i]=a,++r)}i.size=r,i.empty=0,i.object=n=t}};return t&&Object.keys(t).forEach(e=>{i.set(e,t[e])}),i}function ot(t,e,n,r,i,a){if(!n&&0!==n)return a;const o=+n;let u,s=t[0],l=A(t);l<s&&(u=s,s=l,l=u),u=Math.abs(e-s);const c=Math.abs(l-e);return u<c&&u<=o?r:c<=o?i:a}function ut(t,e,n){const r=t.prototype=Object.create(e.prototype);return r.constructor=t,K(r,n)}function st(t,e,n,r){let i,a=e[0],o=e[e.length-1];return a>o&&(i=a,a=o,o=i),r=void 0===r||r,((n=void 0===n||n)?a<=t:a<t)&&(r?t<=o:t<o)}function lt(t){return"boolean"==typeof t}function ct(t){return"[object Date]"===Object.prototype.toString.call(t)}function ft(t){return"number"==typeof t}function ht(t){return"[object RegExp]"===Object.prototype.toString.call(t)}function dt(t){return"string"==typeof t}function pt(t,n,r){t&&(t=n?I(t).map(t=>t.replace(/\\(.)/g,"$1")):I(t));const a=t&&t.length,o=r&&r.get||i,u=t=>o(n?[t]:s(t));let l;if(a)if(1===a){const e=u(t[0]);l=function(t){return""+e(t)}}else{const e=t.map(u);l=function(t){let n=""+e[0](t),r=0;for(;++r<a;)n+="|"+e[r](t);return n}}else l=function(){return""};return e(l,t,"key")}function gt(t,e){const n=t[0],r=A(t),i=+e;return i?1===i?r:n+i*(r-n):n}function mt(t){let e,n,r;t=+t||1e4;const i=()=>{e={},n={},r=0},a=(i,a)=>(++r>t&&(n=e,e={},r=1),e[i]=a);return i(),{clear:i,has:t=>rt(e,t)||rt(n,t),get:t=>rt(e,t)?e[t]:rt(n,t)?a(t,n[t]):void 0,set:(t,n)=>rt(e,t)?e[t]=n:a(t,n)}}function yt(t,e,n,r){const i=e.length,a=n.length;if(!a)return e;if(!i)return n;const o=r||new e.constructor(i+a);let u=0,s=0,l=0;for(;u<i&&s<a;++l)o[l]=t(e[u],n[s])>0?n[s++]:e[u++];for(;u<i;++u,++l)o[l]=e[u];for(;s<a;++s,++l)o[l]=n[s];return o}function vt(t,e){let n="";for(;--e>=0;)n+=t;return n}function _t(t,e,n,r){const i=n||" ",a=t+"",o=e-a.length;return o<=0?a:"left"===r?vt(i,o)+a:"center"===r?vt(i,~~(o/2))+a+vt(i,Math.ceil(o/2)):a+vt(i,o)}function xt(t){return t&&A(t)-t[0]||0}function bt(t){return v(t)?"["+t.map(bt)+"]":_(t)||dt(t)?JSON.stringify(t).replace("\u2028","\\u2028").replace("\u2029","\\u2029"):t}function wt(t){return null==t||""===t?null:!(!t||"false"===t||"0"===t)&&!!t}const kt=t=>ft(t)||ct(t)?t:Date.parse(t);function At(t,e){return e=e||kt,null==t||""===t?null:e(t)}function Mt(t){return null==t||""===t?null:t+""}function Et(t){const e={},n=t.length;for(let r=0;r<n;++r)e[t[r]]=!0;return e}function Dt(t,e,n,r){const i=null!=r?r:"…",a=t+"",o=a.length,u=Math.max(0,e-i.length);return o<=e?a:"left"===n?i+a.slice(o-u):"center"===n?a.slice(0,Math.ceil(u/2))+i+a.slice(o-~~(u/2)):a.slice(0,u)+i}function Ct(t,e,n){if(t)if(e){const r=t.length;for(let i=0;i<r;++i){const r=e(t[i]);r&&n(r,i,t)}}else t.forEach(n)}function Ft(t){const e=t||f,n=[],r={};return n.add=t=>{const i=e(t);return r[i]||(r[i]=1,n.push(t)),n},n.remove=t=>{const i=e(t);if(r[i]){r[i]=0;const e=n.indexOf(t);e>=0&&n.splice(e,1)}return n},n}async function St(t,e){try{await e(t)}catch(e){t.error(e)}}const Bt=Symbol("vega_id");let Tt=1;function zt(t){return!(!t||!Nt(t))}function Nt(t){return t[Bt]}function Ot(t,e){return t[Bt]=e,t}function Rt(t){const e=t===Object(t)?t:{data:t};return Nt(e)?e:Ot(e,Tt++)}function $t(t){return qt(t,Rt({}))}function qt(t,e){for(const n in t)e[n]=t[n];return e}function Lt(t,e){return Ot(e,Nt(t))}function Ut(t,e){return t?e?(n,r)=>t(n,r)||Nt(e(n))-Nt(e(r)):(e,n)=>t(e,n)||Nt(e)-Nt(n):null}function Pt(t){return t&&t.constructor===jt}function jt(){const t=[],e=[],n=[],r=[],i=[];let a=null,o=!1;return{constructor:jt,insert(e){const n=I(e),r=n.length;for(let e=0;e<r;++e)t.push(n[e]);return this},remove(t){const n=H(t)?r:e,i=I(t),a=i.length;for(let t=0;t<a;++t)n.push(i[t]);return this},modify(t,e,r){const a={field:e,value:Z(r)};return H(t)?(a.filter=t,i.push(a)):(a.tuple=t,n.push(a)),this},encode(t,e){return H(t)?i.push({filter:t,field:e}):n.push({tuple:t,field:e}),this},clean(t){return a=t,this},reflow(){return o=!0,this},pulse(u,s){const l={},c={};let f,h,d,p,g,m;for(f=0,h=s.length;f<h;++f)l[Nt(s[f])]=1;for(f=0,h=e.length;f<h;++f)g=e[f],l[Nt(g)]=-1;for(f=0,h=r.length;f<h;++f)p=r[f],s.forEach(t=>{p(t)&&(l[Nt(t)]=-1)});for(f=0,h=t.length;f<h;++f)g=t[f],m=Nt(g),l[m]?l[m]=1:u.add.push(Rt(t[f]));for(f=0,h=s.length;f<h;++f)g=s[f],l[Nt(g)]<0&&u.rem.push(g);function y(t,e,n){n?t[e]=n(t):u.encode=e,o||(c[Nt(t)]=t)}for(f=0,h=n.length;f<h;++f)d=n[f],g=d.tuple,p=d.field,m=l[Nt(g)],m>0&&(y(g,p,d.value),u.modifies(p));for(f=0,h=i.length;f<h;++f)d=i[f],p=d.filter,s.forEach(t=>{p(t)&&l[Nt(t)]>0&&y(t,d.field,d.value)}),u.modifies(d.field);if(o)u.mod=e.length||r.length?s.filter(t=>l[Nt(t)]>0):s.slice();else for(m in c)u.mod.push(c[m]);return(a||null==a&&(e.length||r.length))&&u.clean(!0),u}}}const It="_:mod:_";function Wt(){Object.defineProperty(this,It,{writable:!0,value:{}})}Wt.prototype={set(t,e,n,r){const i=this,a=i[t],o=i[It];return null!=e&&e>=0?(a[e]!==n||r)&&(a[e]=n,o[e+":"+t]=-1,o[t]=-1):(a!==n||r)&&(i[t]=n,o[t]=v(n)?1+n.length:-1),i},modified(t,e){const n=this[It];if(!arguments.length){for(const t in n)if(n[t])return!0;return!1}if(v(t)){for(let e=0;e<t.length;++e)if(n[t[e]])return!0;return!1}return null!=e&&e>=0?e+1<n[t]||!!n[e+":"+t]:!!n[t]},clear(){return this[It]={},this}};let Ht=0;const Yt=new Wt;function Vt(t,e,n,r){this.id=++Ht,this.value=t,this.stamp=-1,this.rank=-1,this.qrank=-1,this.flags=0,e&&(this._update=e),n&&this.parameters(n,r)}function Gt(t){return function(e){const n=this.flags;return 0===arguments.length?!!(n&t):(this.flags=e?n|t:n&~t,this)}}Vt.prototype={targets(){return this._targets||(this._targets=Ft(c))},set(t){return this.value!==t?(this.value=t,1):0},skip:Gt(1),modified:Gt(2),parameters(t,e,n){e=!1!==e;const r=this._argval=this._argval||new Wt,i=this._argops=this._argops||[],a=[];let o,s,l,c;const f=(t,n,o)=>{o instanceof Vt?(o!==this&&(e&&o.targets().add(this),a.push(o)),i.push({op:o,name:t,index:n})):r.set(t,n,o)};for(o in t)if(s=t[o],"pulse"===o)I(s).forEach(t=>{t instanceof Vt?t!==this&&(t.targets().add(this),a.push(t)):u("Pulse parameters must be operator instances.")}),this.source=s;else if(v(s))for(r.set(o,-1,Array(l=s.length)),c=0;c<l;++c)f(o,c,s[c]);else f(o,-1,s);return this.marshall().clear(),n&&(i.initonly=!0),a},marshall(t){const e=this._argval||Yt,n=this._argops;let r,i,a,o;if(n){const u=n.length;for(i=0;i<u;++i)r=n[i],a=r.op,o=a.modified()&&a.stamp===t,e.set(r.name,r.index,a.value,o);if(n.initonly){for(i=0;i<u;++i)r=n[i],r.op.targets().remove(this);this._argops=null,this._update=null}}return e},detach(){const t=this._argops;let e,n,r,i;if(t)for(e=0,n=t.length;e<n;++e)r=t[e],i=r.op,i._targets&&i._targets.remove(this)},evaluate(t){const e=this._update;if(e){const n=this.marshall(t.stamp),r=e.call(this,n,t);if(n.clear(),r!==this.value)this.value=r;else if(!this.modified())return t.StopPropagation}},run(t){if(t.stamp<this.stamp)return t.StopPropagation;let e;return this.skip()?(this.skip(!1),e=0):e=this.evaluate(t),this.pulse=e||t}};let Xt=0;function Jt(t,e,n){this.id=++Xt,this.value=null,n&&(this.receive=n),t&&(this._filter=t),e&&(this._apply=e)}function Zt(t,e,n){return new Jt(t,e,n)}Jt.prototype={_filter:p,_apply:f,targets(){return this._targets||(this._targets=Ft(c))},consume(t){return arguments.length?(this._consume=!!t,this):!!this._consume},receive(t){if(this._filter(t)){const e=this.value=this._apply(t),n=this._targets,r=n?n.length:0;for(let t=0;t<r;++t)n[t].receive(e);this._consume&&(t.preventDefault(),t.stopPropagation())}},filter(t){const e=Zt(t);return this.targets().add(e),e},apply(t){const e=Zt(null,t);return this.targets().add(e),e},merge(){const t=Zt();this.targets().add(t);for(let e=0,n=arguments.length;e<n;++e)arguments[e].targets().add(t);return t},throttle(t){let e=-1;return this.filter(()=>{const n=Date.now();return n-e>t?(e=n,1):0})},debounce(t){const e=Zt();return this.targets().add(Zt(null,null,Q(t,t=>{const n=t.dataflow;e.receive(t),n&&n.run&&n.run()}))),e},between(t,e){let n=!1;return t.targets().add(Zt(null,null,()=>n=!0)),e.targets().add(Zt(null,null,()=>n=!1)),this.filter(()=>n)},detach(){}};const Qt=/^([A-Za-z]+:)?\/\//,Kt=/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|file|data):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i,te=/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g,ee="file://";async function ne(t,e){const n=await this.sanitize(t,e),r=n.href;return n.localFile?this.file(r):this.http(r,e)}async function re(t,e){e=K({},this.options,e);const n=this.fileAccess,r={href:null};let i,a,o;const s=Kt.test(t.replace(te,""));null!=t&&"string"==typeof t&&s||u("Sanitize failure, invalid URI: "+bt(t));const l=Qt.test(t);return(o=e.baseURL)&&!l&&(t.startsWith("/")||"/"===o[o.length-1]||(t="/"+t),t=o+t),a=(i=t.startsWith(ee))||"file"===e.mode||"http"!==e.mode&&!l&&n,i?t=t.slice(ee.length):t.startsWith("//")&&("file"===e.defaultProtocol?(t=t.slice(2),a=!0):t=(e.defaultProtocol||"http")+":"+t),Object.defineProperty(r,"localFile",{value:!!a}),r.href=t,e.target&&(r.target=e.target+""),e.rel&&(r.rel=e.rel+""),"image"===e.context&&e.crossOrigin&&(r.crossOrigin=e.crossOrigin+""),r}function ie(t){return t?e=>new Promise((n,r)=>{t.readFile(e,(t,e)=>{t?r(t):n(e)})}):ae}async function ae(){u("No file system access.")}function oe(t){return t?async function(e,n){const r=K({},this.options.http,n),i=n&&n.response,a=await t(e,r);return a.ok?H(a[i])?a[i]():a.text():u(a.status+""+a.statusText)}:ue}async function ue(){u("No HTTP fetch method available.")}const se=t=>!(Number.isNaN(+t)||t instanceof Date),le={boolean:wt,integer:M,number:M,date:At,string:Mt,unknown:f},ce=[t=>"true"===t||"false"===t||!0===t||!1===t,t=>se(t)&&Number.isInteger(+t),se,t=>!Number.isNaN(Date.parse(t))],fe=["boolean","integer","number","date"];function he(t,e){if(!t||!t.length)return"unknown";const n=t.length,r=ce.length,i=ce.map((t,e)=>e+1);for(let o,u,s=0,l=0;s<n;++s)for(u=e?t[s][e]:t[s],o=0;o<r;++o)if(i[o]&&(null!=(a=u)&&a==a)&&!ce[o](u)&&(i[o]=0,++l,l===ce.length))return"string";var a;return fe[i.reduce((t,e)=>0===t?e:t,0)-1]}function de(t,e){return e.reduce((e,n)=>(e[n]=he(t,n),e),{})}var pe={},ge={};function me(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'})).join(",")+"}")}function ye(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function ve(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function _e(t){var e=t.getUTCHours(),n=t.getUTCMinutes(),r=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":function(t){return t<0?"-"+ve(-t,6):t>9999?"+"+ve(t,6):ve(t,4)}(t.getUTCFullYear())+"-"+ve(t.getUTCMonth()+1,2)+"-"+ve(t.getUTCDate(),2)+(i?"T"+ve(e,2)+":"+ve(n,2)+":"+ve(r,2)+"."+ve(i,3)+"Z":r?"T"+ve(e,2)+":"+ve(n,2)+":"+ve(r,2)+"Z":n||e?"T"+ve(e,2)+":"+ve(n,2)+"Z":"")}function xe(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],a=t.length,o=0,u=0,s=a<=0,l=!1;function c(){if(s)return ge;if(l)return l=!1,pe;var e,r,i=o;if(34===t.charCodeAt(i)){for(;o++<a&&34!==t.charCodeAt(o)||34===t.charCodeAt(++o););return(e=o)>=a?s=!0:10===(r=t.charCodeAt(o++))?l=!0:13===r&&(l=!0,10===t.charCodeAt(o)&&++o),t.slice(i+1,e-1).replace(/""/g,'"')}for(;o<a;){if(10===(r=t.charCodeAt(e=o++)))l=!0;else if(13===r)l=!0,10===t.charCodeAt(o)&&++o;else if(r!==n)continue;return t.slice(i,e)}return s=!0,t.slice(i,a)}for(10===t.charCodeAt(a-1)&&--a,13===t.charCodeAt(a-1)&&--a;(r=c())!==ge;){for(var f=[];r!==pe&&r!==ge;)f.push(r),r=c();e&&null==(f=e(f,u++))||i.push(f)}return i}function i(e,n){return e.map((function(e){return n.map((function(t){return o(e[t])})).join(t)}))}function a(e){return e.map(o).join(t)}function o(t){return null==t?"":t instanceof Date?_e(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,a=r(t,(function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=me(t);return function(r,i){return e(n(r),i,t)}}(t,e):me(t)}));return a.columns=i||[],a},parseRows:r,format:function(e,n){return null==n&&(n=ye(e)),[n.map(o).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=ye(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(a).join("\n")},formatRow:a,formatValue:o}}function be(t){const e=function(e,n){const r={delimiter:t};return we(e,n?K(n,r):r)};return e.responseType="text",e}function we(t,e){return e.header&&(t=e.header.map(bt).join(e.delimiter)+"\n"+t),xe(e.delimiter).parse(t+"")}function ke(t,e){const n=e&&e.property?l(e.property):f;return!_(t)||(r=t,"function"==typeof Buffer&&H(Buffer.isBuffer)&&Buffer.isBuffer(r))?n(JSON.parse(t)):function(t,e){return e&&e.copy?JSON.parse(JSON.stringify(t)):t}(n(t));var r}function Ae(t){return t}function Me(t,e){return"string"==typeof e&&(e=t.objects[e]),"GeometryCollection"===e.type?{type:"FeatureCollection",features:e.geometries.map((function(e){return Ee(t,e)}))}:Ee(t,e)}function Ee(t,e){var n=e.id,r=e.bbox,i=null==e.properties?{}:e.properties,a=De(t,e);return null==n&&null==r?{type:"Feature",properties:i,geometry:a}:null==r?{type:"Feature",id:n,properties:i,geometry:a}:{type:"Feature",id:n,bbox:r,properties:i,geometry:a}}function De(t,e){var n=function(t){if(null==t)return Ae;var e,n,r=t.scale[0],i=t.scale[1],a=t.translate[0],o=t.translate[1];return function(t,u){u||(e=n=0);var s=2,l=t.length,c=new Array(l);for(c[0]=(e+=t[0])*r+a,c[1]=(n+=t[1])*i+o;s<l;)c[s]=t[s],++s;return c}}(t.transform),r=t.arcs;function i(t,e){e.length&&e.pop();for(var i=r[t<0?~t:t],a=0,o=i.length;a<o;++a)e.push(n(i[a],a));t<0&&function(t,e){for(var n,r=t.length,i=r-e;i<--r;)n=t[i],t[i++]=t[r],t[r]=n}(e,o)}function a(t){return n(t)}function o(t){for(var e=[],n=0,r=t.length;n<r;++n)i(t[n],e);return e.length<2&&e.push(e[0]),e}function u(t){for(var e=o(t);e.length<4;)e.push(e[0]);return e}function s(t){return t.map(u)}return function t(e){var n,r=e.type;switch(r){case"GeometryCollection":return{type:r,geometries:e.geometries.map(t)};case"Point":n=a(e.coordinates);break;case"MultiPoint":n=e.coordinates.map(a);break;case"LineString":n=o(e.arcs);break;case"MultiLineString":n=e.arcs.map(o);break;case"Polygon":n=s(e.arcs);break;case"MultiPolygon":n=e.arcs.map(s);break;default:return null}return{type:r,coordinates:n}}(e)}function Ce(t,e){var n={},r={},i={},a=[],o=-1;function u(t,e){for(var r in t){var i=t[r];delete e[i.start],delete i.start,delete i.end,i.forEach((function(t){n[t<0?~t:t]=1})),a.push(i)}}return e.forEach((function(n,r){var i,a=t.arcs[n<0?~n:n];a.length<3&&!a[1][0]&&!a[1][1]&&(i=e[++o],e[o]=n,e[r]=i)})),e.forEach((function(e){var n,a,o=function(e){var n,r=t.arcs[e<0?~e:e],i=r[0];t.transform?(n=[0,0],r.forEach((function(t){n[0]+=t[0],n[1]+=t[1]}))):n=r[r.length-1];return e<0?[n,i]:[i,n]}(e),u=o[0],s=o[1];if(n=i[u])if(delete i[n.end],n.push(e),n.end=s,a=r[s]){delete r[a.start];var l=a===n?n:n.concat(a);r[l.start=n.start]=i[l.end=a.end]=l}else r[n.start]=i[n.end]=n;else if(n=r[s])if(delete r[n.start],n.unshift(e),n.start=u,a=i[u]){delete i[a.end];var c=a===n?n:a.concat(n);r[c.start=a.start]=i[c.end=n.end]=c}else r[n.start]=i[n.end]=n;else r[(n=[e]).start=u]=i[n.end=s]=n})),u(i,r),u(r,i),e.forEach((function(t){n[t<0?~t:t]||a.push([t])})),a}function Fe(t){return De(t,Se.apply(this,arguments))}function Se(t,e,n){var r,i,a;if(arguments.length>1)r=Be(t,e,n);else for(i=0,r=new Array(a=t.arcs.length);i<a;++i)r[i]=i;return{type:"MultiLineString",arcs:Ce(t,r)}}function Be(t,e,n){var r,i=[],a=[];function o(t){var e=t<0?~t:t;(a[e]||(a[e]=[])).push({i:t,g:r})}function u(t){t.forEach(o)}function s(t){t.forEach(u)}return function t(e){switch(r=e,e.type){case"GeometryCollection":e.geometries.forEach(t);break;case"LineString":u(e.arcs);break;case"MultiLineString":case"Polygon":s(e.arcs);break;case"MultiPolygon":!function(t){t.forEach(s)}(e.arcs)}}(e),a.forEach(null==n?function(t){i.push(t[0].i)}:function(t){n(t[0].g,t[t.length-1].g)&&i.push(t[0].i)}),i}we.responseType="text",ke.responseType="json";const Te={interior:(t,e)=>t!==e,exterior:(t,e)=>t===e};function ze(t,e){let n,r,i,a;return t=ke(t,e),e&&e.feature?(n=Me,i=e.feature):e&&e.mesh?(n=Fe,i=e.mesh,a=Te[e.filter]):u("Missing TopoJSON feature or mesh parameter."),r=(r=t.objects[i])?n(t,r,a):u("Invalid TopoJSON object: "+i),r&&r.features||[r]}ze.responseType="json";const Ne={dsv:we,csv:be(","),tsv:be("\t"),json:ke,topojson:ze};function Oe(t,e){return arguments.length>1?(Ne[t]=e,this):rt(Ne,t)?Ne[t]:null}function Re(t){const e=Oe(t);return e&&e.responseType||"text"}function $e(t){const e={};return n=>e[n]||(e[n]=t(n))}function qe(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function Le(t){let e=t,n=t;function r(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const a=r+i>>>1;n(t[a],e)<0?r=a+1:i=a}return r}return 1===t.length&&(e=(e,n)=>t(e)-n,n=function(t){return(e,n)=>qe(t(e),n)}(t)),{left:r,center:function(t,n,i,a){null==i&&(i=0),null==a&&(a=t.length);const o=r(t,n,i,a-1);return o>i&&e(t[o-1],n)>-e(t[o],n)?o-1:o},right:function(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const a=r+i>>>1;n(t[a],e)>0?i=a:r=a+1}return r}}}function Ue(t){return null===t?NaN:+t}const Pe=Le(qe),je=Pe.right,Ie=Pe.left;Le(Ue).center;class We{constructor(){this._partials=new Float64Array(32),this._n=0}add(t){const e=this._partials;let n=0;for(let r=0;r<this._n&&r<32;r++){const i=e[r],a=t+i,o=Math.abs(t)<Math.abs(i)?t-(a-i):i-(a-t);o&&(e[n++]=o),t=a}return e[n]=t,this._n=n+1,this}valueOf(){const t=this._partials;let e,n,r,i=this._n,a=0;if(i>0){for(a=t[--i];i>0&&(e=a,n=t[--i],a=e+n,r=n-(a-e),!r););i>0&&(r<0&&t[i-1]<0||r>0&&t[i-1]>0)&&(n=2*r,e=a+n,n==e-a&&(a=e))}return a}}function He(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),a=new Array(i);++r<i;)a[r]=t+r*n;return a}var Ye=Math.sqrt(50),Ve=Math.sqrt(10),Ge=Math.sqrt(2);function Xe(t,e,n){var r,i,a,o,u=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(o=Je(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),a=new Array(i=Math.ceil(e-t+1));++u<i;)a[u]=(t+u)*o;else for(o=-o,t=Math.ceil(t*o),e=Math.floor(e*o),a=new Array(i=Math.ceil(e-t+1));++u<i;)a[u]=(t+u)/o;return r&&a.reverse(),a}function Je(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=Ye?10:a>=Ve?5:a>=Ge?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=Ye?10:a>=Ve?5:a>=Ge?2:1)}function Ze(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=Ye?i*=10:a>=Ve?i*=5:a>=Ge&&(i*=2),e<t?-i:i}function Qe(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n<i||void 0===n&&i>=i)&&(n=i)}return n}function Ke(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n>i||void 0===n&&i>=i)&&(n=i)}return n}function tn(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function en(t,e,n){if(r=(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}}(t,n))).length){if((e=+e)<=0||r<2)return Ke(t);if(e>=1)return Qe(t);var r,i=(r-1)*e,a=Math.floor(i),o=Qe(function t(e,n,r=0,i=e.length-1,a=qe){for(;i>r;){if(i-r>600){const o=i-r+1,u=n-r+1,s=Math.log(o),l=.5*Math.exp(2*s/3),c=.5*Math.sqrt(s*l*(o-l)/o)*(u-o/2<0?-1:1);t(e,n,Math.max(r,Math.floor(n-u*l/o+c)),Math.min(i,Math.floor(n+(o-u)*l/o+c)),a)}const o=e[n];let u=r,s=i;for(tn(e,r,n),a(e[i],o)>0&&tn(e,r,i);u<s;){for(tn(e,u,s),++u,--s;a(e[u],o)<0;)++u;for(;a(e[s],o)>0;)--s}0===a(e[r],o)?tn(e,r,s):(++s,tn(e,s,i)),s<=n&&(r=s+1),n<=s&&(i=s-1)}return e}(t,a).subarray(0,a+1));return o+(Ke(t.subarray(a+1))-o)*(i-a)}}function nn(t,e){return en(t,.5,e)}function rn(t){return Array.from(function*(t){for(const e of t)yield*e}(t))}function an(t,e){let n=0;if(void 0===e)for(let e of t)(e=+e)&&(n+=e);else{let r=-1;for(let i of t)(i=+e(i,++r,t))&&(n+=i)}return n}function on(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function un(t){return(t=on(Math.abs(t)))?t[1]:NaN}var sn,ln=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function cn(t){if(!(e=ln.exec(t)))throw new Error("invalid format: "+t);var e;return new fn({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function fn(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function hn(t,e){var n=on(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}cn.prototype=fn.prototype,fn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var dn={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>hn(100*t,e),r:hn,s:function(t,e){var n=on(t,e);if(!n)return t+"";var r=n[0],i=n[1],a=i-(sn=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return a===o?r:a>o?r+new Array(a-o+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+on(t,Math.max(0,e+a-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function pn(t){return t}var gn,mn,yn,vn=Array.prototype.map,_n=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function xn(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?pn:(e=vn.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,a=[],o=0,u=e[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),a.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=e[o=(o+1)%e.length];return a.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",a=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?pn:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(vn.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=cn(t)).fill,n=t.align,f=t.sign,h=t.symbol,d=t.zero,p=t.width,g=t.comma,m=t.precision,y=t.trim,v=t.type;"n"===v?(g=!0,v="g"):dn[v]||(void 0===m&&(m=12),y=!0,v="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",x="$"===h?a:/[%p]/.test(v)?s:"",b=dn[v],w=/[defgprs%]/.test(v);function k(t){var i,a,s,h=_,k=x;if("c"===v)k=b(t)+k,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:b(Math.abs(t),m),y&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),A&&0==+t&&"+"!==f&&(A=!1),h=(A?"("===f?f:l:"-"===f||"("===f?"":f)+h,k=("s"===v?_n[8+sn/3]:"")+k+(A&&"("===f?")":""),w)for(i=-1,a=t.length;++i<a;)if(48>(s=t.charCodeAt(i))||s>57){k=(46===s?o+t.slice(i+1):t.slice(i))+k,t=t.slice(0,i);break}}g&&!d&&(t=r(t,1/0));var M=h.length+t.length+k.length,E=M<p?new Array(p-M+1).join(e):"";switch(g&&d&&(t=r(E+t,E.length?p-k.length:1/0),E=""),n){case"<":t=h+t+k+E;break;case"=":t=h+E+t+k;break;case"^":t=E.slice(0,M=E.length>>1)+h+t+k+E.slice(M);break;default:t=E+h+t+k}return u(t)}return m=void 0===m?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),k.toString=function(){return t+""},k}return{format:f,formatPrefix:function(t,e){var n=f(((t=cn(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(un(e)/3))),i=Math.pow(10,-r),a=_n[8+r/3];return function(t){return n(i*t)+a}}}}function bn(t){return Math.max(0,-un(Math.abs(t)))}function wn(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(un(e)/3)))-un(Math.abs(t)))}function kn(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,un(e)-un(t))+1}function An(t){const e=$e(t.format),n=t.formatPrefix;return{format:e,formatPrefix:n,formatFloat(t){const n=cn(t||",");if(null==n.precision){switch(n.precision=12,n.type){case"%":n.precision-=2;break;case"e":n.precision-=1}return r=e(n),i=e(".1f")(1)[1],t=>{const e=r(t),n=e.indexOf(i);if(n<0)return e;let a=function(t,e){let n,r=t.lastIndexOf("e");if(r>0)return r;for(r=t.length;--r>e;)if(n=t.charCodeAt(r),n>=48&&n<=57)return r+1}(e,n);const o=a<e.length?e.slice(a):"";for(;--a>n;)if("0"!==e[a]){++a;break}return e.slice(0,a)+o}}return e(n);var r,i},formatSpan(t,r,i,a){a=cn(null==a?",f":a);const o=Ze(t,r,i),u=Math.max(Math.abs(t),Math.abs(r));let s;if(null==a.precision)switch(a.type){case"s":return isNaN(s=wn(o,u))||(a.precision=s),n(a,u);case"":case"e":case"g":case"p":case"r":isNaN(s=kn(o,u))||(a.precision=s-("e"===a.type));break;case"f":case"%":isNaN(s=bn(o))||(a.precision=s-2*("%"===a.type))}return e(a)}}}let Mn;function En(){return Mn=An({format:mn,formatPrefix:yn})}function Dn(t){return An(xn(t))}function Cn(t){return arguments.length?Mn=Dn(t):Mn}!function(t){gn=xn(t),mn=gn.format,yn=gn.formatPrefix}({thousands:",",grouping:[3],currency:["$",""]}),En();const Fn="year",Sn="quarter",Bn="month",Tn="week",zn="date",Nn="day",On="dayofyear",Rn="hours",$n="minutes",qn="seconds",Ln="milliseconds",Un=[Fn,Sn,Bn,Tn,zn,Nn,On,Rn,$n,qn,Ln],Pn=Un.reduce((t,e,n)=>(t[e]=1+n,t),{});function jn(t){const e=I(t).slice(),n={};e.length||u("Missing time unit."),e.forEach(t=>{rt(Pn,t)?n[t]=1:u(`Invalid time unit: ${t}.`)});return(n.week||n.day?1:0)+(n.quarter||n.month||n.date?1:0)+(n.dayofyear?1:0)>1&&u("Incompatible time units: "+t),e.sort((t,e)=>Pn[t]-Pn[e]),e}const In={[Fn]:"%Y ",[Sn]:"Q%q ",[Bn]:"%b ",[zn]:"%d ",[Tn]:"W%U ",[Nn]:"%a ",[On]:"%j ",[Rn]:"%H:00",[$n]:"00:%M",[qn]:":%S",[Ln]:".%L","year-month":"%Y-%m ","year-month-date":"%Y-%m-%d ","hours-minutes":"%H:%M"};function Wn(t,e){const n=K({},In,e),r=jn(t),i=r.length;let a,o,u="",s=0;for(s=0;s<i;)for(a=r.length;a>s;--a)if(o=r.slice(s,a).join("-"),null!=n[o]){u+=n[o],s=a;break}return u.trim()}var Hn=new Date,Yn=new Date;function Vn(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,a){var o,u=[];if(n=i.ceil(n),a=null==a?1:Math.floor(a),!(n<r&&a>0))return u;do{u.push(o=new Date(+n)),e(n,a),t(n)}while(o<n&&n<r);return u},i.filter=function(n){return Vn((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return Hn.setTime(+e),Yn.setTime(+r),t(Hn),t(Yn),Math.floor(n(Hn,Yn))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var Gn=Vn((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));Gn.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Vn((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):Gn:null};var Xn=1e3,Jn=6e4,Zn=36e5,Qn=864e5,Kn=6048e5,tr=Vn((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+e*Xn)}),(function(t,e){return(e-t)/Xn}),(function(t){return t.getUTCSeconds()})),er=Vn((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*Xn)}),(function(t,e){t.setTime(+t+e*Jn)}),(function(t,e){return(e-t)/Jn}),(function(t){return t.getMinutes()})),nr=Vn((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*Xn-t.getMinutes()*Jn)}),(function(t,e){t.setTime(+t+e*Zn)}),(function(t,e){return(e-t)/Zn}),(function(t){return t.getHours()})),rr=Vn(t=>t.setHours(0,0,0,0),(t,e)=>t.setDate(t.getDate()+e),(t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Jn)/Qn,t=>t.getDate()-1);function ir(t){return Vn((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Jn)/Kn}))}var ar=ir(0),or=ir(1),ur=(ir(2),ir(3),ir(4)),sr=(ir(5),ir(6),Vn((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}))),lr=Vn((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));lr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Vn((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var cr=Vn((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+e*Jn)}),(function(t,e){return(e-t)/Jn}),(function(t){return t.getUTCMinutes()})),fr=Vn((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+e*Zn)}),(function(t,e){return(e-t)/Zn}),(function(t){return t.getUTCHours()})),hr=Vn((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/Qn}),(function(t){return t.getUTCDate()-1}));function dr(t){return Vn((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/Kn}))}var pr=dr(0),gr=dr(1),mr=(dr(2),dr(3),dr(4)),yr=(dr(5),dr(6),Vn((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}))),vr=Vn((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));vr.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Vn((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};const _r=new Date;function xr(t){return _r.setFullYear(t),_r.setMonth(0),_r.setDate(1),_r.setHours(0,0,0,0),_r}function br(t){return kr(new Date(t))}function wr(t){return Ar(new Date(t))}function kr(t){return rr.count(xr(t.getFullYear())-1,t)}function Ar(t){return ar.count(xr(t.getFullYear())-1,t)}function Mr(t){return xr(t).getDay()}function Er(t,e,n,r,i,a,o){if(0<=t&&t<100){const u=new Date(-1,e,n,r,i,a,o);return u.setFullYear(t),u}return new Date(t,e,n,r,i,a,o)}function Dr(t){return Fr(new Date(t))}function Cr(t){return Sr(new Date(t))}function Fr(t){const e=Date.UTC(t.getUTCFullYear(),0,1);return hr.count(e-1,t)}function Sr(t){const e=Date.UTC(t.getUTCFullYear(),0,1);return pr.count(e-1,t)}function Br(t){return _r.setTime(Date.UTC(t,0,1)),_r.getUTCDay()}function Tr(t,e,n,r,i,a,o){if(0<=t&&t<100){const t=new Date(Date.UTC(-1,e,n,r,i,a,o));return t.setUTCFullYear(n.y),t}return new Date(Date.UTC(t,e,n,r,i,a,o))}function zr(t,e,n,r,i){const a=e||1,o=A(t),u=(t,e,i)=>function(t,e,n,r){const i=n<=1?t:r?(e,i)=>r+n*Math.floor((t(e,i)-r)/n):(e,r)=>n*Math.floor(t(e,r)/n);return e?(t,n)=>e(i(t,n),n):i}(n[i=i||t],r[i],t===o&&a,e),s=new Date,l=Et(t),c=l.year?u(Fn):Z(2012),f=l.month?u(Bn):l.quarter?u(Sn):h,p=l.week&&l.day?u(Nn,1,Tn+Nn):l.week?u(Tn,1):l.day?u(Nn,1):l.date?u(zn,1):l.dayofyear?u(On,1):d,g=l.hours?u(Rn):h,m=l.minutes?u($n):h,y=l.seconds?u(qn):h,v=l.milliseconds?u(Ln):h;return function(t){s.setTime(+t);const e=c(s);return i(e,f(s),p(s,e),g(s),m(s),y(s),v(s))}}function Nr(t,e,n){return e+7*t-(n+6)%7}const Or={[Fn]:t=>t.getFullYear(),[Sn]:t=>Math.floor(t.getMonth()/3),[Bn]:t=>t.getMonth(),[zn]:t=>t.getDate(),[Rn]:t=>t.getHours(),[$n]:t=>t.getMinutes(),[qn]:t=>t.getSeconds(),[Ln]:t=>t.getMilliseconds(),[On]:t=>kr(t),[Tn]:t=>Ar(t),[Tn+Nn]:(t,e)=>Nr(Ar(t),t.getDay(),Mr(e)),[Nn]:(t,e)=>Nr(1,t.getDay(),Mr(e))},Rr={[Sn]:t=>3*t,[Tn]:(t,e)=>Nr(t,0,Mr(e))};function $r(t,e){return zr(t,e||1,Or,Rr,Er)}const qr={[Fn]:t=>t.getUTCFullYear(),[Sn]:t=>Math.floor(t.getUTCMonth()/3),[Bn]:t=>t.getUTCMonth(),[zn]:t=>t.getUTCDate(),[Rn]:t=>t.getUTCHours(),[$n]:t=>t.getUTCMinutes(),[qn]:t=>t.getUTCSeconds(),[Ln]:t=>t.getUTCMilliseconds(),[On]:t=>Fr(t),[Tn]:t=>Sr(t),[Nn]:(t,e)=>Nr(1,t.getUTCDay(),Br(e)),[Tn+Nn]:(t,e)=>Nr(Sr(t),t.getUTCDay(),Br(e))},Lr={[Sn]:t=>3*t,[Tn]:(t,e)=>Nr(t,0,Br(e))};function Ur(t,e){return zr(t,e||1,qr,Lr,Tr)}const Pr={[Fn]:lr,[Sn]:sr.every(3),[Bn]:sr,[Tn]:ar,[zn]:rr,[Nn]:rr,[On]:rr,[Rn]:nr,[$n]:er,[qn]:tr,[Ln]:Gn},jr={[Fn]:vr,[Sn]:yr.every(3),[Bn]:yr,[Tn]:pr,[zn]:hr,[Nn]:hr,[On]:hr,[Rn]:fr,[$n]:cr,[qn]:tr,[Ln]:Gn};function Ir(t){return Pr[t]}function Wr(t){return jr[t]}function Hr(t,e,n){return t?t.offset(e,n):void 0}function Yr(t,e,n){return Hr(Ir(t),e,n)}function Vr(t,e,n){return Hr(Wr(t),e,n)}function Gr(t,e,n,r){return t?t.range(e,n,r):void 0}function Xr(t,e,n,r){return Gr(Ir(t),e,n,r)}function Jr(t,e,n,r){return Gr(Wr(t),e,n,r)}const Zr=1e3,Qr=6e4,Kr=36e5,ti=864e5,ei=2592e6,ni=31536e6,ri=[Fn,Bn,zn,Rn,$n,qn,Ln],ii=ri.slice(0,-1),ai=ii.slice(0,-1),oi=ai.slice(0,-1),ui=oi.slice(0,-1),si=[Fn,Bn],li=[Fn],ci=[[ii,1,Zr],[ii,5,5e3],[ii,15,15e3],[ii,30,3e4],[ai,1,Qr],[ai,5,3e5],[ai,15,9e5],[ai,30,18e5],[oi,1,Kr],[oi,3,108e5],[oi,6,216e5],[oi,12,432e5],[ui,1,ti],[[Fn,Tn],1,6048e5],[si,1,ei],[si,3,7776e6],[li,1,ni]];function fi(t){const e=t.extent,n=t.maxbins||40,r=Math.abs(xt(e))/n;let i,a,o=Le(t=>t[2]).right(ci,r);return o===ci.length?(i=li,a=Ze(e[0]/ni,e[1]/ni,n)):o?(o=ci[r/ci[o-1][2]<ci[o][2]/r?o-1:o],i=o[0],a=o[1]):(i=ri,a=Math.max(Ze(e[0],e[1],n),1)),{units:i,step:a}}function hi(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function di(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function pi(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}function gi(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,a=t.days,o=t.shortDays,u=t.months,s=t.shortMonths,l=Di(i),c=Ci(i),f=Di(a),h=Ci(a),d=Di(o),p=Ci(o),g=Di(u),m=Ci(u),y=Di(s),v=Ci(s),_={a:function(t){return o[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:Xi,e:Xi,f:ta,g:fa,G:da,H:Ji,I:Zi,j:Qi,L:Ki,m:ea,M:na,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Ra,s:$a,S:ra,u:ia,U:aa,V:ua,w:sa,W:la,x:null,X:null,y:ca,Y:ha,Z:pa,"%":Oa},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:ga,e:ga,f:xa,g:Ba,G:za,H:ma,I:ya,j:va,L:_a,m:ba,M:wa,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Ra,s:$a,S:ka,u:Aa,U:Ma,V:Da,w:Ca,W:Fa,x:null,X:null,y:Sa,Y:Ta,Z:Na,"%":Oa},b={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=p.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=v.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=m.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,n,r){return A(t,e,n,r)},d:Li,e:Li,f:Hi,g:Oi,G:Ni,H:Pi,I:Pi,j:Ui,L:Wi,m:qi,M:ji,p:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.p=c.get(r[0].toLowerCase()),n+r[0].length):-1},q:$i,Q:Vi,s:Gi,S:Ii,u:Si,U:Bi,V:Ti,w:Fi,W:zi,x:function(t,e,r){return A(t,n,e,r)},X:function(t,e,n){return A(t,r,e,n)},y:Oi,Y:Ni,Z:Ri,"%":Yi};function w(t,e){return function(n){var r,i,a,o=[],u=-1,s=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++u<l;)37===t.charCodeAt(u)&&(o.push(t.slice(s,u)),null!=(i=bi[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(a=e[r])&&(r=a(n,i)),o.push(r),s=u+1);return o.push(t.slice(s,u)),o.join("")}}function k(t,e){return function(n){var r,i,a=pi(1900,void 0,1);if(A(a,t,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("s"in a)return new Date(1e3*a.s+("L"in a?a.L:0));if(e&&!("Z"in a)&&(a.Z=0),"p"in a&&(a.H=a.H%12+12*a.p),void 0===a.m&&(a.m="q"in a?a.q:0),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(i=(r=di(pi(a.y,0,1))).getUTCDay(),r=i>4||0===i?gr.ceil(r):gr(r),r=hr.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(i=(r=hi(pi(a.y,0,1))).getDay(),r=i>4||0===i?or.ceil(r):or(r),r=rr.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?di(pi(a.y,0,1)).getUTCDay():hi(pi(a.y,0,1)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,di(a)):hi(a)}}function A(t,e,n,r){for(var i,a,o=0,u=e.length,s=n.length;o<u;){if(r>=s)return-1;if(37===(i=e.charCodeAt(o++))){if(i=e.charAt(o++),!(a=b[i in bi?e.charAt(o++):i])||(r=a(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return _.x=w(n,_),_.X=w(r,_),_.c=w(e,_),x.x=w(n,x),x.X=w(r,x),x.c=w(e,x),{format:function(t){var e=w(t+="",_);return e.toString=function(){return t},e},parse:function(t){var e=k(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=w(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=k(t+="",!0);return e.toString=function(){return t},e}}}var mi,yi,vi,_i,xi,bi={"-":"",_:" ",0:"0"},wi=/^\s*\d+/,ki=/^%/,Ai=/[\\^$*+?|[\]().{}]/g;function Mi(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<n?new Array(n-a+1).join(e)+i:i)}function Ei(t){return t.replace(Ai,"\\$&")}function Di(t){return new RegExp("^(?:"+t.map(Ei).join("|")+")","i")}function Ci(t){return new Map(t.map((t,e)=>[t.toLowerCase(),e]))}function Fi(t,e,n){var r=wi.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Si(t,e,n){var r=wi.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Bi(t,e,n){var r=wi.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Ti(t,e,n){var r=wi.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function zi(t,e,n){var r=wi.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Ni(t,e,n){var r=wi.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Oi(t,e,n){var r=wi.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Ri(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function $i(t,e,n){var r=wi.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function qi(t,e,n){var r=wi.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Li(t,e,n){var r=wi.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Ui(t,e,n){var r=wi.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Pi(t,e,n){var r=wi.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function ji(t,e,n){var r=wi.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Ii(t,e,n){var r=wi.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Wi(t,e,n){var r=wi.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Hi(t,e,n){var r=wi.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Yi(t,e,n){var r=ki.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Vi(t,e,n){var r=wi.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Gi(t,e,n){var r=wi.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function Xi(t,e){return Mi(t.getDate(),e,2)}function Ji(t,e){return Mi(t.getHours(),e,2)}function Zi(t,e){return Mi(t.getHours()%12||12,e,2)}function Qi(t,e){return Mi(1+rr.count(lr(t),t),e,3)}function Ki(t,e){return Mi(t.getMilliseconds(),e,3)}function ta(t,e){return Ki(t,e)+"000"}function ea(t,e){return Mi(t.getMonth()+1,e,2)}function na(t,e){return Mi(t.getMinutes(),e,2)}function ra(t,e){return Mi(t.getSeconds(),e,2)}function ia(t){var e=t.getDay();return 0===e?7:e}function aa(t,e){return Mi(ar.count(lr(t)-1,t),e,2)}function oa(t){var e=t.getDay();return e>=4||0===e?ur(t):ur.ceil(t)}function ua(t,e){return t=oa(t),Mi(ur.count(lr(t),t)+(4===lr(t).getDay()),e,2)}function sa(t){return t.getDay()}function la(t,e){return Mi(or.count(lr(t)-1,t),e,2)}function ca(t,e){return Mi(t.getFullYear()%100,e,2)}function fa(t,e){return Mi((t=oa(t)).getFullYear()%100,e,2)}function ha(t,e){return Mi(t.getFullYear()%1e4,e,4)}function da(t,e){var n=t.getDay();return Mi((t=n>=4||0===n?ur(t):ur.ceil(t)).getFullYear()%1e4,e,4)}function pa(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Mi(e/60|0,"0",2)+Mi(e%60,"0",2)}function ga(t,e){return Mi(t.getUTCDate(),e,2)}function ma(t,e){return Mi(t.getUTCHours(),e,2)}function ya(t,e){return Mi(t.getUTCHours()%12||12,e,2)}function va(t,e){return Mi(1+hr.count(vr(t),t),e,3)}function _a(t,e){return Mi(t.getUTCMilliseconds(),e,3)}function xa(t,e){return _a(t,e)+"000"}function ba(t,e){return Mi(t.getUTCMonth()+1,e,2)}function wa(t,e){return Mi(t.getUTCMinutes(),e,2)}function ka(t,e){return Mi(t.getUTCSeconds(),e,2)}function Aa(t){var e=t.getUTCDay();return 0===e?7:e}function Ma(t,e){return Mi(pr.count(vr(t)-1,t),e,2)}function Ea(t){var e=t.getUTCDay();return e>=4||0===e?mr(t):mr.ceil(t)}function Da(t,e){return t=Ea(t),Mi(mr.count(vr(t),t)+(4===vr(t).getUTCDay()),e,2)}function Ca(t){return t.getUTCDay()}function Fa(t,e){return Mi(gr.count(vr(t)-1,t),e,2)}function Sa(t,e){return Mi(t.getUTCFullYear()%100,e,2)}function Ba(t,e){return Mi((t=Ea(t)).getUTCFullYear()%100,e,2)}function Ta(t,e){return Mi(t.getUTCFullYear()%1e4,e,4)}function za(t,e){var n=t.getUTCDay();return Mi((t=n>=4||0===n?mr(t):mr.ceil(t)).getUTCFullYear()%1e4,e,4)}function Na(){return"+0000"}function Oa(){return"%"}function Ra(t){return+t}function $a(t){return Math.floor(+t/1e3)}function qa(t,e,n){_(n=n||{})||u("Invalid time multi-format specifier: "+n);const r=e(qn),i=e($n),a=e(Rn),o=e(zn),s=e(Tn),l=e(Bn),c=e(Sn),f=e(Fn),h=t(n.milliseconds||".%L"),d=t(n.seconds||":%S"),p=t(n.minutes||"%I:%M"),g=t(n.hours||"%I %p"),m=t(n.date||n.day||"%a %d"),y=t(n.week||"%b %d"),v=t(n.month||"%B"),x=t(n.quarter||"%B"),b=t(n.year||"%Y");return t=>(r(t)<t?h:i(t)<t?d:a(t)<t?p:o(t)<t?g:l(t)<t?s(t)<t?m:y:f(t)<t?c(t)<t?v:x:b)(t)}function La(t){const e=$e(t.format),n=$e(t.utcFormat);return{timeFormat:t=>dt(t)?e(t):qa(e,Ir,t),utcFormat:t=>dt(t)?n(t):qa(n,Wr,t),timeParse:$e(t.parse),utcParse:$e(t.utcParse)}}let Ua;function Pa(){return Ua=La({format:yi,parse:vi,utcFormat:_i,utcParse:xi})}function ja(t){return La(gi(t))}function Ia(t){return arguments.length?Ua=ja(t):Ua}!function(t){mi=gi(t),yi=mi.format,vi=mi.parse,_i=mi.utcFormat,xi=mi.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),Pa();const Wa=(t,e)=>K({},t,e);function Ha(t,e){const n=t?Dn(t):Cn(),r=e?ja(e):Ia();return Wa(n,r)}function Ya(t,e){const n=arguments.length;return n&&2!==n&&u("defaultLocale expects either zero or two arguments."),n?Wa(Cn(t),Ia(e)):Wa(Cn(),Ia())}function Va(t,e,n,r){const i=Oe((e=e||{}).type||"json");return i||u("Unknown data format type: "+e.type),t=i(t,e),e.parse&&function(t,e,n,r){if(!t.length)return;const i=Ia();n=n||i.timeParse,r=r||i.utcParse;let a,o,u,s,l,c,f=t.columns||Object.keys(t[0]);"auto"===e&&(e=de(t,f));f=Object.keys(e);const h=f.map(t=>{const i=e[t];let a,o;if(i&&(i.startsWith("date:")||i.startsWith("utc:"))){a=i.split(/:(.+)?/,2),o=a[1],("'"===o[0]&&"'"===o[o.length-1]||'"'===o[0]&&'"'===o[o.length-1])&&(o=o.slice(1,-1));return("utc"===a[0]?r:n)(o)}if(!le[i])throw Error("Illegal format pattern: "+t+":"+i);return le[i]});for(u=0,l=t.length,c=f.length;u<l;++u)for(a=t[u],s=0;s<c;++s)o=f[s],a[o]=h[s](a[o])}(t,e.parse,n,r),rt(t,"columns")&&delete t.columns,t}var Ga=function(t,e){return n=>({options:n||{},sanitize:re,load:ne,fileAccess:!!e,file:ie(e),http:oe(t)})}("undefined"!=typeof fetch&&fetch,null);const Xa={skip:!0};function Ja(t,e,n,r,i,a){const o=K({},a,Xa);let u,s;H(n)||(n=Z(n)),void 0===r?u=e=>t.touch(n(e)):H(r)?(s=new Vt(null,r,i,!1),u=e=>{s.evaluate(e);const r=n(e),i=s.value;Pt(i)?t.pulse(r,i,a):t.update(r,i,o)}):u=e=>t.update(n(e),r,o),e.apply(u)}function Za(t,e,n,r,i,a){if(void 0===r)e.targets().add(n);else{const o=a||{},u=new Vt(null,function(t,e){return e=H(e)?e:Z(e),t?function(n,r){const i=e(n,r);return t.skip()||(t.skip(i!==this.value).value=i),i}:e}(n,r),i,!1);u.modified(o.force),u.rank=e.rank,e.targets().add(u),n&&(u.skip(!0),u.value=n.value,u.targets().add(n),t.connect(n,[u]))}}const Qa={};function Ka(t,e,n){this.dataflow=t,this.stamp=null==e?-1:e,this.add=[],this.rem=[],this.mod=[],this.fields=null,this.encode=n||null}function to(t,e){const n=[];return Ct(t,e,t=>n.push(t)),n}function eo(t,e){const n={};return t.visit(e,t=>{n[Nt(t)]=1}),t=>n[Nt(t)]?null:t}function no(t,e){return t?(n,r)=>t(n,r)&&e(n,r):e}function ro(t,e,n,r){const i=this,a=n.length;let o=0;this.dataflow=t,this.stamp=e,this.fields=null,this.encode=r||null,this.pulses=n;for(let t=0;t<a;++t){const r=n[t];if(r.stamp===e){if(r.fields){const t=i.fields||(i.fields={});for(const e in r.fields)t[e]=1}r.changed(i.ADD)&&(o|=i.ADD),r.changed(i.REM)&&(o|=i.REM),r.changed(i.MOD)&&(o|=i.MOD)}}this.changes=o}function io(t){return t.error("Dataflow already running. Use runAsync() to chain invocations."),t}Ka.prototype={StopPropagation:Qa,ADD:1,REM:2,MOD:4,ADD_REM:3,ADD_MOD:5,ALL:7,REFLOW:8,SOURCE:16,NO_SOURCE:32,NO_FIELDS:64,fork(t){return new Ka(this.dataflow).init(this,t)},clone(){const t=this.fork(7);return t.add=t.add.slice(),t.rem=t.rem.slice(),t.mod=t.mod.slice(),t.source&&(t.source=t.source.slice()),t.materialize(23)},addAll(){let t=this;return!t.source||t.add===t.rem||!t.rem.length&&t.source.length===t.add.length||(t=new Ka(this.dataflow).init(this),t.add=t.source,t.rem=[]),t},init(t,e){const n=this;return n.stamp=t.stamp,n.encode=t.encode,!t.fields||64&e||(n.fields=t.fields),1&e?(n.addF=t.addF,n.add=t.add):(n.addF=null,n.add=[]),2&e?(n.remF=t.remF,n.rem=t.rem):(n.remF=null,n.rem=[]),4&e?(n.modF=t.modF,n.mod=t.mod):(n.modF=null,n.mod=[]),32&e?(n.srcF=null,n.source=null):(n.srcF=t.srcF,n.source=t.source,t.cleans&&(n.cleans=t.cleans)),n},runAfter(t){this.dataflow.runAfter(t)},changed(t){const e=t||7;return 1&e&&this.add.length||2&e&&this.rem.length||4&e&&this.mod.length},reflow(t){if(t)return this.fork(7).reflow();const e=this.add.length,n=this.source&&this.source.length;return n&&n!==e&&(this.mod=this.source,e&&this.filter(4,eo(this,1))),this},clean(t){return arguments.length?(this.cleans=!!t,this):this.cleans},modifies(t){const e=this.fields||(this.fields={});return v(t)?t.forEach(t=>e[t]=!0):e[t]=!0,this},modified(t,e){const n=this.fields;return!(!e&&!this.mod.length||!n)&&(arguments.length?v(t)?t.some(t=>n[t]):n[t]:!!n)},filter(t,e){const n=this;return 1&t&&(n.addF=no(n.addF,e)),2&t&&(n.remF=no(n.remF,e)),4&t&&(n.modF=no(n.modF,e)),16&t&&(n.srcF=no(n.srcF,e)),n},materialize(t){const e=this;return 1&(t=t||7)&&e.addF&&(e.add=to(e.add,e.addF),e.addF=null),2&t&&e.remF&&(e.rem=to(e.rem,e.remF),e.remF=null),4&t&&e.modF&&(e.mod=to(e.mod,e.modF),e.modF=null),16&t&&e.srcF&&(e.source=e.source.filter(e.srcF),e.srcF=null),e},visit(t,e){const n=this,r=e;if(16&t)return Ct(n.source,n.srcF,r),n;1&t&&Ct(n.add,n.addF,r),2&t&&Ct(n.rem,n.remF,r),4&t&&Ct(n.mod,n.modF,r);const i=n.source;if(8&t&&i){const t=n.add.length+n.mod.length;t===i.length||Ct(i,t?eo(n,5):n.srcF,r)}return n}},ut(ro,Ka,{fork(t){const e=new Ka(this.dataflow).init(this,t&this.NO_FIELDS);return void 0!==t&&(t&e.ADD&&this.visit(e.ADD,t=>e.add.push(t)),t&e.REM&&this.visit(e.REM,t=>e.rem.push(t)),t&e.MOD&&this.visit(e.MOD,t=>e.mod.push(t))),e},changed(t){return this.changes&t},modified(t){const e=this,n=e.fields;return n&&e.changes&e.MOD?v(t)?t.some(t=>n[t]):n[t]:0},filter(){u("MultiPulse does not support filtering.")},materialize(){u("MultiPulse does not support materialization.")},visit(t,e){const n=this,r=n.pulses,i=r.length;let a=0;if(t&n.SOURCE)for(;a<i;++a)r[a].visit(t,e);else for(;a<i;++a)r[a].stamp===n.stamp&&r[a].visit(t,e);return n}});const ao={skip:!1,force:!1};function oo(t){let e=[];return{clear:()=>e=[],size:()=>e.length,peek:()=>e[0],push:n=>(e.push(n),uo(e,0,e.length-1,t)),pop:()=>{const n=e.pop();let r;return e.length?(r=e[0],e[0]=n,function(t,e,n){const r=e,i=t.length,a=t[e];let o,u=1+(e<<1);for(;u<i;)o=u+1,o<i&&n(t[u],t[o])>=0&&(u=o),t[e]=t[u],u=1+((e=u)<<1);t[e]=a,uo(t,r,e,n)}(e,0,t)):r=n,r}}}function uo(t,e,n,r){let i,a;const o=t[n];for(;n>e&&(a=n-1>>1,i=t[a],r(o,i)<0);)t[n]=i,n=a;return t[n]=o}function so(){this.logger(y()),this.logLevel(1),this._clock=0,this._rank=0,this._locale=Ya();try{this._loader=Ga()}catch(t){}this._touched=Ft(c),this._input={},this._pulse=null,this._heap=oo((t,e)=>t.qrank-e.qrank),this._postrun=[]}function lo(t){return function(){return this._log[t].apply(this,arguments)}}function co(t,e){Vt.call(this,t,null,e)}so.prototype={stamp(){return this._clock},loader(t){return arguments.length?(this._loader=t,this):this._loader},locale(t){return arguments.length?(this._locale=t,this):this._locale},logger(t){return arguments.length?(this._log=t,this):this._log},error:lo("error"),warn:lo("warn"),info:lo("info"),debug:lo("debug"),logLevel:lo("level"),cleanThreshold:1e4,add:function(t,e,n,r){let i,a=1;return t instanceof Vt?i=t:t&&t.prototype instanceof Vt?i=new t:H(t)?i=new Vt(null,t):(a=0,i=new Vt(t,e)),this.rank(i),a&&(r=n,n=e),n&&this.connect(i,i.parameters(n,r)),this.touch(i),i},connect:function(t,e){const n=t.rank,r=e.length;for(let i=0;i<r;++i)if(n<e[i].rank)return void this.rerank(t)},rank:function(t){t.rank=++this._rank},rerank:function(t){const e=[t];let n,r,i;for(;e.length;)if(this.rank(n=e.pop()),r=n._targets)for(i=r.length;--i>=0;)e.push(n=r[i]),n===t&&u("Cycle detected in dataflow graph.")},pulse:function(t,e,n){this.touch(t,n||ao);const r=new Ka(this,this._clock+(this._pulse?0:1)),i=t.pulse&&t.pulse.source||[];return r.target=t,this._input[t.id]=e.pulse(r,i),this},touch:function(t,e){const n=e||ao;return this._pulse?this._enqueue(t):this._touched.add(t),n.skip&&t.skip(!0),this},update:function(t,e,n){const r=n||ao;return(t.set(e)||r.force)&&this.touch(t,r),this},changeset:jt,ingest:function(t,e,n){return e=this.parse(e,n),this.pulse(t,this.changeset().insert(e))},parse:function(t,e){const n=this.locale();return Va(t,e,n.timeParse,n.utcParse)},preload:async function(t,e,n){const r=this,i=r._pending||function(t){let e;const n=new Promise(t=>e=t);return n.requests=0,n.done=()=>{0==--n.requests&&(t._pending=null,e(t))},t._pending=n}(r);i.requests+=1;const a=await r.request(e,n);return r.pulse(t,r.changeset().remove(p).insert(a.data||[])),i.done(),a},request:async function(t,e){const n=this;let r,i=0;try{r=await n.loader().load(t,{context:"dataflow",response:Re(e&&e.type)});try{r=n.parse(r,e)}catch(e){i=-2,n.warn("Data ingestion failed",t,e)}}catch(e){i=-1,n.warn("Loading failed",t,e)}return{data:r,status:i}},events:function(t,e,n,r){const i=this,a=Zt(n,r),o=function(t){t.dataflow=i;try{a.receive(t)}catch(t){i.error(t)}finally{i.run()}};let u;u="string"==typeof t&&"undefined"!=typeof document?document.querySelectorAll(t):I(t);const s=u.length;for(let t=0;t<s;++t)u[t].addEventListener(e,o);return a},on:function(t,e,n,r,i){return(t instanceof Vt?Za:Ja)(this,t,e,n,r,i),this},evaluate:async function(t,e,n){const r=this,i=[];if(r._pulse)return io(r);if(r._pending&&await r._pending,e&&await St(r,e),!r._touched.length)return r.debug("Dataflow invoked, but nothing to do."),r;const a=++r._clock;r._pulse=new Ka(r,a,t),r._touched.forEach(t=>r._enqueue(t,!0)),r._touched=Ft(c);let o,u,s,l=0;try{for(;r._heap.size()>0;)o=r._heap.pop(),o.rank===o.qrank?(u=o.run(r._getPulse(o,t)),u.then?u=await u:u.async&&(i.push(u.async),u=Qa),u!==Qa&&o._targets&&o._targets.forEach(t=>r._enqueue(t)),++l):r._enqueue(o,!0)}catch(t){r._heap.clear(),s=t}if(r._input={},r._pulse=null,r.debug(`Pulse ${a}: ${l} operators`),s&&(r._postrun=[],r.error(s)),r._postrun.length){const t=r._postrun.sort((t,e)=>e.priority-t.priority);r._postrun=[];for(let e=0;e<t.length;++e)await St(r,t[e].callback)}return n&&await St(r,n),i.length&&Promise.all(i).then(t=>r.runAsync(null,()=>{t.forEach(t=>{try{t(r)}catch(t){r.error(t)}})})),r},run:function(t,e,n){return this._pulse?io(this):(this.evaluate(t,e,n),this)},runAsync:async function(t,e,n){for(;this._running;)await this._running;const r=()=>this._running=null;return(this._running=this.evaluate(t,e,n)).then(r,r),this._running},runAfter:function(t,e,n){if(this._pulse||e)this._postrun.push({priority:n||0,callback:t});else try{t(this)}catch(t){this.error(t)}},_enqueue:function(t,e){const n=t.stamp<this._clock;n&&(t.stamp=this._clock),(n||e)&&(t.qrank=t.rank,this._heap.push(t))},_getPulse:function(t,e){const n=t.source,r=this._clock;return n&&v(n)?new ro(this,r,n.map(t=>t.pulse),e):this._input[t.id]||function(t,e){if(e&&e.stamp===t.stamp)return e;t=t.fork(),e&&e!==Qa&&(t.source=e.source);return t}(this._pulse,n&&n.pulse)}},ut(co,Vt,{run(t){if(t.stamp<this.stamp)return t.StopPropagation;let e;return this.skip()?this.skip(!1):e=this.evaluate(t),e=e||t,e.then?e=e.then(t=>this.pulse=t):e!==t.StopPropagation&&(this.pulse=e),e},evaluate(t){const e=this.marshall(t.stamp),n=this.transform(e,t);return e.clear(),n},transform(){}});const fo={};function ho(t){const e=po(t);return e&&e.Definition||null}function po(t){return t=t&&t.toLowerCase(),rt(fo,t)?fo[t]:null}function go(t){return t&&t.length?1===t.length?t[0]:(e=t,t=>{const n=e.length;let r=1,i=String(e[0](t));for(;r<n;++r)i+="|"+e[r](t);return i}):function(){return""};var e}function mo(t,e,n){return n||t+(e?"_"+e:"")}const yo=()=>{},vo={init:yo,add:yo,rem:yo,idx:0},_o={values:{init:t=>t.cell.store=!0,value:t=>t.cell.data.values(),idx:-1},count:{value:t=>t.cell.num},__count__:{value:t=>t.missing+t.valid},missing:{value:t=>t.missing},valid:{value:t=>t.valid},sum:{init:t=>t.sum=0,value:t=>t.sum,add:(t,e)=>t.sum+=+e,rem:(t,e)=>t.sum-=e},product:{init:t=>t.product=1,value:t=>t.valid?t.product:void 0,add:(t,e)=>t.product*=e,rem:(t,e)=>t.product/=e},mean:{init:t=>t.mean=0,value:t=>t.valid?t.mean:void 0,add:(t,e)=>(t.mean_d=e-t.mean,t.mean+=t.mean_d/t.valid),rem:(t,e)=>(t.mean_d=e-t.mean,t.mean-=t.valid?t.mean_d/t.valid:t.mean)},average:{value:t=>t.valid?t.mean:void 0,req:["mean"],idx:1},variance:{init:t=>t.dev=0,value:t=>t.valid>1?t.dev/(t.valid-1):void 0,add:(t,e)=>t.dev+=t.mean_d*(e-t.mean),rem:(t,e)=>t.dev-=t.mean_d*(e-t.mean),req:["mean"],idx:1},variancep:{value:t=>t.valid>1?t.dev/t.valid:void 0,req:["variance"],idx:2},stdev:{value:t=>t.valid>1?Math.sqrt(t.dev/(t.valid-1)):void 0,req:["variance"],idx:2},stdevp:{value:t=>t.valid>1?Math.sqrt(t.dev/t.valid):void 0,req:["variance"],idx:2},stderr:{value:t=>t.valid>1?Math.sqrt(t.dev/(t.valid*(t.valid-1))):void 0,req:["variance"],idx:2},distinct:{value:t=>t.cell.data.distinct(t.get),req:["values"],idx:3},ci0:{value:t=>t.cell.data.ci0(t.get),req:["values"],idx:3},ci1:{value:t=>t.cell.data.ci1(t.get),req:["values"],idx:3},median:{value:t=>t.cell.data.q2(t.get),req:["values"],idx:3},q1:{value:t=>t.cell.data.q1(t.get),req:["values"],idx:3},q3:{value:t=>t.cell.data.q3(t.get),req:["values"],idx:3},min:{init:t=>t.min=void 0,value:t=>t.min=Number.isNaN(t.min)?t.cell.data.min(t.get):t.min,add:(t,e)=>{(e<t.min||void 0===t.min)&&(t.min=e)},rem:(t,e)=>{e<=t.min&&(t.min=NaN)},req:["values"],idx:4},max:{init:t=>t.max=void 0,value:t=>t.max=Number.isNaN(t.max)?t.cell.data.max(t.get):t.max,add:(t,e)=>{(e>t.max||void 0===t.max)&&(t.max=e)},rem:(t,e)=>{e>=t.max&&(t.max=NaN)},req:["values"],idx:4},argmin:{init:t=>t.argmin=void 0,value:t=>t.argmin||t.cell.data.argmin(t.get),add:(t,e,n)=>{e<t.min&&(t.argmin=n)},rem:(t,e)=>{e<=t.min&&(t.argmin=void 0)},req:["min","values"],idx:3},argmax:{init:t=>t.argmax=void 0,value:t=>t.argmax||t.cell.data.argmax(t.get),add:(t,e,n)=>{e>t.max&&(t.argmax=n)},rem:(t,e)=>{e>=t.max&&(t.argmax=void 0)},req:["max","values"],idx:3}},xo=Object.keys(_o);function bo(t,e){return _o[t](e)}function wo(t,e){return t.idx-e.idx}function ko(){this.valid=0,this.missing=0,this._ops.forEach(t=>t.init(this))}function Ao(t,e){null!=t&&""!==t?t==t&&(++this.valid,this._ops.forEach(n=>n.add(this,t,e))):++this.missing}function Mo(t,e){null!=t&&""!==t?t==t&&(--this.valid,this._ops.forEach(n=>n.rem(this,t,e))):--this.missing}function Eo(t){return this._out.forEach(e=>t[e.out]=e.value(this)),t}function Do(t,e){const n=e||f,r=function(t){const e={};t.forEach(t=>e[t.name]=t);const n=t=>{t.req&&t.req.forEach(t=>{e[t]||n(e[t]=_o[t]())})};return t.forEach(n),Object.values(e).sort(wo)}(t),i=t.slice().sort(wo);function a(t){this._ops=r,this._out=i,this.cell=t,this.init()}return a.prototype.init=ko,a.prototype.add=Ao,a.prototype.rem=Mo,a.prototype.set=Eo,a.prototype.get=n,a.fields=t.map(t=>t.out),a}function*Co(t,e){if(null==e)for(let e of t)null!=e&&""!==e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)r=e(r,++n,t),null!=r&&""!==r&&(r=+r)>=r&&(yield r)}}function Fo(t,e,n){const r=Float64Array.from(Co(t,n));return r.sort(qe),e.map(t=>function(t,e,n=Ue){if(r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,a=Math.floor(i),o=+n(t[a],a,t);return o+(+n(t[a+1],a+1,t)-o)*(i-a)}}(r,t))}function So(t,e){return Fo(t,[.25,.5,.75],e)}function Bo(t,e){const n=t.length,r=function(t,e){const n=function(t,e){let n,r=0,i=0,a=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(n=e-i,i+=n/++r,a+=n*(e-i));else{let o=-1;for(let u of t)null!=(u=e(u,++o,t))&&(u=+u)>=u&&(n=u-i,i+=n/++r,a+=n*(u-i))}if(r>1)return a/(r-1)}(t,e);return n?Math.sqrt(n):n}(t,e),i=So(t,e),a=(i[2]-i[0])/1.34;return 1.06*(Math.min(r,a)||r||Math.abs(i[0])||1)*Math.pow(n,-.2)}function To(t){const e=t.maxbins||20,n=t.base||10,r=Math.log(n),i=t.divide||[5,2];let a,o,u,s,l,c,f=t.extent[0],h=t.extent[1];const d=t.span||h-f||Math.abs(f)||1;if(t.step)a=t.step;else if(t.steps){for(s=d/e,l=0,c=t.steps.length;l<c&&t.steps[l]<s;++l);a=t.steps[Math.max(0,l-1)]}else{for(o=Math.ceil(Math.log(e)/r),u=t.minstep||0,a=Math.max(u,Math.pow(n,Math.round(Math.log(d)/r)-o));Math.ceil(d/a)>e;)a*=n;for(l=0,c=i.length;l<c;++l)s=a/i[l],s>=u&&d/s<=e&&(a=s)}s=Math.log(a);const p=s>=0?0:1+~~(-s/r),g=Math.pow(n,-p-1);return(t.nice||void 0===t.nice)&&(s=Math.floor(f/a+g)*a,f=f<s?s-a:s,h=Math.ceil(h/a)*a),{start:f,stop:h===f?f+a:h,step:a}}function zo(e,n,r,i){if(!e.length)return[void 0,void 0];const a=Float64Array.from(Co(e,i)),o=a.length,u=n;let s,l,c,f;for(c=0,f=Array(u);c<u;++c){for(s=0,l=0;l<o;++l)s+=a[~~(t.random()*o)];f[c]=s/o}return f.sort(qe),[en(f,r/2),en(f,1-r/2)]}function No(t,e,n,r){r=r||(t=>t);const i=t.length,a=new Float64Array(i);let o,u=0,s=1,l=r(t[0]),c=l,f=l+e;for(;s<i;++s){if(o=r(t[s]),o>=f){for(c=(l+c)/2;u<s;++u)a[u]=c;f=o+e,l=o}c=o}for(c=(l+c)/2;u<s;++u)a[u]=c;return n?function(t,e){const n=t.length;let r,i,a=0,o=1;for(;t[a]===t[o];)++o;for(;o<n;){for(r=o+1;t[o]===t[r];)++r;if(t[o]-t[o-1]<e){for(i=o+(a+r-o-o>>1);i<o;)t[i++]=t[o];for(;i>o;)t[i--]=t[a]}a=o,o=r}return t}(a,e+e/4):a}xo.forEach(t=>{_o[t]=function(t,e){return n=>K({name:t,out:n||t},vo,e)}(t,_o[t])}),t.random=Math.random;const Oo=Math.sqrt(2*Math.PI),Ro=Math.SQRT2;let $o=NaN;function qo(e,n){e=e||0,n=null==n?1:n;let r,i,a=0,o=0;if($o==$o)a=$o,$o=NaN;else{do{a=2*t.random()-1,o=2*t.random()-1,r=a*a+o*o}while(0===r||r>1);i=Math.sqrt(-2*Math.log(r)/r),a*=i,$o=o*i}return e+a*n}function Lo(t,e,n){const r=(t-(e||0))/(n=null==n?1:n);return Math.exp(-.5*r*r)/(n*Oo)}function Uo(t,e,n){const r=(t-(e=e||0))/(n=null==n?1:n),i=Math.abs(r);let a;if(i>37)a=0;else{const t=Math.exp(-i*i/2);let e;i<7.07106781186547?(e=.0352624965998911*i+.700383064443688,e=e*i+6.37396220353165,e=e*i+33.912866078383,e=e*i+112.079291497871,e=e*i+221.213596169931,e=e*i+220.206867912376,a=t*e,e=.0883883476483184*i+1.75566716318264,e=e*i+16.064177579207,e=e*i+86.7807322029461,e=e*i+296.564248779674,e=e*i+637.333633378831,e=e*i+793.826512519948,e=e*i+440.413735824752,a/=e):(e=i+.65,e=i+4/e,e=i+3/e,e=i+2/e,e=i+1/e,a=t/e/2.506628274631)}return r>0?1-a:a}function Po(t,e,n){return t<0||t>1?NaN:(e||0)+(null==n?1:n)*Ro*function(t){let e,n=-Math.log((1-t)*(1+t));n<6.25?(n-=3.125,e=-364441206401782e-35,e=e*n-16850591381820166e-35,e=128584807152564e-32+e*n,e=11157877678025181e-33+e*n,e=e*n-1333171662854621e-31,e=20972767875968562e-33+e*n,e=6637638134358324e-30+e*n,e=e*n-4054566272975207e-29,e=e*n-8151934197605472e-29,e=26335093153082323e-28+e*n,e=e*n-12975133253453532e-27,e=e*n-5415412054294628e-26,e=1.0512122733215323e-9+e*n,e=e*n-4.112633980346984e-9,e=e*n-2.9070369957882005e-8,e=4.2347877827932404e-7+e*n,e=e*n-13654692000834679e-22,e=e*n-13882523362786469e-21,e=.00018673420803405714+e*n,e=e*n-.000740702534166267,e=e*n-.006033670871430149,e=.24015818242558962+e*n,e=1.6536545626831027+e*n):n<16?(n=Math.sqrt(n)-3.25,e=2.2137376921775787e-9,e=9.075656193888539e-8+e*n,e=e*n-2.7517406297064545e-7,e=1.8239629214389228e-8+e*n,e=15027403968909828e-22+e*n,e=e*n-4013867526981546e-21,e=29234449089955446e-22+e*n,e=12475304481671779e-21+e*n,e=e*n-47318229009055734e-21,e=6828485145957318e-20+e*n,e=24031110387097894e-21+e*n,e=e*n-.0003550375203628475,e=.0009532893797373805+e*n,e=e*n-.0016882755560235047,e=.002491442096107851+e*n,e=e*n-.003751208507569241,e=.005370914553590064+e*n,e=1.0052589676941592+e*n,e=3.0838856104922208+e*n):Number.isFinite(n)?(n=Math.sqrt(n)-5,e=-27109920616438573e-27,e=e*n-2.555641816996525e-10,e=1.5076572693500548e-9+e*n,e=e*n-3.789465440126737e-9,e=7.61570120807834e-9+e*n,e=e*n-1.496002662714924e-8,e=2.914795345090108e-8+e*n,e=e*n-6.771199775845234e-8,e=2.2900482228026655e-7+e*n,e=e*n-9.9298272942317e-7,e=4526062597223154e-21+e*n,e=e*n-1968177810553167e-20,e=7599527703001776e-20+e*n,e=e*n-.00021503011930044477,e=e*n-.00013871931833623122,e=1.0103004648645344+e*n,e=4.849906401408584+e*n):e=1/0;return e*t}(2*t-1)}function jo(t,e){let n,r;const i={mean(t){return arguments.length?(n=t||0,i):n},stdev(t){return arguments.length?(r=null==t?1:t,i):r},sample:()=>qo(n,r),pdf:t=>Lo(t,n,r),cdf:t=>Uo(t,n,r),icdf:t=>Po(t,n,r)};return i.mean(t).stdev(e)}function Io(e,n){const r=jo();let i=0;const a={data(t){return arguments.length?(e=t,i=t?t.length:0,a.bandwidth(n)):e},bandwidth(t){return arguments.length?(!(n=t)&&e&&(n=Bo(e)),a):n},sample:()=>e[~~(t.random()*i)]+n*r.sample(),pdf(t){let a=0,o=0;for(;o<i;++o)a+=r.pdf((t-e[o])/n);return a/n/i},cdf(t){let a=0,o=0;for(;o<i;++o)a+=r.cdf((t-e[o])/n);return a/i},icdf(){throw Error("KDE icdf not supported.")}};return a.data(e)}function Wo(t,e){return t=t||0,e=null==e?1:e,Math.exp(t+qo()*e)}function Ho(t,e,n){if(t<=0)return 0;e=e||0,n=null==n?1:n;const r=(Math.log(t)-e)/n;return Math.exp(-.5*r*r)/(n*Oo*t)}function Yo(t,e,n){return Uo(Math.log(t),e,n)}function Vo(t,e,n){return Math.exp(Po(t,e,n))}function Go(t,e){let n,r;const i={mean(t){return arguments.length?(n=t||0,i):n},stdev(t){return arguments.length?(r=null==t?1:t,i):r},sample:()=>Wo(n,r),pdf:t=>Ho(t,n,r),cdf:t=>Yo(t,n,r),icdf:t=>Vo(t,n,r)};return i.mean(t).stdev(e)}function Xo(e,n){let r,i=0;const a={weights(t){return arguments.length?(r=function(t){const e=[];let n,r=0;for(n=0;n<i;++n)r+=e[n]=null==t[n]?1:+t[n];for(n=0;n<i;++n)e[n]/=r;return e}(n=t||[]),a):n},distributions(t){return arguments.length?(t?(i=t.length,e=t):(i=0,e=[]),a.weights(n)):e},sample(){const n=t.random();let a=e[i-1],o=r[0],u=0;for(;u<i-1;o+=r[++u])if(n<o){a=e[u];break}return a.sample()},pdf(t){let n=0,a=0;for(;a<i;++a)n+=r[a]*e[a].pdf(t);return n},cdf(t){let n=0,a=0;for(;a<i;++a)n+=r[a]*e[a].cdf(t);return n},icdf(){throw Error("Mixture icdf not supported.")}};return a.distributions(e).weights(n)}function Jo(e,n){return null==n&&(n=null==e?1:e,e=0),e+(n-e)*t.random()}function Zo(t,e,n){return null==n&&(n=null==e?1:e,e=0),t>=e&&t<=n?1/(n-e):0}function Qo(t,e,n){return null==n&&(n=null==e?1:e,e=0),t<e?0:t>n?1:(t-e)/(n-e)}function Ko(t,e,n){return null==n&&(n=null==e?1:e,e=0),t>=0&&t<=1?e+t*(n-e):NaN}function tu(t,e){let n,r;const i={min(t){return arguments.length?(n=t||0,i):n},max(t){return arguments.length?(r=null==t?1:t,i):r},sample:()=>Jo(n,r),pdf:t=>Zo(t,n,r),cdf:t=>Qo(t,n,r),icdf:t=>Ko(t,n,r)};return null==e&&(e=null==t?1:t,t=0),i.min(t).max(e)}function eu(t,e,n,r){const i=r-t*t,a=Math.abs(i)<1e-24?0:(n-t*e)/i;return[e-a*t,a]}function nu(t,e,n,r){t=t.filter(t=>{let r=e(t),i=n(t);return null!=r&&(r=+r)>=r&&null!=i&&(i=+i)>=i}),r&&t.sort((t,n)=>e(t)-e(n));const i=t.length,a=new Float64Array(i),o=new Float64Array(i);let u,s,l,c=0,f=0,h=0;for(l of t)a[c]=u=+e(l),o[c]=s=+n(l),++c,f+=(u-f)/c,h+=(s-h)/c;for(c=0;c<i;++c)a[c]-=f,o[c]-=h;return[a,o,f,h]}function ru(t,e,n,r){let i,a,o=-1;for(const u of t)i=e(u),a=n(u),null!=i&&(i=+i)>=i&&null!=a&&(a=+a)>=a&&r(i,a,++o)}function iu(t,e,n,r,i){let a=0,o=0;return ru(t,e,n,(t,e)=>{const n=e-i(t),u=e-r;a+=n*n,o+=u*u}),1-a/o}function au(t,e,n){let r=0,i=0,a=0,o=0,u=0;ru(t,e,n,(t,e)=>{++u,r+=(t-r)/u,i+=(e-i)/u,a+=(t*e-a)/u,o+=(t*t-o)/u});const s=eu(r,i,a,o),l=t=>s[0]+s[1]*t;return{coef:s,predict:l,rSquared:iu(t,e,n,i,l)}}function ou(t,e,n){let r=0,i=0,a=0,o=0,u=0;ru(t,e,n,(t,e)=>{++u,t=Math.log(t),r+=(t-r)/u,i+=(e-i)/u,a+=(t*e-a)/u,o+=(t*t-o)/u});const s=eu(r,i,a,o),l=t=>s[0]+s[1]*Math.log(t);return{coef:s,predict:l,rSquared:iu(t,e,n,i,l)}}function uu(t,e,n){const[r,i,a,o]=nu(t,e,n);let u,s,l,c=0,f=0,h=0,d=0,p=0;ru(t,e,n,(t,e)=>{u=r[p++],s=Math.log(e),l=u*e,c+=(e*s-c)/p,f+=(l-f)/p,h+=(l*s-h)/p,d+=(u*l-d)/p});const[g,m]=eu(f/o,c/o,h/o,d/o),y=t=>Math.exp(g+m*(t-a));return{coef:[Math.exp(g-m*a),m],predict:y,rSquared:iu(t,e,n,o,y)}}function su(t,e,n){let r=0,i=0,a=0,o=0,u=0,s=0;ru(t,e,n,(t,e)=>{const n=Math.log(t),l=Math.log(e);++s,r+=(n-r)/s,i+=(l-i)/s,a+=(n*l-a)/s,o+=(n*n-o)/s,u+=(e-u)/s});const l=eu(r,i,a,o),c=t=>l[0]*Math.pow(t,l[1]);return l[0]=Math.exp(l[0]),{coef:l,predict:c,rSquared:iu(t,e,n,u,c)}}function lu(t,e,n){const[r,i,a,o]=nu(t,e,n),u=r.length;let s,l,c,f,h=0,d=0,p=0,g=0,m=0;for(s=0;s<u;)l=r[s],c=i[s++],f=l*l,h+=(f-h)/s,d+=(f*l-d)/s,p+=(f*f-p)/s,g+=(l*c-g)/s,m+=(f*c-m)/s;const y=p-h*h,v=h*y-d*d,_=(m*h-g*d)/v,x=(g*y-m*d)/v,b=-_*h,w=t=>_*(t-=a)*t+x*t+b+o;return{coef:[b-x*a+_*a*a+o,x-2*_*a,_],predict:w,rSquared:iu(t,e,n,o,w)}}function cu(t,e,n,r){if(1===r)return au(t,e,n);if(2===r)return lu(t,e,n);const[i,a,o,u]=nu(t,e,n),s=i.length,l=[],c=[],f=r+1;let h,d,p,g,m;for(h=0;h<f;++h){for(p=0,g=0;p<s;++p)g+=Math.pow(i[p],h)*a[p];for(l.push(g),m=new Float64Array(f),d=0;d<f;++d){for(p=0,g=0;p<s;++p)g+=Math.pow(i[p],h+d);m[d]=g}c.push(m)}c.push(l);const y=function(t){const e=t.length-1,n=[];let r,i,a,o,u;for(r=0;r<e;++r){for(o=r,i=r+1;i<e;++i)Math.abs(t[r][i])>Math.abs(t[r][o])&&(o=i);for(a=r;a<e+1;++a)u=t[a][r],t[a][r]=t[a][o],t[a][o]=u;for(i=r+1;i<e;++i)for(a=e;a>=r;a--)t[a][i]-=t[a][r]*t[r][i]/t[r][r]}for(i=e-1;i>=0;--i){for(u=0,a=i+1;a<e;++a)u+=t[a][i]*n[a];n[i]=(t[e][i]-u)/t[i][i]}return n}(c),v=t=>{t-=o;let e=u+y[0]+y[1]*t+y[2]*t*t;for(h=3;h<f;++h)e+=y[h]*Math.pow(t,h);return e};return{coef:fu(f,y,-o,u),predict:v,rSquared:iu(t,e,n,u,v)}}function fu(t,e,n,r){const i=Array(t);let a,o,u,s;for(a=0;a<t;++a)i[a]=0;for(a=t-1;a>=0;--a)for(u=e[a],s=1,i[a]+=u,o=1;o<=a;++o)s*=(a+1-o)/o,i[a-o]+=u*Math.pow(n,o)*s;return i[0]+=r,i}function hu(t,e,n,r){const[i,a,o,u]=nu(t,e,n,!0),s=i.length,l=Math.max(2,~~(r*s)),c=new Float64Array(s),f=new Float64Array(s),h=new Float64Array(s).fill(1);for(let t=-1;++t<=2;){const e=[0,l-1];for(let t=0;t<s;++t){const n=i[t],r=e[0],o=e[1],u=n-i[r]>i[o]-n?r:o;let s=0,l=0,d=0,p=0,g=0;const m=1/Math.abs(i[u]-n||1);for(let t=r;t<=o;++t){const e=i[t],r=a[t],o=du(Math.abs(n-e)*m)*h[t],u=e*o;s+=o,l+=u,d+=r*o,p+=r*u,g+=e*u}const[y,v]=eu(l/s,d/s,p/s,g/s);c[t]=y+v*n,f[t]=Math.abs(a[t]-c[t]),pu(i,t+1,e)}if(2===t)break;const n=nn(f);if(Math.abs(n)<1e-12)break;for(let t,e,r=0;r<s;++r)t=f[r]/(6*n),h[r]=t>=1?1e-12:(e=1-t*t)*e}return function(t,e,n,r){const i=t.length,a=[];let o,u=0,s=0,l=[];for(;u<i;++u)o=t[u]+n,l[0]===o?l[1]+=(e[u]-l[1])/++s:(s=0,l[1]+=r,l=[o,e[u]],a.push(l));return l[1]+=r,a}(i,c,o,u)}function du(t){return(t=1-t*t*t)*t*t}function pu(t,e,n){const r=t[e];let i=n[0],a=n[1]+1;if(!(a>=t.length))for(;e>i&&t[a]-r<=r-t[i];)n[0]=++i,n[1]=a,++a}const gu=.1*Math.PI/180;function mu(t,e,n,r){n=n||25,r=Math.max(n,r||200);const i=e=>[e,t(e)],a=e[0],o=e[1],u=o-a,s=u/r,l=[i(a)],c=[];if(n===r){for(let t=1;t<r;++t)l.push(i(a+t/n*u));return l.push(i(o)),l}c.push(i(o));for(let t=n;--t>0;)c.push(i(a+t/n*u));let f=l[0],h=c[c.length-1];for(;h;){const t=i((f[0]+h[0])/2);t[0]-f[0]>=s&&yu(f,t,h)>gu?c.push(t):(f=h,l.push(h),c.pop()),h=c[c.length-1]}return l}function yu(t,e,n){const r=Math.atan2(n[1]-t[1],n[0]-t[0]),i=Math.atan2(e[1]-t[1],e[0]-t[0]);return Math.abs(r-i)}function vu(t){this._key=t?l(t):Nt,this.reset()}const _u=vu.prototype;function xu(t){co.call(this,null,t),this._adds=[],this._mods=[],this._alen=0,this._mlen=0,this._drop=!0,this._cross=!1,this._dims=[],this._dnames=[],this._measures=[],this._countOnly=!1,this._counts=null,this._prev=null,this._inputs=null,this._outputs=null}_u.reset=function(){this._add=[],this._rem=[],this._ext=null,this._get=null,this._q=null},_u.add=function(t){this._add.push(t)},_u.rem=function(t){this._rem.push(t)},_u.values=function(){if(this._get=null,0===this._rem.length)return this._add;const t=this._add,e=this._rem,n=this._key,r=t.length,i=e.length,a=Array(r-i),o={};let u,s,l;for(u=0;u<i;++u)o[n(e[u])]=1;for(u=0,s=0;u<r;++u)o[n(l=t[u])]?o[n(l)]=0:a[s++]=l;return this._rem=[],this._add=a},_u.distinct=function(t){const e=this.values(),n={};let r,i=e.length,a=0;for(;--i>=0;)r=t(e[i])+"",rt(n,r)||(n[r]=1,++a);return a},_u.extent=function(t){if(this._get!==t||!this._ext){const e=this.values(),n=et(e,t);this._ext=[e[n[0]],e[n[1]]],this._get=t}return this._ext},_u.argmin=function(t){return this.extent(t)[0]||{}},_u.argmax=function(t){return this.extent(t)[1]||{}},_u.min=function(t){const e=this.extent(t)[0];return null!=e?t(e):void 0},_u.max=function(t){const e=this.extent(t)[1];return null!=e?t(e):void 0},_u.quartile=function(t){return this._get===t&&this._q||(this._q=So(this.values(),t),this._get=t),this._q},_u.q1=function(t){return this.quartile(t)[0]},_u.q2=function(t){return this.quartile(t)[1]},_u.q3=function(t){return this.quartile(t)[2]},_u.ci=function(t){return this._get===t&&this._ci||(this._ci=zo(this.values(),1e3,.05,t),this._get=t),this._ci},_u.ci0=function(t){return this.ci(t)[0]},_u.ci1=function(t){return this.ci(t)[1]},xu.Definition={type:"Aggregate",metadata:{generates:!0,changes:!0},params:[{name:"groupby",type:"field",array:!0},{name:"ops",type:"enum",array:!0,values:xo},{name:"fields",type:"field",null:!0,array:!0},{name:"as",type:"string",null:!0,array:!0},{name:"drop",type:"boolean",default:!0},{name:"cross",type:"boolean",default:!1},{name:"key",type:"field"}]},ut(xu,co,{transform(t,e){const n=this,r=e.fork(e.NO_SOURCE|e.NO_FIELDS),i=t.modified();return n.stamp=r.stamp,n.value&&(i||e.modified(n._inputs,!0))?(n._prev=n.value,n.value=i?n.init(t):{},e.visit(e.SOURCE,t=>n.add(t))):(n.value=n.value||n.init(t),e.visit(e.REM,t=>n.rem(t)),e.visit(e.ADD,t=>n.add(t))),r.modifies(n._outputs),n._drop=!1!==t.drop,t.cross&&n._dims.length>1&&(n._drop=!1,n.cross()),e.clean()&&n._drop&&r.clean(!0).runAfter(()=>this.clean()),n.changes(r)},cross(){const t=this,e=t.value,n=t._dnames,r=n.map(()=>({})),i=n.length;function a(t){let e,a,o,u;for(e in t)for(o=t[e].tuple,a=0;a<i;++a)r[a][u=o[n[a]]]=u}a(t._prev),a(e),function a(o,u,s){const l=n[s],c=r[s++];for(const n in c){const r=o?o+"|"+n:n;u[l]=c[n],s<i?a(r,u,s):e[r]||t.cell(r,u)}}("",{},0)},init(t){const e=this._inputs=[],i=this._outputs=[],a={};function o(t){const n=I(r(t)),i=n.length;let o,u=0;for(;u<i;++u)a[o=n[u]]||(a[o]=1,e.push(o))}this._dims=I(t.groupby),this._dnames=this._dims.map(t=>{var e=n(t);return o(t),i.push(e),e}),this.cellkey=t.key?t.key:go(this._dims),this._countOnly=!0,this._counts=[],this._measures=[];const s=t.fields||[null],l=t.ops||["count"],c=t.as||[],f=s.length,h={};let d,p,g,m,y,v;for(f!==l.length&&u("Unmatched number of fields and aggregate ops."),v=0;v<f;++v)d=s[v],p=l[v],null==d&&"count"!==p&&u("Null aggregate field specified."),m=n(d),y=mo(p,m,c[v]),i.push(y),"count"!==p?(g=h[m],g||(o(d),g=h[m]=[],g.field=d,this._measures.push(g)),"count"!==p&&(this._countOnly=!1),g.push(bo(p,y))):this._counts.push(y);return this._measures=this._measures.map(t=>Do(t,t.field)),{}},cellkey:go(),cell(t,e){let n=this.value[t];return n?0===n.num&&this._drop&&n.stamp<this.stamp?(n.stamp=this.stamp,this._adds[this._alen++]=n):n.stamp<this.stamp&&(n.stamp=this.stamp,this._mods[this._mlen++]=n):(n=this.value[t]=this.newcell(t,e),this._adds[this._alen++]=n),n},newcell(t,e){const n={key:t,num:0,agg:null,tuple:this.newtuple(e,this._prev&&this._prev[t]),stamp:this.stamp,store:!1};if(!this._countOnly){const t=this._measures,e=t.length;n.agg=Array(e);for(let r=0;r<e;++r)n.agg[r]=new t[r](n)}return n.store&&(n.data=new vu),n},newtuple(t,e){const n=this._dnames,r=this._dims,i=r.length,a={};for(let e=0;e<i;++e)a[n[e]]=r[e](t);return e?Lt(e.tuple,a):Rt(a)},clean(){const t=this.value;for(const e in t)0===t[e].num&&delete t[e]},add(t){const e=this.cellkey(t),n=this.cell(e,t);if(n.num+=1,this._countOnly)return;n.store&&n.data.add(t);const r=n.agg;for(let e=0,n=r.length;e<n;++e)r[e].add(r[e].get(t),t)},rem(t){const e=this.cellkey(t),n=this.cell(e,t);if(n.num-=1,this._countOnly)return;n.store&&n.data.rem(t);const r=n.agg;for(let e=0,n=r.length;e<n;++e)r[e].rem(r[e].get(t),t)},celltuple(t){const e=t.tuple,n=this._counts;t.store&&t.data.values();for(let r=0,i=n.length;r<i;++r)e[n[r]]=t.num;if(!this._countOnly){const n=t.agg;for(let t=0,r=n.length;t<r;++t)n[t].set(e)}return e},changes(t){const e=this._adds,n=this._mods,r=this._prev,i=this._drop,a=t.add,o=t.rem,u=t.mod;let s,l,c,f;if(r)for(l in r)s=r[l],i&&!s.num||o.push(s.tuple);for(c=0,f=this._alen;c<f;++c)a.push(this.celltuple(e[c])),e[c]=null;for(c=0,f=this._mlen;c<f;++c)s=n[c],(0===s.num&&i?o:u).push(this.celltuple(s)),n[c]=null;return this._alen=this._mlen=0,this._prev=null,t}});function bu(t){co.call(this,null,t)}function wu(t,e,n){const r=t;let i=e||[],a=n||[],o={},u=0;return{add:t=>a.push(t),remove:t=>o[r(t)]=++u,size:()=>i.length,data:(t,e)=>(u&&(i=i.filter(t=>!o[r(t)]),o={},u=0),e&&t&&i.sort(t),a.length&&(i=t?yt(t,i,a.sort(t)):i.concat(a),a=[]),i)}}function ku(t){co.call(this,[],t)}function Au(t){Vt.call(this,null,Mu,t)}function Mu(t){return this.value&&!t.modified()?this.value:Y(t.fields,t.orders)}function Eu(t){co.call(this,null,t)}function Du(t){co.call(this,null,t)}bu.Definition={type:"Bin",metadata:{modifies:!0},params:[{name:"field",type:"field",required:!0},{name:"interval",type:"boolean",default:!0},{name:"anchor",type:"number"},{name:"maxbins",type:"number",default:20},{name:"base",type:"number",default:10},{name:"divide",type:"number",array:!0,default:[5,2]},{name:"extent",type:"number",array:!0,length:2,required:!0},{name:"span",type:"number"},{name:"step",type:"number"},{name:"steps",type:"number",array:!0},{name:"minstep",type:"number",default:0},{name:"nice",type:"boolean",default:!0},{name:"name",type:"string"},{name:"as",type:"string",array:!0,length:2,default:["bin0","bin1"]}]},ut(bu,co,{transform(t,e){const n=!1!==t.interval,i=this._bins(t),a=i.start,o=i.step,u=t.as||["bin0","bin1"],s=u[0],l=u[1];let c;return c=t.modified()?(e=e.reflow(!0)).SOURCE:e.modified(r(t.field))?e.ADD_MOD:e.ADD,e.visit(c,n?t=>{const e=i(t);t[s]=e,t[l]=null==e?null:a+o*(1+(e-a)/o)}:t=>t[s]=i(t)),e.modifies(n?u:s)},_bins(t){if(this.value&&!t.modified())return this.value;const i=t.field,a=To(t),o=a.step;let u,s,l=a.start,c=l+Math.ceil((a.stop-l)/o)*o;null!=(u=t.anchor)&&(s=u-(l+o*Math.floor((u-l)/o)),l+=s,c+=s);const f=function(t){let e=M(i(t));return null==e?null:e<l?-1/0:e>c?1/0:(e=Math.max(l,Math.min(e,c-o)),l+o*Math.floor(1e-14+(e-l)/o))};return f.start=l,f.stop=a.stop,f.step=o,this.value=e(f,r(i),t.name||"bin_"+n(i))}}),ku.Definition={type:"Collect",metadata:{source:!0},params:[{name:"sort",type:"compare"}]},ut(ku,co,{transform(t,e){const n=e.fork(e.ALL),r=wu(Nt,this.value,n.materialize(n.ADD).add),i=t.sort,a=e.changed()||i&&(t.modified("sort")||e.modified(i.fields));return n.visit(n.REM,r.remove),this.modified(a),this.value=n.source=r.data(Ut(i),a),e.source&&e.source.root&&(this.value.root=e.source.root),n}}),ut(Au,Vt),Eu.Definition={type:"CountPattern",metadata:{generates:!0,changes:!0},params:[{name:"field",type:"field",required:!0},{name:"case",type:"enum",values:["upper","lower","mixed"],default:"mixed"},{name:"pattern",type:"string",default:'[\\w"]+'},{name:"stopwords",type:"string",default:""},{name:"as",type:"string",array:!0,length:2,default:["text","count"]}]},ut(Eu,co,{transform(t,e){const n=e=>n=>{for(var r,i=function(t,e,n){switch(e){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase()}return t.match(n)}(u(n),t.case,a)||[],s=0,l=i.length;s<l;++s)o.test(r=i[s])||e(r)},r=this._parameterCheck(t,e),i=this._counts,a=this._match,o=this._stop,u=t.field,s=t.as||["text","count"],l=n(t=>i[t]=1+(i[t]||0)),c=n(t=>i[t]-=1);return r?e.visit(e.SOURCE,l):(e.visit(e.ADD,l),e.visit(e.REM,c)),this._finish(e,s)},_parameterCheck(t,e){let n=!1;return!t.modified("stopwords")&&this._stop||(this._stop=new RegExp("^"+(t.stopwords||"")+"$","i"),n=!0),!t.modified("pattern")&&this._match||(this._match=new RegExp(t.pattern||"[\\w']+","g"),n=!0),(t.modified("field")||e.modified(t.field.fields))&&(n=!0),n&&(this._counts={}),n},_finish(t,e){const n=this._counts,r=this._tuples||(this._tuples={}),i=e[0],a=e[1],o=t.fork(t.NO_SOURCE|t.NO_FIELDS);let u,s,l;for(u in n)s=r[u],l=n[u]||0,!s&&l?(r[u]=s=Rt({}),s[i]=u,s[a]=l,o.add.push(s)):0===l?(s&&o.rem.push(s),n[u]=null,r[u]=null):s[a]!==l&&(s[a]=l,o.mod.push(s));return o.modifies(e)}}),Du.Definition={type:"Cross",metadata:{generates:!0},params:[{name:"filter",type:"expr"},{name:"as",type:"string",array:!0,length:2,default:["a","b"]}]},ut(Du,co,{transform(t,e){const n=e.fork(e.NO_SOURCE),r=t.as||["a","b"],i=r[0],a=r[1],o=!this.value||e.changed(e.ADD_REM)||t.modified("as")||t.modified("filter");let u=this.value;return o?(u&&(n.rem=u),u=e.materialize(e.SOURCE).source,n.add=this.value=function(t,e,n,r){for(var i,a,o=[],u={},s=t.length,l=0;l<s;++l)for(u[e]=a=t[l],i=0;i<s;++i)u[n]=t[i],r(u)&&(o.push(Rt(u)),(u={})[e]=a);return o}(u,i,a,t.filter||p)):n.mod=u,n.source=this.value,n.modifies(r)}});const Cu={kde:Io,mixture:Xo,normal:jo,lognormal:Go,uniform:tu},Fu="function";function Su(t){co.call(this,null,t)}var Bu=[{key:{function:"normal"},params:[{name:"mean",type:"number",default:0},{name:"stdev",type:"number",default:1}]},{key:{function:"lognormal"},params:[{name:"mean",type:"number",default:0},{name:"stdev",type:"number",default:1}]},{key:{function:"uniform"},params:[{name:"min",type:"number",default:0},{name:"max",type:"number",default:1}]},{key:{function:"kde"},params:[{name:"field",type:"field",required:!0},{name:"from",type:"data"},{name:"bandwidth",type:"number",default:0}]}],Tu={key:{function:"mixture"},params:[{name:"distributions",type:"param",array:!0,params:Bu},{name:"weights",type:"number",array:!0}]};function zu(t,e){return t?t.map((t,r)=>e[r]||n(t)):null}function Nu(t,e,n){const r=[],i=t=>t(s);let a,o,u,s,l,c;if(null==e)r.push(t.map(n));else for(a={},o=0,u=t.length;o<u;++o)s=t[o],l=e.map(i),c=a[l],c||(a[l]=c=[],c.dims=l,r.push(c)),c.push(n(s));return r}Su.Definition={type:"Density",metadata:{generates:!0},params:[{name:"extent",type:"number",array:!0,length:2},{name:"steps",type:"number"},{name:"minsteps",type:"number",default:25},{name:"maxsteps",type:"number",default:200},{name:"method",type:"string",default:"pdf",values:["pdf","cdf"]},{name:"distribution",type:"param",params:Bu.concat(Tu)},{name:"as",type:"string",array:!0,default:["value","density"]}]},ut(Su,co,{transform(t,e){const n=e.fork(e.NO_SOURCE|e.NO_FIELDS);if(!this.value||e.changed()||t.modified()){const r=function t(e,n){const r=e.function;rt(Cu,r)||u("Unknown distribution function: "+r);const i=Cu[r]();for(const r in e)"field"===r?i.data((e.from||n()).map(e[r])):"distributions"===r?i[r](e[r].map(e=>t(e,n))):typeof i[r]===Fu&&i[r](e[r]);return i}(t.distribution,function(t){return()=>t.materialize(t.SOURCE).source}(e)),i=t.steps||t.minsteps||25,a=t.steps||t.maxsteps||200;let o=t.method||"pdf";"pdf"!==o&&"cdf"!==o&&u("Invalid density method: "+o),t.extent||r.data||u("Missing density extent parameter."),o=r[o];const s=t.as||["value","density"],l=mu(o,t.extent||tt(r.data()),i,a).map(t=>{const e={};return e[s[0]]=t[0],e[s[1]]=t[1],Rt(e)});this.value&&(n.rem=this.value),this.value=n.add=n.source=l}return n}});function Ou(t){co.call(this,null,t)}Ou.Definition={type:"DotBin",metadata:{modifies:!0},params:[{name:"field",type:"field",required:!0},{name:"groupby",type:"field",array:!0},{name:"step",type:"number"},{name:"smooth",type:"boolean",default:!1},{name:"as",type:"string",default:"bin"}]};function Ru(t){Vt.call(this,null,$u,t),this.modified(!0)}function $u(t){const i=t.expr;return this.value&&!t.modified("expr")?this.value:e(e=>i(e,t),r(i),n(i))}function qu(t){co.call(this,[void 0,void 0],t)}function Lu(t,e){Vt.call(this,t),this.parent=e,this.count=0}function Uu(t){co.call(this,{},t),this._keys=at();const e=this._targets=[];e.active=0,e.forEach=t=>{for(let n=0,r=e.active;n<r;++n)t(e[n],n,e)}}function Pu(t){Vt.call(this,null,ju,t)}function ju(t){return this.value&&!t.modified()?this.value:v(t.name)?I(t.name).map(t=>l(t)):l(t.name,t.as)}function Iu(t){co.call(this,at(),t)}function Wu(t){co.call(this,[],t)}function Hu(t){co.call(this,[],t)}function Yu(t){co.call(this,null,t)}function Vu(t){co.call(this,[],t)}ut(Ou,co,{transform(t,e){if(this.value&&!t.modified()&&!e.changed())return e;const n=e.materialize(e.SOURCE).source,r=Nu(e.source,t.groupby,f),i=t.smooth||!1,a=t.field,o=t.step||((t,e)=>xt(tt(t,e))/30)(n,a),u=Ut((t,e)=>a(t)-a(e)),s=t.as||"bin",l=r.length;let c,h=1/0,d=-1/0,p=0;for(;p<l;++p){const t=r[p].sort(u);c=-1;for(const e of No(t,o,i,a))e<h&&(h=e),e>d&&(d=e),t[++c][s]=e}return this.value={start:h,stop:d,step:o},e.reflow(!0).modifies(s)}}),ut(Ru,Vt),qu.Definition={type:"Extent",metadata:{},params:[{name:"field",type:"field",required:!0}]},ut(qu,co,{transform(t,e){const r=this.value,i=t.field,a=e.changed()||e.modified(i.fields)||t.modified("field");let o=r[0],u=r[1];if((a||null==o)&&(o=1/0,u=-1/0),e.visit(a?e.SOURCE:e.ADD,t=>{const e=M(i(t));null!=e&&(e<o&&(o=e),e>u&&(u=e))}),!Number.isFinite(o)||!Number.isFinite(u)){let t=n(i);t&&(t=` for field "${t}"`),o=u=void 0}this.value=[o,u]}}),ut(Lu,Vt,{connect(t){return this.detachSubflow=t.detachSubflow,this.targets().add(t),t.source=this},add(t){this.count+=1,this.value.add.push(t)},rem(t){this.count-=1,this.value.rem.push(t)},mod(t){this.value.mod.push(t)},init(t){this.value.init(t,t.NO_SOURCE)},evaluate(){return this.value}}),ut(Uu,co,{activate(t){this._targets[this._targets.active++]=t},subflow(t,e,n,r){const i=this.value;let a,o,u=rt(i,t)&&i[t];return u?u.value.stamp<n.stamp&&(u.init(n),this.activate(u)):(o=r||(o=this._group[t])&&o.tuple,a=n.dataflow,u=new Lu(n.fork(n.NO_SOURCE),this),a.add(u).connect(e(a,t,o)),i[t]=u,this.activate(u)),u},clean(){const t=this.value;for(const e in t)if(0===t[e].count){const n=t[e].detachSubflow;n&&n(),delete t[e]}},initTargets(){const t=this._targets,e=t.length;for(let n=0;n<e&&null!=t[n];++n)t[n]=null;t.active=0},transform(t,e){const n=e.dataflow,r=t.key,i=t.subflow,a=this._keys,o=t.modified("key"),u=t=>this.subflow(t,i,e);return this._group=t.group||{},this.initTargets(),e.visit(e.REM,t=>{const e=Nt(t),n=a.get(e);void 0!==n&&(a.delete(e),u(n).rem(t))}),e.visit(e.ADD,t=>{const e=r(t);a.set(Nt(t),e),u(e).add(t)}),o||e.modified(r.fields)?e.visit(e.MOD,t=>{const e=Nt(t),n=a.get(e),i=r(t);n===i?u(i).mod(t):(a.set(e,i),u(n).rem(t),u(i).add(t))}):e.changed(e.MOD)&&e.visit(e.MOD,t=>{u(a.get(Nt(t))).mod(t)}),o&&e.visit(e.REFLOW,t=>{const e=Nt(t),n=a.get(e),i=r(t);n!==i&&(a.set(e,i),u(n).rem(t),u(i).add(t))}),e.clean()?n.runAfter(()=>{this.clean(),a.clean()}):a.empty>n.cleanThreshold&&n.runAfter(a.clean),e}}),ut(Pu,Vt),Iu.Definition={type:"Filter",metadata:{changes:!0},params:[{name:"expr",type:"expr",required:!0}]},ut(Iu,co,{transform(t,e){const n=e.dataflow,r=this.value,i=e.fork(),a=i.add,o=i.rem,u=i.mod,s=t.expr;let l=!0;function c(e){const n=Nt(e),i=s(e,t),c=r.get(n);i&&c?(r.delete(n),a.push(e)):i||c?l&&i&&!c&&u.push(e):(r.set(n,1),o.push(e))}return e.visit(e.REM,t=>{var e=Nt(t);r.has(e)?r.delete(e):o.push(t)}),e.visit(e.ADD,e=>{s(e,t)?a.push(e):r.set(Nt(e),1)}),e.visit(e.MOD,c),t.modified()&&(l=!1,e.visit(e.REFLOW,c)),r.empty>n.cleanThreshold&&n.runAfter(r.clean),i}}),Wu.Definition={type:"Flatten",metadata:{generates:!0},params:[{name:"fields",type:"field",array:!0,required:!0},{name:"index",type:"string"},{name:"as",type:"string",array:!0}]},ut(Wu,co,{transform(t,e){const n=e.fork(e.NO_SOURCE),r=t.fields,i=zu(r,t.as||[]),a=t.index||null,o=i.length;return n.rem=this.value,e.visit(e.SOURCE,t=>{const e=r.map(e=>e(t)),u=e.reduce((t,e)=>Math.max(t,e.length),0);let s,l,c,f=0;for(;f<u;++f){for(l=$t(t),s=0;s<o;++s)l[i[s]]=null==(c=e[s][f])?null:c;a&&(l[a]=f),n.add.push(l)}}),this.value=n.source=n.add,a&&n.modifies(a),n.modifies(i)}}),Hu.Definition={type:"Fold",metadata:{generates:!0},params:[{name:"fields",type:"field",array:!0,required:!0},{name:"as",type:"string",array:!0,length:2,default:["key","value"]}]},ut(Hu,co,{transform(t,e){const r=e.fork(e.NO_SOURCE),i=t.fields,a=i.map(n),o=t.as||["key","value"],u=o[0],s=o[1],l=i.length;return r.rem=this.value,e.visit(e.SOURCE,t=>{for(let e,n=0;n<l;++n)e=$t(t),e[u]=a[n],e[s]=i[n](t),r.add.push(e)}),this.value=r.source=r.add,r.modifies(o)}}),Yu.Definition={type:"Formula",metadata:{modifies:!0},params:[{name:"expr",type:"expr",required:!0},{name:"as",type:"string",required:!0},{name:"initonly",type:"boolean"}]},ut(Yu,co,{transform(t,e){const n=t.expr,r=t.as,i=t.modified(),a=t.initonly?e.ADD:i?e.SOURCE:e.modified(n.fields)||e.modified(r)?e.ADD_MOD:e.ADD;return i&&(e=e.materialize().reflow(!0)),t.initonly||e.modifies(r),e.visit(a,e=>e[r]=n(e,t))}}),ut(Vu,co,{transform(t,e){const n=e.fork(e.ALL),r=t.generator;let i,a,o,u=this.value,s=t.size-u.length;if(s>0){for(i=[];--s>=0;)i.push(o=Rt(r(t))),u.push(o);n.add=n.add.length?n.materialize(n.ADD).add.concat(i):i}else a=u.slice(0,-s),n.rem=n.rem.length?n.materialize(n.REM).rem.concat(a):a,u=u.slice(-s);return n.source=this.value=u,n}});const Gu={value:"value",median:nn,mean:function(t,e){let n=0,r=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(++n,r+=e);else{let i=-1;for(let a of t)null!=(a=e(a,++i,t))&&(a=+a)>=a&&(++n,r+=a)}if(n)return r/n},min:Ke,max:Qe},Xu=[];function Ju(t){co.call(this,[],t)}function Zu(t){xu.call(this,t)}function Qu(t){co.call(this,null,t)}function Ku(t){Vt.call(this,null,ts,t)}function ts(t){return this.value&&!t.modified()?this.value:pt(t.fields,t.flat)}function es(t){co.call(this,[],t),this._pending=null}function ns(t,e,n){n.forEach(Rt);const r=e.fork(e.NO_FIELDS&e.NO_SOURCE);return r.rem=t.value,t.value=r.source=r.add=n,t._pending=null,r.rem.length&&r.clean(!0),r}function rs(t){co.call(this,{},t)}function is(t){Vt.call(this,null,as,t)}function as(t){if(this.value&&!t.modified())return this.value;const e=t.extents,n=e.length;let r,i,a=1/0,o=-1/0;for(r=0;r<n;++r)i=e[r],i[0]<a&&(a=i[0]),i[1]>o&&(o=i[1]);return[a,o]}function os(t){Vt.call(this,null,us,t)}function us(t){return this.value&&!t.modified()?this.value:t.values.reduce((t,e)=>t.concat(e),[])}function ss(t){co.call(this,null,t)}function ls(t){xu.call(this,t)}function cs(t){Uu.call(this,t)}function fs(t){co.call(this,null,t)}function hs(t){co.call(this,null,t)}function ds(t){co.call(this,null,t)}Ju.Definition={type:"Impute",metadata:{changes:!0},params:[{name:"field",type:"field",required:!0},{name:"key",type:"field",required:!0},{name:"keyvals",array:!0},{name:"groupby",type:"field",array:!0},{name:"method",type:"enum",default:"value",values:["value","mean","median","max","min"]},{name:"value",default:0}]},ut(Ju,co,{transform(t,e){var r,i,a,o,s,l,c,f,h,d,p=e.fork(e.ALL),g=function(t){var e,n=t.method||Gu.value;if(null!=Gu[n])return n===Gu.value?(e=void 0!==t.value?t.value:0,()=>e):Gu[n];u("Unrecognized imputation method: "+n)}(t),m=function(t){var e=t.field;return t=>t?e(t):NaN}(t),y=n(t.field),v=n(t.key),_=(t.groupby||[]).map(n),x=function(t,e,n,r){var i,a,o,u,s,l,c,f,h=t=>t(f),d=[],p=r?r.slice():[],g={},m={};for(p.forEach((t,e)=>g[t]=e+1),u=0,c=t.length;u<c;++u)l=n(f=t[u]),s=g[l]||(g[l]=p.push(l)),(o=m[a=(i=e?e.map(h):Xu)+""])||(o=m[a]=[],d.push(o),o.values=i),o[s-1]=f;return d.domain=p,d}(e.source,t.groupby,t.key,t.keyvals),b=[],w=this.value,k=x.domain.length;for(s=0,f=x.length;s<f;++s)for(a=(r=x[s]).values,i=NaN,c=0;c<k;++c)if(null==r[c]){for(o=x.domain[c],d={_impute:!0},l=0,h=a.length;l<h;++l)d[_[l]]=a[l];d[v]=o,d[y]=Number.isNaN(i)?i=g(r,m):i,b.push(Rt(d))}return b.length&&(p.add=p.materialize(p.ADD).add.concat(b)),w.length&&(p.rem=p.materialize(p.REM).rem.concat(w)),this.value=b,p}}),Zu.Definition={type:"JoinAggregate",metadata:{modifies:!0},params:[{name:"groupby",type:"field",array:!0},{name:"fields",type:"field",null:!0,array:!0},{name:"ops",type:"enum",array:!0,values:xo},{name:"as",type:"string",null:!0,array:!0},{name:"key",type:"field"}]},ut(Zu,xu,{transform(t,e){const n=this,r=t.modified();let i;return n.value&&(r||e.modified(n._inputs,!0))?(i=n.value=r?n.init(t):{},e.visit(e.SOURCE,t=>n.add(t))):(i=n.value=n.value||this.init(t),e.visit(e.REM,t=>n.rem(t)),e.visit(e.ADD,t=>n.add(t))),n.changes(),e.visit(e.SOURCE,t=>{K(t,i[n.cellkey(t)].tuple)}),e.reflow(r).modifies(this._outputs)},changes(){const t=this._adds,e=this._mods;let n,r;for(n=0,r=this._alen;n<r;++n)this.celltuple(t[n]),t[n]=null;for(n=0,r=this._mlen;n<r;++n)this.celltuple(e[n]),e[n]=null;this._alen=this._mlen=0}}),Qu.Definition={type:"KDE",metadata:{generates:!0},params:[{name:"groupby",type:"field",array:!0},{name:"field",type:"field",required:!0},{name:"cumulative",type:"boolean",default:!1},{name:"counts",type:"boolean",default:!1},{name:"bandwidth",type:"number",default:0},{name:"extent",type:"number",array:!0,length:2},{name:"resolve",type:"enum",values:["shared","independent"],default:"independent"},{name:"steps",type:"number"},{name:"minsteps",type:"number",default:25},{name:"maxsteps",type:"number",default:200},{name:"as",type:"string",array:!0,default:["value","density"]}]},ut(Qu,co,{transform(t,e){const r=e.fork(e.NO_SOURCE|e.NO_FIELDS);if(!this.value||e.changed()||t.modified()){const i=e.materialize(e.SOURCE).source,a=Nu(i,t.groupby,t.field),o=(t.groupby||[]).map(n),s=t.bandwidth,l=t.cumulative?"cdf":"pdf",c=t.as||["value","density"],f=[];let h=t.extent,d=t.steps||t.minsteps||25,p=t.steps||t.maxsteps||200;"pdf"!==l&&"cdf"!==l&&u("Invalid density method: "+l),"shared"===t.resolve&&(h||(h=tt(i,t.field)),d=p=t.steps||p),a.forEach(e=>{const n=Io(e,s)[l],r=t.counts?e.length:1;mu(n,h||tt(e),d,p).forEach(t=>{const n={};for(let t=0;t<o.length;++t)n[o[t]]=e.dims[t];n[c[0]]=t[0],n[c[1]]=t[1]*r,f.push(Rt(n))})}),this.value&&(r.rem=this.value),this.value=r.add=r.source=f}return r}}),ut(Ku,Vt),ut(es,co,{transform(t,e){const n=e.dataflow;if(this._pending)return ns(this,e,this._pending);if(function(t){return t.modified("async")&&!(t.modified("values")||t.modified("url")||t.modified("format"))}(t))return e.StopPropagation;if(t.values)return ns(this,e,n.parse(t.values,t.format));if(t.async){return{async:n.request(t.url,t.format).then(t=>(this._pending=I(t.data),t=>t.touch(this)))}}return n.request(t.url,t.format).then(t=>ns(this,e,I(t.data)))}}),rs.Definition={type:"Lookup",metadata:{modifies:!0},params:[{name:"index",type:"index",params:[{name:"from",type:"data",required:!0},{name:"key",type:"field",required:!0}]},{name:"values",type:"field",array:!0},{name:"fields",type:"field",array:!0,required:!0},{name:"as",type:"string",array:!0},{name:"default",default:null}]},ut(rs,co,{transform(t,e){const r=t.fields,i=t.index,a=t.values,o=null==t.default?null:t.default,s=t.modified(),l=r.length;let c,f,h,d=s?e.SOURCE:e.ADD,p=e,g=t.as;return a?(f=a.length,l>1&&!g&&u('Multi-field lookup requires explicit "as" parameter.'),g&&g.length!==l*f&&u('The "as" parameter has too few output field names.'),g=g||a.map(n),c=function(t){for(var e,n,u=0,s=0;u<l;++u)if(null==(n=i.get(r[u](t))))for(e=0;e<f;++e,++s)t[g[s]]=o;else for(e=0;e<f;++e,++s)t[g[s]]=a[e](n)}):(g||u("Missing output field names."),c=function(t){for(var e,n=0;n<l;++n)e=i.get(r[n](t)),t[g[n]]=null==e?o:e}),s?p=e.reflow(!0):(h=r.some(t=>e.modified(t.fields)),d|=h?e.MOD:0),e.visit(d,c),p.modifies(g)}}),ut(is,Vt),ut(os,Vt),ut(ss,co,{transform(t,e){return this.modified(t.modified()),this.value=t,e.fork(e.NO_SOURCE|e.NO_FIELDS)}}),ls.Definition={type:"Pivot",metadata:{generates:!0,changes:!0},params:[{name:"groupby",type:"field",array:!0},{name:"field",type:"field",required:!0},{name:"value",type:"field",required:!0},{name:"op",type:"enum",values:xo,default:"sum"},{name:"limit",type:"number",default:0},{name:"key",type:"field"}]},ut(ls,xu,{_transform:xu.prototype.transform,transform(t,n){return this._transform(function(t,n){const i=t.field,a=t.value,o=("count"===t.op?"__count__":t.op)||"sum",u=r(i).concat(r(a)),s=function(t,e,n){const r={},i=[];return n.visit(n.SOURCE,e=>{const n=t(e);r[n]||(r[n]=1,i.push(n))}),i.sort(V),e?i.slice(0,e):i}(i,t.limit||0,n);n.changed()&&t.set("__pivot__",null,null,!0);return{key:t.key,groupby:t.groupby,ops:s.map(()=>o),fields:s.map(t=>function(t,n,r,i){return e(e=>n(e)===t?r(e):NaN,i,t+"")}(t,i,a,u)),as:s.map(t=>t+""),modified:t.modified.bind(t)}}(t,n),n)}}),ut(cs,Uu,{transform(t,e){const n=t.subflow,i=t.field,a=t=>this.subflow(Nt(t),n,e,t);return(t.modified("field")||i&&e.modified(r(i)))&&u("PreFacet does not support field modification."),this.initTargets(),i?(e.visit(e.MOD,t=>{const e=a(t);i(t).forEach(t=>e.mod(t))}),e.visit(e.ADD,t=>{const e=a(t);i(t).forEach(t=>e.add(Rt(t)))}),e.visit(e.REM,t=>{const e=a(t);i(t).forEach(t=>e.rem(t))})):(e.visit(e.MOD,t=>a(t).mod(t)),e.visit(e.ADD,t=>a(t).add(t)),e.visit(e.REM,t=>a(t).rem(t))),e.clean()&&e.runAfter(()=>this.clean()),e}}),fs.Definition={type:"Project",metadata:{generates:!0,changes:!0},params:[{name:"fields",type:"field",array:!0},{name:"as",type:"string",null:!0,array:!0}]},ut(fs,co,{transform(t,e){const n=e.fork(e.NO_SOURCE),r=t.fields,i=zu(t.fields,t.as||[]),a=r?(t,e)=>function(t,e,n,r){for(let i=0,a=n.length;i<a;++i)e[r[i]]=n[i](t);return e}(t,e,r,i):qt;let o;return this.value?o=this.value:(e=e.addAll(),o=this.value={}),e.visit(e.REM,t=>{const e=Nt(t);n.rem.push(o[e]),o[e]=null}),e.visit(e.ADD,t=>{const e=a(t,Rt({}));o[Nt(t)]=e,n.add.push(e)}),e.visit(e.MOD,t=>{n.mod.push(a(t,o[Nt(t)]))}),n}}),ut(hs,co,{transform(t,e){return this.value=t.value,t.modified("value")?e.fork(e.NO_SOURCE|e.NO_FIELDS):e.StopPropagation}}),ds.Definition={type:"Quantile",metadata:{generates:!0,changes:!0},params:[{name:"groupby",type:"field",array:!0},{name:"field",type:"field",required:!0},{name:"probs",type:"number",array:!0},{name:"step",type:"number",default:.01},{name:"as",type:"string",array:!0,default:["prob","value"]}]};function ps(t){co.call(this,null,t)}function gs(t){co.call(this,[],t),this.count=0}function ms(t){co.call(this,null,t)}function ys(t){co.call(this,null,t),this.modified(!0)}function vs(t){co.call(this,null,t)}ut(ds,co,{transform(t,e){const r=e.fork(e.NO_SOURCE|e.NO_FIELDS),i=t.as||["prob","value"];if(this.value&&!t.modified()&&!e.changed())return r.source=this.value,r;const a=Nu(e.materialize(e.SOURCE).source,t.groupby,t.field),o=(t.groupby||[]).map(n),u=[],s=t.step||.01,l=t.probs||He(s/2,1-1e-14,s),c=l.length;return a.forEach(t=>{const e=Fo(t,l);for(let n=0;n<c;++n){const r={};for(let e=0;e<o.length;++e)r[o[e]]=t.dims[e];r[i[0]]=l[n],r[i[1]]=e[n],u.push(Rt(r))}}),this.value&&(r.rem=this.value),this.value=r.add=r.source=u,r}}),ut(ps,co,{transform(t,e){let n,r;return this.value?r=this.value:(n=e=e.addAll(),r=this.value={}),t.derive&&(n=e.fork(e.NO_SOURCE),e.visit(e.REM,t=>{const e=Nt(t);n.rem.push(r[e]),r[e]=null}),e.visit(e.ADD,t=>{const e=$t(t);r[Nt(t)]=e,n.add.push(e)}),e.visit(e.MOD,t=>{const e=r[Nt(t)];for(const r in t)e[r]=t[r],n.modifies(r);n.mod.push(e)})),n}}),gs.Definition={type:"Sample",metadata:{},params:[{name:"size",type:"number",default:1e3}]},ut(gs,co,{transform(e,n){const r=n.fork(n.NO_SOURCE),i=e.modified("size"),a=e.size,o=this.value.reduce((t,e)=>(t[Nt(e)]=1,t),{});let u=this.value,s=this.count,l=0;function c(e){let n,i;u.length<a?u.push(e):(i=~~((s+1)*t.random()),i<u.length&&i>=l&&(n=u[i],o[Nt(n)]&&r.rem.push(n),u[i]=e)),++s}if(n.rem.length&&(n.visit(n.REM,t=>{const e=Nt(t);o[e]&&(o[e]=-1,r.rem.push(t)),--s}),u=u.filter(t=>-1!==o[Nt(t)])),(n.rem.length||i)&&u.length<a&&n.source&&(l=s=u.length,n.visit(n.SOURCE,t=>{o[Nt(t)]||c(t)}),l=-1),i&&u.length>a){const t=u.length-a;for(let e=0;e<t;++e)o[Nt(u[e])]=-1,r.rem.push(u[e]);u=u.slice(t)}return n.mod.length&&n.visit(n.MOD,t=>{o[Nt(t)]&&r.mod.push(t)}),n.add.length&&n.visit(n.ADD,c),(n.add.length||l<0)&&(r.add=u.filter(t=>!o[Nt(t)])),this.count=s,this.value=r.source=u,r}}),ms.Definition={type:"Sequence",metadata:{generates:!0,changes:!0},params:[{name:"start",type:"number",required:!0},{name:"stop",type:"number",required:!0},{name:"step",type:"number",default:1},{name:"as",type:"string",default:"data"}]},ut(ms,co,{transform(t,e){if(this.value&&!t.modified())return;const n=e.materialize().fork(e.MOD),r=t.as||"data";return n.rem=this.value?e.rem.concat(this.value):e.rem,this.value=He(t.start,t.stop,t.step||1).map(t=>{const e={};return e[r]=t,Rt(e)}),n.add=e.add.concat(this.value),n}}),ut(ys,co,{transform(t,e){return this.value=e.source,e.changed()?e.fork(e.NO_SOURCE|e.NO_FIELDS):e.StopPropagation}});const _s=["unit0","unit1"];function xs(t){co.call(this,at(),t)}function bs(t){co.call(this,null,t)}vs.Definition={type:"TimeUnit",metadata:{modifies:!0},params:[{name:"field",type:"field",required:!0},{name:"interval",type:"boolean",default:!0},{name:"units",type:"enum",values:Un,array:!0},{name:"step",type:"number",default:1},{name:"maxbins",type:"number",default:40},{name:"extent",type:"date",array:!0},{name:"timezone",type:"enum",default:"local",values:["local","utc"]},{name:"as",type:"string",array:!0,length:2,default:_s}]},ut(vs,co,{transform(t,e){const n=t.field,i=!1!==t.interval,a="utc"===t.timezone,o=this._floor(t,e),u=(a?Wr:Ir)(o.unit).offset,s=t.as||_s,l=s[0],c=s[1],f=o.step;let h=o.start||1/0,d=o.stop||-1/0,p=e.ADD;return(t.modified()||e.modified(r(n)))&&(p=(e=e.reflow(!0)).SOURCE,h=1/0,d=-1/0),e.visit(p,t=>{const e=n(t);let r,a;null==e?(t[l]=null,i&&(t[c]=null)):(t[l]=r=a=o(e),i&&(t[c]=a=u(r,f)),r<h&&(h=r),a>d&&(d=a))}),o.start=h,o.stop=d,e.modifies(i?s:l)},_floor(t,e){const n="utc"===t.timezone,{units:r,step:i}=t.units?{units:t.units,step:t.step||1}:fi({extent:t.extent||tt(e.materialize(e.SOURCE).source,t.field),maxbins:t.maxbins}),a=jn(r),o=this.value||{},u=(n?Ur:$r)(a,i);return u.unit=A(a),u.units=a,u.step=i,u.start=o.start,u.stop=o.stop,this.value=u}}),ut(xs,co,{transform(t,e){const n=e.dataflow,r=t.field,i=this.value,a=t=>i.set(r(t),t);let o=!0;return t.modified("field")||e.modified(r.fields)?(i.clear(),e.visit(e.SOURCE,a)):e.changed()?(e.visit(e.REM,t=>i.delete(r(t))),e.visit(e.ADD,a)):o=!1,this.modified(o),i.empty>n.cleanThreshold&&n.runAfter(i.clean),e.fork()}}),ut(bs,co,{transform(t,e){(!this.value||t.modified("field")||t.modified("sort")||e.changed()||t.sort&&e.modified(t.sort.fields))&&(this.value=(t.sort?e.source.slice().sort(Ut(t.sort)):e.source).map(t.field))}});const ws={row_number:function(){return{next:t=>t.index+1}},rank:function(){let t;return{init:()=>t=1,next:e=>{const n=e.index,r=e.data;return n&&e.compare(r[n-1],r[n])?t=n+1:t}}},dense_rank:function(){let t;return{init:()=>t=1,next:e=>{const n=e.index,r=e.data;return n&&e.compare(r[n-1],r[n])?++t:t}}},percent_rank:function(){const t=ws.rank(),e=t.next;return{init:t.init,next:t=>(e(t)-1)/(t.data.length-1)}},cume_dist:function(){let t;return{init:()=>t=0,next:e=>{const n=e.data,r=e.compare;let i=e.index;if(t<i){for(;i+1<n.length&&!r(n[i],n[i+1]);)++i;t=i}return(1+t)/n.length}}},ntile:function(t,e){(e=+e)>0||u("ntile num must be greater than zero.");const n=ws.cume_dist(),r=n.next;return{init:n.init,next:t=>Math.ceil(e*r(t))}},lag:function(t,e){return e=+e||1,{next:n=>{const r=n.index-e;return r>=0?t(n.data[r]):null}}},lead:function(t,e){return e=+e||1,{next:n=>{const r=n.index+e,i=n.data;return r<i.length?t(i[r]):null}}},first_value:function(t){return{next:e=>t(e.data[e.i0])}},last_value:function(t){return{next:e=>t(e.data[e.i1-1])}},nth_value:function(t,e){return(e=+e)>0||u("nth_value nth must be greater than zero."),{next:n=>{const r=n.i0+(e-1);return r<n.i1?t(n.data[r]):null}}},prev_value:function(t){let e;return{init:()=>e=null,next:n=>{const r=t(n.data[n.index]);return null!=r?e=r:e}}},next_value:function(t){let e,n;return{init:()=>(e=null,n=-1),next:r=>{const i=r.data;return r.index<=n?e:(n=function(t,e,n){for(let r=e.length;n<r;++n){if(null!=t(e[n]))return n}return-1}(t,i,r.index))<0?(n=i.length,e=null):e=t(i[n])}}}};const ks=Object.keys(ws);function As(t){const e=I(t.ops),i=I(t.fields),a=I(t.params),o=I(t.as),s=this.outputs=[],l=this.windows=[],c={},f={},d=[],p=[];let g=!0;function m(t){I(r(t)).forEach(t=>c[t]=1)}m(t.sort),e.forEach((t,e)=>{const r=i[e],c=n(r),y=mo(t,c,o[e]);if(m(r),s.push(y),rt(ws,t))l.push(function(t,e,n,r){const i=ws[t](e,n);return{init:i.init||h,update:function(t,e){e[r]=i.next(t)}}}(t,i[e],a[e],y));else{if(null==r&&"count"!==t&&u("Null aggregate field specified."),"count"===t)return void d.push(y);g=!1;let e=f[c];e||(e=f[c]=[],e.field=r,p.push(e)),e.push(bo(t,y))}}),(d.length||p.length)&&(this.cell=function(t,e,n){t=t.map(t=>Do(t,t.field));const r={num:0,agg:null,store:!1,count:e};if(!n)for(var i=t.length,a=r.agg=Array(i),o=0;o<i;++o)a[o]=new t[o](r);if(r.store)var u=r.data=new vu;return r.add=function(t){if(r.num+=1,!n){u&&u.add(t);for(let e=0;e<i;++e)a[e].add(a[e].get(t),t)}},r.rem=function(t){if(r.num-=1,!n){u&&u.rem(t);for(let e=0;e<i;++e)a[e].rem(a[e].get(t),t)}},r.set=function(t){let i,o;for(u&&u.values(),i=0,o=e.length;i<o;++i)t[e[i]]=r.num;if(!n)for(i=0,o=a.length;i<o;++i)a[i].set(t)},r.init=function(){r.num=0,u&&u.reset();for(let t=0;t<i;++t)a[t].init()},r}(p,d,g)),this.inputs=Object.keys(c)}const Ms=As.prototype;function Es(t){co.call(this,{},t),this._mlen=0,this._mods=[]}function Ds(t,e,n,r){const i=r.sort,a=i&&!r.ignorePeers,o=r.frame||[null,0],u=t.data(n),s=u.length,l=a?Le(i):null,c={i0:0,i1:0,p0:0,p1:0,index:0,data:u,compare:i||Z(-1)};e.init();for(let t=0;t<s;++t)Cs(c,o,t,s),a&&Fs(c,l),e.update(c,u[t])}function Cs(t,e,n,r){t.p0=t.i0,t.p1=t.i1,t.i0=null==e[0]?0:Math.max(0,n-Math.abs(e[0])),t.i1=null==e[1]?r:Math.min(r,n+Math.abs(e[1])+1),t.index=n}function Fs(t,e){const n=t.i0,r=t.i1-1,i=t.compare,a=t.data,o=a.length-1;n>0&&!i(a[n],a[n-1])&&(t.i0=e.left(a,a[n])),r<o&&!i(a[r],a[r+1])&&(t.i1=e.right(a,a[r]))}Ms.init=function(){this.windows.forEach(t=>t.init()),this.cell&&this.cell.init()},Ms.update=function(t,e){const n=this.cell,r=this.windows,i=t.data,a=r&&r.length;let o;if(n){for(o=t.p0;o<t.i0;++o)n.rem(i[o]);for(o=t.p1;o<t.i1;++o)n.add(i[o]);n.set(e)}for(o=0;o<a;++o)r[o].update(t,e)},Es.Definition={type:"Window",metadata:{modifies:!0},params:[{name:"sort",type:"compare"},{name:"groupby",type:"field",array:!0},{name:"ops",type:"enum",array:!0,values:ks.concat(xo)},{name:"params",type:"number",null:!0,array:!0},{name:"fields",type:"field",null:!0,array:!0},{name:"as",type:"string",null:!0,array:!0},{name:"frame",type:"number",null:!0,array:!0,length:2,default:[null,0]},{name:"ignorePeers",type:"boolean",default:!1}]},ut(Es,co,{transform(t,e){this.stamp=e.stamp;const n=t.modified(),r=Ut(t.sort),i=go(t.groupby),a=t=>this.group(i(t));let o=this.state;o&&!n||(o=this.state=new As(t)),n||e.modified(o.inputs)?(this.value={},e.visit(e.SOURCE,t=>a(t).add(t))):(e.visit(e.REM,t=>a(t).remove(t)),e.visit(e.ADD,t=>a(t).add(t)));for(let e=0,n=this._mlen;e<n;++e)Ds(this._mods[e],o,r,t);return this._mlen=0,this._mods=[],e.reflow(n).modifies(o.outputs)},group(t){let e=this.value[t];return e||(e=this.value[t]=wu(Nt),e.stamp=-1),e.stamp<this.stamp&&(e.stamp=this.stamp,this._mods[this._mlen++]=e),e}});var Ss=Object.freeze({__proto__:null,aggregate:xu,bin:bu,collect:ku,compare:Au,countpattern:Eu,cross:Du,density:Su,dotbin:Ou,expression:Ru,extent:qu,facet:Uu,field:Pu,filter:Iu,flatten:Wu,fold:Hu,formula:Yu,generate:Vu,impute:Ju,joinaggregate:Zu,kde:Qu,key:Ku,load:es,lookup:rs,multiextent:is,multivalues:os,params:ss,pivot:ls,prefacet:cs,project:fs,proxy:hs,quantile:ds,relay:ps,sample:gs,sequence:ms,sieve:ys,subflow:Lu,timeunit:vs,tupleindex:xs,values:bs,window:Es});const Bs="top",Ts="left",zs="right",Ns="bottom",Os="start",Rs="middle",$s="end",qs="group",Ls="axis",Us="title",Ps="frame",js="scope",Is="legend",Ws="row-header",Hs="row-footer",Ys="row-title",Vs="column-header",Gs="column-footer",Xs="column-title",Js="padding",Zs="fit",Qs="fit-x",Ks="fit-y",tl="none",el="all",nl="each",rl="flush",il="column",al="row";var ol=0;const ul="p_";function sl(t){return t&&t.gradient}function ll(t,e,n){const r=t.gradient;let i=t.id,a="radial"===r?ul:"";return i||(i=t.id="gradient_"+ol++,"radial"===r?(t.x1=cl(t.x1,.5),t.y1=cl(t.y1,.5),t.r1=cl(t.r1,0),t.x2=cl(t.x2,.5),t.y2=cl(t.y2,.5),t.r2=cl(t.r2,.5),a=ul):(t.x1=cl(t.x1,0),t.y1=cl(t.y1,0),t.x2=cl(t.x2,1),t.y2=cl(t.y2,0))),e[i]=t,"url("+(n||"")+"#"+a+i+")"}function cl(t,e){return null!=t?t:e}function fl(t,e){var n,r=[];return n={gradient:"linear",x1:t?t[0]:0,y1:t?t[1]:0,x2:e?e[0]:1,y2:e?e[1]:0,stops:r,stop:function(t,e){return r.push({offset:t,color:e}),n}}}const hl=Math.PI,dl=2*hl,pl=1e-6,gl=dl-pl;function ml(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function yl(){return new ml}function vl(t){return function(){return t}}ml.prototype=yl.prototype={constructor:ml,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,a){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var a=this._x1,o=this._y1,u=n-t,s=r-e,l=a-t,c=o-e,f=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>pl)if(Math.abs(c*u-s*l)>pl&&i){var h=n-a,d=r-o,p=u*u+s*s,g=h*h+d*d,m=Math.sqrt(p),y=Math.sqrt(f),v=i*Math.tan((hl-Math.acos((p+f-g)/(2*m*y)))/2),_=v/y,x=v/m;Math.abs(_-1)>pl&&(this._+="L"+(t+_*l)+","+(e+_*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>l*d)+","+(this._x1=t+x*u)+","+(this._y1=e+x*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,a){t=+t,e=+e,a=!!a;var o=(n=+n)*Math.cos(r),u=n*Math.sin(r),s=t+o,l=e+u,c=1^a,f=a?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+l:(Math.abs(this._x1-s)>pl||Math.abs(this._y1-l)>pl)&&(this._+="L"+s+","+l),n&&(f<0&&(f=f%dl+dl),f>gl?this._+="A"+n+","+n+",0,1,"+c+","+(t-o)+","+(e-u)+"A"+n+","+n+",0,1,"+c+","+(this._x1=s)+","+(this._y1=l):f>pl&&(this._+="A"+n+","+n+",0,"+ +(f>=hl)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var _l=Math.abs,xl=Math.atan2,bl=Math.cos,wl=Math.max,kl=Math.min,Al=Math.sin,Ml=Math.sqrt,El=1e-12,Dl=Math.PI,Cl=Dl/2,Fl=2*Dl;function Sl(t){return t>1?0:t<-1?Dl:Math.acos(t)}function Bl(t){return t>=1?Cl:t<=-1?-Cl:Math.asin(t)}function Tl(t){return t.innerRadius}function zl(t){return t.outerRadius}function Nl(t){return t.startAngle}function Ol(t){return t.endAngle}function Rl(t){return t&&t.padAngle}function $l(t,e,n,r,i,a,o,u){var s=n-t,l=r-e,c=o-i,f=u-a,h=f*s-c*l;if(!(h*h<El))return[t+(h=(c*(e-a)-f*(t-i))/h)*s,e+h*l]}function ql(t,e,n,r,i,a,o){var u=t-n,s=e-r,l=(o?a:-a)/Ml(u*u+s*s),c=l*s,f=-l*u,h=t+c,d=e+f,p=n+c,g=r+f,m=(h+p)/2,y=(d+g)/2,v=p-h,_=g-d,x=v*v+_*_,b=i-a,w=h*g-p*d,k=(_<0?-1:1)*Ml(wl(0,b*b*x-w*w)),A=(w*_-v*k)/x,M=(-w*v-_*k)/x,E=(w*_+v*k)/x,D=(-w*v+_*k)/x,C=A-m,F=M-y,S=E-m,B=D-y;return C*C+F*F>S*S+B*B&&(A=E,M=D),{cx:A,cy:M,x01:-c,y01:-f,x11:A*(i/b-1),y11:M*(i/b-1)}}function Ll(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function Ul(t){this._context=t}function Pl(t){return new Ul(t)}function jl(t){return t[0]}function Il(t){return t[1]}function Wl(t,e){var n=vl(!0),r=null,i=Pl,a=null;function o(o){var u,s,l,c=(o=Ll(o)).length,f=!1;for(null==r&&(a=i(l=yl())),u=0;u<=c;++u)!(u<c&&n(s=o[u],u,o))===f&&((f=!f)?a.lineStart():a.lineEnd()),f&&a.point(+t(s,u,o),+e(s,u,o));if(l)return a=null,l+""||null}return t="function"==typeof t?t:void 0===t?jl:vl(t),e="function"==typeof e?e:void 0===e?Il:vl(e),o.x=function(e){return arguments.length?(t="function"==typeof e?e:vl(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:vl(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:vl(!!t),o):n},o.curve=function(t){return arguments.length?(i=t,null!=r&&(a=i(r)),o):i},o.context=function(t){return arguments.length?(null==t?r=a=null:a=i(r=t),o):r},o}function Hl(t,e,n){var r=null,i=vl(!0),a=null,o=Pl,u=null;function s(s){var l,c,f,h,d,p=(s=Ll(s)).length,g=!1,m=new Array(p),y=new Array(p);for(null==a&&(u=o(d=yl())),l=0;l<=p;++l){if(!(l<p&&i(h=s[l],l,s))===g)if(g=!g)c=l,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),f=l-1;f>=c;--f)u.point(m[f],y[f]);u.lineEnd(),u.areaEnd()}g&&(m[l]=+t(h,l,s),y[l]=+e(h,l,s),u.point(r?+r(h,l,s):m[l],n?+n(h,l,s):y[l]))}if(d)return u=null,d+""||null}function l(){return Wl().defined(i).curve(o).context(a)}return t="function"==typeof t?t:void 0===t?jl:vl(+t),e="function"==typeof e?e:vl(void 0===e?0:+e),n="function"==typeof n?n:void 0===n?Il:vl(+n),s.x=function(e){return arguments.length?(t="function"==typeof e?e:vl(+e),r=null,s):t},s.x0=function(e){return arguments.length?(t="function"==typeof e?e:vl(+e),s):t},s.x1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:vl(+t),s):r},s.y=function(t){return arguments.length?(e="function"==typeof t?t:vl(+t),n=null,s):e},s.y0=function(t){return arguments.length?(e="function"==typeof t?t:vl(+t),s):e},s.y1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:vl(+t),s):n},s.lineX0=s.lineY0=function(){return l().x(t).y(e)},s.lineY1=function(){return l().x(t).y(n)},s.lineX1=function(){return l().x(r).y(e)},s.defined=function(t){return arguments.length?(i="function"==typeof t?t:vl(!!t),s):i},s.curve=function(t){return arguments.length?(o=t,null!=a&&(u=o(a)),s):o},s.context=function(t){return arguments.length?(null==t?a=u=null:u=o(a=t),s):a},s}Ul.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Yl={draw:function(t,e){var n=Math.sqrt(e/Dl);t.moveTo(n,0),t.arc(0,0,n,0,Fl)}};function Vl(){}function Gl(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function Xl(t){this._context=t}function Jl(t){this._context=t}function Zl(t){this._context=t}function Ql(t,e){this._basis=new Xl(t),this._beta=e}Xl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Gl(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Gl(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},Jl.prototype={areaStart:Vl,areaEnd:Vl,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Gl(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},Zl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Gl(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},Ql.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],a=e[0],o=t[n]-i,u=e[n]-a,s=-1;++s<=n;)r=s/n,this._basis.point(this._beta*t[s]+(1-this._beta)*(i+r*o),this._beta*e[s]+(1-this._beta)*(a+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var Kl=function t(e){function n(t){return 1===e?new Xl(t):new Ql(t,e)}return n.beta=function(e){return t(+e)},n}(.85);function tc(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function ec(t,e){this._context=t,this._k=(1-e)/6}ec.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:tc(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:tc(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var nc=function t(e){function n(t){return new ec(t,e)}return n.tension=function(e){return t(+e)},n}(0);function rc(t,e){this._context=t,this._k=(1-e)/6}rc.prototype={areaStart:Vl,areaEnd:Vl,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:tc(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var ic=function t(e){function n(t){return new rc(t,e)}return n.tension=function(e){return t(+e)},n}(0);function ac(t,e){this._context=t,this._k=(1-e)/6}ac.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:tc(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var oc=function t(e){function n(t){return new ac(t,e)}return n.tension=function(e){return t(+e)},n}(0);function uc(t,e,n){var r=t._x1,i=t._y1,a=t._x2,o=t._y2;if(t._l01_a>El){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,i=(i*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>El){var l=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);a=(a*l+t._x1*t._l23_2a-e*t._l12_2a)/c,o=(o*l+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,i,a,o,t._x2,t._y2)}function sc(t,e){this._context=t,this._alpha=e}sc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:uc(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var lc=function t(e){function n(t){return e?new sc(t,e):new ec(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function cc(t,e){this._context=t,this._alpha=e}cc.prototype={areaStart:Vl,areaEnd:Vl,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:uc(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var fc=function t(e){function n(t){return e?new cc(t,e):new rc(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function hc(t,e){this._context=t,this._alpha=e}hc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:uc(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var dc=function t(e){function n(t){return e?new hc(t,e):new ac(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function pc(t){this._context=t}function gc(t){return t<0?-1:1}function mc(t,e,n){var r=t._x1-t._x0,i=e-t._x1,a=(t._y1-t._y0)/(r||i<0&&-0),o=(n-t._y1)/(i||r<0&&-0),u=(a*i+o*r)/(r+i);return(gc(a)+gc(o))*Math.min(Math.abs(a),Math.abs(o),.5*Math.abs(u))||0}function yc(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function vc(t,e,n){var r=t._x0,i=t._y0,a=t._x1,o=t._y1,u=(a-r)/3;t._context.bezierCurveTo(r+u,i+u*e,a-u,o-u*n,a,o)}function _c(t){this._context=t}function xc(t){this._context=new bc(t)}function bc(t){this._context=t}function wc(t){this._context=t}function kc(t){var e,n,r=t.length-1,i=new Array(r),a=new Array(r),o=new Array(r);for(i[0]=0,a[0]=2,o[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,a[e]=4,o[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,a[r-1]=7,o[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/a[e-1],a[e]-=n,o[e]-=n*o[e-1];for(i[r-1]=o[r-1]/a[r-1],e=r-2;e>=0;--e)i[e]=(o[e]-i[e+1])/a[e];for(a[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)a[e]=2*t[e+1]-i[e+1];return[i,a]}function Ac(t,e){this._context=t,this._t=e}pc.prototype={areaStart:Vl,areaEnd:Vl,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}},_c.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:vc(this,this._t0,yc(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,vc(this,yc(this,n=mc(this,t,e)),n);break;default:vc(this,this._t0,n=mc(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(xc.prototype=Object.create(_c.prototype)).point=function(t,e){_c.prototype.point.call(this,e,t)},bc.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,a){this._context.bezierCurveTo(e,t,r,n,a,i)}},wc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=kc(t),i=kc(e),a=0,o=1;o<n;++a,++o)this._context.bezierCurveTo(r[0][a],i[0][a],r[1][a],i[1][a],t[o],e[o]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}},Ac.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};const Mc={basis:{curve:function(t){return new Xl(t)}},"basis-closed":{curve:function(t){return new Jl(t)}},"basis-open":{curve:function(t){return new Zl(t)}},bundle:{curve:Kl,tension:"beta",value:.85},cardinal:{curve:nc,tension:"tension",value:0},"cardinal-open":{curve:oc,tension:"tension",value:0},"cardinal-closed":{curve:ic,tension:"tension",value:0},"catmull-rom":{curve:lc,tension:"alpha",value:.5},"catmull-rom-closed":{curve:fc,tension:"alpha",value:.5},"catmull-rom-open":{curve:dc,tension:"alpha",value:.5},linear:{curve:Pl},"linear-closed":{curve:function(t){return new pc(t)}},monotone:{horizontal:function(t){return new xc(t)},vertical:function(t){return new _c(t)}},natural:{curve:function(t){return new wc(t)}},step:{curve:function(t){return new Ac(t,.5)}},"step-after":{curve:function(t){return new Ac(t,1)}},"step-before":{curve:function(t){return new Ac(t,0)}}};function Ec(t,e,n){var r=rt(Mc,t)&&Mc[t],i=null;return r&&(i=r.curve||r[e||"vertical"],r.tension&&null!=n&&(i=i[r.tension](n))),i}const Dc={m:2,l:2,h:1,v:1,c:6,s:4,q:4,t:2,a:7},Cc=[/([MLHVCSQTAZmlhvcsqtaz])/g,/###/,/(\.\d+)(\.\d)/g,/(\d)([-+])/g,/\s|,|###/];function Fc(t){const e=[];let n,r,i,a,o,u,s,l,c,f;const h=t.slice().replace(Cc[0],"###$1").split(Cc[1]).slice(1);for(s=0,c=h.length;s<c;++s){for(n=h[s],r=n.slice(1).trim().replace(Cc[2],"$1###$2").replace(Cc[3],"$1###$2").split(Cc[4]),o=n.charAt(0),i=[o],l=0,f=r.length;l<f;++l)(a=+r[l])===a&&i.push(a);if(u=Dc[o.toLowerCase()],i.length-1>u){const t=i.length;for(l=1,e.push([o].concat(i.slice(l,l+=u))),o="M"===o?"L":"m"===o?"l":o;l<t;l+=u)e.push([o].concat(i.slice(l,l+u)))}else e.push(i)}return e}const Sc=Math.PI/180,Bc=Math.PI/2,Tc=2*Math.PI,zc=Math.sqrt(3)/2;var Nc={},Oc={},Rc=[].join;function $c(t){var e=Rc.call(t);if(Oc[e])return Oc[e];var n=t[0],r=t[1],i=t[2],a=t[3],o=t[4],u=t[5],s=t[6],l=t[7],c=l*o,f=-s*u,h=s*o,d=l*u,p=Math.cos(i),g=Math.sin(i),m=Math.cos(a),y=Math.sin(a),v=.5*(a-i),_=Math.sin(.5*v),x=8/3*_*_/Math.sin(v),b=n+p-x*g,w=r+g+x*p,k=n+m,A=r+y,M=k+x*y,E=A-x*m;return Oc[e]=[c*b+f*w,h*b+d*w,c*M+f*E,h*M+d*E,c*k+f*A,h*k+d*A]}var qc=["l",0,0,0,0,0,0,0];function Lc(t,e,n){var r=qc[0]=t[0];if("a"===r||"A"===r)qc[1]=e*t[1],qc[2]=n*t[2],qc[3]=t[3],qc[4]=t[4],qc[5]=t[5],qc[6]=e*t[6],qc[7]=n*t[7];else if("h"===r||"H"===r)qc[1]=e*t[1];else if("v"===r||"V"===r)qc[1]=n*t[1];else for(var i=1,a=t.length;i<a;++i)qc[i]=(i%2==1?e:n)*t[i];return qc}function Uc(t,e,n,r,i,a){var o,u,s,l,c,f=null,h=0,d=0,p=0,g=0;null==n&&(n=0),null==r&&(r=0),null==i&&(i=1),null==a&&(a=i),t.beginPath&&t.beginPath();for(var m=0,y=e.length;m<y;++m){switch(o=e[m],1===i&&1===a||(o=Lc(o,i,a)),o[0]){case"l":h+=o[1],d+=o[2],t.lineTo(h+n,d+r);break;case"L":h=o[1],d=o[2],t.lineTo(h+n,d+r);break;case"h":h+=o[1],t.lineTo(h+n,d+r);break;case"H":h=o[1],t.lineTo(h+n,d+r);break;case"v":d+=o[1],t.lineTo(h+n,d+r);break;case"V":d=o[1],t.lineTo(h+n,d+r);break;case"m":h+=o[1],d+=o[2],t.moveTo(h+n,d+r);break;case"M":h=o[1],d=o[2],t.moveTo(h+n,d+r);break;case"c":u=h+o[5],s=d+o[6],p=h+o[3],g=d+o[4],t.bezierCurveTo(h+o[1]+n,d+o[2]+r,p+n,g+r,u+n,s+r),h=u,d=s;break;case"C":h=o[5],d=o[6],p=o[3],g=o[4],t.bezierCurveTo(o[1]+n,o[2]+r,p+n,g+r,h+n,d+r);break;case"s":u=h+o[3],s=d+o[4],p=2*h-p,g=2*d-g,t.bezierCurveTo(p+n,g+r,h+o[1]+n,d+o[2]+r,u+n,s+r),p=h+o[1],g=d+o[2],h=u,d=s;break;case"S":u=o[3],s=o[4],p=2*h-p,g=2*d-g,t.bezierCurveTo(p+n,g+r,o[1]+n,o[2]+r,u+n,s+r),h=u,d=s,p=o[1],g=o[2];break;case"q":u=h+o[3],s=d+o[4],p=h+o[1],g=d+o[2],t.quadraticCurveTo(p+n,g+r,u+n,s+r),h=u,d=s;break;case"Q":u=o[3],s=o[4],t.quadraticCurveTo(o[1]+n,o[2]+r,u+n,s+r),h=u,d=s,p=o[1],g=o[2];break;case"t":u=h+o[1],s=d+o[2],null===f[0].match(/[QqTt]/)?(p=h,g=d):"t"===f[0]?(p=2*h-l,g=2*d-c):"q"===f[0]&&(p=2*h-p,g=2*d-g),l=p,c=g,t.quadraticCurveTo(p+n,g+r,u+n,s+r),d=s,p=(h=u)+o[1],g=d+o[2];break;case"T":u=o[1],s=o[2],p=2*h-p,g=2*d-g,t.quadraticCurveTo(p+n,g+r,u+n,s+r),h=u,d=s;break;case"a":Pc(t,h+n,d+r,[o[1],o[2],o[3],o[4],o[5],o[6]+h+n,o[7]+d+r]),h+=o[6],d+=o[7];break;case"A":Pc(t,h+n,d+r,[o[1],o[2],o[3],o[4],o[5],o[6]+n,o[7]+r]),h=o[6],d=o[7];break;case"z":case"Z":t.closePath()}f=o}}function Pc(t,e,n,r){for(var i=function(t,e,n,r,i,a,o,u,s){var l=Rc.call(arguments);if(Nc[l])return Nc[l];var c=o*Sc,f=Math.sin(c),h=Math.cos(c),d=h*(u-t)*.5+f*(s-e)*.5,p=h*(s-e)*.5-f*(u-t)*.5,g=d*d/((n=Math.abs(n))*n)+p*p/((r=Math.abs(r))*r);g>1&&(n*=g=Math.sqrt(g),r*=g);var m=h/n,y=f/n,v=-f/r,_=h/r,x=m*u+y*s,b=v*u+_*s,w=m*t+y*e,k=v*t+_*e,A=1/((w-x)*(w-x)+(k-b)*(k-b))-.25;A<0&&(A=0);var M=Math.sqrt(A);a==i&&(M=-M);var E=.5*(x+w)-M*(k-b),D=.5*(b+k)+M*(w-x),C=Math.atan2(b-D,x-E),F=Math.atan2(k-D,w-E)-C;F<0&&1===a?F+=Tc:F>0&&0===a&&(F-=Tc);for(var S=Math.ceil(Math.abs(F/(Bc+.001))),B=[],T=0;T<S;++T){var z=C+T*F/S,N=C+(T+1)*F/S;B[T]=[E,D,z,N,n,r,f,h]}return Nc[l]=B}(r[5],r[6],r[0],r[1],r[3],r[4],r[2],e,n),a=0;a<i.length;++a){var o=$c(i[a]);t.bezierCurveTo(o[0],o[1],o[2],o[3],o[4],o[5])}}var jc=.5773502691896257,Ic={circle:{draw:function(t,e){var n=Math.sqrt(e)/2;t.moveTo(n,0),t.arc(0,0,n,0,Tc)}},cross:{draw:function(t,e){var n=Math.sqrt(e)/2,r=n/2.5;t.moveTo(-n,-r),t.lineTo(-n,r),t.lineTo(-r,r),t.lineTo(-r,n),t.lineTo(r,n),t.lineTo(r,r),t.lineTo(n,r),t.lineTo(n,-r),t.lineTo(r,-r),t.lineTo(r,-n),t.lineTo(-r,-n),t.lineTo(-r,-r),t.closePath()}},diamond:{draw:function(t,e){var n=Math.sqrt(e)/2;t.moveTo(-n,0),t.lineTo(0,-n),t.lineTo(n,0),t.lineTo(0,n),t.closePath()}},square:{draw:function(t,e){var n=Math.sqrt(e),r=-n/2;t.rect(r,r,n,n)}},arrow:{draw:function(t,e){var n=Math.sqrt(e)/2,r=n/7,i=n/2.5,a=n/8;t.moveTo(-r,n),t.lineTo(r,n),t.lineTo(r,-a),t.lineTo(i,-a),t.lineTo(0,-n),t.lineTo(-i,-a),t.lineTo(-r,-a),t.closePath()}},wedge:{draw:function(t,e){var n=Math.sqrt(e)/2,r=zc*n,i=r-n*jc,a=n/4;t.moveTo(0,-r-i),t.lineTo(-a,r-i),t.lineTo(a,r-i),t.closePath()}},triangle:{draw:function(t,e){var n=Math.sqrt(e)/2,r=zc*n,i=r-n*jc;t.moveTo(0,-r-i),t.lineTo(-n,r-i),t.lineTo(n,r-i),t.closePath()}},"triangle-up":{draw:function(t,e){var n=Math.sqrt(e)/2,r=zc*n;t.moveTo(0,-r),t.lineTo(-n,r),t.lineTo(n,r),t.closePath()}},"triangle-down":{draw:function(t,e){var n=Math.sqrt(e)/2,r=zc*n;t.moveTo(0,r),t.lineTo(-n,-r),t.lineTo(n,-r),t.closePath()}},"triangle-right":{draw:function(t,e){var n=Math.sqrt(e)/2,r=zc*n;t.moveTo(r,0),t.lineTo(-r,-n),t.lineTo(-r,n),t.closePath()}},"triangle-left":{draw:function(t,e){var n=Math.sqrt(e)/2,r=zc*n;t.moveTo(-r,0),t.lineTo(r,-n),t.lineTo(r,n),t.closePath()}},stroke:{draw:function(t,e){var n=Math.sqrt(e)/2;t.moveTo(-n,0),t.lineTo(n,0)}}};function Wc(t){return rt(Ic,t)?Ic[t]:function(t){if(!rt(Hc,t)){var e=Fc(t);Hc[t]={draw:function(t,n){Uc(t,e,0,0,Math.sqrt(n)/2)}}}return Hc[t]}(t)}var Hc={};const Yc=.448084975506;function Vc(t){return t.x}function Gc(t){return t.y}function Xc(t){return t.width}function Jc(t){return t.height}function Zc(t){return"function"==typeof t?t:()=>+t}function Qc(t,e,n){return Math.max(e,Math.min(t,n))}function Kc(){var t=Vc,e=Gc,n=Xc,r=Jc,i=Zc(0),a=i,o=i,u=i,s=null;function l(l,c,f){var h,d=null!=c?c:+t.call(this,l),p=null!=f?f:+e.call(this,l),g=+n.call(this,l),m=+r.call(this,l),y=Math.min(g,m)/2,v=Qc(+i.call(this,l),0,y),_=Qc(+a.call(this,l),0,y),x=Qc(+o.call(this,l),0,y),b=Qc(+u.call(this,l),0,y);if(s||(s=h=yl()),v<=0&&_<=0&&x<=0&&b<=0)s.rect(d,p,g,m);else{var w=d+g,k=p+m;s.moveTo(d+v,p),s.lineTo(w-_,p),s.bezierCurveTo(w-Yc*_,p,w,p+Yc*_,w,p+_),s.lineTo(w,k-b),s.bezierCurveTo(w,k-Yc*b,w-Yc*b,k,w-b,k),s.lineTo(d+x,k),s.bezierCurveTo(d+Yc*x,k,d,k-Yc*x,d,k-x),s.lineTo(d,p+v),s.bezierCurveTo(d,p+Yc*v,d+Yc*v,p,d+v,p),s.closePath()}if(h)return s=null,h+""||null}return l.x=function(e){return arguments.length?(t=Zc(e),l):t},l.y=function(t){return arguments.length?(e=Zc(t),l):e},l.width=function(t){return arguments.length?(n=Zc(t),l):n},l.height=function(t){return arguments.length?(r=Zc(t),l):r},l.cornerRadius=function(t,e,n,r){return arguments.length?(i=Zc(t),a=null!=e?Zc(e):i,u=null!=n?Zc(n):i,o=null!=r?Zc(r):a,l):i},l.context=function(t){return arguments.length?(s=null==t?null:t,l):s},l}function tf(){var t,e,n,r,i,a,o,u,s=null;function l(t,e,n){var r=n/2;if(i){var l=o-e,c=t-a;if(l||c){var f=Math.sqrt(l*l+c*c),h=(l/=f)*u,d=(c/=f)*u,p=Math.atan2(c,l);s.moveTo(a-h,o-d),s.lineTo(t-l*r,e-c*r),s.arc(t,e,r,p-Math.PI,p),s.lineTo(a+h,o+d),s.arc(a,o,u,p,p+Math.PI)}else s.arc(t,e,r,0,Tc);s.closePath()}else i=1;a=t,o=e,u=r}function c(a){var o,u,c,f=a.length,h=!1;for(null==s&&(s=c=yl()),o=0;o<=f;++o)!(o<f&&r(u=a[o],o,a))===h&&(h=!h)&&(i=0),h&&l(+t(u,o,a),+e(u,o,a),+n(u,o,a));if(c)return s=null,c+""||null}return c.x=function(e){return arguments.length?(t=e,c):t},c.y=function(t){return arguments.length?(e=t,c):e},c.size=function(t){return arguments.length?(n=t,c):n},c.defined=function(t){return arguments.length?(r=t,c):r},c.context=function(t){return arguments.length?(s=null==t?null:t,c):s},c}function ef(t,e){return null!=t?t:e}const nf=t=>t.x||0,rf=t=>t.y||0,af=t=>!(!1===t.defined),of=function(){var t=Tl,e=zl,n=vl(0),r=null,i=Nl,a=Ol,o=Rl,u=null;function s(){var s,l,c=+t.apply(this,arguments),f=+e.apply(this,arguments),h=i.apply(this,arguments)-Cl,d=a.apply(this,arguments)-Cl,p=_l(d-h),g=d>h;if(u||(u=s=yl()),f<c&&(l=f,f=c,c=l),f>El)if(p>Fl-El)u.moveTo(f*bl(h),f*Al(h)),u.arc(0,0,f,h,d,!g),c>El&&(u.moveTo(c*bl(d),c*Al(d)),u.arc(0,0,c,d,h,g));else{var m,y,v=h,_=d,x=h,b=d,w=p,k=p,A=o.apply(this,arguments)/2,M=A>El&&(r?+r.apply(this,arguments):Ml(c*c+f*f)),E=kl(_l(f-c)/2,+n.apply(this,arguments)),D=E,C=E;if(M>El){var F=Bl(M/c*Al(A)),S=Bl(M/f*Al(A));(w-=2*F)>El?(x+=F*=g?1:-1,b-=F):(w=0,x=b=(h+d)/2),(k-=2*S)>El?(v+=S*=g?1:-1,_-=S):(k=0,v=_=(h+d)/2)}var B=f*bl(v),T=f*Al(v),z=c*bl(b),N=c*Al(b);if(E>El){var O,R=f*bl(_),$=f*Al(_),q=c*bl(x),L=c*Al(x);if(p<Dl&&(O=$l(B,T,q,L,R,$,z,N))){var U=B-O[0],P=T-O[1],j=R-O[0],I=$-O[1],W=1/Al(Sl((U*j+P*I)/(Ml(U*U+P*P)*Ml(j*j+I*I)))/2),H=Ml(O[0]*O[0]+O[1]*O[1]);D=kl(E,(c-H)/(W-1)),C=kl(E,(f-H)/(W+1))}}k>El?C>El?(m=ql(q,L,B,T,f,C,g),y=ql(R,$,z,N,f,C,g),u.moveTo(m.cx+m.x01,m.cy+m.y01),C<E?u.arc(m.cx,m.cy,C,xl(m.y01,m.x01),xl(y.y01,y.x01),!g):(u.arc(m.cx,m.cy,C,xl(m.y01,m.x01),xl(m.y11,m.x11),!g),u.arc(0,0,f,xl(m.cy+m.y11,m.cx+m.x11),xl(y.cy+y.y11,y.cx+y.x11),!g),u.arc(y.cx,y.cy,C,xl(y.y11,y.x11),xl(y.y01,y.x01),!g))):(u.moveTo(B,T),u.arc(0,0,f,v,_,!g)):u.moveTo(B,T),c>El&&w>El?D>El?(m=ql(z,N,R,$,c,-D,g),y=ql(B,T,q,L,c,-D,g),u.lineTo(m.cx+m.x01,m.cy+m.y01),D<E?u.arc(m.cx,m.cy,D,xl(m.y01,m.x01),xl(y.y01,y.x01),!g):(u.arc(m.cx,m.cy,D,xl(m.y01,m.x01),xl(m.y11,m.x11),!g),u.arc(0,0,c,xl(m.cy+m.y11,m.cx+m.x11),xl(y.cy+y.y11,y.cx+y.x11),g),u.arc(y.cx,y.cy,D,xl(y.y11,y.x11),xl(y.y01,y.x01),!g))):u.arc(0,0,c,b,x,g):u.lineTo(z,N)}else u.moveTo(0,0);if(u.closePath(),s)return u=null,s+""||null}return s.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +a.apply(this,arguments))/2-Dl/2;return[bl(r)*n,Al(r)*n]},s.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:vl(+e),s):t},s.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:vl(+t),s):e},s.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:vl(+t),s):n},s.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:vl(+t),s):r},s.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:vl(+t),s):i},s.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:vl(+t),s):a},s.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:vl(+t),s):o},s.context=function(t){return arguments.length?(u=null==t?null:t,s):u},s}().startAngle(t=>t.startAngle||0).endAngle(t=>t.endAngle||0).padAngle(t=>t.padAngle||0).innerRadius(t=>t.innerRadius||0).outerRadius(t=>t.outerRadius||0).cornerRadius(t=>t.cornerRadius||0),uf=Hl().x(nf).y1(rf).y0(t=>(t.y||0)+(t.height||0)).defined(af),sf=Hl().y(rf).x1(nf).x0(t=>(t.x||0)+(t.width||0)).defined(af),lf=Wl().x(nf).y(rf).defined(af),cf=Kc().x(nf).y(rf).width(t=>t.width||0).height(t=>t.height||0).cornerRadius(t=>ef(t.cornerRadiusTopLeft,t.cornerRadius)||0,t=>ef(t.cornerRadiusTopRight,t.cornerRadius)||0,t=>ef(t.cornerRadiusBottomRight,t.cornerRadius)||0,t=>ef(t.cornerRadiusBottomLeft,t.cornerRadius)||0),ff=function(t,e){var n=null;function r(){var r;if(n||(n=r=yl()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),r)return n=null,r+""||null}return t="function"==typeof t?t:vl(t||Yl),e="function"==typeof e?e:vl(void 0===e?64:+e),r.type=function(e){return arguments.length?(t="function"==typeof e?e:vl(e),r):t},r.size=function(t){return arguments.length?(e="function"==typeof t?t:vl(+t),r):e},r.context=function(t){return arguments.length?(n=null==t?null:t,r):n},r}().type(t=>Wc(t.shape||"circle")).size(t=>ef(t.size,64)),hf=tf().x(nf).y(rf).defined(af).size(t=>t.size||1);function df(t){return t.cornerRadius||t.cornerRadiusTopLeft||t.cornerRadiusTopRight||t.cornerRadiusBottomRight||t.cornerRadiusBottomLeft}function pf(t,e,n,r){return cf.context(t)(e,n,r)}var gf=1;function mf(){gf=1}function yf(t,e,n){var r=e.clip,i=t._defs,a=e.clip_id||(e.clip_id="clip"+gf++),o=i.clipping[a]||(i.clipping[a]={id:a});return H(r)?o.path=r(null):df(n)?o.path=pf(null,n,0,0):(o.width=n.width||0,o.height=n.height||0),"url(#"+a+")"}function vf(t){this.clear(),t&&this.union(t)}function _f(t){this.mark=t,this.bounds=this.bounds||new vf}function xf(t){_f.call(this,t),this.items=this.items||[]}function bf(t,e){if("undefined"!=typeof document&&document.createElement){const n=document.createElement("canvas");if(n&&n.getContext)return n.width=t,n.height=e,n}return null}vf.prototype={clone(){return new vf(this)},clear(){return this.x1=+Number.MAX_VALUE,this.y1=+Number.MAX_VALUE,this.x2=-Number.MAX_VALUE,this.y2=-Number.MAX_VALUE,this},empty(){return this.x1===+Number.MAX_VALUE&&this.y1===+Number.MAX_VALUE&&this.x2===-Number.MAX_VALUE&&this.y2===-Number.MAX_VALUE},equals(t){return this.x1===t.x1&&this.y1===t.y1&&this.x2===t.x2&&this.y2===t.y2},set(t,e,n,r){return n<t?(this.x2=t,this.x1=n):(this.x1=t,this.x2=n),r<e?(this.y2=e,this.y1=r):(this.y1=e,this.y2=r),this},add(t,e){return t<this.x1&&(this.x1=t),e<this.y1&&(this.y1=e),t>this.x2&&(this.x2=t),e>this.y2&&(this.y2=e),this},expand(t){return this.x1-=t,this.y1-=t,this.x2+=t,this.y2+=t,this},round(){return this.x1=Math.floor(this.x1),this.y1=Math.floor(this.y1),this.x2=Math.ceil(this.x2),this.y2=Math.ceil(this.y2),this},scale(t){return this.x1*=t,this.y1*=t,this.x2*=t,this.y2*=t,this},translate(t,e){return this.x1+=t,this.x2+=t,this.y1+=e,this.y2+=e,this},rotate(t,e,n){const r=this.rotatedPoints(t,e,n);return this.clear().add(r[0],r[1]).add(r[2],r[3]).add(r[4],r[5]).add(r[6],r[7])},rotatedPoints(t,e,n){var{x1:r,y1:i,x2:a,y2:o}=this,u=Math.cos(t),s=Math.sin(t),l=e-e*u+n*s,c=n-e*s-n*u;return[u*r-s*i+l,s*r+u*i+c,u*r-s*o+l,s*r+u*o+c,u*a-s*i+l,s*a+u*i+c,u*a-s*o+l,s*a+u*o+c]},union(t){return t.x1<this.x1&&(this.x1=t.x1),t.y1<this.y1&&(this.y1=t.y1),t.x2>this.x2&&(this.x2=t.x2),t.y2>this.y2&&(this.y2=t.y2),this},intersect(t){return t.x1>this.x1&&(this.x1=t.x1),t.y1>this.y1&&(this.y1=t.y1),t.x2<this.x2&&(this.x2=t.x2),t.y2<this.y2&&(this.y2=t.y2),this},encloses(t){return t&&this.x1<=t.x1&&this.x2>=t.x2&&this.y1<=t.y1&&this.y2>=t.y2},alignsWith(t){return t&&(this.x1==t.x1||this.x2==t.x2||this.y1==t.y1||this.y2==t.y2)},intersects(t){return t&&!(this.x2<t.x1||this.x1>t.x2||this.y2<t.y1||this.y1>t.y2)},contains(t,e){return!(t<this.x1||t>this.x2||e<this.y1||e>this.y2)},width(){return this.x2-this.x1},height(){return this.y2-this.y1}},ut(xf,_f);const wf=()=>"undefined"!=typeof Image?Image:null;function kf(t){this._pending=0,this._loader=t||Ga()}function Af(t){t._pending+=1}function Mf(t){t._pending-=1}function Ef(t,e,n){if(e.stroke&&0!==e.opacity&&0!==e.strokeOpacity){const r=null!=e.strokeWidth?+e.strokeWidth:1;t.expand(r+(n?function(t,e){return t.strokeJoin&&"miter"!==t.strokeJoin?0:e}(e,r):0))}return t}kf.prototype={pending(){return this._pending},sanitizeURL(t){var e=this;return Af(e),e._loader.sanitize(t,{context:"href"}).then(t=>(Mf(e),t)).catch(()=>(Mf(e),null))},loadImage(t){const e=this,n=wf();return Af(e),e._loader.sanitize(t,{context:"image"}).then(t=>{const r=t.href;if(!r||!n)throw{url:r};const i=new n,a=rt(t,"crossOrigin")?t.crossOrigin:"anonymous";return null!=a&&(i.crossOrigin=a),i.onload=()=>Mf(e),i.onerror=()=>Mf(e),i.src=r,i}).catch(t=>(Mf(e),{complete:!1,width:0,height:0,src:t&&t.url||""}))},ready(){var t=this;return new Promise(e=>{!function n(r){t.pending()?setTimeout(()=>{n(!0)},10):e(r)}(!1)})}};const Df=Tc-1e-8;let Cf,Ff,Sf,Bf,Tf,zf,Nf,Of;const Rf=(t,e)=>Cf.add(t,e),$f=(t,e)=>Rf(Ff=t,Sf=e),qf=t=>Rf(t,Cf.y1),Lf=t=>Rf(Cf.x1,t),Uf=(t,e)=>Tf*t+Nf*e,Pf=(t,e)=>zf*t+Of*e,jf=(t,e)=>Rf(Uf(t,e),Pf(t,e)),If=(t,e)=>$f(Uf(t,e),Pf(t,e));function Wf(t,e){return Cf=t,e?(Bf=e*Sc,Tf=Of=Math.cos(Bf),zf=Math.sin(Bf),Nf=-zf):(Tf=Of=1,Bf=zf=Nf=0),Hf}const Hf={beginPath(){},closePath(){},moveTo:If,lineTo:If,rect(t,e,n,r){Bf?(jf(t+n,e),jf(t+n,e+r),jf(t,e+r),If(t,e)):(Rf(t+n,e+r),$f(t,e))},quadraticCurveTo(t,e,n,r){const i=Uf(t,e),a=Pf(t,e),o=Uf(n,r),u=Pf(n,r);Yf(Ff,i,o,qf),Yf(Sf,a,u,Lf),$f(o,u)},bezierCurveTo(t,e,n,r,i,a){const o=Uf(t,e),u=Pf(t,e),s=Uf(n,r),l=Pf(n,r),c=Uf(i,a),f=Pf(i,a);Vf(Ff,o,s,c,qf),Vf(Sf,u,l,f,Lf),$f(c,f)},arc(t,e,n,r,i,a){if(r+=Bf,i+=Bf,Ff=n*Math.cos(i)+t,Sf=n*Math.sin(i)+e,Math.abs(i-r)>Df)Rf(t-n,e-n),Rf(t+n,e+n);else{const o=r=>Rf(n*Math.cos(r)+t,n*Math.sin(r)+e);let u,s;if(o(r),o(i),i!==r)if((r%=Tc)<0&&(r+=Tc),(i%=Tc)<0&&(i+=Tc),i<r&&(a=!a,u=r,r=i,i=u),a)for(i-=Tc,u=r-r%Bc,s=0;s<4&&u>i;++s,u-=Bc)o(u);else for(u=r-r%Bc+Bc,s=0;s<4&&u<i;++s,u+=Bc)o(u)}}};function Yf(t,e,n,r){const i=(t-e)/(t+n-2*e);0<i&&i<1&&r(t+(e-t)*i)}function Vf(t,e,n,r,i){const a=r-t+3*e-3*n,o=t+n-2*e,u=t-e;let s,l=0,c=0;Math.abs(a)>1e-14?(s=o*o+u*a,s>=0&&(s=Math.sqrt(s),l=(-o+s)/a,c=(-o-s)/a)):l=.5*u/o,0<l&&l<1&&i(Gf(l,t,e,n,r)),0<c&&c<1&&i(Gf(c,t,e,n,r))}function Gf(t,e,n,r,i){const a=1-t,o=a*a,u=t*t;return o*a*e+3*o*t*n+3*a*u*r+u*t*i}var Xf=(Xf=bf(1,1))?Xf.getContext("2d"):null;const Jf=new vf;function Zf(t){return function(e,n){if(!Xf)return!0;t(Xf,e),Jf.clear().union(e.bounds).intersect(n).round();const{x1:r,y1:i,x2:a,y2:o}=Jf;for(let t=i;t<=o;++t)for(let e=r;e<=a;++e)if(Xf.isPointInPath(e,t))return!0;return!1}}function Qf(t,e){return e.contains(t.x||0,t.y||0)}function Kf(t,e){const n=t.x||0,r=t.y||0,i=t.width||0,a=t.height||0;return e.intersects(Jf.set(n,r,n+i,r+a))}function th(t,e){const n=t.x||0,r=t.y||0;return eh(e,n,r,null!=t.x2?t.x2:n,null!=t.y2?t.y2:r)}function eh(t,e,n,r,i){const{x1:a,y1:o,x2:u,y2:s}=t,l=r-e,c=i-n;let f,h,d,p,g=0,m=1;for(p=0;p<4;++p){if(0===p&&(f=-l,h=-(a-e)),1===p&&(f=l,h=u-e),2===p&&(f=-c,h=-(o-n)),3===p&&(f=c,h=s-n),Math.abs(f)<1e-10&&h<0)return!1;if(d=h/f,f<0){if(d>m)return!1;d>g&&(g=d)}else if(f>0){if(d<g)return!1;d<m&&(m=d)}}return!0}function nh(t,e){t.globalCompositeOperation=e.blend||"source-over"}function rh(t,e){return null==t?e:t}function ih(t,e){const n=e.length;for(let r=0;r<n;++r)t.addColorStop(e[r].offset,e[r].color);return t}function ah(t,e,n){return sl(n)?function(t,e,n){const r=n.width(),i=n.height();let a;if("radial"===e.gradient)a=t.createRadialGradient(n.x1+rh(e.x1,.5)*r,n.y1+rh(e.y1,.5)*i,Math.max(r,i)*rh(e.r1,0),n.x1+rh(e.x2,.5)*r,n.y1+rh(e.y2,.5)*i,Math.max(r,i)*rh(e.r2,.5));else{const o=rh(e.x1,0),u=rh(e.y1,0),s=rh(e.x2,1),l=rh(e.y2,0);if(o!==s&&u!==l&&r!==i){const n=bf(Math.ceil(r),Math.ceil(i)),a=n.getContext("2d");return a.scale(r,i),a.fillStyle=ih(a.createLinearGradient(o,u,s,l),e.stops),a.fillRect(0,0,r,i),t.createPattern(n,"no-repeat")}a=t.createLinearGradient(n.x1+o*r,n.y1+u*i,n.x1+s*r,n.y1+l*i)}return ih(a,e.stops)}(t,n,e.bounds):n}function oh(t,e,n){return(n*=null==e.fillOpacity?1:e.fillOpacity)>0&&(t.globalAlpha=n,t.fillStyle=ah(t,e,e.fill),!0)}var uh=[];function sh(t,e,n){var r=null!=(r=e.strokeWidth)?r:1;return!(r<=0)&&((n*=null==e.strokeOpacity?1:e.strokeOpacity)>0&&(t.globalAlpha=n,t.strokeStyle=ah(t,e,e.stroke),t.lineWidth=r,t.lineCap=e.strokeCap||"butt",t.lineJoin=e.strokeJoin||"miter",t.miterLimit=e.strokeMiterLimit||10,t.setLineDash&&(t.setLineDash(e.strokeDash||uh),t.lineDashOffset=e.strokeDashOffset||0),!0))}function lh(t,e){return t.zindex-e.zindex||t.index-e.index}function ch(t){if(!t.zdirty)return t.zitems;var e,n,r,i=t.items,a=[];for(n=0,r=i.length;n<r;++n)(e=i[n]).index=n,e.zindex&&a.push(e);return t.zdirty=!1,t.zitems=a.sort(lh)}function fh(t,e){var n,r,i=t.items;if(i&&i.length){var a=ch(t);if(a&&a.length){for(n=0,r=i.length;n<r;++n)i[n].zindex||e(i[n]);i=a}for(n=0,r=i.length;n<r;++n)e(i[n])}}function hh(t,e){var n,r,i=t.items;if(!i||!i.length)return null;var a=ch(t);for(a&&a.length&&(i=a),r=i.length;--r>=0;)if(n=e(i[r]))return n;if(i===a)for(r=(i=t.items).length;--r>=0;)if(!i[r].zindex&&(n=e(i[r])))return n;return null}function dh(t){return function(e,n,r){fh(n,n=>{r&&!r.intersects(n.bounds)||gh(t,e,n,n)})}}function ph(t){return function(e,n,r){!n.items.length||r&&!r.intersects(n.bounds)||gh(t,e,n.items[0],n.items)}}function gh(t,e,n,r){var i=null==n.opacity?1:n.opacity;0!==i&&(t(e,r)||(nh(e,n),n.fill&&oh(e,n,i)&&e.fill(),n.stroke&&sh(e,n,i)&&e.stroke()))}function mh(t){return t=t||p,function(e,n,r,i,a,o){return r*=e.pixelRatio,i*=e.pixelRatio,hh(n,n=>{var u=n.bounds;if((!u||u.contains(a,o))&&u)return t(e,n,r,i,a,o)?n:void 0})}}function yh(t,e){return function(n,r,i,a){var o,u,s=Array.isArray(r)?r[0]:r,l=null==e?s.fill:e,c=s.stroke&&n.isPointInStroke;return c&&(o=s.strokeWidth,u=s.strokeCap,n.lineWidth=null!=o?o:1,n.lineCap=null!=u?u:"butt"),!t(n,r)&&(l&&n.isPointInPath(i,a)||c&&n.isPointInStroke(i,a))}}function vh(t){return mh(yh(t))}function _h(t,e){return"translate("+t+","+e+")"}function xh(t){return"rotate("+t+")"}function bh(t){return _h(t.x||0,t.y||0)}function wh(t,e,n){function r(t,n){var r=n.x||0,i=n.y||0,a=n.angle||0;t.translate(r,i),a&&t.rotate(a*=Sc),t.beginPath(),e(t,n),a&&t.rotate(-a),t.translate(-r,-i)}return{type:t,tag:"path",nested:!1,attr:function(t,n){t("transform",function(t){return _h(t.x||0,t.y||0)+(t.angle?" "+xh(t.angle):"")}(n)),t("d",e(null,n))},bound:function(t,n){return e(Wf(t,n.angle),n),Ef(t,n).translate(n.x||0,n.y||0)},draw:dh(r),pick:vh(r),isect:n||Zf(r)}}var kh=wh("arc",(function(t,e){return of.context(t)(e)}));function Ah(t,e,n){function r(t,n){t.beginPath(),e(t,n)}var i=yh(r);return{type:t,tag:"path",nested:!0,attr:function(t,n){var r=n.mark.items;r.length&&t("d",e(null,r))},bound:function(t,n){var r=n.items;return 0===r.length?t:(e(Wf(t),r),Ef(t,r[0]))},draw:ph(r),pick:function(t,e,n,r,a,o){var u=e.items,s=e.bounds;return!u||!u.length||s&&!s.contains(a,o)?null:(n*=t.pixelRatio,r*=t.pixelRatio,i(t,u,n,r)?u[0]:null)},isect:Qf,tip:n}}var Mh=Ah("area",(function(t,e){const n=e[0],r=n.interpolate||"linear";return("horizontal"===n.orient?sf:uf).curve(Ec(r,n.orient,n.tension)).context(t)(e)}),(function(t,e){for(var n,r,i="horizontal"===t[0].orient?e[1]:e[0],a="horizontal"===t[0].orient?"y":"x",o=t.length,u=1/0;--o>=0;)!1!==t[o].defined&&(r=Math.abs(t[o][a]-i))<u&&(u=r,n=t[o]);return n}));function Eh(t,e){t.beginPath(),df(e)?pf(t,e,0,0):t.rect(0,0,e.width||0,e.height||0),t.clip()}function Dh(t){const e=rh(t.strokeWidth,1);return null!=t.strokeOffset?t.strokeOffset:t.stroke&&e>.5&&e<1.5?.5-Math.abs(e-1):0}function Ch(t,e){const n=Dh(e);t("d",pf(null,e,n,n))}function Fh(t,e,n,r){const i=Dh(e);t.beginPath(),pf(t,e,(n||0)+i,(r||0)+i)}const Sh=yh(Fh),Bh=yh(Fh,!1),Th=yh(Fh,!0);var zh={type:"group",tag:"g",nested:!1,attr:function(t,e){t("transform",bh(e))},bound:function(t,e){if(!e.clip&&e.items){const n=e.items,r=n.length;for(let e=0;e<r;++e)t.union(n[e].bounds)}return(e.clip||e.width||e.height)&&!e.noBound&&t.add(0,0).add(e.width||0,e.height||0),Ef(t,e),t.translate(e.x||0,e.y||0)},draw:function(t,e,n){fh(e,e=>{const r=e.x||0,i=e.y||0,a=e.strokeForeground,o=null==e.opacity?1:e.opacity;(e.stroke||e.fill)&&o&&(Fh(t,e,r,i),nh(t,e),e.fill&&oh(t,e,o)&&t.fill(),e.stroke&&!a&&sh(t,e,o)&&t.stroke()),t.save(),t.translate(r,i),e.clip&&Eh(t,e),n&&n.translate(-r,-i),fh(e,e=>{this.draw(t,e,n)}),n&&n.translate(r,i),t.restore(),a&&e.stroke&&o&&(Fh(t,e,r,i),nh(t,e),sh(t,e,o)&&t.stroke())})},pick:function(t,e,n,r,i,a){if(e.bounds&&!e.bounds.contains(i,a)||!e.items)return null;const o=n*t.pixelRatio,u=r*t.pixelRatio;return hh(e,s=>{let l,c,f;const h=s.bounds;if(h&&!h.contains(i,a))return;c=s.x||0,f=s.y||0;const d=c+(s.width||0),p=f+(s.height||0),g=s.clip;if(g&&(i<c||i>d||a<f||a>p))return;if(t.save(),t.translate(c,f),c=i-c,f=a-f,g&&df(s)&&!Th(t,s,o,u))return t.restore(),null;const m=s.strokeForeground,y=!1!==e.interactive;return y&&m&&s.stroke&&Bh(t,s,o,u)?(t.restore(),s):(l=hh(s,t=>function(t,e,n){return(!1!==t.interactive||"group"===t.marktype)&&t.bounds&&t.bounds.contains(e,n)}(t,c,f)?this.pick(t,n,r,c,f):null),!l&&y&&(s.fill||!m&&s.stroke)&&Sh(t,s,o,u)&&(l=s),t.restore(),l||null)})},isect:Kf,content:function(t,e,n){t("clip-path",e.clip?yf(n,e,e):null)},background:function(t,e){t("class","background"),t("aria-hidden",!0),Ch(t,e)},foreground:function(t,e){t("class","foreground"),t("aria-hidden",!0),e.strokeForeground?Ch(t,e):t("d","")}},Nh={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1"};function Oh(t,e){var n=t.image;return(!n||t.url&&t.url!==n.url)&&(n={complete:!1,width:0,height:0},e.loadImage(t.url).then(e=>{t.image=e,t.image.url=t.url})),n}function Rh(t,e){return null!=t.width?t.width:e&&e.width?!1!==t.aspect&&t.height?t.height*e.width/e.height:e.width:0}function $h(t,e){return null!=t.height?t.height:e&&e.height?!1!==t.aspect&&t.width?t.width*e.height/e.width:e.height:0}function qh(t,e){return"center"===t?e/2:"right"===t?e:0}function Lh(t,e){return"middle"===t?e/2:"bottom"===t?e:0}var Uh={type:"image",tag:"image",nested:!1,attr:function(t,e,n){const r=Oh(e,n),i=Rh(e,r),a=$h(e,r),o=(e.x||0)-qh(e.align,i),u=(e.y||0)-Lh(e.baseline,a);t("href",!r.src&&r.toDataURL?r.toDataURL():r.src||"",Nh["xmlns:xlink"],"xlink:href"),t("transform",_h(o,u)),t("width",i),t("height",a),t("preserveAspectRatio",!1===e.aspect?"none":"xMidYMid")},bound:function(t,e){const n=e.image,r=Rh(e,n),i=$h(e,n),a=(e.x||0)-qh(e.align,r),o=(e.y||0)-Lh(e.baseline,i);return t.set(a,o,a+r,o+i)},draw:function(t,e,n){fh(e,e=>{if(n&&!n.intersects(e.bounds))return;const r=Oh(e,this);let i,a,o,u,s=Rh(e,r),l=$h(e,r),c=(e.x||0)-qh(e.align,s),f=(e.y||0)-Lh(e.baseline,l);!1!==e.aspect&&(a=r.width/r.height,o=e.width/e.height,a==a&&o==o&&a!==o&&(o<a?(u=s/a,f+=(l-u)/2,l=u):(u=l*a,c+=(s-u)/2,s=u))),(r.complete||r.toDataURL)&&(nh(t,e),t.globalAlpha=null!=(i=e.opacity)?i:1,t.imageSmoothingEnabled=!1!==e.smooth,t.drawImage(r,c,f,s,l))})},pick:mh(),isect:p,get:Oh,xOffset:qh,yOffset:Lh},Ph=Ah("line",(function(t,e){const n=e[0],r=n.interpolate||"linear";return lf.curve(Ec(r,n.orient,n.tension)).context(t)(e)}),(function(t,e){for(var n,r,i=Math.pow(t[0].strokeWidth||1,2),a=t.length;--a>=0;)if(!1!==t[a].defined&&(n=t[a].x-e[0])*n+(r=t[a].y-e[1])*r<i)return t[a];return null}));function jh(t,e){var n=e.path;if(null==n)return!0;var r=e.x||0,i=e.y||0,a=e.scaleX||1,o=e.scaleY||1,u=(e.angle||0)*Sc,s=e.pathCache;s&&s.path===n||((e.pathCache=s=Fc(n)).path=n),u&&t.rotate&&t.translate?(t.translate(r,i),t.rotate(u),Uc(t,s,0,0,a,o),t.rotate(-u),t.translate(-r,-i)):Uc(t,s,r,i,a,o)}var Ih={type:"path",tag:"path",nested:!1,attr:function(t,e){var n=e.scaleX||1,r=e.scaleY||1;1===n&&1===r||t("vector-effect","non-scaling-stroke"),t("transform",function(t){return _h(t.x||0,t.y||0)+(t.angle?" "+xh(t.angle):"")+(t.scaleX||t.scaleY?" "+(e=t.scaleX||1,n=t.scaleY||1,"scale("+e+","+n+")"):"");var e,n}(e)),t("d",e.path)},bound:function(t,e){return jh(Wf(t,e.angle),e)?t.set(0,0,0,0):Ef(t,e,!0)},draw:dh(jh),pick:vh(jh),isect:Zf(jh)};function Wh(t,e){t.beginPath(),pf(t,e)}var Hh={type:"rect",tag:"path",nested:!1,attr:function(t,e){t("d",pf(null,e))},bound:function(t,e){var n,r;return Ef(t.set(n=e.x||0,r=e.y||0,n+e.width||0,r+e.height||0),e)},draw:dh(Wh),pick:vh(Wh),isect:Kf};function Yh(t,e,n){var r,i,a,o;return!(!e.stroke||!sh(t,e,n))&&(r=e.x||0,i=e.y||0,a=null!=e.x2?e.x2:r,o=null!=e.y2?e.y2:i,t.beginPath(),t.moveTo(r,i),t.lineTo(a,o),!0)}var Vh={type:"rule",tag:"line",nested:!1,attr:function(t,e){t("transform",bh(e)),t("x2",null!=e.x2?e.x2-(e.x||0):0),t("y2",null!=e.y2?e.y2-(e.y||0):0)},bound:function(t,e){var n,r;return Ef(t.set(n=e.x||0,r=e.y||0,null!=e.x2?e.x2:n,null!=e.y2?e.y2:r),e)},draw:function(t,e,n){fh(e,e=>{if(!n||n.intersects(e.bounds)){var r=null==e.opacity?1:e.opacity;r&&Yh(t,e,r)&&(nh(t,e),t.stroke())}})},pick:mh((function(t,e,n,r){return!!t.isPointInStroke&&(Yh(t,e,1)&&t.isPointInStroke(n,r))})),isect:th},Gh=wh("shape",(function(t,e){return(e.mark.shape||e.shape).context(t)(e)})),Xh=wh("symbol",(function(t,e){return ff.context(t)(e)}),Qf);const Jh=mt();var Zh={height:rd,measureWidth:ed,estimateWidth:Kh,width:Kh,canvas:Qh};function Qh(t){Zh.width=t&&Xf?ed:Kh}function Kh(t,e){return td(ud(t,e),rd(t))}function td(t,e){return~~(.8*t.length*e)}function ed(t,e){return rd(t)<=0||!(e=ud(t,e))?0:nd(e,ld(t))}function nd(t,e){const n=`(${e}) ${t}`;let r=Jh.get(n);return void 0===r&&(Xf.font=e,r=Xf.measureText(t).width,Jh.set(n,r)),r}function rd(t){return null!=t.fontSize?+t.fontSize||0:11}function id(t){return null!=t.lineHeight?t.lineHeight:rd(t)+2}function ad(t){return e=t.lineBreak&&t.text&&!v(t.text)?t.text.split(t.lineBreak):t.text,v(e)?e.length>1?e:e[0]:e;var e}function od(t){const e=ad(t);return(v(e)?e.length-1:0)*id(t)}function ud(t,e){const n=null==e?"":(e+"").trim();return t.limit>0&&n.length?function(t,e){var n=+t.limit,r=function(t){if(Zh.width===ed){const e=ld(t);return t=>nd(t,e)}{const e=rd(t);return t=>td(t,e)}}(t);if(r(e)<n)return e;var i,a=t.ellipsis||"…",o="rtl"===t.dir,u=0,s=e.length;if(n-=r(a),o){for(;u<s;)i=u+s>>>1,r(e.slice(i))>n?u=i+1:s=i;return a+e.slice(u)}for(;u<s;)i=1+(u+s>>>1),r(e.slice(0,i))<n?u=i:s=i-1;return e.slice(0,u)+a}(t,n):n}function sd(t,e){var n=t.font;return(e&&n?String(n).replace(/"/g,"'"):n)||"sans-serif"}function ld(t,e){return(t.fontStyle?t.fontStyle+" ":"")+(t.fontVariant?t.fontVariant+" ":"")+(t.fontWeight?t.fontWeight+" ":"")+rd(t)+"px "+sd(t,e)}function cd(t){var e=t.baseline,n=rd(t);return Math.round("top"===e?.79*n:"middle"===e?.3*n:"bottom"===e?-.21*n:"line-top"===e?.29*n+.5*id(t):"line-bottom"===e?.29*n-.5*id(t):0)}Qh(!0);var fd={left:"start",center:"middle",right:"end"},hd=new vf;function dd(t){var e,n=t.x||0,r=t.y||0,i=t.radius||0;return i&&(e=(t.theta||0)-Bc,n+=i*Math.cos(e),r+=i*Math.sin(e)),hd.x1=n,hd.y1=r,hd}function pd(t,e,n){var r,i=Zh.height(e),a=e.align,o=dd(e),u=o.x1,s=o.y1,l=e.dx||0,c=(e.dy||0)+cd(e)-Math.round(.8*i),f=ad(e);if(v(f)?(i+=id(e)*(f.length-1),r=f.reduce((t,n)=>Math.max(t,Zh.width(e,n)),0)):r=Zh.width(e,f),"center"===a?l-=r/2:"right"===a&&(l-=r),t.set(l+=u,c+=s,l+r,c+i),e.angle&&!n)t.rotate(e.angle*Sc,u,s);else if(2===n)return t.rotatedPoints(e.angle*Sc,u,s);return t}var gd={arc:kh,area:Mh,group:zh,image:Uh,line:Ph,path:Ih,rect:Hh,rule:Vh,shape:Gh,symbol:Xh,text:{type:"text",tag:"text",nested:!1,attr:function(t,e){var n,r=e.dx||0,i=(e.dy||0)+cd(e),a=dd(e),o=a.x1,u=a.y1,s=e.angle||0;t("text-anchor",fd[e.align]||"start"),s?(n=_h(o,u)+" "+xh(s),(r||i)&&(n+=" "+_h(r,i))):n=_h(o+r,u+i),t("transform",n)},bound:pd,draw:function(t,e,n){fh(e,e=>{var r,i,a,o,u,s,l,c=null==e.opacity?1:e.opacity;if(!(n&&!n.intersects(e.bounds)||0===c||e.fontSize<=0||null==e.text||0===e.text.length)){if(t.font=ld(e),t.textAlign=e.align||"left",i=(r=dd(e)).x1,a=r.y1,e.angle&&(t.save(),t.translate(i,a),t.rotate(e.angle*Sc),i=a=0),i+=e.dx||0,a+=(e.dy||0)+cd(e),s=ad(e),nh(t,e),v(s))for(u=id(e),o=0;o<s.length;++o)l=ud(e,s[o]),e.fill&&oh(t,e,c)&&t.fillText(l,i,a),e.stroke&&sh(t,e,c)&&t.strokeText(l,i,a),a+=u;else l=ud(e,s),e.fill&&oh(t,e,c)&&t.fillText(l,i,a),e.stroke&&sh(t,e,c)&&t.strokeText(l,i,a);e.angle&&t.restore()}})},pick:mh((function(t,e,n,r,i,a){if(e.fontSize<=0)return!1;if(!e.angle)return!0;var o=dd(e),u=o.x1,s=o.y1,l=pd(hd,e,1),c=-e.angle*Sc,f=Math.cos(c),h=Math.sin(c),d=f*i-h*a+(u-f*u+h*s),p=h*i+f*a+(s-h*u-f*s);return l.contains(d,p)})),isect:function(t,e){var n=pd(hd,t,2);return eh(e,n[0],n[1],n[2],n[3])||eh(e,n[0],n[1],n[4],n[5])||eh(e,n[4],n[5],n[6],n[7])||eh(e,n[2],n[3],n[6],n[7])}},trail:Ah("trail",(function(t,e){return hf.context(t)(e)}),(function(t,e){for(var n,r,i=t.length;--i>=0;)if(!1!==t[i].defined&&(n=t[i].x-e[0])*n+(r=t[i].y-e[1])*r<(n=t[i].size||1)*n)return t[i];return null}))};function md(t,e,n){var r=gd[t.mark.marktype],i=e||r.bound;return r.nested&&(t=t.mark),i(t.bounds||(t.bounds=new vf),t,n)}var yd={mark:null};function vd(t,e,n){var r,i,a,o,u=gd[t.marktype],s=u.bound,l=t.items,c=l&&l.length;if(u.nested)return c?a=l[0]:(yd.mark=t,a=yd),o=md(a,s,n),e=e&&e.union(o)||o;if(e=e||t.bounds&&t.bounds.clear()||new vf,c)for(r=0,i=l.length;r<i;++r)e.union(md(l[r],s,n));return t.bounds=e}var _d=["marktype","name","role","interactive","clip","items","zindex","x","y","width","height","align","baseline","fill","fillOpacity","opacity","blend","stroke","strokeOpacity","strokeWidth","strokeCap","strokeDash","strokeDashOffset","strokeForeground","strokeOffset","startAngle","endAngle","innerRadius","outerRadius","cornerRadius","padAngle","cornerRadiusTopLeft","cornerRadiusTopRight","cornerRadiusBottomLeft","cornerRadiusBottomRight","interpolate","tension","orient","defined","url","aspect","smooth","path","scaleX","scaleY","x2","y2","size","shape","text","angle","theta","radius","dir","dx","dy","ellipsis","limit","lineBreak","lineHeight","font","fontSize","fontWeight","fontStyle","fontVariant","description","aria","ariaRole","ariaRoleDescription"];function xd(t,e){return JSON.stringify(t,_d,e)}function bd(t){return function t(e){var n,r,i,a=e.marktype,o=e.items;if(o)for(r=0,i=o.length;r<i;++r)n=a?"mark":"group",o[r][n]=e,o[r].zindex&&(o[r][n].zdirty=!0),"group"===(a||n)&&t(o[r]);a&&vd(e);return e}("string"==typeof t?JSON.parse(t):t)}function wd(t){arguments.length?this.root=bd(t):(this.root=kd({marktype:"group",name:"root",role:"frame"}),this.root.items=[new xf(this.root)])}function kd(t,e){const n={bounds:new vf,clip:!!t.clip,group:e,interactive:!1!==t.interactive,items:[],marktype:t.marktype,name:t.name||void 0,role:t.role||void 0,zindex:t.zindex||0};return null!=t.aria&&(n.aria=t.aria),t.description&&(n.description=t.description),n}function Ad(t,e,n){return!t&&"undefined"!=typeof document&&document.createElement&&(t=document),t?n?t.createElementNS(n,e):t.createElement(e):null}function Md(t,e){e=e.toLowerCase();for(var n=t.childNodes,r=0,i=n.length;r<i;++r)if(n[r].tagName.toLowerCase()===e)return n[r]}function Ed(t,e,n,r){var i,a=t.childNodes[e];return a&&a.tagName.toLowerCase()===n.toLowerCase()||(i=a||null,a=Ad(t.ownerDocument,n,r),t.insertBefore(a,i)),a}function Dd(t,e){for(var n=t.childNodes,r=n.length;r>e;)t.removeChild(n[--r]);return t}function Cd(t){return"mark-"+t.marktype+(t.role?" role-"+t.role:"")+(t.name?" "+t.name:"")}function Fd(t,e){var n=e.getBoundingClientRect();return[t.clientX-n.left-(e.clientLeft||0),t.clientY-n.top-(e.clientTop||0)]}function Sd(t,e){this._active=null,this._handlers={},this._loader=t||Ga(),this._tooltip=e||Bd}function Bd(t,e,n,r){t.element().setAttribute("title",r||"")}function Td(t){this._el=null,this._bgcolor=null,this._loader=new kf(t)}wd.prototype={toJSON(t){return xd(this.root,t||0)},mark(t,e,n){var r=kd(t,e=e||this.root.items[0]);return e.items[n]=r,r.zindex&&(r.group.zdirty=!0),r}},Sd.prototype={initialize(t,e,n){return this._el=t,this._obj=n||null,this.origin(e)},element(){return this._el},canvas(){return this._el&&this._el.firstChild},origin(t){return arguments.length?(this._origin=t||[0,0],this):this._origin.slice()},scene(t){return arguments.length?(this._scene=t,this):this._scene},on(){},off(){},_handlerIndex(t,e,n){for(let r=t?t.length:0;--r>=0;)if(t[r].type===e&&(!n||t[r].handler===n))return r;return-1},handlers(t){const e=this._handlers,n=[];if(t)n.push.apply(n,e[this.eventName(t)]);else for(const t in e)n.push.apply(n,e[t]);return n},eventName(t){const e=t.indexOf(".");return e<0?t:t.slice(0,e)},handleHref(t,e,n){this._loader.sanitize(n,{context:"href"}).then(e=>{const n=new MouseEvent(t.type,t),r=Ad(null,"a");for(const t in e)r.setAttribute(t,e[t]);r.dispatchEvent(n)}).catch(()=>{})},handleTooltip(t,e,n){if(e&&null!=e.tooltip){e=function(t,e,n,r){var i,a,o=t&&t.mark;if(o&&(i=gd[o.marktype]).tip){for((a=Fd(e,n))[0]-=r[0],a[1]-=r[1];t=t.mark.group;)a[0]-=t.x||0,a[1]-=t.y||0;t=i.tip(o.items,a)}return t}(e,t,this.canvas(),this._origin);const r=n&&e&&e.tooltip||null;this._tooltip.call(this._obj,this,t,e,r)}},getItemBoundingClientRect(t){const e=this.canvas();if(!e)return;const n=e.getBoundingClientRect(),r=this._origin,i=t.bounds,a=i.width(),o=i.height();let u=i.x1+r[0]+n.left,s=i.y1+r[1]+n.top;for(;t.mark&&(t=t.mark.group);)u+=t.x||0,s+=t.y||0;return{x:u,y:s,width:a,height:o,left:u,top:s,right:u+a,bottom:s+o}}},Td.prototype={initialize(t,e,n,r,i){return this._el=t,this.resize(e,n,r,i)},element(){return this._el},canvas(){return this._el&&this._el.firstChild},background(t){return 0===arguments.length?this._bgcolor:(this._bgcolor=t,this)},resize(t,e,n,r){return this._width=t,this._height=e,this._origin=n||[0,0],this._scale=r||1,this},dirty(){},render(t){var e=this;return e._call=function(){e._render(t)},e._call(),e._call=null,e},_render(){},renderAsync(t){var e=this.render(t);return this._ready?this._ready.then(()=>e):Promise.resolve(e)},_load(t,e){var n=this,r=n._loader[t](e);if(!n._ready){var i=n._call;n._ready=n._loader.ready().then(t=>{t&&i(),n._ready=null})}return r},sanitizeURL(t){return this._load("sanitizeURL",t)},loadImage(t){return this._load("loadImage",t)}};const zd="dragenter",Nd="dragleave",Od="dragover",Rd="mousedown",$d="mousemove",qd="mouseout",Ld="mouseover",Ud="click",Pd="mousewheel",jd="touchstart",Id="touchmove",Wd="touchend",Hd=$d,Yd=qd,Vd=Ud;function Gd(t,e){Sd.call(this,t,e),this._down=null,this._touch=null,this._first=!0,this._events={}}function Xd(t,e){(t=>t===jd||t===Id||t===Wd?[jd,Id,Wd]:[t])(e).forEach(e=>function(t,e){const n=t.canvas();n&&!t._events[e]&&(t._events[e]=1,n.addEventListener(e,t[e]?n=>t[e](n):n=>t.fire(e,n)))}(t,e))}function Jd(t,e,n){return function(r){const i=this._active,a=this.pickEvent(r);a===i||(i&&i.exit||this.fire(n,r),this._active=a,this.fire(e,r)),this.fire(t,r)}}function Zd(t){return function(e){this.fire(t,e),this._active=null}}ut(Gd,Sd,{initialize(t,e,n){return this._canvas=t&&Md(t,"canvas"),[Ud,Rd,$d,qd,Nd].forEach(t=>Xd(this,t)),Sd.prototype.initialize.call(this,t,e,n)},canvas(){return this._canvas},context(){return this._canvas.getContext("2d")},events:["keydown","keypress","keyup",zd,Nd,Od,Rd,"mouseup",$d,qd,Ld,Ud,"dblclick","wheel",Pd,jd,Id,Wd],DOMMouseScroll(t){this.fire(Pd,t)},mousemove:Jd($d,Ld,qd),dragover:Jd(Od,zd,Nd),mouseout:Zd(qd),dragleave:Zd(Nd),mousedown(t){this._down=this._active,this.fire(Rd,t)},click(t){this._down===this._active&&(this.fire(Ud,t),this._down=null)},touchstart(t){this._touch=this.pickEvent(t.changedTouches[0]),this._first&&(this._active=this._touch,this._first=!1),this.fire(jd,t,!0)},touchmove(t){this.fire(Id,t,!0)},touchend(t){this.fire(Wd,t,!0),this._touch=null},fire(t,e,n){const r=n?this._touch:this._active,i=this._handlers[t];if(e.vegaType=t,t===Vd&&r&&r.href?this.handleHref(e,r,r.href):t!==Hd&&t!==Yd||this.handleTooltip(e,r,t!==Yd),i)for(let t=0,n=i.length;t<n;++t)i[t].handler.call(this._obj,e,r)},on(t,e){const n=this.eventName(t),r=this._handlers;return this._handlerIndex(r[n],t,e)<0&&(Xd(this,t),(r[n]||(r[n]=[])).push({type:t,handler:e})),this},off(t,e){const n=this.eventName(t),r=this._handlers[n],i=this._handlerIndex(r,t,e);return i>=0&&r.splice(i,1),this},pickEvent(t){const e=Fd(t,this._canvas),n=this._origin;return this.pick(this._scene,e[0],e[1],e[0]-n[0],e[1]-n[1])},pick(t,e,n,r,i){const a=this.context();return gd[t.marktype].pick.call(this,a,t,e,n,r,i)}});var Qd="undefined"!=typeof window&&window.devicePixelRatio||1;function Kd(t){Td.call(this,t),this._options={},this._redraw=!1,this._dirty=new vf,this._tempb=new vf}const tp=Td.prototype;function ep(t,e){Sd.call(this,t,e);const n=this;n._hrefHandler=np(n,(t,e)=>{e&&e.href&&n.handleHref(t,e,e.href)}),n._tooltipHandler=np(n,(t,e)=>{n.handleTooltip(t,e,t.type!==Yd)})}ut(Kd,Td,{initialize(t,e,n,r,i,a){return this._options=a||{},this._canvas=this._options.externalContext?null:bf(1,1,this._options.type),t&&this._canvas&&(Dd(t,0).appendChild(this._canvas),this._canvas.setAttribute("class","marks")),tp.initialize.call(this,t,e,n,r,i)},resize(t,e,n,r){if(tp.resize.call(this,t,e,n,r),this._canvas)!function(t,e,n,r,i,a){const o="undefined"!=typeof HTMLElement&&t instanceof HTMLElement&&null!=t.parentNode,u=t.getContext("2d"),s=o?Qd:i;t.width=e*s,t.height=n*s;for(const t in a)u[t]=a[t];o&&1!==s&&(t.style.width=e+"px",t.style.height=n+"px"),u.pixelRatio=s,u.setTransform(s,0,0,s,s*r[0],s*r[1])}(this._canvas,this._width,this._height,this._origin,this._scale,this._options.context);else{const t=this._options.externalContext;t||u("CanvasRenderer is missing a valid canvas or context"),t.scale(this._scale,this._scale),t.translate(this._origin[0],this._origin[1])}return this._redraw=!0,this},canvas(){return this._canvas},context(){return this._options.externalContext||(this._canvas?this._canvas.getContext("2d"):null)},dirty(t){const e=this._tempb.clear().union(t.bounds);let n=t.mark.group;for(;n;)e.translate(n.x||0,n.y||0),n=n.mark.group;this._dirty.union(e)},_render(t){const e=this.context(),n=this._origin,r=this._width,i=this._height,a=this._dirty,o=((t,e,n)=>(new vf).set(0,0,e,n).translate(-t[0],-t[1]))(n,r,i);e.save();const u=this._redraw||a.empty()?(this._redraw=!1,o.expand(1)):function(t,e,n){return e.expand(1).round(),t.pixelRatio%1&&e.scale(t.pixelRatio).round().scale(1/t.pixelRatio),e.translate(-n[0]%1,-n[1]%1),t.beginPath(),t.rect(e.x1,e.y1,e.width(),e.height()),t.clip(),e}(e,o.intersect(a),n);return this.clear(-n[0],-n[1],r,i),this.draw(e,t,u),e.restore(),a.clear(),this},draw(t,e,n){const r=gd[e.marktype];e.clip&&function(t,e){var n=e.clip;t.save(),H(n)?(t.beginPath(),n(t),t.clip()):Eh(t,e.group)}(t,e),r.draw.call(this,t,e,n),e.clip&&t.restore()},clear(t,e,n,r){const i=this._options,a=this.context();"pdf"===i.type||i.externalContext||a.clearRect(t,e,n,r),null!=this._bgcolor&&(a.fillStyle=this._bgcolor,a.fillRect(t,e,n,r))}});const np=(t,e)=>n=>{let r=n.target.__data__;r=Array.isArray(r)?r[0]:r,n.vegaType=n.type,e.call(t._obj,n,r)};function rp(t,e,n){const r=t-e+2*n;return t?r>0?r:1:0}ut(ep,Sd,{initialize(t,e,n){let r=this._svg;return r&&(r.removeEventListener(Vd,this._hrefHandler),r.removeEventListener(Hd,this._tooltipHandler),r.removeEventListener(Yd,this._tooltipHandler)),this._svg=r=t&&Md(t,"svg"),r&&(r.addEventListener(Vd,this._hrefHandler),r.addEventListener(Hd,this._tooltipHandler),r.addEventListener(Yd,this._tooltipHandler)),Sd.prototype.initialize.call(this,t,e,n)},canvas(){return this._svg},on(t,e){const n=this.eventName(t),r=this._handlers;if(this._handlerIndex(r[n],t,e)<0){const i={type:t,handler:e,listener:np(this,e)};(r[n]||(r[n]=[])).push(i),this._svg&&this._svg.addEventListener(n,i.listener)}return this},off(t,e){const n=this.eventName(t),r=this._handlers[n],i=this._handlerIndex(r,t,e);return i>=0&&(this._svg&&this._svg.removeEventListener(n,r[i].listener),r.splice(i,1)),this}});const ip="linear",ap="log",op="pow",up="sqrt",sp="symlog",lp="time",cp="utc",fp="sequential",hp="quantile",dp="quantize",pp="threshold",gp="ordinal",mp="point",yp="band",vp="bin-ordinal",_p="continuous",xp="discrete",bp="discretizing",wp="interpolating",kp="temporal";function Ap(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function Mp(t,e){switch(arguments.length){case 0:break;case 1:"function"==typeof t?this.interpolator(t):this.range(t);break;default:this.domain(t),"function"==typeof e?this.interpolator(e):this.range(e)}return this}const Ep=Symbol("implicit");function Dp(){var t=new Map,e=[],n=[],r=Ep;function i(i){var a=i+"",o=t.get(a);if(!o){if(r!==Ep)return r;t.set(a,o=e.push(i))}return n[(o-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new Map;for(const r of n){const n=r+"";t.has(n)||t.set(n,e.push(r))}return i},i.range=function(t){return arguments.length?(n=Array.from(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Dp(e,n).unknown(r)},Ap.apply(i,arguments),i}function Cp(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Fp(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Sp(){}var Bp=.7,Tp=1/Bp,zp="\\s*([+-]?\\d+)\\s*",Np="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Op="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Rp=/^#([0-9a-f]{3,8})$/,$p=new RegExp("^rgb\\("+[zp,zp,zp]+"\\)$"),qp=new RegExp("^rgb\\("+[Op,Op,Op]+"\\)$"),Lp=new RegExp("^rgba\\("+[zp,zp,zp,Np]+"\\)$"),Up=new RegExp("^rgba\\("+[Op,Op,Op,Np]+"\\)$"),Pp=new RegExp("^hsl\\("+[Np,Op,Op]+"\\)$"),jp=new RegExp("^hsla\\("+[Np,Op,Op,Np]+"\\)$"),Ip={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Wp(){return this.rgb().formatHex()}function Hp(){return this.rgb().formatRgb()}function Yp(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=Rp.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Vp(e):3===n?new Zp(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?Gp(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?Gp(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=$p.exec(t))?new Zp(e[1],e[2],e[3],1):(e=qp.exec(t))?new Zp(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Lp.exec(t))?Gp(e[1],e[2],e[3],e[4]):(e=Up.exec(t))?Gp(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Pp.exec(t))?eg(e[1],e[2]/100,e[3]/100,1):(e=jp.exec(t))?eg(e[1],e[2]/100,e[3]/100,e[4]):Ip.hasOwnProperty(t)?Vp(Ip[t]):"transparent"===t?new Zp(NaN,NaN,NaN,0):null}function Vp(t){return new Zp(t>>16&255,t>>8&255,255&t,1)}function Gp(t,e,n,r){return r<=0&&(t=e=n=NaN),new Zp(t,e,n,r)}function Xp(t){return t instanceof Sp||(t=Yp(t)),t?new Zp((t=t.rgb()).r,t.g,t.b,t.opacity):new Zp}function Jp(t,e,n,r){return 1===arguments.length?Xp(t):new Zp(t,e,n,null==r?1:r)}function Zp(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Qp(){return"#"+tg(this.r)+tg(this.g)+tg(this.b)}function Kp(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function tg(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function eg(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new ig(t,e,n,r)}function ng(t){if(t instanceof ig)return new ig(t.h,t.s,t.l,t.opacity);if(t instanceof Sp||(t=Yp(t)),!t)return new ig;if(t instanceof ig)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),a=Math.max(e,n,r),o=NaN,u=a-i,s=(a+i)/2;return u?(o=e===a?(n-r)/u+6*(n<r):n===a?(r-e)/u+2:(e-n)/u+4,u/=s<.5?a+i:2-a-i,o*=60):u=s>0&&s<1?0:o,new ig(o,u,s,t.opacity)}function rg(t,e,n,r){return 1===arguments.length?ng(t):new ig(t,e,n,null==r?1:r)}function ig(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function ag(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Cp(Sp,Yp,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Wp,formatHex:Wp,formatHsl:function(){return ng(this).formatHsl()},formatRgb:Hp,toString:Hp}),Cp(Zp,Jp,Fp(Sp,{brighter:function(t){return t=null==t?Tp:Math.pow(Tp,t),new Zp(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?Bp:Math.pow(Bp,t),new Zp(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Qp,formatHex:Qp,formatRgb:Kp,toString:Kp})),Cp(ig,rg,Fp(Sp,{brighter:function(t){return t=null==t?Tp:Math.pow(Tp,t),new ig(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Bp:Math.pow(Bp,t),new ig(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Zp(ag(t>=240?t-240:t+120,i,r),ag(t,i,r),ag(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const og=Math.PI/180,ug=180/Math.PI,sg=.96422,lg=.82521,cg=4/29,fg=6/29,hg=3*fg*fg;function dg(t){if(t instanceof gg)return new gg(t.l,t.a,t.b,t.opacity);if(t instanceof wg)return kg(t);t instanceof Zp||(t=Xp(t));var e,n,r=_g(t.r),i=_g(t.g),a=_g(t.b),o=mg((.2225045*r+.7168786*i+.0606169*a)/1);return r===i&&i===a?e=n=o:(e=mg((.4360747*r+.3850649*i+.1430804*a)/sg),n=mg((.0139322*r+.0971045*i+.7141733*a)/lg)),new gg(116*o-16,500*(e-o),200*(o-n),t.opacity)}function pg(t,e,n,r){return 1===arguments.length?dg(t):new gg(t,e,n,null==r?1:r)}function gg(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function mg(t){return t>.008856451679035631?Math.pow(t,1/3):t/hg+cg}function yg(t){return t>fg?t*t*t:hg*(t-cg)}function vg(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function _g(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function xg(t){if(t instanceof wg)return new wg(t.h,t.c,t.l,t.opacity);if(t instanceof gg||(t=dg(t)),0===t.a&&0===t.b)return new wg(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*ug;return new wg(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function bg(t,e,n,r){return 1===arguments.length?xg(t):new wg(t,e,n,null==r?1:r)}function wg(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function kg(t){if(isNaN(t.h))return new gg(t.l,0,0,t.opacity);var e=t.h*og;return new gg(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}Cp(gg,pg,Fp(Sp,{brighter:function(t){return new gg(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new gg(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Zp(vg(3.1338561*(e=sg*yg(e))-1.6168667*(t=1*yg(t))-.4906146*(n=lg*yg(n))),vg(-.9787684*e+1.9161415*t+.033454*n),vg(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Cp(wg,bg,Fp(Sp,{brighter:function(t){return new wg(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new wg(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return kg(this).rgb()}}));var Ag=-.14861,Mg=1.78277,Eg=-.29227,Dg=-.90649,Cg=1.97294,Fg=Cg*Dg,Sg=Cg*Mg,Bg=Mg*Eg-Dg*Ag;function Tg(t){if(t instanceof Ng)return new Ng(t.h,t.s,t.l,t.opacity);t instanceof Zp||(t=Xp(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(Bg*r+Fg*e-Sg*n)/(Bg+Fg-Sg),a=r-i,o=(Cg*(n-i)-Eg*a)/Dg,u=Math.sqrt(o*o+a*a)/(Cg*i*(1-i)),s=u?Math.atan2(o,a)*ug-120:NaN;return new Ng(s<0?s+360:s,u,i,t.opacity)}function zg(t,e,n,r){return 1===arguments.length?Tg(t):new Ng(t,e,n,null==r?1:r)}function Ng(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Og(t,e,n,r,i){var a=t*t,o=a*t;return((1-3*t+3*a-o)*e+(4-6*a+3*o)*n+(1+3*t+3*a-3*o)*r+o*i)/6}function Rg(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],a=t[r+1],o=r>0?t[r-1]:2*i-a,u=r<e-1?t[r+2]:2*a-i;return Og((n-r/e)*e,o,i,a,u)}}function $g(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],a=t[r%e],o=t[(r+1)%e],u=t[(r+2)%e];return Og((n-r/e)*e,i,a,o,u)}}Cp(Ng,zg,Fp(Sp,{brighter:function(t){return t=null==t?Tp:Math.pow(Tp,t),new Ng(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Bp:Math.pow(Bp,t),new Ng(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*og,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new Zp(255*(e+n*(Ag*r+Mg*i)),255*(e+n*(Eg*r+Dg*i)),255*(e+n*(Cg*r)),this.opacity)}}));var qg=t=>()=>t;function Lg(t,e){return function(n){return t+n*e}}function Ug(t,e){var n=e-t;return n?Lg(t,n>180||n<-180?n-360*Math.round(n/360):n):qg(isNaN(t)?e:t)}function Pg(t){return 1==(t=+t)?jg:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):qg(isNaN(e)?n:e)}}function jg(t,e){var n=e-t;return n?Lg(t,n):qg(isNaN(t)?e:t)}var Ig=function t(e){var n=Pg(e);function r(t,e){var r=n((t=Jp(t)).r,(e=Jp(e)).r),i=n(t.g,e.g),a=n(t.b,e.b),o=jg(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=a(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function Wg(t){return function(e){var n,r,i=e.length,a=new Array(i),o=new Array(i),u=new Array(i);for(n=0;n<i;++n)r=Jp(e[n]),a[n]=r.r||0,o[n]=r.g||0,u[n]=r.b||0;return a=t(a),o=t(o),u=t(u),r.opacity=1,function(t){return r.r=a(t),r.g=o(t),r.b=u(t),r+""}}}var Hg=Wg(Rg),Yg=Wg($g);function Vg(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(a){for(n=0;n<r;++n)i[n]=t[n]*(1-a)+e[n]*a;return i}}function Gg(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Xg(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),o=new Array(r);for(n=0;n<i;++n)a[n]=nm(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<i;++n)o[n]=a[n](t);return o}}function Jg(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Zg(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Qg(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=nm(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}var Kg=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,tm=new RegExp(Kg.source,"g");function em(t,e){var n,r,i,a=Kg.lastIndex=tm.lastIndex=0,o=-1,u=[],s=[];for(t+="",e+="";(n=Kg.exec(t))&&(r=tm.exec(e));)(i=r.index)>a&&(i=e.slice(a,i),u[o]?u[o]+=i:u[++o]=i),(n=n[0])===(r=r[0])?u[o]?u[o]+=r:u[++o]=r:(u[++o]=null,s.push({i:o,x:Zg(n,r)})),a=tm.lastIndex;return a<e.length&&(i=e.slice(a),u[o]?u[o]+=i:u[++o]=i),u.length<2?s[0]?function(t){return function(e){return t(e)+""}}(s[0].x):function(t){return function(){return t}}(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)u[(n=s[r]).i]=n.x(t);return u.join("")})}function nm(t,e){var n,r=typeof e;return null==e||"boolean"===r?qg(e):("number"===r?Zg:"string"===r?(n=Yp(e))?(e=n,Ig):em:e instanceof Yp?Ig:e instanceof Date?Jg:Gg(e)?Vg:Array.isArray(e)?Xg:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Qg:Zg)(t,e)}function rm(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}var im,am=180/Math.PI,om={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function um(t,e,n,r,i,a){var o,u,s;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,s/=u),t*r<e*n&&(t=-t,e=-e,s=-s,o=-o),{translateX:i,translateY:a,rotate:Math.atan2(e,t)*am,skewX:Math.atan(s)*am,scaleX:o,scaleY:u}}function sm(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(a,o){var u=[],s=[];return a=t(a),o=t(o),function(t,r,i,a,o,u){if(t!==i||r!==a){var s=o.push("translate(",null,e,null,n);u.push({i:s-4,x:Zg(t,i)},{i:s-2,x:Zg(r,a)})}else(i||a)&&o.push("translate("+i+e+a+n)}(a.translateX,a.translateY,o.translateX,o.translateY,u,s),function(t,e,n,a){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),a.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Zg(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(a.rotate,o.rotate,u,s),function(t,e,n,a){t!==e?a.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Zg(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(a.skewX,o.skewX,u,s),function(t,e,n,r,a,o){if(t!==n||e!==r){var u=a.push(i(a)+"scale(",null,",",null,")");o.push({i:u-4,x:Zg(t,n)},{i:u-2,x:Zg(e,r)})}else 1===n&&1===r||a.push(i(a)+"scale("+n+","+r+")")}(a.scaleX,a.scaleY,o.scaleX,o.scaleY,u,s),a=o=null,function(t){for(var e,n=-1,r=s.length;++n<r;)u[(e=s[n]).i]=e.x(t);return u.join("")}}}var lm=sm((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?om:um(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),cm=sm((function(t){return null==t?om:(im||(im=document.createElementNS("http://www.w3.org/2000/svg","g")),im.setAttribute("transform",t),(t=im.transform.baseVal.consolidate())?um((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):om)}),", ",")",")");function fm(t){return((t=Math.exp(t))+1/t)/2}var hm=function t(e,n,r){function i(t,i){var a,o,u=t[0],s=t[1],l=t[2],c=i[0],f=i[1],h=i[2],d=c-u,p=f-s,g=d*d+p*p;if(g<1e-12)o=Math.log(h/l)/e,a=function(t){return[u+t*d,s+t*p,l*Math.exp(e*t*o)]};else{var m=Math.sqrt(g),y=(h*h-l*l+r*g)/(2*l*n*m),v=(h*h-l*l-r*g)/(2*h*n*m),_=Math.log(Math.sqrt(y*y+1)-y),x=Math.log(Math.sqrt(v*v+1)-v);o=(x-_)/e,a=function(t){var r=t*o,i=fm(_),a=l/(n*m)*(i*function(t){return((t=Math.exp(2*t))-1)/(t+1)}(e*r+_)-function(t){return((t=Math.exp(t))-1/t)/2}(_));return[u+a*d,s+a*p,l*i/fm(e*r+_)]}}return a.duration=1e3*o*e/Math.SQRT2,a}return i.rho=function(e){var n=Math.max(.001,+e),r=n*n;return t(n,r,r*r)},i}(Math.SQRT2,2,4);function dm(t){return function(e,n){var r=t((e=rg(e)).h,(n=rg(n)).h),i=jg(e.s,n.s),a=jg(e.l,n.l),o=jg(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=a(t),e.opacity=o(t),e+""}}}var pm=dm(Ug),gm=dm(jg);function mm(t){return function(e,n){var r=t((e=bg(e)).h,(n=bg(n)).h),i=jg(e.c,n.c),a=jg(e.l,n.l),o=jg(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=i(t),e.l=a(t),e.opacity=o(t),e+""}}}var ym=mm(Ug),vm=mm(jg);function _m(t){return function e(n){function r(e,r){var i=t((e=zg(e)).h,(r=zg(r)).h),a=jg(e.s,r.s),o=jg(e.l,r.l),u=jg(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=a(t),e.l=o(Math.pow(t,n)),e.opacity=u(t),e+""}}return n=+n,r.gamma=e,r}(1)}var xm=_m(Ug),bm=_m(jg);function wm(t,e){void 0===e&&(e=t,t=nm);for(var n=0,r=e.length-1,i=e[0],a=new Array(r<0?0:r);n<r;)a[n]=t(i,i=e[++n]);return function(t){var e=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return a[e](t-e)}}var km=Object.freeze({__proto__:null,interpolate:nm,interpolateArray:function(t,e){return(Gg(e)?Vg:Xg)(t,e)},interpolateBasis:Rg,interpolateBasisClosed:$g,interpolateDate:Jg,interpolateDiscrete:function(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}},interpolateHue:function(t,e){var n=Ug(+t,+e);return function(t){var e=n(t);return e-360*Math.floor(e/360)}},interpolateNumber:Zg,interpolateNumberArray:Vg,interpolateObject:Qg,interpolateRound:rm,interpolateString:em,interpolateTransformCss:lm,interpolateTransformSvg:cm,interpolateZoom:hm,interpolateRgb:Ig,interpolateRgbBasis:Hg,interpolateRgbBasisClosed:Yg,interpolateHsl:pm,interpolateHslLong:gm,interpolateLab:function(t,e){var n=jg((t=pg(t)).l,(e=pg(e)).l),r=jg(t.a,e.a),i=jg(t.b,e.b),a=jg(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=i(e),t.opacity=a(e),t+""}},interpolateHcl:ym,interpolateHclLong:vm,interpolateCubehelix:xm,interpolateCubehelixLong:bm,piecewise:wm,quantize:function(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t(r/(e-1));return n}});function Am(t){return+t}var Mm=[0,1];function Em(t){return t}function Dm(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function Cm(t,e,n){var r=t[0],i=t[1],a=e[0],o=e[1];return i<r?(r=Dm(i,r),a=n(o,a)):(r=Dm(r,i),a=n(a,o)),function(t){return a(r(t))}}function Fm(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),a=new Array(r),o=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++o<r;)i[o]=Dm(t[o],t[o+1]),a[o]=n(e[o],e[o+1]);return function(e){var n=je(t,e,1,r)-1;return a[n](i[n](e))}}function Sm(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Bm(){var t,e,n,r,i,a,o=Mm,u=Mm,s=nm,l=Em;function c(){var t=Math.min(o.length,u.length);return l!==Em&&(l=function(t,e){var n;return t>e&&(n=t,t=e,e=n),function(n){return Math.max(t,Math.min(e,n))}}(o[0],o[t-1])),r=t>2?Fm:Cm,i=a=null,f}function f(e){return isNaN(e=+e)?n:(i||(i=r(o.map(t),u,s)))(t(l(e)))}return f.invert=function(n){return l(e((a||(a=r(u,o.map(t),Zg)))(n)))},f.domain=function(t){return arguments.length?(o=Array.from(t,Am),c()):o.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),c()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),s=rm,c()},f.clamp=function(t){return arguments.length?(l=!!t||Em,c()):l!==Em},f.interpolate=function(t){return arguments.length?(s=t,c()):s},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function Tm(){return Bm()(Em,Em)}function zm(t,e,n,r){var i,a=Ze(t,e,n);switch((r=cn(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=wn(a,o))||(r.precision=i),yn(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=kn(a,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=bn(a))||(r.precision=i-2*("%"===r.type))}return mn(r)}function Nm(t){var e=t.domain;return t.ticks=function(t){var n=e();return Xe(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return zm(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i,a=e(),o=0,u=a.length-1,s=a[o],l=a[u],c=10;for(l<s&&(i=s,s=l,l=i,i=o,o=u,u=i);c-- >0;){if((i=Je(s,l,n))===r)return a[o]=s,a[u]=l,e(a);if(i>0)s=Math.floor(s/i)*i,l=Math.ceil(l/i)*i;else{if(!(i<0))break;s=Math.ceil(s*i)/i,l=Math.floor(l*i)/i}r=i}return t},t}function Om(t,e){var n,r=0,i=(t=t.slice()).length-1,a=t[r],o=t[i];return o<a&&(n=r,r=i,i=n,n=a,a=o,o=n),t[r]=e.floor(a),t[i]=e.ceil(o),t}function Rm(t){return Math.log(t)}function $m(t){return Math.exp(t)}function qm(t){return-Math.log(-t)}function Lm(t){return-Math.exp(-t)}function Um(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Pm(t){return function(e){return-t(-e)}}function jm(t){var e,n,r=t(Rm,$m),i=r.domain,a=10;function o(){return e=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})}(a),n=function(t){return 10===t?Um:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}}(a),i()[0]<0?(e=Pm(e),n=Pm(n),t(qm,Lm)):t(Rm,$m),r}return r.base=function(t){return arguments.length?(a=+t,o()):a},r.domain=function(t){return arguments.length?(i(t),o()):i()},r.ticks=function(t){var r,o=i(),u=o[0],s=o[o.length-1];(r=s<u)&&(h=u,u=s,s=h);var l,c,f,h=e(u),d=e(s),p=null==t?10:+t,g=[];if(!(a%1)&&d-h<p){if(h=Math.floor(h),d=Math.ceil(d),u>0){for(;h<=d;++h)for(c=1,l=n(h);c<a;++c)if(!((f=l*c)<u)){if(f>s)break;g.push(f)}}else for(;h<=d;++h)for(c=a-1,l=n(h);c>=1;--c)if(!((f=l*c)<u)){if(f>s)break;g.push(f)}2*g.length<p&&(g=Xe(u,s,p))}else g=Xe(h,d,Math.min(d-h,p)).map(n);return r?g.reverse():g},r.tickFormat=function(t,i){if(null==i&&(i=10===a?".0e":","),"function"!=typeof i&&(i=mn(i)),t===1/0)return i;null==t&&(t=10);var o=Math.max(1,a*t/r.ticks().length);return function(t){var r=t/n(Math.round(e(t)));return r*a<a-.5&&(r*=a),r<=o?i(t):""}},r.nice=function(){return i(Om(i(),{floor:function(t){return n(Math.floor(e(t)))},ceil:function(t){return n(Math.ceil(e(t)))}}))},r}function Im(t){return function(e){return Math.sign(e)*Math.log1p(Math.abs(e/t))}}function Wm(t){return function(e){return Math.sign(e)*Math.expm1(Math.abs(e))*t}}function Hm(t){var e=1,n=t(Im(e),Wm(e));return n.constant=function(n){return arguments.length?t(Im(e=+n),Wm(e)):e},Nm(n)}function Ym(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function Vm(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function Gm(t){return t<0?-t*t:t*t}function Xm(t){var e=t(Em,Em),n=1;function r(){return 1===n?t(Em,Em):.5===n?t(Vm,Gm):t(Ym(n),Ym(1/n))}return e.exponent=function(t){return arguments.length?(n=+t,r()):n},Nm(e)}function Jm(){var t=Xm(Bm());return t.copy=function(){return Sm(t,Jm()).exponent(t.exponent())},Ap.apply(t,arguments),t}var Zm=1e3,Qm=6e4,Km=36e5,ty=864e5,ey=2592e6,ny=31536e6;function ry(t){return new Date(t)}function iy(t){return t instanceof Date?+t:+new Date(+t)}function ay(t,e,n,r,i,a,o,u,s){var l=Tm(),c=l.invert,f=l.domain,h=s(".%L"),d=s(":%S"),p=s("%I:%M"),g=s("%I %p"),m=s("%a %d"),y=s("%b %d"),v=s("%B"),_=s("%Y"),x=[[o,1,Zm],[o,5,5e3],[o,15,15e3],[o,30,3e4],[a,1,Qm],[a,5,3e5],[a,15,9e5],[a,30,18e5],[i,1,Km],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,ty],[r,2,1728e5],[n,1,6048e5],[e,1,ey],[e,3,7776e6],[t,1,ny]];function b(u){return(o(u)<u?h:a(u)<u?d:i(u)<u?p:r(u)<u?g:e(u)<u?n(u)<u?m:y:t(u)<u?v:_)(u)}function w(e,n,r){if(null==e&&(e=10),"number"==typeof e){var i,a=Math.abs(r-n)/e,o=Le((function(t){return t[2]})).right(x,a);return o===x.length?(i=Ze(n/ny,r/ny,e),e=t):o?(i=(o=x[a/x[o-1][2]<x[o][2]/a?o-1:o])[1],e=o[0]):(i=Math.max(Ze(n,r,e),1),e=u),e.every(i)}return e}return l.invert=function(t){return new Date(c(t))},l.domain=function(t){return arguments.length?f(Array.from(t,iy)):f().map(ry)},l.ticks=function(t){var e,n=f(),r=n[0],i=n[n.length-1],a=i<r;return a&&(e=r,r=i,i=e),e=(e=w(t,r,i))?e.range(r,i+1):[],a?e.reverse():e},l.tickFormat=function(t,e){return null==e?b:s(e)},l.nice=function(t){var e=f();return(t=w(t,e[0],e[e.length-1]))?f(Om(e,t)):l},l.copy=function(){return Sm(l,ay(t,e,n,r,i,a,o,u,s))},l}function oy(){var t,e,n,r,i,a=0,o=1,u=Em,s=!1;function l(e){return isNaN(e=+e)?i:u(0===n?.5:(e=(r(e)-t)*n,s?Math.max(0,Math.min(1,e)):e))}function c(t){return function(e){var n,r;return arguments.length?([n,r]=e,u=t(n,r),l):[u(0),u(1)]}}return l.domain=function(i){return arguments.length?([a,o]=i,t=r(a=+a),e=r(o=+o),n=t===e?0:1/(e-t),l):[a,o]},l.clamp=function(t){return arguments.length?(s=!!t,l):s},l.interpolator=function(t){return arguments.length?(u=t,l):u},l.range=c(nm),l.rangeRound=c(rm),l.unknown=function(t){return arguments.length?(i=t,l):i},function(i){return r=i,t=i(a),e=i(o),n=t===e?0:1/(e-t),l}}function uy(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function sy(){var t=Nm(oy()(Em));return t.copy=function(){return uy(t,sy())},Mp.apply(t,arguments)}function ly(){var t=Xm(oy());return t.copy=function(){return uy(t,ly()).exponent(t.exponent())},Mp.apply(t,arguments)}function cy(){var t,e,n,r,i,a,o,u=0,s=.5,l=1,c=1,f=Em,h=!1;function d(t){return isNaN(t=+t)?o:(t=.5+((t=+a(t))-e)*(c*t<c*e?r:i),f(h?Math.max(0,Math.min(1,t)):t))}function p(t){return function(e){var n,r,i;return arguments.length?([n,r,i]=e,f=wm(t,[n,r,i]),d):[f(0),f(.5),f(1)]}}return d.domain=function(o){return arguments.length?([u,s,l]=o,t=a(u=+u),e=a(s=+s),n=a(l=+l),r=t===e?0:.5/(e-t),i=e===n?0:.5/(n-e),c=e<t?-1:1,d):[u,s,l]},d.clamp=function(t){return arguments.length?(h=!!t,d):h},d.interpolator=function(t){return arguments.length?(f=t,d):f},d.range=p(nm),d.rangeRound=p(rm),d.unknown=function(t){return arguments.length?(o=t,d):o},function(o){return a=o,t=o(u),e=o(s),n=o(l),r=t===e?0:.5/(e-t),i=e===n?0:.5/(n-e),c=e<t?-1:1,d}}function fy(){var t=Xm(cy());return t.copy=function(){return uy(t,fy()).exponent(t.exponent())},Mp.apply(t,arguments)}function hy(){const t=Dp().unknown(void 0),e=t.domain,n=t.range;let r,i,a=[0,1],o=!1,u=0,s=0,l=.5;function c(){const t=e().length,c=a[1]<a[0],f=a[1-c],h=rp(t,u,s);let d=a[c-0];r=(f-d)/(h||1),o&&(r=Math.floor(r)),d+=(f-d-r*(t-u))*l,i=r*(1-u),o&&(d=Math.round(d),i=Math.round(i));const p=He(t).map(t=>d+r*t);return n(c?p.reverse():p)}return delete t.unknown,t.domain=function(t){return arguments.length?(e(t),c()):e()},t.range=function(t){return arguments.length?(a=[+t[0],+t[1]],c()):a.slice()},t.rangeRound=function(t){return a=[+t[0],+t[1]],o=!0,c()},t.bandwidth=function(){return i},t.step=function(){return r},t.round=function(t){return arguments.length?(o=!!t,c()):o},t.padding=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),u=s,c()):u},t.paddingInner=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),c()):u},t.paddingOuter=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),c()):s},t.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),c()):l},t.invertRange=function(t){if(null==t[0]||null==t[1])return;const r=a[1]<a[0],o=r?n().reverse():n(),u=o.length-1;let s,l,c,f=+t[0],h=+t[1];return f!=f||h!=h||(h<f&&(c=f,f=h,h=c),h<o[0]||f>a[1-r])?void 0:(s=Math.max(0,je(o,f)-1),l=f===h?s:je(o,h)-1,f-o[s]>i+1e-10&&++s,r&&(c=s,s=u-l,l=u-c),s>l?void 0:e().slice(s,l+1))},t.invert=function(e){const n=t.invertRange([e,e]);return n?n[0]:n},t.copy=function(){return hy().domain(e()).range(a).round(o).paddingInner(u).paddingOuter(s).align(l)},c()}var dy=Array.prototype.map;function py(t){return dy.call(t,M)}const gy=Array.prototype.slice;const my={};function yy(t,e,n){const r=function(){const n=e();return n.invertRange||(n.invertRange=n.invert?function(t){return function(e){let n,r=e[0],i=e[1];return i<r&&(n=r,r=i,i=n),[t.invert(r),t.invert(i)]}}(n):n.invertExtent?function(t){return function(e){const n=t.range();let r,i,a,o,u=e[0],s=e[1],l=-1;for(s<u&&(i=u,u=s,s=i),a=0,o=n.length;a<o;++a)n[a]>=u&&n[a]<=s&&(l<0&&(l=a),r=a);if(!(l<0))return u=t.invertExtent(n[l]),s=t.invertExtent(n[r]),[void 0===u[0]?u[1]:u[0],void 0===s[1]?s[0]:s[1]]}}(n):void 0),n.type=t,n};return r.metadata=Et(I(n)),r}function vy(t,e,n){return arguments.length>1?(my[t]=yy(t,e,n),this):_y(t)?my[t]:void 0}function _y(t){return rt(my,t)}function xy(t,e){const n=my[t];return n&&n.metadata[e]}function by(t){return xy(t,_p)}function wy(t){return xy(t,xp)}function ky(t){return xy(t,bp)}function Ay(t){return xy(t,ap)}function My(t){return xy(t,wp)}function Ey(t){return xy(t,hp)}vy("identity",(function t(e){var n;function r(t){return isNaN(t=+t)?n:t}return r.invert=r,r.domain=r.range=function(t){return arguments.length?(e=Array.from(t,Am),r):e.slice()},r.unknown=function(t){return arguments.length?(n=t,r):n},r.copy=function(){return t(e).unknown(n)},e=arguments.length?Array.from(e,Am):[0,1],Nm(r)})),vy(ip,(function t(){var e=Tm();return e.copy=function(){return Sm(e,t())},Ap.apply(e,arguments),Nm(e)}),_p),vy(ap,(function t(){var e=jm(Bm()).domain([1,10]);return e.copy=function(){return Sm(e,t()).base(e.base())},Ap.apply(e,arguments),e}),[_p,ap]),vy(op,Jm,_p),vy(up,(function(){return Jm.apply(null,arguments).exponent(.5)}),_p),vy(sp,(function t(){var e=Hm(Bm());return e.copy=function(){return Sm(e,t()).constant(e.constant())},Ap.apply(e,arguments)}),_p),vy(lp,(function(){return Ap.apply(ay(lr,sr,ar,rr,nr,er,tr,Gn,yi).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}),[_p,kp]),vy(cp,(function(){return Ap.apply(ay(vr,yr,pr,hr,fr,cr,tr,Gn,_i).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}),[_p,kp]),vy(fp,sy,[_p,wp]),vy("sequential-linear",sy,[_p,wp]),vy("sequential-log",(function t(){var e=jm(oy()).domain([1,10]);return e.copy=function(){return uy(e,t()).base(e.base())},Mp.apply(e,arguments)}),[_p,wp,ap]),vy("sequential-pow",ly,[_p,wp]),vy("sequential-sqrt",(function(){return ly.apply(null,arguments).exponent(.5)}),[_p,wp]),vy("sequential-symlog",(function t(){var e=Hm(oy());return e.copy=function(){return uy(e,t()).constant(e.constant())},Mp.apply(e,arguments)}),[_p,wp]),vy("diverging-linear",(function t(){var e=Nm(cy()(Em));return e.copy=function(){return uy(e,t())},Mp.apply(e,arguments)}),[_p,wp]),vy("diverging-log",(function t(){var e=jm(cy()).domain([.1,1,10]);return e.copy=function(){return uy(e,t()).base(e.base())},Mp.apply(e,arguments)}),[_p,wp,ap]),vy("diverging-pow",fy,[_p,wp]),vy("diverging-sqrt",(function(){return fy.apply(null,arguments).exponent(.5)}),[_p,wp]),vy("diverging-symlog",(function t(){var e=Hm(cy());return e.copy=function(){return uy(e,t()).constant(e.constant())},Mp.apply(e,arguments)}),[_p,wp]),vy(hp,(function t(){var e,n=[],r=[],i=[];function a(){var t=0,e=Math.max(1,r.length);for(i=new Array(e-1);++t<e;)i[t-1]=en(n,t/e);return o}function o(t){return isNaN(t=+t)?e:r[je(i,t)]}return o.invertExtent=function(t){var e=r.indexOf(t);return e<0?[NaN,NaN]:[e>0?i[e-1]:n[0],e<i.length?i[e]:n[n.length-1]]},o.domain=function(t){if(!arguments.length)return n.slice();n=[];for(let e of t)null==e||isNaN(e=+e)||n.push(e);return n.sort(qe),a()},o.range=function(t){return arguments.length?(r=Array.from(t),a()):r.slice()},o.unknown=function(t){return arguments.length?(e=t,o):e},o.quantiles=function(){return i.slice()},o.copy=function(){return t().domain(n).range(r).unknown(e)},Ap.apply(o,arguments)}),[bp,hp]),vy(dp,(function t(){var e,n=0,r=1,i=1,a=[.5],o=[0,1];function u(t){return t<=t?o[je(a,t,0,i)]:e}function s(){var t=-1;for(a=new Array(i);++t<i;)a[t]=((t+1)*r-(t-i)*n)/(i+1);return u}return u.domain=function(t){return arguments.length?([n,r]=t,n=+n,r=+r,s()):[n,r]},u.range=function(t){return arguments.length?(i=(o=Array.from(t)).length-1,s()):o.slice()},u.invertExtent=function(t){var e=o.indexOf(t);return e<0?[NaN,NaN]:e<1?[n,a[0]]:e>=i?[a[i-1],r]:[a[e-1],a[e]]},u.unknown=function(t){return arguments.length?(e=t,u):u},u.thresholds=function(){return a.slice()},u.copy=function(){return t().domain([n,r]).range(o).unknown(e)},Ap.apply(Nm(u),arguments)}),bp),vy(pp,(function t(){var e,n=[.5],r=[0,1],i=1;function a(t){return t<=t?r[je(n,t,0,i)]:e}return a.domain=function(t){return arguments.length?(n=Array.from(t),i=Math.min(n.length,r.length-1),a):n.slice()},a.range=function(t){return arguments.length?(r=Array.from(t),i=Math.min(n.length,r.length-1),a):r.slice()},a.invertExtent=function(t){var e=r.indexOf(t);return[n[e-1],n[e]]},a.unknown=function(t){return arguments.length?(e=t,a):e},a.copy=function(){return t().domain(n).range(r).unknown(e)},Ap.apply(a,arguments)}),bp),vy(vp,(function t(){let e=[],n=[];function r(t){return null==t||t!=t?void 0:n[(je(e,t)-1)%n.length]}return r.domain=function(t){return arguments.length?(e=py(t),r):e.slice()},r.range=function(t){return arguments.length?(n=gy.call(t),r):n.slice()},r.tickFormat=function(t,n){return zm(e[0],A(e),null==t?10:t,n)},r.copy=function(){return t().domain(r.domain()).range(r.range())},r}),[xp,bp]),vy(gp,Dp,xp),vy(yp,hy,xp),vy(mp,(function(){return function t(e){const n=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,e.copy=function(){return t(n())},e}(hy().paddingInner(1))}),xp);const Dy=["clamp","base","constant","exponent"];function Cy(t,e){const n=e[0],r=A(e)-n;return function(e){return t(n+e*r)}}function Fy(t,e,n){return wm(Ty(e||"rgb",n),t)}function Sy(t,e){const n=new Array(e),r=e+1;for(let i=0;i<e;)n[i]=t(++i/r);return n}function By(t,e,n){const r=n-e;let i,a,o;return r&&Number.isFinite(r)?(i=(a=t.type).indexOf("-"),a=i<0?a:a.slice(i+1),o=vy(a)().domain([e,n]).range([0,1]),Dy.forEach(e=>t[e]?o[e](t[e]()):0),o):Z(.5)}function Ty(t,e){const n=km[function(t){return"interpolate"+t.toLowerCase().split("-").map(t=>t[0].toUpperCase()+t.slice(1)).join("")}(t)];return null!=e&&n&&n.gamma?n.gamma(e):n}function zy(t){const e=t.length/6|0,n=new Array(e);for(let r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}function Ny(t,e){for(const n in t)Ry(n,e(t[n]))}const Oy={};function Ry(t,e){return t=t&&t.toLowerCase(),arguments.length>1?(Oy[t]=e,this):Oy[t]}Ny({category10:"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf",category20:"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5",category20b:"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6",category20c:"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9",tableau10:"4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac",tableau20:"4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5",accent:"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666",dark2:"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666",paired:"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928",pastel1:"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2",pastel2:"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc",set1:"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999",set2:"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3",set3:"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"},zy),Ny({blues:"cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90",greens:"d3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429",greys:"e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e",oranges:"fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303",purples:"e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c",reds:"fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13",blueGreen:"d5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429",bluePurple:"ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71",greenBlue:"d3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1",orangeRed:"fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403",purpleBlue:"dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281",purpleBlueGreen:"dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353",purpleRed:"dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a",redPurple:"fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174",yellowGreen:"e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034",yellowOrangeBrown:"feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204",yellowOrangeRed:"fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225",blueOrange:"134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07",brownBlueGreen:"704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147",purpleGreen:"5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29",purpleOrange:"4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07",redBlue:"8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85",redGrey:"8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434",yellowGreenBlue:"eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185",redYellowBlue:"a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695",redYellowGreen:"a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837",pinkYellowGreen:"8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419",spectral:"9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2",viridis:"440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725",magma:"0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf",inferno:"0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4",plasma:"0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921",cividis:"00205100235800265d002961012b65042e670831690d346b11366c16396d1c3c6e213f6e26426e2c456e31476e374a6e3c4d6e42506e47536d4c566d51586e555b6e5a5e6e5e616e62646f66676f6a6a706e6d717270717573727976737c79747f7c75827f758682768985778c8877908b78938e789691789a94789e9778a19b78a59e77a9a177aea575b2a874b6ab73bbaf71c0b26fc5b66dc9b96acebd68d3c065d8c462ddc85fe2cb5ce7cf58ebd355f0d652f3da4ff7de4cfae249fce647",rainbow:"6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa",sinebow:"ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040",turbo:"23171b32204a3e2a71453493493eae4b49c54a53d7485ee44569ee4074f53c7ff8378af93295f72e9ff42ba9ef28b3e926bce125c5d925cdcf27d5c629dcbc2de3b232e9a738ee9d3ff39347f68950f9805afc7765fd6e70fe667cfd5e88fc5795fb51a1f84badf545b9f140c5ec3cd0e637dae034e4d931ecd12ef4c92bfac029ffb626ffad24ffa223ff9821ff8d1fff821dff771cfd6c1af76118f05616e84b14df4111d5380fcb2f0dc0260ab61f07ac1805a313029b0f00950c00910b00",browns:"eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632",tealBlues:"bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985",teals:"bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667",warmGreys:"dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e",goldGreen:"f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36",goldOrange:"f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26",goldRed:"f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e",lightGreyRed:"efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b",lightGreyTeal:"e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc",lightMulti:"e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c",lightOrange:"f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b",lightTealBlue:"e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988",darkBlue:"3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff",darkGold:"3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff",darkGreen:"3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa",darkMulti:"3737371f5287197d8c29a86995ce3fffe800ffffff",darkRed:"3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c"},t=>Fy(zy(t)));const $y="symbol",qy=t=>v(t)?t.map(t=>String(t)):String(t),Ly=(t,e)=>t[1]-e[1],Uy=(t,e)=>e[1]-t[1];function Py(t,e,n){let r;return ft(e)&&(t.bins&&(e=Math.max(e,t.bins.length)),null!=n&&(e=Math.min(e,Math.floor(xt(t.domain())/n||1)))),_(e)&&(r=e.step,e=e.interval),dt(e)&&(e=t.type===lp?Ir(e):t.type==cp?Wr(e):u("Only time and utc scales accept interval strings."),r&&(e=e.every(r))),e}function jy(t,e,n){let r=t.range(),i=r[0],a=A(r),o=Ly;if(i>a&&(r=a,a=i,i=r,o=Uy),i=Math.floor(i),a=Math.ceil(a),e=e.map(e=>[e,t(e)]).filter(t=>i<=t[1]&&t[1]<=a).sort(o).map(t=>t[0]),n>0&&e.length>1){const t=[e[0],A(e)];for(;e.length>n&&e.length>=3;)e=e.filter((t,e)=>!(e%2));e.length<3&&(e=t)}return e}function Iy(t,e){return t.bins?jy(t,t.bins):t.ticks?t.ticks(e):t.domain()}function Wy(t,e,n,r,i,a){const o=e.type;let u=qy;if(o===lp||i===lp)u=t.timeFormat(r);else if(o===cp||i===cp)u=t.utcFormat(r);else if(Ay(o)){const i=t.formatFloat(r);if(a||e.bins)u=i;else{const t=Hy(e,n,!1);u=e=>t(e)?i(e):""}}else if(e.tickFormat){const i=e.domain();u=t.formatSpan(i[0],i[i.length-1],n,r)}else r&&(u=t.format(r));return u}function Hy(t,e,n){const r=Iy(t,e),i=t.base(),a=Math.log(i),o=Math.max(1,i*e/r.length),u=t=>{let e=t/Math.pow(i,Math.round(Math.log(t)/a));return e*i<i-.5&&(e*=i),e<=o};return n?r.filter(u):u}const Yy={[hp]:"quantiles",[dp]:"thresholds",[pp]:"domain"},Vy={[hp]:"quantiles",[dp]:"domain"};function Gy(t,e){return t.bins?function(t){const e=t.slice(0,-1);return e.max=A(t),e}(t.bins):t.type===ap?Hy(t,e,!0):Yy[t.type]?function(t){const e=[-1/0].concat(t);return e.max=1/0,e}(t[Yy[t.type]]()):Iy(t,e)}function Xy(t,e,n,r,i,a,o){const u=Vy[e.type]&&a!==lp&&a!==cp?function(t,e,n){const r=e[Vy[e.type]](),i=r.length;let a,o=i>1?r[1]-r[0]:r[0];for(a=1;a<i;++a)o=Math.min(o,r[a]-r[a-1]);return t.formatSpan(0,o,30,n)}(t,e,i):Wy(t,e,n,i,a,o);return r===$y&&(t=>Yy[t.type]||t.bins)(e)?Jy(u):"discrete"===r?Qy(u):Ky(u)}const Jy=t=>(e,n,r)=>{const i=Zy(r[n+1],Zy(r.max,1/0)),a=tv(e,t),o=tv(i,t);return a&&o?a+" – "+o:o?"< "+o:"≥ "+a},Zy=(t,e)=>null!=t?t:e,Qy=t=>(e,n)=>n?t(e):null,Ky=t=>e=>t(e),tv=(t,e)=>Number.isFinite(t)?e(t):null;function ev(t,e,n,r){const i=r||e.type;return dt(n)&&function(t){return xy(t,kp)}(i)&&(n=n.replace(/%a/g,"%A").replace(/%b/g,"%B")),n||i!==lp?n||i!==cp?Xy(t,e,5,null,n,r,!0):t.utcFormat("%A, %d %B %Y, %X UTC"):t.timeFormat("%A, %d %B %Y, %X")}function nv(t,e,n){n=n||{};const r=Math.max(3,n.maxlen||7),i=ev(t,e,n.format,n.formatType);if(ky(e.type)){const t=Gy(e).slice(1).map(i),n=t.length;return`${n} boundar${1===n?"y":"ies"}: ${t.join(", ")}`}if(wy(e.type)){const t=e.domain(),n=t.length;return`${n} value${1===n?"":"s"}: ${n>r?t.slice(0,r-2).map(i).join(", ")+", ending with "+t.slice(-1).map(i):t.map(i).join(", ")}`}{const t=e.domain();return`values from ${i(t[0])} to ${i(A(t))}`}}const rv="aria-hidden",iv="aria-label",av="role",ov="aria-roledescription",uv="graphics-object",sv="graphics-symbol",lv=(t,e,n)=>({[av]:t,[ov]:e,[iv]:n||void 0}),cv=Et(["axis-domain","axis-grid","axis-label","axis-tick","axis-title","legend-band","legend-entry","legend-gradient","legend-label","legend-title","legend-symbol","title"]),fv={axis:{desc:"axis",caption:function(t){const e=t.datum,n=t.orient,r=e.title?mv(t):null,i=t.context,a=i.scales[e.scale].value,o=i.dataflow.locale(),u=a.type;return("left"===n||"right"===n?"Y":"X")+"-axis"+(r?` titled '${r}'`:"")+` for a ${wy(u)?"discrete":u} scale with `+nv(o,a,t)}},legend:{desc:"legend",caption:function(t){const e=t.datum,n=e.title?mv(t):null,r=((e.type||"")+" legend").trim(),i=e.scales,a=Object.keys(i),o=t.context,u=o.scales[i[a[0]]].value,s=o.dataflow.locale();return l=r,(l.length?l[0].toUpperCase()+l.slice(1):l)+(n?` titled '${n}'`:"")+" for "+function(t){return(t=t.map(t=>t+("fill"===t||"stroke"===t?" color":""))).length<2?t[0]:t.slice(0,-1).join(", ")+" and "+A(t)}(a)+" with "+nv(s,u,t);var l}},"title-text":{desc:"title",caption:t=>`Title text '${gv(t)}'`},"title-subtitle":{desc:"subtitle",caption:t=>`Subtitle text '${gv(t)}'`}},hv={ariaRole:av,ariaRoleDescription:ov,description:iv};function dv(t,e){const n=!1===e.aria;if(t(rv,n||void 0),n||null==e.description)for(const e in hv)t(hv[e],void 0);else{const n=e.mark.marktype;t(iv,e.description),t(av,e.ariaRole||("group"===n?uv:sv)),t(ov,e.ariaRoleDescription||n+" mark")}}function pv(t){return!1===t.aria?{[rv]:!0}:cv[t.role]?null:fv[t.role]?function(t,e){try{const n=t.items[0],r=e.caption||(()=>"");return lv(e.role||sv,e.desc,n.description||r(n))}catch(t){return null}}(t,fv[t.role]):function(t){const e=t.marktype,n="group"===e||"text"===e||t.items.some(t=>null!=t.description&&!1!==t.aria);return lv(n?uv:sv,e+" mark container",t.description)}(t)}function gv(t){return I(t.text).join(" ")}function mv(t){try{return I(A(t.items).items[0].text).join(" ")}catch(t){return null}}const yv=t=>(t+"").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");function vv(){let t="",e="",n="";const r=[],i=()=>e=n="",a=(t,n)=>{var r;return null!=n&&(e+=` ${t}="${r=n,yv(r).replace(/"/g,"&quot;").replace(/\t/g,"&#x9;").replace(/\n/g,"&#xA;").replace(/\r/g,"&#xD;")}"`),o},o={open(u,...s){(a=>{e&&(t+=`${e}>${n}`,i()),r.push(a)})(u),e="<"+u;for(const t of s)for(const e in t)a(e,t[e]);return o},close(){const a=r.pop();return t+=e?e+(n?`>${n}</${a}>`:"/>"):`</${a}>`,i(),o},attr:a,text:t=>(n+=yv(t),o),toString:()=>t};return o}const _v=t=>function t(e,n){if(e.open(n.tagName),n.hasAttributes()){const t=n.attributes,r=t.length;for(let n=0;n<r;++n)e.attr(t[n].name,t[n].value)}if(n.hasChildNodes()){const r=n.childNodes,i=r.length;for(let n=0;n<i;n++){const i=r[n];3===i.nodeType?e.text(i.nodeValue):t(e,i)}}return e.close()}(vv(),t)+"";const xv={fill:"fill",fillOpacity:"fill-opacity",stroke:"stroke",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",strokeCap:"stroke-linecap",strokeJoin:"stroke-linejoin",strokeDash:"stroke-dasharray",strokeDashOffset:"stroke-dashoffset",strokeMiterLimit:"stroke-miterlimit",opacity:"opacity",blend:"mix-blend-mode"},bv={fill:"none","stroke-miterlimit":10},wv=Nh.xmlns;function kv(t){Td.call(this,t),this._dirtyID=0,this._dirty=[],this._svg=null,this._root=null,this._defs=null}const Av=Td.prototype;function Mv(t,e){for(;t&&t.dirty!==e;t=t.mark.group){if(t.dirty=e,!t.mark||t.mark.dirty===e)return;t.mark.dirty=e}}function Ev(t,e,n){let r,i,a;if("radial"===e.gradient){let r=Ed(t,n++,"pattern",wv);Nv(r,{id:ul+e.id,viewBox:"0,0,1,1",width:"100%",height:"100%",preserveAspectRatio:"xMidYMid slice"}),r=Ed(r,0,"rect",wv),Nv(r,{width:1,height:1,fill:`url(${Rv()}#${e.id})`}),Nv(t=Ed(t,n++,"radialGradient",wv),{id:e.id,fx:e.x1,fy:e.y1,fr:e.r1,cx:e.x2,cy:e.y2,r:e.r2})}else Nv(t=Ed(t,n++,"linearGradient",wv),{id:e.id,x1:e.x1,x2:e.x2,y1:e.y1,y2:e.y2});for(r=0,i=e.stops.length;r<i;++r)a=Ed(t,r,"stop",wv),a.setAttribute("offset",e.stops[r].offset),a.setAttribute("stop-color",e.stops[r].color);return Dd(t,r),n}function Dv(t,e,n){let r;return(t=Ed(t,n,"clipPath",wv)).setAttribute("id",e.id),e.path?(r=Ed(t,0,"path",wv),r.setAttribute("d",e.path)):(r=Ed(t,0,"rect",wv),Nv(r,{x:0,y:0,width:e.width,height:e.height})),Dd(t,1),n+1}function Cv(t,e,n,r,i){let a,o=t._svg;if(!o&&(a=e.ownerDocument,o=Ad(a,r,wv),t._svg=o,t.mark&&(o.__data__=t,o.__values__={fill:"default"},"g"===r))){const e=Ad(a,"path",wv);o.appendChild(e),e.__data__=t;const n=Ad(a,"g",wv);o.appendChild(n),n.__data__=t;const r=Ad(a,"path",wv);o.appendChild(r),r.__data__=t,r.__values__={fill:"default"}}return(o.ownerSVGElement!==i||function(t,e){return t.parentNode&&t.parentNode.childNodes.length>1&&t.previousSibling!=e}(o,n))&&e.insertBefore(o,n?n.nextSibling:e.firstChild),o}ut(kv,Td,{initialize(t,e,n,r,i){return this._defs={},this._clearDefs(),t&&(this._svg=Ed(t,0,"svg",wv),Nv(this._svg,Nh),this._svg.setAttribute("class","marks"),Dd(t,1),this._root=Ed(this._svg,0,"g",wv),Nv(this._root,bv),Dd(this._svg,1)),this.background(this._bgcolor),Av.initialize.call(this,t,e,n,r,i)},background(t){return arguments.length&&this._svg&&this._svg.style.setProperty("background-color",t),Av.background.apply(this,arguments)},resize(t,e,n,r){return Av.resize.call(this,t,e,n,r),this._svg&&(Nv(this._svg,{width:this._width*this._scale,height:this._height*this._scale,viewBox:`0 0 ${this._width} ${this._height}`}),this._root.setAttribute("transform",`translate(${this._origin})`)),this._dirty=[],this},canvas(){return this._svg},svg(){const t=this._svg,e=this._bgcolor;if(!t)return null;let n;e&&(t.removeAttribute("style"),n=Ed(t,0,"rect",wv),Nv(n,{width:this._width,height:this._height,fill:e}));const r=_v(t);return e&&(t.removeChild(n),this._svg.style.setProperty("background-color",e)),r},_render(t){return this._dirtyCheck()&&(this._dirtyAll&&this._clearDefs(),this.mark(this._root,t),Dd(this._root,1)),this.defs(),this._dirty=[],++this._dirtyID,this},dirty(t){t.dirty!==this._dirtyID&&(t.dirty=this._dirtyID,this._dirty.push(t))},isDirty(t){return this._dirtyAll||!t._svg||t.dirty===this._dirtyID},_dirtyCheck(){this._dirtyAll=!0;const t=this._dirty;if(!t.length||!this._dirtyID)return!0;const e=++this._dirtyID;let n,r,i,a,o,u,s;for(o=0,u=t.length;o<u;++o)n=t[o],r=n.mark,r.marktype!==i&&(i=r.marktype,a=gd[i]),r.zdirty&&r.dirty!==e&&(this._dirtyAll=!1,Mv(n,e),r.items.forEach(t=>{t.dirty=e})),r.zdirty||(n.exit?(a.nested&&r.items.length?(s=r.items[0],s._svg&&this._update(a,s._svg,s)):n._svg&&(s=n._svg.parentNode,s&&s.removeChild(n._svg)),n._svg=null):(n=a.nested?r.items[0]:n,n._update!==e&&(n._svg&&n._svg.ownerSVGElement?this._update(a,n._svg,n):(this._dirtyAll=!1,Mv(n,e)),n._update=e)));return!this._dirtyAll},mark(t,e,n){if(!this.isDirty(e))return e._svg;const r=this._svg,i=gd[e.marktype],a=!1===e.interactive?"none":null,o="g"===i.tag;let u=null,s=0;const l=Cv(e,t,n,"g",r);l.setAttribute("class",Cd(e));const c=pv(e);for(const t in c)Ov(l,t,c[t]);o||Ov(l,"pointer-events",a),Ov(l,"clip-path",e.clip?yf(this,e,e.group):null);const f=t=>{const e=this.isDirty(t),n=Cv(t,l,u,i.tag,r);e&&(this._update(i,n,t),o&&function(t,e,n){e=e.lastChild.previousSibling;let r,i=0;fh(n,n=>{r=t.mark(e,n,r),++i}),Dd(e,1+i)}(this,n,t)),u=n,++s};return i.nested?e.items.length&&f(e.items[0]):fh(e,f),Dd(l,s),l},_update(t,e,n){Fv=e,Sv=e.__values__,dv(Tv,n),t.attr(Tv,n,this);const r=Bv[t.type];r&&r.call(this,t,e,n),Fv&&this.style(Fv,n)},style(t,e){if(null!=e)for(const n in xv){let r="font"===n?sd(e):e[n];if(r===Sv[n])continue;const i=xv[n];null==r?t.removeAttribute(i):(sl(r)&&(r=ll(r,this._defs.gradient,Rv())),t.setAttribute(i,r+"")),Sv[n]=r}},defs(){const t=this._svg,e=this._defs;let n=e.el,r=0;for(const i in e.gradient)n||(e.el=n=Ed(t,1,"defs",wv)),r=Ev(n,e.gradient[i],r);for(const i in e.clipping)n||(e.el=n=Ed(t,1,"defs",wv)),r=Dv(n,e.clipping[i],r);n&&(0===r?(t.removeChild(n),e.el=null):Dd(n,r))},_clearDefs(){const t=this._defs;t.gradient={},t.clipping={}}});let Fv=null,Sv=null;const Bv={group(t,e,n){const r=Fv=e.childNodes[2];Sv=r.__values__,t.foreground(Tv,n,this),Sv=e.__values__,Fv=e.childNodes[1],t.content(Tv,n,this);const i=Fv=e.childNodes[0];t.background(Tv,n,this);const a=!1===n.mark.interactive?"none":null;if(a!==Sv.events&&(Ov(r,"pointer-events",a),Ov(i,"pointer-events",a),Sv.events=a),n.strokeForeground&&n.stroke){const t=n.fill;Ov(r,"display",null),this.style(i,n),Ov(i,"stroke",null),t&&(n.fill=null),Sv=r.__values__,this.style(r,n),t&&(n.fill=t),Fv=null}else Ov(r,"display","none")},image(t,e,n){!1===n.smooth?(zv(e,"image-rendering","optimizeSpeed"),zv(e,"image-rendering","pixelated")):zv(e,"image-rendering",null)},text(t,e,n){const r=ad(n);let i,a,o,u;v(r)?(a=r.map(t=>ud(n,t)),i=a.join("\n"),i!==Sv.text&&(Dd(e,0),o=e.ownerDocument,u=id(n),a.forEach((t,r)=>{const i=Ad(o,"tspan",wv);i.__data__=n,i.textContent=t,r&&(i.setAttribute("x",0),i.setAttribute("dy",u)),e.appendChild(i)}),Sv.text=i)):(a=ud(n,r),a!==Sv.text&&(e.textContent=a,Sv.text=a)),Ov(e,"font-family",sd(n)),Ov(e,"font-size",rd(n)+"px"),Ov(e,"font-style",n.fontStyle),Ov(e,"font-variant",n.fontVariant),Ov(e,"font-weight",n.fontWeight)}};function Tv(t,e,n){e!==Sv[t]&&(n?function(t,e,n,r){null!=n?t.setAttributeNS(r,e,n):t.removeAttributeNS(r,e)}(Fv,t,e,n):Ov(Fv,t,e),Sv[t]=e)}function zv(t,e,n){n!==Sv[e]&&(null==n?t.style.removeProperty(e):t.style.setProperty(e,n+""),Sv[e]=n)}function Nv(t,e){for(const n in e)Ov(t,n,e[n])}function Ov(t,e,n){null!=n?t.setAttribute(e,n):t.removeAttribute(e)}function Rv(){let t;return"undefined"==typeof window?"":(t=window.location).hash?t.href.slice(0,-t.hash.length):t.href}function $v(t){Td.call(this,t),this._text=null,this._defs={gradient:{},clipping:{}}}ut($v,Td,{svg(){return this._text},_render(t){const e=vv();e.open("svg",K({},Nh,{class:"marks",width:this._width*this._scale,height:this._height*this._scale,viewBox:`0 0 ${this._width} ${this._height}`}));const n=this._bgcolor;return n&&"transparent"!==n&&"none"!==n&&e.open("rect",{width:this._width,height:this._height,fill:n}).close(),e.open("g",bv,{transform:"translate("+this._origin+")"}),this.mark(e,t),e.close(),this.defs(e),this._text=e.close()+"",this},mark(t,e){const n=gd[e.marktype],r=n.tag,i=[dv,n.attr];t.open("g",{class:Cd(e),"clip-path":e.clip?yf(this,e,e.group):null},pv(e),{"pointer-events":"g"!==r&&!1===e.interactive?"none":null});const a=a=>{const o=this.href(a);if(o&&t.open("a",o),t.open(r,this.attr(e,a,i,"g"!==r?r:null)),"text"===r){const e=ad(a);if(v(e)){const n={x:0,dy:id(a)};for(let r=0;r<e.length;++r)t.open("tspan",r?n:null).text(ud(a,e[r])).close()}else t.text(ud(a,e))}else if("g"===r){const r=a.strokeForeground,i=a.fill,o=a.stroke;r&&o&&(a.stroke=null),t.open("path",this.attr(e,a,n.background,"bgrect")).close(),t.open("g",this.attr(e,a,n.content)),fh(a,e=>this.mark(t,e)),t.close(),r&&o?(i&&(a.fill=null),a.stroke=o,t.open("path",this.attr(e,a,n.foreground,"bgrect")).close(),i&&(a.fill=i)):t.open("path",this.attr(e,a,n.foreground,"bgfore")).close()}t.close(),o&&t.close()};return n.nested?e.items&&e.items.length&&a(e.items[0]):fh(e,a),t.close()},href(t){const e=t.href;let n;if(e){if(n=this._hrefs&&this._hrefs[e])return n;this.sanitizeURL(e).then(t=>{t["xlink:href"]=t.href,t.href=null,(this._hrefs||(this._hrefs={}))[e]=t})}return null},attr(t,e,n,r){const i={},a=(t,e,n,r)=>{i[r||t]=e};return Array.isArray(n)?n.forEach(t=>t(a,e,this)):n(a,e,this),r&&function(t,e,n,r,i){if(null==e)return t;"bgrect"===r&&!1===n.interactive&&(t["pointer-events"]="none");if("bgfore"===r&&(!1===n.interactive&&(t["pointer-events"]="none"),t.display="none",null!==e.fill))return t;"image"===r&&!1===e.smooth&&(t.style="image-rendering: optimizeSpeed; image-rendering: pixelated;");"text"===r&&(t["font-family"]=sd(e),t["font-size"]=rd(e)+"px",t["font-style"]=e.fontStyle,t["font-variant"]=e.fontVariant,t["font-weight"]=e.fontWeight);for(const n in xv){let r=e[n];const a=xv[n];("transparent"!==r||"fill"!==a&&"stroke"!==a)&&null!=r&&(sl(r)&&(r=ll(r,i.gradient,"")),t[a]=r)}}(i,e,t,r,this._defs),i},defs(t){const e=this._defs.gradient,n=this._defs.clipping;if(0!==Object.keys(e).length+Object.keys(n).length){t.open("defs");for(const n in e){const r=e[n],i=r.stops;"radial"===r.gradient?(t.open("pattern",{id:ul+n,viewBox:"0,0,1,1",width:"100%",height:"100%",preserveAspectRatio:"xMidYMid slice"}),t.open("rect",{width:"1",height:"1",fill:"url(#"+n+")"}).close(),t.close(),t.open("radialGradient",{id:n,fx:r.x1,fy:r.y1,fr:r.r1,cx:r.x2,cy:r.y2,r:r.r2})):t.open("linearGradient",{id:n,x1:r.x1,x2:r.x2,y1:r.y1,y2:r.y2});for(let e=0;e<i.length;++e)t.open("stop",{offset:i[e].offset,"stop-color":i[e].color}).close();t.close()}for(const e in n){const r=n[e];t.open("clipPath",{id:e}),r.path?t.open("path",{d:r.path}).close():t.open("rect",{x:0,y:0,width:r.width,height:r.height}).close(),t.close()}t.close()}}});var qv="canvas",Lv="none",Uv={Canvas:qv,PNG:"png",SVG:"svg",None:Lv},Pv={};function jv(t,e){return t=String(t||"").toLowerCase(),arguments.length>1?(Pv[t]=e,this):Pv[t]}function Iv(t,e,n){const r=[],i=(new vf).union(e),a=t.marktype;return a?Wv(t,i,n,r):"group"===a?Hv(t,i,n,r):u("Intersect scene must be mark node or group item.")}function Wv(t,e,n,r){if(function(t,e,n){return t.bounds&&e.intersects(t.bounds)&&("group"===t.marktype||!1!==t.interactive&&(!n||n(t)))}(t,e,n)){const i=t.items,a=t.marktype,o=i.length;let u=0;if("group"===a)for(;u<o;++u)Hv(i[u],e,n,r);else for(const t=gd[a].isect;u<o;++u){const n=i[u];Yv(n,e,t)&&r.push(n)}}return r}function Hv(t,e,n,r){n&&n(t.mark)&&Yv(t,e,gd.group.isect)&&r.push(t);const i=t.items,a=i&&i.length;if(a){const o=t.x||0,u=t.y||0;e.translate(-o,-u);for(let t=0;t<a;++t)Wv(i[t],e,n,r);e.translate(o,u)}return r}function Yv(t,e,n){const r=t.bounds;return e.encloses(r)||e.intersects(r)&&n(t,e)}Pv.canvas=Pv.png={renderer:Kd,headless:Kd,handler:Gd},Pv.svg={renderer:kv,headless:$v,handler:ep},Pv.none={};const Vv=new vf;function Gv(t){const e=t.clip;if(H(e))e(Wf(Vv.clear()));else{if(!e)return;Vv.set(0,0,t.group.width,t.group.height)}t.bounds.intersect(Vv)}function Xv(t,e,n){return t===e||("path"===n?Jv(t,e):t instanceof Date&&e instanceof Date?+t==+e:ft(t)&&ft(e)?Math.abs(t-e)<=1e-9:t&&e&&(_(t)||_(e))?function(t,e){var n,r,i=Object.keys(t),a=Object.keys(e);if(i.length!==a.length)return!1;for(i.sort(),a.sort(),r=i.length-1;r>=0;r--)if(i[r]!=a[r])return!1;for(r=i.length-1;r>=0;r--)if(!Xv(t[n=i[r]],e[n],n))return!1;return typeof t==typeof e}(t,e):t==e)}function Jv(t,e){return Xv(Fc(t),Fc(e))}function Zv(t){co.call(this,null,t)}function Qv(t,e,n){return e(t.bounds.clear(),t,n)}ut(Zv,co,{transform(t,e){const n=e.dataflow,r=t.mark,i=r.marktype,a=gd[i],o=a.bound;let u,s=r.bounds;if(a.nested)r.items.length&&n.dirty(r.items[0]),s=Qv(r,o),r.items.forEach(t=>{t.bounds.clear().union(s)});else if(i===qs||t.modified())switch(e.visit(e.MOD,t=>n.dirty(t)),s.clear(),r.items.forEach(t=>s.union(Qv(t,o))),r.role){case Ls:case Is:case Us:e.reflow()}else u=e.changed(e.REM),e.visit(e.ADD,t=>{s.union(Qv(t,o))}),e.visit(e.MOD,t=>{u=u||s.alignsWith(t.bounds),n.dirty(t),s.union(Qv(t,o))}),u&&(s.clear(),r.items.forEach(t=>s.union(t.bounds)));return Gv(r),e.modifies("bounds")}});const Kv=":vega_identifier:";function t_(t){co.call(this,0,t)}function e_(t){co.call(this,null,t)}function n_(t){co.call(this,null,t)}t_.Definition={type:"Identifier",metadata:{modifies:!0},params:[{name:"as",type:"string",required:!0}]},ut(t_,co,{transform(t,e){const n=(i=e.dataflow)._signals[Kv]||(i._signals[Kv]=i.add(0)),r=t.as;var i;let a=n.value;return e.visit(e.ADD,t=>t[r]=t[r]||++a),n.set(this.value=a),e}}),ut(e_,co,{transform(t,e){let n=this.value;n||(n=e.dataflow.scenegraph().mark(t.markdef,function(t){const e=t.groups,n=t.parent;return e&&1===e.size?e.get(Object.keys(e.object)[0]):e&&n?e.lookup(n):null}(t),t.index),n.group.context=t.context,t.context.group||(t.context.group=n.group),n.source=this.source,n.clip=t.clip,n.interactive=t.interactive,this.value=n);const r=n.marktype===qs?xf:_f;return e.visit(e.ADD,t=>r.call(t,n)),(t.modified("clip")||t.modified("interactive"))&&(n.clip=t.clip,n.interactive=!!t.interactive,n.zdirty=!0,e.reflow()),n.items=e.source,e}});const r_={parity:t=>t.filter((t,e)=>e%2?t.opacity=0:1),greedy:(t,e)=>{let n;return t.filter((t,r)=>r&&i_(n.bounds,t.bounds,e)?t.opacity=0:(n=t,1))}},i_=(t,e,n)=>n>Math.max(e.x1-t.x2,t.x1-e.x2,e.y1-t.y2,t.y1-e.y2),a_=(t,e)=>{for(var n,r=1,i=t.length,a=t[0].bounds;r<i;a=n,++r)if(i_(a,n=t[r].bounds,e))return!0},o_=t=>{var e=t.bounds;return e.width()>1&&e.height()>1},u_=t=>(t.forEach(t=>t.opacity=1),t),s_=(t,e)=>t.reflow(e.modified()).modifies("opacity");function l_(t){co.call(this,null,t)}ut(n_,co,{transform(t,e){const n=r_[t.method]||r_.parity,r=t.separation||0;let i,a,o=e.materialize(e.SOURCE).source;if(!o||!o.length)return;if(!t.method)return t.modified("method")&&(u_(o),e=s_(e,t)),e;if(o=o.filter(o_),!o.length)return;if(t.sort&&(o=o.slice().sort(t.sort)),i=u_(o),e=s_(e,t),i.length>=3&&a_(i,r)){do{i=n(i,r)}while(i.length>=3&&a_(i,r));i.length<3&&!A(o).opacity&&(i.length>1&&(A(i).opacity=0),A(o).opacity=1)}t.boundScale&&t.boundTolerance>=0&&(a=((t,e,n)=>{var r=t.range(),i=new vf;return e===Bs||e===Ns?i.set(r[0],-1/0,r[1],1/0):i.set(-1/0,r[0],1/0,r[1]),i.expand(n||1),t=>i.encloses(t.bounds)})(t.boundScale,t.boundOrient,+t.boundTolerance),o.forEach(t=>{a(t)||(t.opacity=0)}));const u=i[0].mark.bounds.clear();return o.forEach(t=>{t.opacity&&u.union(t.bounds)}),e}}),ut(l_,co,{transform(t,e){const n=e.dataflow;if(e.visit(e.ALL,t=>n.dirty(t)),e.fields&&e.fields.zindex){var r=e.source&&e.source[0];r&&(r.mark.zdirty=!0)}}});const c_=new vf;function f_(t,e,n){return t[e]===n?0:(t[e]=n,1)}function h_(t){var e=t.items[0].orient;return e===Ts||e===zs}function d_(t,e,n,r){var i,a,o=e.items[0],u=o.datum,s=null!=o.translate?o.translate:.5,l=o.orient,c=function(t){var e=+t.grid;return[t.ticks?e++:-1,t.labels?e++:-1,e+ +t.domain]}(u),f=o.range,h=o.offset,d=o.position,p=o.minExtent,g=o.maxExtent,m=u.title&&o.items[c[2]].items[0],y=o.titlePadding,v=o.bounds,_=m&&od(m),x=0,b=0;switch(c_.clear().union(v),v.clear(),(i=c[0])>-1&&v.union(o.items[i].bounds),(i=c[1])>-1&&v.union(o.items[i].bounds),l){case Bs:x=d||0,b=-h,a=Math.max(p,Math.min(g,-v.y1)),v.add(0,-a).add(f,0),m&&p_(t,m,a,y,_,0,-1,v);break;case Ts:x=-h,b=d||0,a=Math.max(p,Math.min(g,-v.x1)),v.add(-a,0).add(0,f),m&&p_(t,m,a,y,_,1,-1,v);break;case zs:x=n+h,b=d||0,a=Math.max(p,Math.min(g,v.x2)),v.add(0,0).add(a,f),m&&p_(t,m,a,y,_,1,1,v);break;case Ns:x=d||0,b=r+h,a=Math.max(p,Math.min(g,v.y2)),v.add(0,0).add(f,a),m&&p_(t,m,a,y,0,0,1,v);break;default:x=o.x,b=o.y}return Ef(v.translate(x,b),o),f_(o,"x",x+s)|f_(o,"y",b+s)&&(o.bounds=c_,t.dirty(o),o.bounds=v,t.dirty(o)),o.mark.bounds.clear().union(v)}function p_(t,e,n,r,i,a,o,u){const s=e.bounds;if(e.auto){const u=o*(n+i+r);let l=0,c=0;t.dirty(e),a?l=(e.x||0)-(e.x=u):c=(e.y||0)-(e.y=u),e.mark.bounds.clear().union(s.translate(-l,-c)),t.dirty(e)}u.union(s)}const g_=(t,e)=>Math.floor(Math.min(t,e)),m_=(t,e)=>Math.ceil(Math.max(t,e));function y_(t){return(new vf).set(0,0,t.width||0,t.height||0)}function v_(t){var e=t.bounds.clone();return e.empty()?e.set(0,0,0,0):e.translate(-(t.x||0),-(t.y||0))}function __(t,e,n){var r=_(t)?t[e]:t;return null!=r?r:void 0!==n?n:0}function x_(t){return t<0?Math.ceil(-t):0}function b_(t,e,n){var r,i,a,o,u,s,l,c,f,h,d,p=!n.nodirty,g=n.bounds===rl?y_:v_,m=c_.set(0,0,0,0),y=__(n.align,il),v=__(n.align,al),_=__(n.padding,il),x=__(n.padding,al),b=n.columns||e.length,w=b<=0?1:Math.ceil(e.length/b),k=e.length,A=Array(k),M=Array(b),E=0,D=Array(k),C=Array(w),F=0,S=Array(k),B=Array(k),T=Array(k);for(i=0;i<b;++i)M[i]=0;for(i=0;i<w;++i)C[i]=0;for(i=0;i<k;++i)s=e[i],u=T[i]=g(s),s.x=s.x||0,S[i]=0,s.y=s.y||0,B[i]=0,a=i%b,o=~~(i/b),E=Math.max(E,l=Math.ceil(u.x2)),F=Math.max(F,c=Math.ceil(u.y2)),M[a]=Math.max(M[a],l),C[o]=Math.max(C[o],c),A[i]=_+x_(u.x1),D[i]=x+x_(u.y1),p&&t.dirty(e[i]);for(i=0;i<k;++i)i%b==0&&(A[i]=0),i<b&&(D[i]=0);if(y===nl)for(a=1;a<b;++a){for(d=0,i=a;i<k;i+=b)d<A[i]&&(d=A[i]);for(i=a;i<k;i+=b)A[i]=d+M[a-1]}else if(y===el){for(d=0,i=0;i<k;++i)i%b&&d<A[i]&&(d=A[i]);for(i=0;i<k;++i)i%b&&(A[i]=d+E)}else for(y=!1,a=1;a<b;++a)for(i=a;i<k;i+=b)A[i]+=M[a-1];if(v===nl)for(o=1;o<w;++o){for(d=0,r=(i=o*b)+b;i<r;++i)d<D[i]&&(d=D[i]);for(i=o*b;i<r;++i)D[i]=d+C[o-1]}else if(v===el){for(d=0,i=b;i<k;++i)d<D[i]&&(d=D[i]);for(i=b;i<k;++i)D[i]=d+F}else for(v=!1,o=1;o<w;++o)for(r=(i=o*b)+b;i<r;++i)D[i]+=C[o-1];for(f=0,i=0;i<k;++i)f=A[i]+(i%b?f:0),S[i]+=f-e[i].x;for(a=0;a<b;++a)for(h=0,i=a;i<k;i+=b)h+=D[i],B[i]+=h-e[i].y;if(y&&__(n.center,il)&&w>1)for(i=0;i<k;++i)(f=(u=y===el?E:M[i%b])-T[i].x2-e[i].x-S[i])>0&&(S[i]+=f/2);if(v&&__(n.center,al)&&1!==b)for(i=0;i<k;++i)(h=(u=v===el?F:C[~~(i/b)])-T[i].y2-e[i].y-B[i])>0&&(B[i]+=h/2);for(i=0;i<k;++i)m.union(T[i].translate(S[i],B[i]));switch(f=__(n.anchor,"x"),h=__(n.anchor,"y"),__(n.anchor,il)){case $s:f-=m.width();break;case Rs:f-=m.width()/2}switch(__(n.anchor,al)){case $s:h-=m.height();break;case Rs:h-=m.height()/2}for(f=Math.round(f),h=Math.round(h),m.clear(),i=0;i<k;++i)e[i].mark.bounds.clear();for(i=0;i<k;++i)(s=e[i]).x+=S[i]+=f,s.y+=B[i]+=h,m.union(s.mark.bounds.union(s.bounds.translate(S[i],B[i]))),p&&t.dirty(s);return m}function w_(t,e,n){var r,i,a,o,u,s,l,c=function(t){for(var e,n,r=t.items,i=r.length,a=0,o={marks:[],rowheaders:[],rowfooters:[],colheaders:[],colfooters:[],rowtitle:null,coltitle:null};a<i;++a)if(n=(e=r[a]).items,e.marktype===qs)switch(e.role){case Ls:case Is:case Us:break;case Ws:o.rowheaders.push(...n);break;case Hs:o.rowfooters.push(...n);break;case Vs:o.colheaders.push(...n);break;case Gs:o.colfooters.push(...n);break;case Ys:o.rowtitle=n[0];break;case Xs:o.coltitle=n[0];break;default:o.marks.push(...n)}return o}(e),f=c.marks,h=n.bounds===rl?k_:A_,d=n.offset,p=n.columns||f.length,g=p<=0?1:Math.ceil(f.length/p),m=g*p;const y=b_(t,f,n);y.empty()&&y.set(0,0,0,0),c.rowheaders&&(s=__(n.headerBand,al,null),r=M_(t,c.rowheaders,f,p,g,-__(d,"rowHeader"),g_,0,h,"x1",0,p,1,s)),c.colheaders&&(s=__(n.headerBand,il,null),i=M_(t,c.colheaders,f,p,p,-__(d,"columnHeader"),g_,1,h,"y1",0,1,p,s)),c.rowfooters&&(s=__(n.footerBand,al,null),a=M_(t,c.rowfooters,f,p,g,__(d,"rowFooter"),m_,0,h,"x2",p-1,p,1,s)),c.colfooters&&(s=__(n.footerBand,il,null),o=M_(t,c.colfooters,f,p,p,__(d,"columnFooter"),m_,1,h,"y2",m-p,1,p,s)),c.rowtitle&&(u=__(n.titleAnchor,al),l=__(d,"rowTitle"),l=u===$s?a+l:r-l,s=__(n.titleBand,al,.5),E_(t,c.rowtitle,l,0,y,s)),c.coltitle&&(u=__(n.titleAnchor,il),l=__(d,"columnTitle"),l=u===$s?o+l:i-l,s=__(n.titleBand,il,.5),E_(t,c.coltitle,l,1,y,s))}function k_(t,e){return"x1"===e?t.x||0:"y1"===e?t.y||0:"x2"===e?(t.x||0)+(t.width||0):"y2"===e?(t.y||0)+(t.height||0):void 0}function A_(t,e){return t.bounds[e]}function M_(t,e,n,r,i,a,o,u,s,l,c,f,h,d){var p,g,m,y,v,_,x,b,w,k=n.length,A=0,M=0;if(!k)return A;for(p=c;p<k;p+=f)n[p]&&(A=o(A,s(n[p],l)));if(!e.length)return A;for(e.length>i&&(t.warn("Grid headers exceed limit: "+i),e=e.slice(0,i)),A+=a,g=0,y=e.length;g<y;++g)t.dirty(e[g]),e[g].mark.bounds.clear();for(p=c,g=0,y=e.length;g<y;++g,p+=f){for(v=(_=e[g]).mark.bounds,m=p;m>=0&&null==(x=n[m]);m-=h);u?(b=null==d?x.x:Math.round(x.bounds.x1+d*x.bounds.width()),w=A):(b=A,w=null==d?x.y:Math.round(x.bounds.y1+d*x.bounds.height())),v.union(_.bounds.translate(b-(_.x||0),w-(_.y||0))),_.x=b,_.y=w,t.dirty(_),M=o(M,v[l])}return M}function E_(t,e,n,r,i,a){if(e){t.dirty(e);var o=n,u=n;r?o=Math.round(i.x1+a*i.width()):u=Math.round(i.y1+a*i.height()),e.bounds.translate(o-(e.x||0),u-(e.y||0)),e.mark.bounds.clear().union(e.bounds),e.x=o,e.y=u,t.dirty(e)}}function D_(t,e,n,r,i,a,o){const u=function(t,e){const n=t[e]||{};return(e,r)=>null!=n[e]?n[e]:null!=t[e]?t[e]:r}(n,e),s=function(t,e){var n=-1/0;return t.forEach(t=>{null!=t.offset&&(n=Math.max(n,t.offset))}),n>-1/0?n:e}(t,u("offset",0)),l=u("anchor",Os),c=l===$s?1:l===Rs?.5:0,f={align:nl,bounds:u("bounds",rl),columns:"vertical"===u("direction")?1:t.length,padding:u("margin",8),center:u("center"),nodirty:!0};switch(e){case Ts:f.anchor={x:Math.floor(r.x1)-s,column:$s,y:c*(o||r.height()+2*r.y1),row:l};break;case zs:f.anchor={x:Math.ceil(r.x2)+s,y:c*(o||r.height()+2*r.y1),row:l};break;case Bs:f.anchor={y:Math.floor(i.y1)-s,row:$s,x:c*(a||i.width()+2*i.x1),column:l};break;case Ns:f.anchor={y:Math.ceil(i.y2)+s,x:c*(a||i.width()+2*i.x1),column:l};break;case"top-left":f.anchor={x:s,y:s};break;case"top-right":f.anchor={x:a-s,y:s,column:$s};break;case"bottom-left":f.anchor={x:s,y:o-s,row:$s};break;case"bottom-right":f.anchor={x:a-s,y:o-s,column:$s,row:$s}}return f}function C_(t,e){var n,r,i,a,o=e.items[0],u=o.datum,s=o.orient,l=o.bounds,c=o.x,f=o.y;return o._bounds?o._bounds.clear().union(l):o._bounds=l.clone(),l.clear(),function(t,e,n){var r=e.padding,i=r-n.x,a=r-n.y;if(e.datum.title){var o=e.items[1].items[0],u=o.anchor,s=e.titlePadding||0,l=r-o.x,c=r-o.y;switch(o.orient){case Ts:i+=Math.ceil(o.bounds.width())+s;break;case zs:case Ns:break;default:a+=o.bounds.height()+s}switch((i||a)&&S_(t,n,i,a),o.orient){case Ts:c+=F_(e,n,o,u,1,1);break;case zs:l+=F_(e,n,o,$s,0,0)+s,c+=F_(e,n,o,u,1,1);break;case Ns:l+=F_(e,n,o,u,0,0),c+=F_(e,n,o,$s,-1,0,1)+s;break;default:l+=F_(e,n,o,u,0,0)}(l||c)&&S_(t,o,l,c),(l=Math.round(o.bounds.x1-r))<0&&(S_(t,n,-l,0),S_(t,o,-l,0))}else(i||a)&&S_(t,n,i,a)}(t,o,o.items[0].items[0]),l=function(t,e){return t.items.forEach(t=>e.union(t.bounds)),e.x1=t.padding,e.y1=t.padding,e}(o,l),n=2*o.padding,r=2*o.padding,l.empty()||(n=Math.ceil(l.width()+n),r=Math.ceil(l.height()+r)),"symbol"===u.type&&(i=o.items[0].items[0].items[0].items,a=i.reduce((t,e)=>(t[e.column]=Math.max(e.bounds.x2-e.x,t[e.column]||0),t),{}),i.forEach(t=>{t.width=a[t.column],t.height=t.bounds.y2-t.y})),s!==tl&&(o.x=c=0,o.y=f=0),o.width=n,o.height=r,Ef(l.set(c,f,c+n,f+r),o),o.mark.bounds.clear().union(l),o}function F_(t,e,n,r,i,a,o){const u="symbol"!==t.datum.type,s=n.datum.vgrad,l=(!u||!a&&s||o?e:e.items[0]).bounds[i?"y2":"x2"]-t.padding,c=s&&a?l:0,f=s&&a?0:l,h=i<=0?0:od(n);return Math.round(r===Os?c:r===$s?f-h:.5*(l-h))}function S_(t,e,n,r){e.x+=n,e.y+=r,e.bounds.translate(n,r),e.mark.bounds.translate(n,r),t.dirty(e)}function B_(t){co.call(this,null,t)}ut(B_,co,{transform(t,e){const n=e.dataflow;return t.mark.items.forEach(e=>{t.layout&&w_(n,e,t.layout),function(t,e,n){var r,i,a,o,u,s=e.items,l=Math.max(0,e.width||0),c=Math.max(0,e.height||0),f=(new vf).set(0,0,l,c),h=f.clone(),d=f.clone(),p=[];for(o=0,u=s.length;o<u;++o)switch((i=s[o]).role){case Ls:(h_(i)?h:d).union(d_(t,i,l,c));break;case Us:r=i;break;case Is:p.push(C_(t,i));break;case Ps:case js:case Ws:case Hs:case Ys:case Vs:case Gs:case Xs:h.union(i.bounds),d.union(i.bounds);break;default:f.union(i.bounds)}if(p.length){const e={};p.forEach(t=>{(a=t.orient||zs)!==tl&&(e[a]||(e[a]=[])).push(t)});for(const r in e){const i=e[r];b_(t,i,D_(i,r,n.legends,h,d,l,c))}p.forEach(e=>{const r=e.bounds;if(r.equals(e._bounds)||(e.bounds=e._bounds,t.dirty(e),e.bounds=r,t.dirty(e)),n.autosize&&n.autosize.type===Zs)switch(e.orient){case Ts:case zs:f.add(r.x1,0).add(r.x2,0);break;case Bs:case Ns:f.add(0,r.y1).add(0,r.y2)}else f.union(r)})}f.union(h).union(d),r&&f.union(function(t,e,n,r,i){var a,o=e.items[0],u=o.frame,s=o.orient,l=o.anchor,c=o.offset,f=o.padding,h=o.items[0].items[0],d=o.items[1]&&o.items[1].items[0],p=s===Ts||s===zs?r:n,g=0,m=0,y=0,v=0,_=0;if(u!==qs?s===Ts?(g=i.y2,p=i.y1):s===zs?(g=i.y1,p=i.y2):(g=i.x1,p=i.x2):s===Ts&&(g=r,p=0),a=l===Os?g:l===$s?p:(g+p)/2,d&&d.text){switch(s){case Bs:case Ns:_=h.bounds.height()+f;break;case Ts:v=h.bounds.width()+f;break;case zs:v=-h.bounds.width()-f}c_.clear().union(d.bounds),c_.translate(v-(d.x||0),_-(d.y||0)),f_(d,"x",v)|f_(d,"y",_)&&(t.dirty(d),d.bounds.clear().union(c_),d.mark.bounds.clear().union(c_),t.dirty(d)),c_.clear().union(d.bounds)}else c_.clear();switch(c_.union(h.bounds),s){case Bs:m=a,y=i.y1-c_.height()-c;break;case Ts:m=i.x1-c_.width()-c,y=a;break;case zs:m=i.x2+c_.width()+c,y=a;break;case Ns:m=a,y=i.y2+c;break;default:m=o.x,y=o.y}return f_(o,"x",m)|f_(o,"y",y)&&(c_.translate(m,y),t.dirty(o),o.bounds.clear().union(c_),e.bounds.clear().union(c_),t.dirty(o)),o.bounds}(t,r,l,c,f));e.clip&&f.set(0,0,e.width||0,e.height||0);!function(t,e,n,r){const i=r.autosize||{},a=i.type;if(t._autosize<1||!a)return;let o=t._width,u=t._height,s=Math.max(0,e.width||0),l=Math.max(0,Math.ceil(-n.x1)),c=Math.max(0,e.height||0),f=Math.max(0,Math.ceil(-n.y1));const h=Math.max(0,Math.ceil(n.x2-s)),d=Math.max(0,Math.ceil(n.y2-c));if(i.contains===Js){const e=t.padding();o-=e.left+e.right,u-=e.top+e.bottom}a===tl?(l=0,f=0,s=o,c=u):a===Zs?(s=Math.max(0,o-l-h),c=Math.max(0,u-f-d)):a===Qs?(s=Math.max(0,o-l-h),u=c+f+d):a===Ks?(o=s+l+h,c=Math.max(0,u-f-d)):"pad"===a&&(o=s+l+h,u=c+f+d);t._resizeView(o,u,s,c,[l,f],i.resize)}(t,e,f,n)}(n,e,t)}),function(t){return t&&"legend-entry"!==t.mark.role}(t.mark.group)?e.reflow():e}});var T_=Object.freeze({__proto__:null,bound:Zv,identifier:t_,mark:e_,overlap:n_,render:l_,viewlayout:B_});function z_(t){co.call(this,null,t)}function N_(t){co.call(this,null,t)}function O_(){return Rt({})}function R_(t){co.call(this,null,t)}function $_(t){co.call(this,[],t)}ut(z_,co,{transform(t,e){if(this.value&&!t.modified())return e.StopPropagation;var n=e.dataflow.locale(),r=e.fork(e.NO_SOURCE|e.NO_FIELDS),i=this.value,a=t.scale,o=Py(a,null==t.count?t.values?t.values.length:10:t.count,t.minstep),u=t.format||Wy(n,a,o,t.formatSpecifier,t.formatType,!!t.values),s=t.values?jy(a,t.values,o):Iy(a,o);return i&&(r.rem=i),i=s.map((t,e)=>Rt({index:e/(s.length-1||1),value:t,label:u(t)})),t.extra&&i.length&&i.push(Rt({index:-1,extra:{value:i[0].value},label:""})),r.source=i,r.add=i,this.value=i,r}}),ut(N_,co,{transform(t,e){var n=e.dataflow,r=e.fork(e.NO_SOURCE|e.NO_FIELDS),i=t.item||O_,a=t.key||Nt,o=this.value;return v(r.encode)&&(r.encode=null),o&&(t.modified("key")||e.modified(a))&&u("DataJoin does not support modified key function or fields."),o||(e=e.addAll(),this.value=o=function(t){const e=at().test(t=>t.exit);return e.lookup=n=>e.get(t(n)),e}(a)),e.visit(e.ADD,t=>{const e=a(t);let n=o.get(e);n?n.exit?(o.empty--,r.add.push(n)):r.mod.push(n):(n=i(t),o.set(e,n),r.add.push(n)),n.datum=t,n.exit=!1}),e.visit(e.MOD,t=>{const e=a(t),n=o.get(e);n&&(n.datum=t,r.mod.push(n))}),e.visit(e.REM,t=>{const e=a(t),n=o.get(e);t!==n.datum||n.exit||(r.rem.push(n),n.exit=!0,++o.empty)}),e.changed(e.ADD_MOD)&&r.modifies("datum"),(e.clean()||t.clean&&o.empty>n.cleanThreshold)&&n.runAfter(o.clean),r}}),ut(R_,co,{transform(t,e){var n=e.fork(e.ADD_REM),r=t.mod||!1,i=t.encoders,a=e.encode;if(v(a)){if(!n.changed()&&!a.every(t=>i[t]))return e.StopPropagation;a=a[0],n.encode=null}var o="enter"===a,u=i.update||g,s=i.enter||g,l=i.exit||g,c=(a&&!o?i[a]:u)||g;if(e.changed(e.ADD)&&(e.visit(e.ADD,e=>{s(e,t),u(e,t)}),n.modifies(s.output),n.modifies(u.output),c!==g&&c!==u&&(e.visit(e.ADD,e=>{c(e,t)}),n.modifies(c.output))),e.changed(e.REM)&&l!==g&&(e.visit(e.REM,e=>{l(e,t)}),n.modifies(l.output)),o||c!==g){var f=e.MOD|(t.modified()?e.REFLOW:0);o?(e.visit(f,e=>{var i=s(e,t)||r;(c(e,t)||i)&&n.mod.push(e)}),n.mod.length&&n.modifies(s.output)):e.visit(f,e=>{(c(e,t)||r)&&n.mod.push(e)}),n.mod.length&&n.modifies(c.output)}return n.changed()?n:e.StopPropagation}}),ut($_,co,{transform(t,e){if(null!=this.value&&!t.modified())return e.StopPropagation;var n,r,i,a,o,u=e.dataflow.locale(),s=e.fork(e.NO_SOURCE|e.NO_FIELDS),l=this.value,c=t.type||$y,f=t.scale,h=+t.limit,d=Py(f,null==t.count?5:t.count,t.minstep),p=!!t.values||c===$y,g=t.format||Xy(u,f,d,c,t.formatSpecifier,t.formatType,p),m=t.values||Gy(f,d);return l&&(s.rem=l),c===$y?(h&&m.length>h?(e.dataflow.warn("Symbol legend count exceeds limit, filtering items."),l=m.slice(0,h-1),o=!0):l=m,H(i=t.size)?(t.values||0!==f(l[0])||(l=l.slice(1)),a=l.reduce((e,n)=>Math.max(e,i(n,t)),0)):i=Z(a=i||8),l=l.map((e,n)=>Rt({index:n,label:g(e,n,l),value:e,offset:a,size:i(e,t)})),o&&(o=m[l.length],l.push(Rt({index:l.length,label:`…${m.length-l.length} entries`,value:o,offset:a,size:i(o,t)})))):"gradient"===c?(n=f.domain(),r=By(f,n[0],A(n)),m.length<3&&!t.values&&n[0]!==A(n)&&(m=[n[0],A(n)]),l=m.map((t,e)=>Rt({index:e,label:g(t,e,m),value:t,perc:r(t)}))):(i=m.length-1,r=function(t){const e=t.domain(),n=e.length-1;let r=+e[0],i=+A(e),a=i-r;if(t.type===pp){const t=n?a/n:.1;r-=t,i+=t,a=i-r}return t=>(t-r)/a}(f),l=m.map((t,e)=>Rt({index:e,label:g(t,e,m),value:t,perc:e?r(t):0,perc2:e===i?1:r(m[e+1])}))),s.source=l,s.add=l,this.value=l,s}});const q_=t=>t.source.x,L_=t=>t.source.y,U_=t=>t.target.x,P_=t=>t.target.y;function j_(t){co.call(this,{},t)}j_.Definition={type:"LinkPath",metadata:{modifies:!0},params:[{name:"sourceX",type:"field",default:"source.x"},{name:"sourceY",type:"field",default:"source.y"},{name:"targetX",type:"field",default:"target.x"},{name:"targetY",type:"field",default:"target.y"},{name:"orient",type:"enum",default:"vertical",values:["horizontal","vertical","radial"]},{name:"shape",type:"enum",default:"line",values:["line","arc","curve","diagonal","orthogonal"]},{name:"require",type:"signal"},{name:"as",type:"string",default:"path"}]},ut(j_,co,{transform(t,e){var n=t.sourceX||q_,r=t.sourceY||L_,i=t.targetX||U_,a=t.targetY||P_,o=t.as||"path",s=t.orient||"vertical",l=t.shape||"line",c=Y_.get(l+"-"+s)||Y_.get(l);return c||u("LinkPath unsupported type: "+t.shape+(t.orient?"-"+t.orient:"")),e.visit(e.SOURCE,t=>{t[o]=c(n(t),r(t),i(t),a(t))}),e.reflow(t.modified()).modifies(o)}});const I_=(t,e,n,r)=>"M"+t+","+e+"L"+n+","+r,W_=(t,e,n,r)=>{var i=n-t,a=r-e,o=Math.sqrt(i*i+a*a)/2;return"M"+t+","+e+"A"+o+","+o+" "+180*Math.atan2(a,i)/Math.PI+" 0 1 "+n+","+r},H_=(t,e,n,r)=>{const i=n-t,a=r-e,o=.2*(i+a),u=.2*(a-i);return"M"+t+","+e+"C"+(t+o)+","+(e+u)+" "+(n+u)+","+(r-o)+" "+n+","+r},Y_=at({line:I_,"line-radial":(t,e,n,r)=>I_(e*Math.cos(t),e*Math.sin(t),r*Math.cos(n),r*Math.sin(n)),arc:W_,"arc-radial":(t,e,n,r)=>W_(e*Math.cos(t),e*Math.sin(t),r*Math.cos(n),r*Math.sin(n)),curve:H_,"curve-radial":(t,e,n,r)=>H_(e*Math.cos(t),e*Math.sin(t),r*Math.cos(n),r*Math.sin(n)),"orthogonal-horizontal":(t,e,n,r)=>"M"+t+","+e+"V"+r+"H"+n,"orthogonal-vertical":(t,e,n,r)=>"M"+t+","+e+"H"+n+"V"+r,"orthogonal-radial":(t,e,n,r)=>{const i=Math.cos(t),a=Math.sin(t),o=Math.cos(n),u=Math.sin(n);return"M"+e*i+","+e*a+"A"+e+","+e+" 0 0,"+((Math.abs(n-t)>Math.PI?n<=t:n>t)?1:0)+" "+e*o+","+e*u+"L"+r*o+","+r*u},"diagonal-horizontal":(t,e,n,r)=>{const i=(t+n)/2;return"M"+t+","+e+"C"+i+","+e+" "+i+","+r+" "+n+","+r},"diagonal-vertical":(t,e,n,r)=>{const i=(e+r)/2;return"M"+t+","+e+"C"+t+","+i+" "+n+","+i+" "+n+","+r},"diagonal-radial":(t,e,n,r)=>{const i=Math.cos(t),a=Math.sin(t),o=Math.cos(n),u=Math.sin(n),s=(e+r)/2;return"M"+e*i+","+e*a+"C"+s*i+","+s*a+" "+s*o+","+s*u+" "+r*o+","+r*u}});function V_(t){co.call(this,null,t)}V_.Definition={type:"Pie",metadata:{modifies:!0},params:[{name:"field",type:"field"},{name:"startAngle",type:"number",default:0},{name:"endAngle",type:"number",default:6.283185307179586},{name:"sort",type:"boolean",default:!1},{name:"as",type:"string",array:!0,length:2,default:["startAngle","endAngle"]}]},ut(V_,co,{transform(t,e){var n,r,i,a=t.as||["startAngle","endAngle"],o=a[0],u=a[1],s=t.field||d,l=t.startAngle||0,c=null!=t.endAngle?t.endAngle:2*Math.PI,f=e.source,h=f.map(s),p=h.length,g=l,m=(c-l)/an(h),y=He(p);for(t.sort&&y.sort((t,e)=>h[t]-h[e]),n=0;n<p;++n)i=h[y[n]],(r=f[y[n]])[o]=g,r[u]=g+=i*m;return this.value=h,e.reflow(t.modified()).modifies(a)}});function G_(t){return by(t)&&t!==fp}const X_=Et(["set","modified","clear","type","scheme","schemeExtent","schemeCount","domain","domainMin","domainMid","domainMax","domainRaw","domainImplicit","nice","zero","bins","range","rangeStep","round","reverse","interpolate","interpolateGamma"]);function J_(t){co.call(this,null,t),this.modified(!0)}function Z_(t,e,n){Ay(t)&&(Math.abs(e.reduce((t,e)=>t+(e<0?-1:e>0?1:0),0))!==e.length&&n.warn("Log scale domain includes zero: "+bt(e)));return e}function Q_(t,e,n){return H(t)&&(e||n)?Cy(t,K_(e||[0,1],n)):t}function K_(t,e){return e?t.slice().reverse():t}function tx(t){co.call(this,null,t)}ut(J_,co,{transform(t,e){var n=e.dataflow,r=this.value,i=function(t){var e,n=t.type,r="";if(n===fp)return"sequential-linear";(function(t){const e=t.type;return by(e)&&e!==lp&&e!==cp&&(t.scheme||t.range&&t.range.length&&t.range.every(dt))})(t)&&(r=2===(e=t.rawDomain?t.rawDomain.length:t.domain?t.domain.length+ +(null!=t.domainMid):0)?"sequential-":3===e?"diverging-":"");return(r+n||ip).toLowerCase()}(t);for(i in r&&i===r.type||(this.value=r=vy(i)()),t)if(!X_[i]){if("padding"===i&&G_(r.type))continue;H(r[i])?r[i](t[i]):n.warn("Unsupported scale property: "+i)}return function(t,e,n){var r=t.type,i=e.round||!1,a=e.range;if(null!=e.rangeStep)a=function(t,e,n){t!==yp&&t!==mp&&u("Only band and point scales support rangeStep.");var r=(null!=e.paddingOuter?e.paddingOuter:e.padding)||0,i=t===mp?1:(null!=e.paddingInner?e.paddingInner:e.padding)||0;return[0,e.rangeStep*rp(n,i,r)]}(r,e,n);else if(e.scheme&&(a=function(t,e,n){var r,i=e.schemeExtent;v(e.scheme)?r=Fy(e.scheme,e.interpolate,e.interpolateGamma):(r=Ry(e.scheme.toLowerCase()))||u("Unrecognized scheme name: "+e.scheme);return n=t===pp?n+1:t===vp?n-1:t===hp||t===dp?+e.schemeCount||5:n,My(t)?Q_(r,i,e.reverse):H(r)?Sy(Q_(r,i),n):t===gp?r:r.slice(0,n)}(r,e,n),H(a))){if(t.interpolator)return t.interpolator(a);u(`Scale type ${r} does not support interpolating color schemes.`)}if(a&&My(r))return t.interpolator(Fy(K_(a,e.reverse),e.interpolate,e.interpolateGamma));a&&e.interpolate&&t.interpolate?t.interpolate(Ty(e.interpolate,e.interpolateGamma)):H(t.round)?t.round(i):H(t.rangeRound)&&t.interpolate(i?rm:nm);a&&t.range(K_(a,e.reverse))}(r,t,function(t,e,n){let r=e.bins;if(r&&!v(r)){const e=t.domain(),n=e[0],i=A(e),a=r.step;let o=null==r.start?n:r.start,s=null==r.stop?i:r.stop;a||u("Scale bins parameter missing step property."),o<n&&(o=a*Math.ceil(n/a)),s>i&&(s=a*Math.floor(i/a)),r=He(o,s+a/2,a)}r?t.bins=r:t.bins&&delete t.bins;t.type===vp&&(r?e.domain||e.domainRaw||(t.domain(r),n=r.length):t.bins=t.domain());return n}(r,t,function(t,e,n){var r=function(t,e,n){return e?(t.domain(Z_(t.type,e,n)),e.length):-1}(t,e.domainRaw,n);if(r>-1)return r;var i,a,o=e.domain,u=t.type,s=e.zero||void 0===e.zero&&function(t){const e=t.type;return!t.bins&&(e===ip||e===op||e===up)}(t);if(!o)return 0;G_(u)&&e.padding&&o[0]!==A(o)&&(o=function(t,e,n,r,i,a){var o=Math.abs(A(n)-n[0]),u=o/(o-2*r),s=t===ap?q(e,null,u):t===up?L(e,null,u,.5):t===op?L(e,null,u,i||1):t===sp?U(e,null,u,a||1):$(e,null,u);return(e=e.slice())[0]=s[0],e[e.length-1]=s[1],e}(u,o,e.range,e.padding,e.exponent,e.constant));if((s||null!=e.domainMin||null!=e.domainMax||null!=e.domainMid)&&(i=(o=o.slice()).length-1||1,s&&(o[0]>0&&(o[0]=0),o[i]<0&&(o[i]=0)),null!=e.domainMin&&(o[0]=e.domainMin),null!=e.domainMax&&(o[i]=e.domainMax),null!=e.domainMid)){const t=(a=e.domainMid)>o[i]?i+1:a<o[0]?0:i;t!==i&&n.warn("Scale domainMid exceeds domain min or max.",a),o.splice(t,0,a)}t.domain(Z_(u,o,n)),u===gp&&t.unknown(e.domainImplicit?Ep:void 0);e.nice&&t.nice&&t.nice(!0!==e.nice&&Py(t,e.nice)||null);return o.length}(r,t,n))),e.fork(e.NO_SOURCE|e.NO_FIELDS)}}),ut(tx,co,{transform(t,e){const n=t.modified("sort")||e.changed(e.ADD)||e.modified(t.sort.fields)||e.modified("datum");return n&&e.source.sort(Ut(t.sort)),this.modified(n),e}});const ex="zero",nx="center",rx="normalize",ix=["y0","y1"];function ax(t){co.call(this,null,t)}function ox(t,e,n,r,i){for(var a,o=(e-t.sum)/2,u=t.length,s=0;s<u;++s)(a=t[s])[r]=o,a[i]=o+=Math.abs(n(a))}function ux(t,e,n,r,i){for(var a,o=1/t.sum,u=0,s=t.length,l=0,c=0;l<s;++l)(a=t[l])[r]=u,a[i]=u=o*(c+=Math.abs(n(a)))}function sx(t,e,n,r,i){for(var a,o,u=0,s=0,l=t.length,c=0;c<l;++c)(a=+n(o=t[c]))<0?(o[r]=s,o[i]=s+=a):(o[r]=u,o[i]=u+=a)}ax.Definition={type:"Stack",metadata:{modifies:!0},params:[{name:"field",type:"field"},{name:"groupby",type:"field",array:!0},{name:"sort",type:"compare"},{name:"offset",type:"enum",default:ex,values:[ex,nx,rx]},{name:"as",type:"string",array:!0,length:2,default:ix}]},ut(ax,co,{transform(t,e){var n,r,i,a,o=t.as||ix,u=o[0],s=o[1],l=Ut(t.sort),c=t.field||d,f=t.offset===nx?ox:t.offset===rx?ux:sx;for(n=function(t,e,n,r){var i,a,o,u,s,l,c,f,h,d=[],p=t=>t(s);if(null==e)d.push(t.slice());else for(i={},a=0,o=t.length;a<o;++a)s=t[a],(c=i[l=e.map(p)])||(i[l]=c=[],d.push(c)),c.push(s);for(l=0,h=0,u=d.length;l<u;++l){for(a=0,f=0,o=(c=d[l]).length;a<o;++a)f+=Math.abs(r(c[a]));c.sum=f,f>h&&(h=f),n&&c.sort(n)}return d.max=h,d}(e.source,t.groupby,l,c),r=0,i=n.length,a=n.max;r<i;++r)f(n[r],a,c,u,s);return e.reflow(t.modified()).modifies(o)}});var lx=Object.freeze({__proto__:null,axisticks:z_,datajoin:N_,encode:R_,legendentries:$_,linkpath:j_,pie:V_,scale:J_,sortitems:tx,stack:ax});function cx(){}const fx=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function hx(){var t=1,e=1,n=o;function r(t,e){return e.map(e=>i(t,e))}function i(r,i){var o=[],u=[];return function(n,r,i){var o,u,s,l,c,f,h=new Array,d=new Array;o=u=-1,l=n[0]>=r,fx[l<<1].forEach(p);for(;++o<t-1;)s=l,l=n[o+1]>=r,fx[s|l<<1].forEach(p);fx[l<<0].forEach(p);for(;++u<e-1;){for(o=-1,l=n[u*t+t]>=r,c=n[u*t]>=r,fx[l<<1|c<<2].forEach(p);++o<t-1;)s=l,l=n[u*t+t+o+1]>=r,f=c,c=n[u*t+o+1]>=r,fx[s|l<<1|c<<2|f<<3].forEach(p);fx[l|c<<3].forEach(p)}o=-1,c=n[u*t]>=r,fx[c<<2].forEach(p);for(;++o<t-1;)f=c,c=n[u*t+o+1]>=r,fx[c<<2|f<<3].forEach(p);function p(t){var e,n,r=[t[0][0]+o,t[0][1]+u],s=[t[1][0]+o,t[1][1]+u],l=a(r),c=a(s);(e=d[l])?(n=h[c])?(delete d[e.end],delete h[n.start],e===n?(e.ring.push(s),i(e.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete d[e.end],e.ring.push(s),d[e.end=c]=e):(e=h[c])?(n=d[l])?(delete h[e.start],delete d[n.end],e===n?(e.ring.push(s),i(e.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete h[e.start],e.ring.unshift(r),h[e.start=l]=e):h[l]=d[c]={start:l,end:c,ring:[r,s]}}fx[c<<3].forEach(p)}(r,i,t=>{n(t,r,i),function(t){var e=0,n=t.length,r=t[n-1][1]*t[0][0]-t[n-1][0]*t[0][1];for(;++e<n;)r+=t[e-1][1]*t[e][0]-t[e-1][0]*t[e][1];return r}(t)>0?o.push([t]):u.push(t)}),u.forEach(t=>{for(var e,n=0,r=o.length;n<r;++n)if(-1!==dx((e=o[n])[0],t))return void e.push(t)}),{type:"MultiPolygon",value:i,coordinates:o}}function a(e){return 2*e[0]+e[1]*(t+1)*4}function o(n,r,i){n.forEach(n=>{var a,o=n[0],u=n[1],s=0|o,l=0|u,c=r[l*t+s];o>0&&o<t&&s===o&&(a=r[l*t+s-1],n[0]=o+(i-a)/(c-a)-.5),u>0&&u<e&&l===u&&(a=r[(l-1)*t+s],n[1]=u+(i-a)/(c-a)-.5)})}return r.contour=i,r.size=function(n){if(!arguments.length)return[t,e];var i=Math.floor(n[0]),a=Math.floor(n[1]);return i>=0&&a>=0||u("invalid size"),t=i,e=a,r},r.smooth=function(t){return arguments.length?(n=t?o:cx,r):n===o},r}function dx(t,e){for(var n,r=-1,i=e.length;++r<i;)if(n=px(t,e[r]))return n;return 0}function px(t,e){for(var n=e[0],r=e[1],i=-1,a=0,o=t.length,u=o-1;a<o;u=a++){var s=t[a],l=s[0],c=s[1],f=t[u],h=f[0],d=f[1];if(gx(s,f,e))return 0;c>r!=d>r&&n<(h-l)*(r-c)/(d-c)+l&&(i=-i)}return i}function gx(t,e,n){var r,i,a,o;return function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])==(n[0]-t[0])*(e[1]-t[1])}(t,e,n)&&(i=t[r=+(t[0]===e[0])],a=n[r],o=e[r],i<=a&&a<=o||o<=a&&a<=i)}function mx(t,e,n){return function(r){var i=tt(r),a=n?Math.min(i[0],0):i[0],o=i[1],u=o-a,s=e?Ze(a,o,t):u/(t+1);return He(s,o,s)}}function yx(t){co.call(this,null,t)}function vx(t,e,n,r,i){const a=t.x1||0,o=t.y1||0,u=e*n<0;function s(t){t.forEach(l)}function l(t){u&&t.reverse(),t.forEach(c)}function c(t){t[0]=(t[0]-a)*e+r,t[1]=(t[1]-o)*n+i}return function(t){return t.coordinates.forEach(s),t}}function _x(t,e,n){const r=t>=0?t:Bo(e,n);return Math.round((Math.sqrt(4*r*r+1)-1)/2)}function xx(t){return H(t)?t:Z(+t)}function bx(){var t=t=>t[0],e=t=>t[1],n=d,r=[-1,-1],i=960,a=500,o=2;function s(u,s){const l=_x(r[0],u,t)>>o,c=_x(r[1],u,e)>>o,f=l?l+2:0,h=c?c+2:0,d=2*f+(i>>o),p=2*h+(a>>o),g=new Float32Array(d*p),m=new Float32Array(d*p);let y=g;u.forEach(r=>{const i=f+(+t(r)>>o),a=h+(+e(r)>>o);i>=0&&i<d&&a>=0&&a<p&&(g[i+a*d]+=+n(r))}),l>0&&c>0?(wx(d,p,g,m,l),kx(d,p,m,g,c),wx(d,p,g,m,l),kx(d,p,m,g,c),wx(d,p,g,m,l),kx(d,p,m,g,c)):l>0?(wx(d,p,g,m,l),wx(d,p,m,g,l),wx(d,p,g,m,l),y=m):c>0&&(kx(d,p,g,m,c),kx(d,p,m,g,c),kx(d,p,g,m,c),y=m);const v=s?Math.pow(2,-2*o):1/an(y);for(let t=0,e=d*p;t<e;++t)y[t]*=v;return{values:y,scale:1<<o,width:d,height:p,x1:f,y1:h,x2:f+(i>>o),y2:h+(a>>o)}}return s.x=function(e){return arguments.length?(t=xx(e),s):t},s.y=function(t){return arguments.length?(e=xx(t),s):e},s.weight=function(t){return arguments.length?(n=xx(t),s):n},s.size=function(t){if(!arguments.length)return[i,a];var e=+t[0],n=+t[1];return e>=0&&n>=0||u("invalid size"),i=e,a=n,s},s.cellSize=function(t){return arguments.length?((t=+t)>=1||u("invalid cell size"),o=Math.floor(Math.log(t)/Math.LN2),s):1<<o},s.bandwidth=function(t){return arguments.length?(1===(t=I(t)).length&&(t=[+t[0],+t[0]]),2!==t.length&&u("invalid bandwidth"),r=t,s):r},s}function wx(t,e,n,r,i){const a=1+(i<<1);for(let o=0;o<e;++o)for(let e=0,u=0;e<t+i;++e)e<t&&(u+=n[e+o*t]),e>=i&&(e>=a&&(u-=n[e-a+o*t]),r[e-i+o*t]=u/Math.min(e+1,t-1+a-e,a))}function kx(t,e,n,r,i){const a=1+(i<<1);for(let o=0;o<t;++o)for(let u=0,s=0;u<e+i;++u)u<e&&(s+=n[o+u*t]),u>=i&&(u>=a&&(s-=n[o+(u-a)*t]),r[o+(u-i)*t]=s/Math.min(u+1,e-1+a-u,a))}function Ax(t){co.call(this,null,t)}yx.Definition={type:"Isocontour",metadata:{generates:!0},params:[{name:"field",type:"field"},{name:"thresholds",type:"number",array:!0},{name:"levels",type:"number"},{name:"nice",type:"boolean",default:!1},{name:"resolve",type:"enum",values:["shared","independent"],default:"independent"},{name:"zero",type:"boolean",default:!0},{name:"smooth",type:"boolean",default:!0},{name:"scale",type:"number",expr:!0},{name:"translate",type:"number",array:!0,expr:!0},{name:"as",type:"string",null:!0,default:"contour"}]},ut(yx,co,{transform(t,e){if(this.value&&!e.changed()&&!t.modified())return e.StopPropagation;var n=e.fork(e.NO_SOURCE|e.NO_FIELDS),r=e.materialize(e.SOURCE).source,i=t.field||f,a=hx().smooth(!1!==t.smooth),o=t.thresholds||function(t,e,n){const r=mx(n.levels||10,n.nice,!1!==n.zero);return"shared"!==n.resolve?r:r(t.map(t=>Qe(e(t).values)))}(r,i,t),u=null===t.as?null:t.as||"contour",s=[];return r.forEach(e=>{const n=i(e),r=a.size([n.width,n.height])(n.values,v(o)?o:o(n.values));!function(t,e,n,r){let i=r.scale||e.scale,a=r.translate||e.translate;H(i)&&(i=i(n,r));H(a)&&(a=a(n,r));if((1===i||null==i)&&!a)return;const o=(ft(i)?i:i[0])||1,u=(ft(i)?i:i[1])||1,s=a&&a[0]||0,l=a&&a[1]||0;t.forEach(vx(e,o,u,s,l))}(r,n,e,t),r.forEach(t=>{s.push(qt(e,Rt(null!=u?{[u]:t}:t)))})}),this.value&&(n.rem=this.value),this.value=n.source=n.add=s,n}}),Ax.Definition={type:"KDE2D",metadata:{generates:!0},params:[{name:"size",type:"number",array:!0,length:2,required:!0},{name:"x",type:"field",required:!0},{name:"y",type:"field",required:!0},{name:"weight",type:"field"},{name:"groupby",type:"field",array:!0},{name:"cellSize",type:"number"},{name:"bandwidth",type:"number",array:!0,length:2},{name:"counts",type:"boolean",default:!1},{name:"as",type:"string",default:"grid"}]};const Mx=["x","y","weight","size","cellSize","bandwidth"];function Ex(t,e){return Mx.forEach(n=>null!=e[n]?t[n](e[n]):0),t}function Dx(t){co.call(this,null,t)}ut(Ax,co,{transform(t,e){if(this.value&&!e.changed()&&!t.modified())return e.StopPropagation;var r,i=e.fork(e.NO_SOURCE|e.NO_FIELDS),a=function(t,e){var n,r,i,a,o,u,s=[],l=t=>t(a);if(null==e)s.push(t);else for(n={},r=0,i=t.length;r<i;++r)a=t[r],(u=n[o=e.map(l)])||(n[o]=u=[],u.dims=o,s.push(u)),u.push(a);return s}(e.materialize(e.SOURCE).source,t.groupby),o=(t.groupby||[]).map(n),u=Ex(bx(),t),s=t.as||"grid";return r=a.map(e=>Rt(function(t,e){for(let n=0;n<o.length;++n)t[o[n]]=e[n];return t}({[s]:u(e,t.counts)},e.dims))),this.value&&(i.rem=this.value),this.value=i.source=i.add=r,i}}),Dx.Definition={type:"Contour",metadata:{generates:!0},params:[{name:"size",type:"number",array:!0,length:2,required:!0},{name:"values",type:"number",array:!0},{name:"x",type:"field"},{name:"y",type:"field"},{name:"weight",type:"field"},{name:"cellSize",type:"number"},{name:"bandwidth",type:"number"},{name:"count",type:"number"},{name:"nice",type:"boolean",default:!1},{name:"thresholds",type:"number",array:!0},{name:"smooth",type:"boolean",default:!0}]},ut(Dx,co,{transform(t,e){if(this.value&&!e.changed()&&!t.modified())return e.StopPropagation;var n,r,i=e.fork(e.NO_SOURCE|e.NO_FIELDS),a=hx().smooth(!1!==t.smooth),o=t.values,u=t.thresholds||mx(t.count||10,t.nice,!!o),s=t.size;return o||(o=e.materialize(e.SOURCE).source,r=vx(n=Ex(bx(),t)(o,!0),n.scale||1,n.scale||1,0,0),s=[n.width,n.height],o=n.values),u=v(u)?u:u(o),o=a.size(s)(o,u),r&&o.forEach(r),this.value&&(i.rem=this.value),this.value=i.source=i.add=(o||[]).map(Rt),i}});var Cx="Feature",Fx="FeatureCollection";function Sx(t){co.call(this,null,t)}Sx.Definition={type:"GeoJSON",metadata:{},params:[{name:"fields",type:"field",array:!0,length:2},{name:"geojson",type:"field"}]},ut(Sx,co,{transform(t,e){var n,i=this._features,a=this._points,o=t.fields,u=o&&o[0],s=o&&o[1],l=t.geojson||!o&&f,c=e.ADD;n=t.modified()||e.changed(e.REM)||e.modified(r(l))||u&&e.modified(r(u))||s&&e.modified(r(s)),this.value&&!n||(c=e.SOURCE,this._features=i=[],this._points=a=[]),l&&e.visit(c,t=>i.push(l(t))),u&&s&&(e.visit(c,t=>{var e=u(t),n=s(t);null!=e&&null!=n&&(e=+e)===e&&(n=+n)===n&&a.push([e,n])}),i=i.concat({type:Cx,geometry:{type:"MultiPoint",coordinates:a}})),this.value={type:Fx,features:i}}});var Bx=1e-6,Tx=1e-12,zx=Math.PI,Nx=zx/2,Ox=zx/4,Rx=2*zx,$x=180/zx,qx=zx/180,Lx=Math.abs,Ux=Math.atan,Px=Math.atan2,jx=Math.cos,Ix=Math.ceil,Wx=Math.exp,Hx=Math.hypot,Yx=Math.log,Vx=Math.pow,Gx=Math.sin,Xx=Math.sign||function(t){return t>0?1:t<0?-1:0},Jx=Math.sqrt,Zx=Math.tan;function Qx(t){return t>1?0:t<-1?zx:Math.acos(t)}function Kx(t){return t>1?Nx:t<-1?-Nx:Math.asin(t)}function tb(){}function eb(t,e){t&&rb.hasOwnProperty(t.type)&&rb[t.type](t,e)}var nb={Feature:function(t,e){eb(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)eb(n[r].geometry,e)}},rb={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){ib(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)ib(n[r],e,0)},Polygon:function(t,e){ab(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)ab(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)eb(n[r],e)}};function ib(t,e,n){var r,i=-1,a=t.length-n;for(e.lineStart();++i<a;)r=t[i],e.point(r[0],r[1],r[2]);e.lineEnd()}function ab(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)ib(t[n],e,1);e.polygonEnd()}function ob(t,e){t&&nb.hasOwnProperty(t.type)?nb[t.type](t,e):eb(t,e)}var ub,sb,lb,cb,fb,hb,db,pb,gb,mb,yb,vb,_b,xb,bb,wb,kb=new We,Ab=new We,Mb={point:tb,lineStart:tb,lineEnd:tb,polygonStart:function(){kb=new We,Mb.lineStart=Eb,Mb.lineEnd=Db},polygonEnd:function(){var t=+kb;Ab.add(t<0?Rx+t:t),this.lineStart=this.lineEnd=this.point=tb},sphere:function(){Ab.add(Rx)}};function Eb(){Mb.point=Cb}function Db(){Fb(ub,sb)}function Cb(t,e){Mb.point=Fb,ub=t,sb=e,lb=t*=qx,cb=jx(e=(e*=qx)/2+Ox),fb=Gx(e)}function Fb(t,e){var n=(t*=qx)-lb,r=n>=0?1:-1,i=r*n,a=jx(e=(e*=qx)/2+Ox),o=Gx(e),u=fb*o,s=cb*a+u*jx(i),l=u*r*Gx(i);kb.add(Px(l,s)),lb=t,cb=a,fb=o}function Sb(t){return[Px(t[1],t[0]),Kx(t[2])]}function Bb(t){var e=t[0],n=t[1],r=jx(n);return[r*jx(e),r*Gx(e),Gx(n)]}function Tb(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function zb(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function Nb(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function Ob(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function Rb(t){var e=Jx(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}var $b,qb,Lb,Ub,Pb,jb,Ib,Wb,Hb,Yb,Vb,Gb,Xb,Jb,Zb,Qb,Kb={point:tw,lineStart:nw,lineEnd:rw,polygonStart:function(){Kb.point=iw,Kb.lineStart=aw,Kb.lineEnd=ow,xb=new We,Mb.polygonStart()},polygonEnd:function(){Mb.polygonEnd(),Kb.point=tw,Kb.lineStart=nw,Kb.lineEnd=rw,kb<0?(hb=-(pb=180),db=-(gb=90)):xb>Bx?gb=90:xb<-1e-6&&(db=-90),wb[0]=hb,wb[1]=pb},sphere:function(){hb=-(pb=180),db=-(gb=90)}};function tw(t,e){bb.push(wb=[hb=t,pb=t]),e<db&&(db=e),e>gb&&(gb=e)}function ew(t,e){var n=Bb([t*qx,e*qx]);if(_b){var r=zb(_b,n),i=zb([r[1],-r[0],0],r);Rb(i),i=Sb(i);var a,o=t-mb,u=o>0?1:-1,s=i[0]*$x*u,l=Lx(o)>180;l^(u*mb<s&&s<u*t)?(a=i[1]*$x)>gb&&(gb=a):l^(u*mb<(s=(s+360)%360-180)&&s<u*t)?(a=-i[1]*$x)<db&&(db=a):(e<db&&(db=e),e>gb&&(gb=e)),l?t<mb?uw(hb,t)>uw(hb,pb)&&(pb=t):uw(t,pb)>uw(hb,pb)&&(hb=t):pb>=hb?(t<hb&&(hb=t),t>pb&&(pb=t)):t>mb?uw(hb,t)>uw(hb,pb)&&(pb=t):uw(t,pb)>uw(hb,pb)&&(hb=t)}else bb.push(wb=[hb=t,pb=t]);e<db&&(db=e),e>gb&&(gb=e),_b=n,mb=t}function nw(){Kb.point=ew}function rw(){wb[0]=hb,wb[1]=pb,Kb.point=tw,_b=null}function iw(t,e){if(_b){var n=t-mb;xb.add(Lx(n)>180?n+(n>0?360:-360):n)}else yb=t,vb=e;Mb.point(t,e),ew(t,e)}function aw(){Mb.lineStart()}function ow(){iw(yb,vb),Mb.lineEnd(),Lx(xb)>Bx&&(hb=-(pb=180)),wb[0]=hb,wb[1]=pb,_b=null}function uw(t,e){return(e-=t)<0?e+360:e}function sw(t,e){return t[0]-e[0]}function lw(t,e){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}var cw={sphere:tb,point:fw,lineStart:dw,lineEnd:mw,polygonStart:function(){cw.lineStart=yw,cw.lineEnd=vw},polygonEnd:function(){cw.lineStart=dw,cw.lineEnd=mw}};function fw(t,e){t*=qx;var n=jx(e*=qx);hw(n*jx(t),n*Gx(t),Gx(e))}function hw(t,e,n){++$b,Lb+=(t-Lb)/$b,Ub+=(e-Ub)/$b,Pb+=(n-Pb)/$b}function dw(){cw.point=pw}function pw(t,e){t*=qx;var n=jx(e*=qx);Jb=n*jx(t),Zb=n*Gx(t),Qb=Gx(e),cw.point=gw,hw(Jb,Zb,Qb)}function gw(t,e){t*=qx;var n=jx(e*=qx),r=n*jx(t),i=n*Gx(t),a=Gx(e),o=Px(Jx((o=Zb*a-Qb*i)*o+(o=Qb*r-Jb*a)*o+(o=Jb*i-Zb*r)*o),Jb*r+Zb*i+Qb*a);qb+=o,jb+=o*(Jb+(Jb=r)),Ib+=o*(Zb+(Zb=i)),Wb+=o*(Qb+(Qb=a)),hw(Jb,Zb,Qb)}function mw(){cw.point=fw}function yw(){cw.point=_w}function vw(){xw(Gb,Xb),cw.point=fw}function _w(t,e){Gb=t,Xb=e,t*=qx,e*=qx,cw.point=xw;var n=jx(e);Jb=n*jx(t),Zb=n*Gx(t),Qb=Gx(e),hw(Jb,Zb,Qb)}function xw(t,e){t*=qx;var n=jx(e*=qx),r=n*jx(t),i=n*Gx(t),a=Gx(e),o=Zb*a-Qb*i,u=Qb*r-Jb*a,s=Jb*i-Zb*r,l=Hx(o,u,s),c=Kx(l),f=l&&-c/l;Hb.add(f*o),Yb.add(f*u),Vb.add(f*s),qb+=c,jb+=c*(Jb+(Jb=r)),Ib+=c*(Zb+(Zb=i)),Wb+=c*(Qb+(Qb=a)),hw(Jb,Zb,Qb)}function bw(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return(n=e.invert(n,r))&&t.invert(n[0],n[1])}),n}function ww(t,e){return[Lx(t)>zx?t+Math.round(-t/Rx)*Rx:t,e]}function kw(t,e,n){return(t%=Rx)?e||n?bw(Mw(t),Ew(e,n)):Mw(t):e||n?Ew(e,n):ww}function Aw(t){return function(e,n){return[(e+=t)>zx?e-Rx:e<-zx?e+Rx:e,n]}}function Mw(t){var e=Aw(t);return e.invert=Aw(-t),e}function Ew(t,e){var n=jx(t),r=Gx(t),i=jx(e),a=Gx(e);function o(t,e){var o=jx(e),u=jx(t)*o,s=Gx(t)*o,l=Gx(e),c=l*n+u*r;return[Px(s*i-c*a,u*n-l*r),Kx(c*i+s*a)]}return o.invert=function(t,e){var o=jx(e),u=jx(t)*o,s=Gx(t)*o,l=Gx(e),c=l*i-s*a;return[Px(s*i+l*a,u*n+c*r),Kx(c*n-u*r)]},o}function Dw(t,e){(e=Bb(e))[0]-=t,Rb(e);var n=Qx(-e[1]);return((-e[2]<0?-n:n)+Rx-Bx)%Rx}function Cw(){var t,e=[];return{point:function(e,n,r){t.push([e,n,r])},lineStart:function(){e.push(t=[])},lineEnd:tb,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}}function Fw(t,e){return Lx(t[0]-e[0])<Bx&&Lx(t[1]-e[1])<Bx}function Sw(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function Bw(t,e,n,r,i){var a,o,u=[],s=[];if(t.forEach((function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],o=t[e];if(Fw(r,o)){if(!r[2]&&!o[2]){for(i.lineStart(),a=0;a<e;++a)i.point((r=t[a])[0],r[1]);return void i.lineEnd()}o[0]+=2e-6}u.push(n=new Sw(r,t,null,!0)),s.push(n.o=new Sw(r,null,n,!1)),u.push(n=new Sw(o,t,null,!1)),s.push(n.o=new Sw(o,null,n,!0))}})),u.length){for(s.sort(e),Tw(u),Tw(s),a=0,o=s.length;a<o;++a)s[a].e=n=!n;for(var l,c,f=u[0];;){for(var h=f,d=!0;h.v;)if((h=h.n)===f)return;l=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(a=0,o=l.length;a<o;++a)i.point((c=l[a])[0],c[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(l=h.p.z,a=l.length-1;a>=0;--a)i.point((c=l[a])[0],c[1]);else r(h.x,h.p.x,-1,i);h=h.p}l=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}}function Tw(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}function zw(t){return Lx(t[0])<=zx?t[0]:Xx(t[0])*((Lx(t[0])+zx)%Rx-zx)}function Nw(t,e,n,r){return function(i){var a,o,u,s=e(i),l=Cw(),c=e(l),f=!1,h={point:d,lineStart:g,lineEnd:m,polygonStart:function(){h.point=y,h.lineStart=v,h.lineEnd=_,o=[],a=[]},polygonEnd:function(){h.point=d,h.lineStart=g,h.lineEnd=m,o=rn(o);var t=function(t,e){var n=zw(e),r=e[1],i=Gx(r),a=[Gx(n),-jx(n),0],o=0,u=0,s=new We;1===i?r=Nx+Bx:-1===i&&(r=-Nx-Bx);for(var l=0,c=t.length;l<c;++l)if(h=(f=t[l]).length)for(var f,h,d=f[h-1],p=zw(d),g=d[1]/2+Ox,m=Gx(g),y=jx(g),v=0;v<h;++v,p=x,m=w,y=k,d=_){var _=f[v],x=zw(_),b=_[1]/2+Ox,w=Gx(b),k=jx(b),A=x-p,M=A>=0?1:-1,E=M*A,D=E>zx,C=m*w;if(s.add(Px(C*M*Gx(E),y*k+C*jx(E))),o+=D?A+M*Rx:A,D^p>=n^x>=n){var F=zb(Bb(d),Bb(_));Rb(F);var S=zb(a,F);Rb(S);var B=(D^A>=0?-1:1)*Kx(S[2]);(r>B||r===B&&(F[0]||F[1]))&&(u+=D^A>=0?1:-1)}}return(o<-1e-6||o<Bx&&s<-1e-12)^1&u}(a,r);o.length?(f||(i.polygonStart(),f=!0),Bw(o,Rw,t,n,i)):t&&(f||(i.polygonStart(),f=!0),i.lineStart(),n(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),o=a=null},sphere:function(){i.polygonStart(),i.lineStart(),n(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(e,n){t(e,n)&&i.point(e,n)}function p(t,e){s.point(t,e)}function g(){h.point=p,s.lineStart()}function m(){h.point=d,s.lineEnd()}function y(t,e){u.push([t,e]),c.point(t,e)}function v(){c.lineStart(),u=[]}function _(){y(u[0][0],u[0][1]),c.lineEnd();var t,e,n,r,s=c.clean(),h=l.result(),d=h.length;if(u.pop(),a.push(u),u=null,d)if(1&s){if((e=(n=h[0]).length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),t=0;t<e;++t)i.point((r=n[t])[0],r[1]);i.lineEnd()}}else d>1&&2&s&&h.push(h.pop().concat(h.shift())),o.push(h.filter(Ow))}return h}}function Ow(t){return t.length>1}function Rw(t,e){return((t=t.x)[0]<0?t[1]-Nx-Bx:Nx-t[1])-((e=e.x)[0]<0?e[1]-Nx-Bx:Nx-e[1])}ww.invert=ww;var $w=Nw((function(){return!0}),(function(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(a,o){var u=a>0?zx:-zx,s=Lx(a-n);Lx(s-zx)<Bx?(t.point(n,r=(r+o)/2>0?Nx:-Nx),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(a,r),e=0):i!==u&&s>=zx&&(Lx(n-i)<Bx&&(n-=i*Bx),Lx(a-u)<Bx&&(a-=u*Bx),r=function(t,e,n,r){var i,a,o=Gx(t-n);return Lx(o)>Bx?Ux((Gx(e)*(a=jx(r))*Gx(n)-Gx(r)*(i=jx(e))*Gx(t))/(i*a*o)):(e+r)/2}(n,r,a,o),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),e=0),t.point(n=a,r=o),i=u},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}}),(function(t,e,n,r){var i;if(null==t)i=n*Nx,r.point(-zx,i),r.point(0,i),r.point(zx,i),r.point(zx,0),r.point(zx,-i),r.point(0,-i),r.point(-zx,-i),r.point(-zx,0),r.point(-zx,i);else if(Lx(t[0]-e[0])>Bx){var a=t[0]<e[0]?zx:-zx;i=n*a/2,r.point(-a,i),r.point(0,i),r.point(a,i)}else r.point(e[0],e[1])}),[-zx,-Nx]);function qw(t){var e=jx(t),n=6*qx,r=e>0,i=Lx(e)>Bx;function a(t,n){return jx(t)*jx(n)>e}function o(t,n,r){var i=[1,0,0],a=zb(Bb(t),Bb(n)),o=Tb(a,a),u=a[0],s=o-u*u;if(!s)return!r&&t;var l=e*o/s,c=-e*u/s,f=zb(i,a),h=Ob(i,l);Nb(h,Ob(a,c));var d=f,p=Tb(h,d),g=Tb(d,d),m=p*p-g*(Tb(h,h)-1);if(!(m<0)){var y=Jx(m),v=Ob(d,(-p-y)/g);if(Nb(v,h),v=Sb(v),!r)return v;var _,x=t[0],b=n[0],w=t[1],k=n[1];b<x&&(_=x,x=b,b=_);var A=b-x,M=Lx(A-zx)<Bx;if(!M&&k<w&&(_=w,w=k,k=_),M||A<Bx?M?w+k>0^v[1]<(Lx(v[0]-x)<Bx?w:k):w<=v[1]&&v[1]<=k:A>zx^(x<=v[0]&&v[0]<=b)){var E=Ob(d,(-p+y)/g);return Nb(E,h),[v,Sb(E)]}}}function u(e,n){var i=r?t:zx-t,a=0;return e<-i?a|=1:e>i&&(a|=2),n<-i?a|=4:n>i&&(a|=8),a}return Nw(a,(function(t){var e,n,s,l,c;return{lineStart:function(){l=s=!1,c=1},point:function(f,h){var d,p=[f,h],g=a(f,h),m=r?g?0:u(f,h):g?u(f+(f<0?zx:-zx),h):0;if(!e&&(l=s=g)&&t.lineStart(),g!==s&&(!(d=o(e,p))||Fw(e,d)||Fw(p,d))&&(p[2]=1),g!==s)c=0,g?(t.lineStart(),d=o(p,e),t.point(d[0],d[1])):(d=o(e,p),t.point(d[0],d[1],2),t.lineEnd()),e=d;else if(i&&e&&r^g){var y;m&n||!(y=o(p,e,!0))||(c=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1],3)))}!g||e&&Fw(e,p)||t.point(p[0],p[1]),e=p,s=g,n=m},lineEnd:function(){s&&t.lineEnd(),e=null},clean:function(){return c|(l&&s)<<1}}}),(function(e,r,i,a){!function(t,e,n,r,i,a){if(n){var o=jx(e),u=Gx(e),s=r*n;null==i?(i=e+r*Rx,a=e-s/2):(i=Dw(o,i),a=Dw(o,a),(r>0?i<a:i>a)&&(i+=r*Rx));for(var l,c=i;r>0?c>a:c<a;c-=s)l=Sb([o,-u*jx(c),-u*Gx(c)]),t.point(l[0],l[1])}}(a,t,n,i,e,r)}),r?[0,-t]:[-zx,t-zx])}var Lw=1e9,Uw=-Lw;function Pw(t,e,n,r){function i(i,a){return t<=i&&i<=n&&e<=a&&a<=r}function a(i,a,u,l){var c=0,f=0;if(null==i||(c=o(i,u))!==(f=o(a,u))||s(i,a)<0^u>0)do{l.point(0===c||3===c?t:n,c>1?r:e)}while((c=(c+u+4)%4)!==f);else l.point(a[0],a[1])}function o(r,i){return Lx(r[0]-t)<Bx?i>0?0:3:Lx(r[0]-n)<Bx?i>0?2:1:Lx(r[1]-e)<Bx?i>0?1:0:i>0?3:2}function u(t,e){return s(t.x,e.x)}function s(t,e){var n=o(t,1),r=o(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(o){var s,l,c,f,h,d,p,g,m,y,v,_=o,x=Cw(),b={point:w,lineStart:function(){b.point=k,l&&l.push(c=[]);y=!0,m=!1,p=g=NaN},lineEnd:function(){s&&(k(f,h),d&&m&&x.rejoin(),s.push(x.result()));b.point=w,m&&_.lineEnd()},polygonStart:function(){_=x,s=[],l=[],v=!0},polygonEnd:function(){var e=function(){for(var e=0,n=0,i=l.length;n<i;++n)for(var a,o,u=l[n],s=1,c=u.length,f=u[0],h=f[0],d=f[1];s<c;++s)a=h,o=d,h=(f=u[s])[0],d=f[1],o<=r?d>r&&(h-a)*(r-o)>(d-o)*(t-a)&&++e:d<=r&&(h-a)*(r-o)<(d-o)*(t-a)&&--e;return e}(),n=v&&e,i=(s=rn(s)).length;(n||i)&&(o.polygonStart(),n&&(o.lineStart(),a(null,null,1,o),o.lineEnd()),i&&Bw(s,u,e,a,o),o.polygonEnd());_=o,s=l=c=null}};function w(t,e){i(t,e)&&_.point(t,e)}function k(a,o){var u=i(a,o);if(l&&c.push([a,o]),y)f=a,h=o,d=u,y=!1,u&&(_.lineStart(),_.point(a,o));else if(u&&m)_.point(a,o);else{var s=[p=Math.max(Uw,Math.min(Lw,p)),g=Math.max(Uw,Math.min(Lw,g))],x=[a=Math.max(Uw,Math.min(Lw,a)),o=Math.max(Uw,Math.min(Lw,o))];!function(t,e,n,r,i,a){var o,u=t[0],s=t[1],l=0,c=1,f=e[0]-u,h=e[1]-s;if(o=n-u,f||!(o>0)){if(o/=f,f<0){if(o<l)return;o<c&&(c=o)}else if(f>0){if(o>c)return;o>l&&(l=o)}if(o=i-u,f||!(o<0)){if(o/=f,f<0){if(o>c)return;o>l&&(l=o)}else if(f>0){if(o<l)return;o<c&&(c=o)}if(o=r-s,h||!(o>0)){if(o/=h,h<0){if(o<l)return;o<c&&(c=o)}else if(h>0){if(o>c)return;o>l&&(l=o)}if(o=a-s,h||!(o<0)){if(o/=h,h<0){if(o>c)return;o>l&&(l=o)}else if(h>0){if(o<l)return;o<c&&(c=o)}return l>0&&(t[0]=u+l*f,t[1]=s+l*h),c<1&&(e[0]=u+c*f,e[1]=s+c*h),!0}}}}}(s,x,t,e,n,r)?u&&(_.lineStart(),_.point(a,o),v=!1):(m||(_.lineStart(),_.point(s[0],s[1])),_.point(x[0],x[1]),u||_.lineEnd(),v=!1)}p=a,g=o,m=u}return b}}function jw(t,e,n){var r=He(t,e-Bx,n).concat(e);return function(t){return r.map((function(e){return[t,e]}))}}function Iw(t,e,n){var r=He(t,e-Bx,n).concat(e);return function(t){return r.map((function(e){return[e,t]}))}}var Ww,Hw,Yw,Vw,Gw=t=>t,Xw=new We,Jw=new We,Zw={point:tb,lineStart:tb,lineEnd:tb,polygonStart:function(){Zw.lineStart=Qw,Zw.lineEnd=ek},polygonEnd:function(){Zw.lineStart=Zw.lineEnd=Zw.point=tb,Xw.add(Lx(Jw)),Jw=new We},result:function(){var t=Xw/2;return Xw=new We,t}};function Qw(){Zw.point=Kw}function Kw(t,e){Zw.point=tk,Ww=Yw=t,Hw=Vw=e}function tk(t,e){Jw.add(Vw*t-Yw*e),Yw=t,Vw=e}function ek(){tk(Ww,Hw)}var nk=1/0,rk=nk,ik=-nk,ak=ik,ok={point:function(t,e){t<nk&&(nk=t);t>ik&&(ik=t);e<rk&&(rk=e);e>ak&&(ak=e)},lineStart:tb,lineEnd:tb,polygonStart:tb,polygonEnd:tb,result:function(){var t=[[nk,rk],[ik,ak]];return ik=ak=-(rk=nk=1/0),t}};var uk,sk,lk,ck,fk=0,hk=0,dk=0,pk=0,gk=0,mk=0,yk=0,vk=0,_k=0,xk={point:bk,lineStart:wk,lineEnd:Mk,polygonStart:function(){xk.lineStart=Ek,xk.lineEnd=Dk},polygonEnd:function(){xk.point=bk,xk.lineStart=wk,xk.lineEnd=Mk},result:function(){var t=_k?[yk/_k,vk/_k]:mk?[pk/mk,gk/mk]:dk?[fk/dk,hk/dk]:[NaN,NaN];return fk=hk=dk=pk=gk=mk=yk=vk=_k=0,t}};function bk(t,e){fk+=t,hk+=e,++dk}function wk(){xk.point=kk}function kk(t,e){xk.point=Ak,bk(lk=t,ck=e)}function Ak(t,e){var n=t-lk,r=e-ck,i=Jx(n*n+r*r);pk+=i*(lk+t)/2,gk+=i*(ck+e)/2,mk+=i,bk(lk=t,ck=e)}function Mk(){xk.point=bk}function Ek(){xk.point=Ck}function Dk(){Fk(uk,sk)}function Ck(t,e){xk.point=Fk,bk(uk=lk=t,sk=ck=e)}function Fk(t,e){var n=t-lk,r=e-ck,i=Jx(n*n+r*r);pk+=i*(lk+t)/2,gk+=i*(ck+e)/2,mk+=i,yk+=(i=ck*t-lk*e)*(lk+t),vk+=i*(ck+e),_k+=3*i,bk(lk=t,ck=e)}function Sk(t){this._context=t}Sk.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,Rx)}},result:tb};var Bk,Tk,zk,Nk,Ok,Rk=new We,$k={point:tb,lineStart:function(){$k.point=qk},lineEnd:function(){Bk&&Lk(Tk,zk),$k.point=tb},polygonStart:function(){Bk=!0},polygonEnd:function(){Bk=null},result:function(){var t=+Rk;return Rk=new We,t}};function qk(t,e){$k.point=Lk,Tk=Nk=t,zk=Ok=e}function Lk(t,e){Nk-=t,Ok-=e,Rk.add(Jx(Nk*Nk+Ok*Ok)),Nk=t,Ok=e}function Uk(){this._string=[]}function Pk(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function jk(t,e){var n,r,i=4.5;function a(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),ob(t,n(r))),r.result()}return a.area=function(t){return ob(t,n(Zw)),Zw.result()},a.measure=function(t){return ob(t,n($k)),$k.result()},a.bounds=function(t){return ob(t,n(ok)),ok.result()},a.centroid=function(t){return ob(t,n(xk)),xk.result()},a.projection=function(e){return arguments.length?(n=null==e?(t=null,Gw):(t=e).stream,a):t},a.context=function(t){return arguments.length?(r=null==t?(e=null,new Uk):new Sk(e=t),"function"!=typeof i&&r.pointRadius(i),a):e},a.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),a):i},a.projection(t).context(e)}function Ik(t){return function(e){var n=new Wk;for(var r in t)n[r]=t[r];return n.stream=e,n}}function Wk(){}function Hk(t,e,n){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),ob(n,t.stream(ok)),e(ok.result()),null!=r&&t.clipExtent(r),t}function Yk(t,e,n){return Hk(t,(function(n){var r=e[1][0]-e[0][0],i=e[1][1]-e[0][1],a=Math.min(r/(n[1][0]-n[0][0]),i/(n[1][1]-n[0][1])),o=+e[0][0]+(r-a*(n[1][0]+n[0][0]))/2,u=+e[0][1]+(i-a*(n[1][1]+n[0][1]))/2;t.scale(150*a).translate([o,u])}),n)}function Vk(t,e,n){return Yk(t,[[0,0],e],n)}function Gk(t,e,n){return Hk(t,(function(n){var r=+e,i=r/(n[1][0]-n[0][0]),a=(r-i*(n[1][0]+n[0][0]))/2,o=-i*n[0][1];t.scale(150*i).translate([a,o])}),n)}function Xk(t,e,n){return Hk(t,(function(n){var r=+e,i=r/(n[1][1]-n[0][1]),a=-i*n[0][0],o=(r-i*(n[1][1]+n[0][1]))/2;t.scale(150*i).translate([a,o])}),n)}Uk.prototype={_radius:4.5,_circle:Pk(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=Pk(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}},Wk.prototype={constructor:Wk,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Jk=jx(30*qx);function Zk(t,e){return+e?function(t,e){function n(r,i,a,o,u,s,l,c,f,h,d,p,g,m){var y=l-r,v=c-i,_=y*y+v*v;if(_>4*e&&g--){var x=o+h,b=u+d,w=s+p,k=Jx(x*x+b*b+w*w),A=Kx(w/=k),M=Lx(Lx(w)-1)<Bx||Lx(a-f)<Bx?(a+f)/2:Px(b,x),E=t(M,A),D=E[0],C=E[1],F=D-r,S=C-i,B=v*F-y*S;(B*B/_>e||Lx((y*F+v*S)/_-.5)>.3||o*h+u*d+s*p<Jk)&&(n(r,i,a,o,u,s,D,C,M,x/=k,b/=k,w,g,m),m.point(D,C),n(D,C,M,x,b,w,l,c,f,h,d,p,g,m))}}return function(e){var r,i,a,o,u,s,l,c,f,h,d,p,g={point:m,lineStart:y,lineEnd:_,polygonStart:function(){e.polygonStart(),g.lineStart=x},polygonEnd:function(){e.polygonEnd(),g.lineStart=y}};function m(n,r){n=t(n,r),e.point(n[0],n[1])}function y(){c=NaN,g.point=v,e.lineStart()}function v(r,i){var a=Bb([r,i]),o=t(r,i);n(c,f,l,h,d,p,c=o[0],f=o[1],l=r,h=a[0],d=a[1],p=a[2],16,e),e.point(c,f)}function _(){g.point=m,e.lineEnd()}function x(){y(),g.point=b,g.lineEnd=w}function b(t,e){v(r=t,e),i=c,a=f,o=h,u=d,s=p,g.point=v}function w(){n(c,f,l,h,d,p,i,a,r,o,u,s,16,e),g.lineEnd=_,_()}return g}}(t,e):function(t){return Ik({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}(t)}var Qk=Ik({point:function(t,e){this.stream.point(t*qx,e*qx)}});function Kk(t,e,n,r,i,a){if(!a)return function(t,e,n,r,i){function a(a,o){return[e+t*(a*=r),n-t*(o*=i)]}return a.invert=function(a,o){return[(a-e)/t*r,(n-o)/t*i]},a}(t,e,n,r,i);var o=jx(a),u=Gx(a),s=o*t,l=u*t,c=o/t,f=u/t,h=(u*n-o*e)/t,d=(u*e+o*n)/t;function p(t,a){return[s*(t*=r)-l*(a*=i)+e,n-l*t-s*a]}return p.invert=function(t,e){return[r*(c*t-f*e+h),i*(d-f*t-c*e)]},p}function tA(t){return eA((function(){return t}))()}function eA(t){var e,n,r,i,a,o,u,s,l,c,f=150,h=480,d=250,p=0,g=0,m=0,y=0,v=0,_=0,x=1,b=1,w=null,k=$w,A=null,M=Gw,E=.5;function D(t){return s(t[0]*qx,t[1]*qx)}function C(t){return(t=s.invert(t[0],t[1]))&&[t[0]*$x,t[1]*$x]}function F(){var t=Kk(f,0,0,x,b,_).apply(null,e(p,g)),r=Kk(f,h-t[0],d-t[1],x,b,_);return n=kw(m,y,v),u=bw(e,r),s=bw(n,u),o=Zk(u,E),S()}function S(){return l=c=null,D}return D.stream=function(t){return l&&c===t?l:l=Qk(function(t){return Ik({point:function(e,n){var r=t(e,n);return this.stream.point(r[0],r[1])}})}(n)(k(o(M(c=t)))))},D.preclip=function(t){return arguments.length?(k=t,w=void 0,S()):k},D.postclip=function(t){return arguments.length?(M=t,A=r=i=a=null,S()):M},D.clipAngle=function(t){return arguments.length?(k=+t?qw(w=t*qx):(w=null,$w),S()):w*$x},D.clipExtent=function(t){return arguments.length?(M=null==t?(A=r=i=a=null,Gw):Pw(A=+t[0][0],r=+t[0][1],i=+t[1][0],a=+t[1][1]),S()):null==A?null:[[A,r],[i,a]]},D.scale=function(t){return arguments.length?(f=+t,F()):f},D.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],F()):[h,d]},D.center=function(t){return arguments.length?(p=t[0]%360*qx,g=t[1]%360*qx,F()):[p*$x,g*$x]},D.rotate=function(t){return arguments.length?(m=t[0]%360*qx,y=t[1]%360*qx,v=t.length>2?t[2]%360*qx:0,F()):[m*$x,y*$x,v*$x]},D.angle=function(t){return arguments.length?(_=t%360*qx,F()):_*$x},D.reflectX=function(t){return arguments.length?(x=t?-1:1,F()):x<0},D.reflectY=function(t){return arguments.length?(b=t?-1:1,F()):b<0},D.precision=function(t){return arguments.length?(o=Zk(u,E=t*t),S()):Jx(E)},D.fitExtent=function(t,e){return Yk(D,t,e)},D.fitSize=function(t,e){return Vk(D,t,e)},D.fitWidth=function(t,e){return Gk(D,t,e)},D.fitHeight=function(t,e){return Xk(D,t,e)},function(){return e=t.apply(this,arguments),D.invert=e.invert&&C,F()}}function nA(t){var e=0,n=zx/3,r=eA(t),i=r(e,n);return i.parallels=function(t){return arguments.length?r(e=t[0]*qx,n=t[1]*qx):[e*$x,n*$x]},i}function rA(t,e){var n=Gx(t),r=(n+Gx(e))/2;if(Lx(r)<Bx)return function(t){var e=jx(t);function n(t,n){return[t*e,Gx(n)/e]}return n.invert=function(t,n){return[t/e,Kx(n*e)]},n}(t);var i=1+n*(2*r-n),a=Jx(i)/r;function o(t,e){var n=Jx(i-2*r*Gx(e))/r;return[n*Gx(t*=r),a-n*jx(t)]}return o.invert=function(t,e){var n=a-e,o=Px(t,Lx(n))*Xx(n);return n*r<0&&(o-=zx*Xx(t)*Xx(n)),[o/r,Kx((i-(t*t+n*n)*r*r)/(2*r))]},o}function iA(){return nA(rA).scale(155.424).center([0,33.6442])}function aA(){return iA().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function oA(t){return function(e,n){var r=jx(e),i=jx(n),a=t(r*i);return a===1/0?[2,0]:[a*i*Gx(e),a*Gx(n)]}}function uA(t){return function(e,n){var r=Jx(e*e+n*n),i=t(r),a=Gx(i),o=jx(i);return[Px(e*a,r*o),Kx(r&&n*a/r)]}}var sA=oA((function(t){return Jx(2/(1+t))}));sA.invert=uA((function(t){return 2*Kx(t/2)}));var lA=oA((function(t){return(t=Qx(t))&&t/Gx(t)}));function cA(t,e){return[t,Yx(Zx((Nx+e)/2))]}function fA(t){var e,n,r,i=tA(t),a=i.center,o=i.scale,u=i.translate,s=i.clipExtent,l=null;function c(){var a=zx*o(),u=i(function(t){function e(e){return(e=t(e[0]*qx,e[1]*qx))[0]*=$x,e[1]*=$x,e}return t=kw(t[0]*qx,t[1]*qx,t.length>2?t[2]*qx:0),e.invert=function(e){return(e=t.invert(e[0]*qx,e[1]*qx))[0]*=$x,e[1]*=$x,e},e}(i.rotate()).invert([0,0]));return s(null==l?[[u[0]-a,u[1]-a],[u[0]+a,u[1]+a]]:t===cA?[[Math.max(u[0]-a,l),e],[Math.min(u[0]+a,n),r]]:[[l,Math.max(u[1]-a,e)],[n,Math.min(u[1]+a,r)]])}return i.scale=function(t){return arguments.length?(o(t),c()):o()},i.translate=function(t){return arguments.length?(u(t),c()):u()},i.center=function(t){return arguments.length?(a(t),c()):a()},i.clipExtent=function(t){return arguments.length?(null==t?l=e=n=r=null:(l=+t[0][0],e=+t[0][1],n=+t[1][0],r=+t[1][1]),c()):null==l?null:[[l,e],[n,r]]},c()}function hA(t){return Zx((Nx+t)/2)}function dA(t,e){var n=jx(t),r=t===e?Gx(t):Yx(n/jx(e))/Yx(hA(e)/hA(t)),i=n*Vx(hA(t),r)/r;if(!r)return cA;function a(t,e){i>0?e<-Nx+Bx&&(e=-Nx+Bx):e>Nx-Bx&&(e=Nx-Bx);var n=i/Vx(hA(e),r);return[n*Gx(r*t),i-n*jx(r*t)]}return a.invert=function(t,e){var n=i-e,a=Xx(r)*Jx(t*t+n*n),o=Px(t,Lx(n))*Xx(n);return n*r<0&&(o-=zx*Xx(t)*Xx(n)),[o/r,2*Ux(Vx(i/a,1/r))-Nx]},a}function pA(t,e){return[t,e]}function gA(t,e){var n=jx(t),r=t===e?Gx(t):(n-jx(e))/(e-t),i=n/r+t;if(Lx(r)<Bx)return pA;function a(t,e){var n=i-e,a=r*t;return[n*Gx(a),i-n*jx(a)]}return a.invert=function(t,e){var n=i-e,a=Px(t,Lx(n))*Xx(n);return n*r<0&&(a-=zx*Xx(t)*Xx(n)),[a/r,i-Xx(r)*Jx(t*t+n*n)]},a}lA.invert=uA((function(t){return t})),cA.invert=function(t,e){return[t,2*Ux(Wx(e))-Nx]},pA.invert=pA;var mA=1.340264,yA=-.081106,vA=893e-6,_A=.003796,xA=Jx(3)/2;function bA(t,e){var n=Kx(xA*Gx(e)),r=n*n,i=r*r*r;return[t*jx(n)/(xA*(mA+3*yA*r+i*(7*vA+9*_A*r))),n*(mA+yA*r+i*(vA+_A*r))]}function wA(t,e){var n=jx(e),r=jx(t)*n;return[n*Gx(t)/r,Gx(e)/r]}function kA(t,e){var n=e*e,r=n*n;return[t*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),e*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}function AA(t,e){return[jx(e)*Gx(t),Gx(e)]}function MA(t,e){var n=jx(e),r=1+jx(t)*n;return[n*Gx(t)/r,Gx(e)/r]}function EA(t,e){return[Yx(Zx((Nx+e)/2)),-t]}bA.invert=function(t,e){for(var n,r=e,i=r*r,a=i*i*i,o=0;o<12&&(a=(i=(r-=n=(r*(mA+yA*i+a*(vA+_A*i))-e)/(mA+3*yA*i+a*(7*vA+9*_A*i)))*r)*i*i,!(Lx(n)<Tx));++o);return[xA*t*(mA+3*yA*i+a*(7*vA+9*_A*i))/jx(r),Kx(Gx(r)/xA)]},wA.invert=uA(Ux),kA.invert=function(t,e){var n,r=e,i=25;do{var a=r*r,o=a*a;r-=n=(r*(1.007226+a*(.015085+o*(.028874*a-.044475-.005916*o)))-e)/(1.007226+a*(.045255+o*(.259866*a-.311325-.005916*11*o)))}while(Lx(n)>Bx&&--i>0);return[t/(.8707+(a=r*r)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),r]},AA.invert=uA(Kx),MA.invert=uA((function(t){return 2*Ux(t)})),EA.invert=function(t,e){return[-e,2*Ux(Wx(t))-Nx]};var DA=Math.abs,CA=Math.cos,FA=Math.sin,SA=Math.PI,BA=SA/2,TA=function(t){return t>0?Math.sqrt(t):0}(2);function zA(t){return t>1?BA:t<-1?-BA:Math.asin(t)}function NA(t,e){var n,r=t*FA(e),i=30;do{e-=n=(e+FA(e)-r)/(1+CA(e))}while(DA(n)>1e-6&&--i>0);return e/2}var OA=function(t,e,n){function r(r,i){return[t*r*CA(i=NA(n,i)),e*FA(i)]}return r.invert=function(r,i){return i=zA(i/e),[r/(t*CA(i)),zA((2*i+FA(2*i))/n)]},r}(TA/BA,TA,SA);const RA=jk(),$A=["clipAngle","clipExtent","scale","translate","center","rotate","parallels","precision","reflectX","reflectY","coefficient","distance","fraction","lobes","parallel","radius","ratio","spacing","tilt"];function qA(t,e){return function n(){const r=e();return r.type=t,r.path=jk().projection(r),r.copy=r.copy||function(){const t=n();return $A.forEach(e=>{r[e]&&t[e](r[e]())}),t.path.pointRadius(r.path.pointRadius()),t},r}}function LA(t,e){if(!t||"string"!=typeof t)throw new Error("Projection type must be a name string.");return t=t.toLowerCase(),arguments.length>1?(PA[t]=qA(t,e),this):PA[t]||null}function UA(t){return t&&t.path||RA}const PA={albers:aA,albersusa:function(){var t,e,n,r,i,a,o=aA(),u=iA().rotate([154,0]).center([-2,58.5]).parallels([55,65]),s=iA().rotate([157,0]).center([-3,19.9]).parallels([8,18]),l={point:function(t,e){a=[t,e]}};function c(t){var e=t[0],o=t[1];return a=null,n.point(e,o),a||(r.point(e,o),a)||(i.point(e,o),a)}function f(){return t=e=null,c}return c.invert=function(t){var e=o.scale(),n=o.translate(),r=(t[0]-n[0])/e,i=(t[1]-n[1])/e;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?u:i>=.166&&i<.234&&r>=-.214&&r<-.115?s:o).invert(t)},c.stream=function(n){return t&&e===n?t:(r=[o.stream(e=n),u.stream(n),s.stream(n)],i=r.length,t={point:function(t,e){for(var n=-1;++n<i;)r[n].point(t,e)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},c.precision=function(t){return arguments.length?(o.precision(t),u.precision(t),s.precision(t),f()):o.precision()},c.scale=function(t){return arguments.length?(o.scale(t),u.scale(.35*t),s.scale(t),c.translate(o.translate())):o.scale()},c.translate=function(t){if(!arguments.length)return o.translate();var e=o.scale(),a=+t[0],c=+t[1];return n=o.translate(t).clipExtent([[a-.455*e,c-.238*e],[a+.455*e,c+.238*e]]).stream(l),r=u.translate([a-.307*e,c+.201*e]).clipExtent([[a-.425*e+Bx,c+.12*e+Bx],[a-.214*e-Bx,c+.234*e-Bx]]).stream(l),i=s.translate([a-.205*e,c+.212*e]).clipExtent([[a-.214*e+Bx,c+.166*e+Bx],[a-.115*e-Bx,c+.234*e-Bx]]).stream(l),f()},c.fitExtent=function(t,e){return Yk(c,t,e)},c.fitSize=function(t,e){return Vk(c,t,e)},c.fitWidth=function(t,e){return Gk(c,t,e)},c.fitHeight=function(t,e){return Xk(c,t,e)},c.scale(1070)},azimuthalequalarea:function(){return tA(sA).scale(124.75).clipAngle(179.999)},azimuthalequidistant:function(){return tA(lA).scale(79.4188).clipAngle(179.999)},conicconformal:function(){return nA(dA).scale(109.5).parallels([30,30])},conicequalarea:iA,conicequidistant:function(){return nA(gA).scale(131.154).center([0,13.9389])},equalEarth:function(){return tA(bA).scale(177.158)},equirectangular:function(){return tA(pA).scale(152.63)},gnomonic:function(){return tA(wA).scale(144.049).clipAngle(60)},identity:function(){var t,e,n,r,i,a,o,u=1,s=0,l=0,c=1,f=1,h=0,d=null,p=1,g=1,m=Ik({point:function(t,e){var n=_([t,e]);this.stream.point(n[0],n[1])}}),y=Gw;function v(){return p=u*c,g=u*f,a=o=null,_}function _(n){var r=n[0]*p,i=n[1]*g;if(h){var a=i*t-r*e;r=r*t+i*e,i=a}return[r+s,i+l]}return _.invert=function(n){var r=n[0]-s,i=n[1]-l;if(h){var a=i*t+r*e;r=r*t-i*e,i=a}return[r/p,i/g]},_.stream=function(t){return a&&o===t?a:a=m(y(o=t))},_.postclip=function(t){return arguments.length?(y=t,d=n=r=i=null,v()):y},_.clipExtent=function(t){return arguments.length?(y=null==t?(d=n=r=i=null,Gw):Pw(d=+t[0][0],n=+t[0][1],r=+t[1][0],i=+t[1][1]),v()):null==d?null:[[d,n],[r,i]]},_.scale=function(t){return arguments.length?(u=+t,v()):u},_.translate=function(t){return arguments.length?(s=+t[0],l=+t[1],v()):[s,l]},_.angle=function(n){return arguments.length?(e=Gx(h=n%360*qx),t=jx(h),v()):h*$x},_.reflectX=function(t){return arguments.length?(c=t?-1:1,v()):c<0},_.reflectY=function(t){return arguments.length?(f=t?-1:1,v()):f<0},_.fitExtent=function(t,e){return Yk(_,t,e)},_.fitSize=function(t,e){return Vk(_,t,e)},_.fitWidth=function(t,e){return Gk(_,t,e)},_.fitHeight=function(t,e){return Xk(_,t,e)},_},mercator:function(){return fA(cA).scale(961/Rx)},mollweide:function(){return tA(OA).scale(169.529)},naturalEarth1:function(){return tA(kA).scale(175.295)},orthographic:function(){return tA(AA).scale(249.5).clipAngle(90.000001)},stereographic:function(){return tA(MA).scale(250).clipAngle(142)},transversemercator:function(){var t=fA(EA),e=t.center,n=t.rotate;return t.center=function(t){return arguments.length?e([-t[1],t[0]]):[(t=e())[1],-t[0]]},t.rotate=function(t){return arguments.length?n([t[0],t[1],t.length>2?t[2]+90:90]):[(t=n())[0],t[1],t[2]-90]},n([0,0,90]).scale(159.155)}};for(const t in PA)LA(t,PA[t]);function jA(t){co.call(this,null,t)}function IA(t){co.call(this,null,t)}function WA(t){co.call(this,null,t)}function HA(t){co.call(this,[],t),this.generator=function(){var t,e,n,r,i,a,o,u,s,l,c,f,h=10,d=h,p=90,g=360,m=2.5;function y(){return{type:"MultiLineString",coordinates:v()}}function v(){return He(Ix(r/p)*p,n,p).map(c).concat(He(Ix(u/g)*g,o,g).map(f)).concat(He(Ix(e/h)*h,t,h).filter((function(t){return Lx(t%p)>Bx})).map(s)).concat(He(Ix(a/d)*d,i,d).filter((function(t){return Lx(t%g)>Bx})).map(l))}return y.lines=function(){return v().map((function(t){return{type:"LineString",coordinates:t}}))},y.outline=function(){return{type:"Polygon",coordinates:[c(r).concat(f(o).slice(1),c(n).reverse().slice(1),f(u).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.extentMajor(t).extentMinor(t):y.extentMinor()},y.extentMajor=function(t){return arguments.length?(r=+t[0][0],n=+t[1][0],u=+t[0][1],o=+t[1][1],r>n&&(t=r,r=n,n=t),u>o&&(t=u,u=o,o=t),y.precision(m)):[[r,u],[n,o]]},y.extentMinor=function(n){return arguments.length?(e=+n[0][0],t=+n[1][0],a=+n[0][1],i=+n[1][1],e>t&&(n=e,e=t,t=n),a>i&&(n=a,a=i,i=n),y.precision(m)):[[e,a],[t,i]]},y.step=function(t){return arguments.length?y.stepMajor(t).stepMinor(t):y.stepMinor()},y.stepMajor=function(t){return arguments.length?(p=+t[0],g=+t[1],y):[p,g]},y.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],y):[h,d]},y.precision=function(h){return arguments.length?(m=+h,s=jw(a,i,90),l=Iw(e,t,m),c=jw(u,o,90),f=Iw(r,n,m),y):m},y.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}()}function YA(t){co.call(this,null,t)}function VA(t){if(!H(t))return!1;const e=Et(r(t));return e.$x||e.$y||e.$value||e.$max}function GA(t){co.call(this,null,t),this.modified(!0)}function XA(t,e,n){H(t[e])&&t[e](n)}jA.Definition={type:"GeoPath",metadata:{modifies:!0},params:[{name:"projection",type:"projection"},{name:"field",type:"field"},{name:"pointRadius",type:"number",expr:!0},{name:"as",type:"string",default:"path"}]},ut(jA,co,{transform(t,e){var n=e.fork(e.ALL),r=this.value,i=t.field||f,a=t.as||"path",o=n.SOURCE;!r||t.modified()?(this.value=r=UA(t.projection),n.materialize().reflow()):o=i===f||e.modified(i.fields)?n.ADD_MOD:n.ADD;var u=function(t,e){var n=t.pointRadius();t.context(null),null!=e&&t.pointRadius(e);return n}(r,t.pointRadius);return n.visit(o,t=>t[a]=r(i(t))),r.pointRadius(u),n.modifies(a)}}),IA.Definition={type:"GeoPoint",metadata:{modifies:!0},params:[{name:"projection",type:"projection",required:!0},{name:"fields",type:"field",array:!0,required:!0,length:2},{name:"as",type:"string",array:!0,length:2,default:["x","y"]}]},ut(IA,co,{transform(t,e){var n,r=t.projection,i=t.fields[0],a=t.fields[1],o=t.as||["x","y"],u=o[0],s=o[1];function l(t){var e=r([i(t),a(t)]);e?(t[u]=e[0],t[s]=e[1]):(t[u]=void 0,t[s]=void 0)}return t.modified()?e=e.materialize().reflow(!0).visit(e.SOURCE,l):(n=e.modified(i.fields)||e.modified(a.fields),e.visit(n?e.ADD_MOD:e.ADD,l)),e.modifies(o)}}),WA.Definition={type:"GeoShape",metadata:{modifies:!0,nomod:!0},params:[{name:"projection",type:"projection"},{name:"field",type:"field",default:"datum"},{name:"pointRadius",type:"number",expr:!0},{name:"as",type:"string",default:"shape"}]},ut(WA,co,{transform(t,e){var n=e.fork(e.ALL),r=this.value,i=t.as||"shape",a=n.ADD;return r&&!t.modified()||(this.value=r=function(t,e,n){var r=null==n?n=>t(e(n)):r=>{var i=t.pointRadius(),a=t.pointRadius(n)(e(r));return t.pointRadius(i),a};return r.context=e=>(t.context(e),r),r}(UA(t.projection),t.field||l("datum"),t.pointRadius),n.materialize().reflow(),a=n.SOURCE),n.visit(a,t=>t[i]=r),n.modifies(i)}}),HA.Definition={type:"Graticule",metadata:{changes:!0,generates:!0},params:[{name:"extent",type:"array",array:!0,length:2,content:{type:"number",array:!0,length:2}},{name:"extentMajor",type:"array",array:!0,length:2,content:{type:"number",array:!0,length:2}},{name:"extentMinor",type:"array",array:!0,length:2,content:{type:"number",array:!0,length:2}},{name:"step",type:"number",array:!0,length:2},{name:"stepMajor",type:"number",array:!0,length:2,default:[90,360]},{name:"stepMinor",type:"number",array:!0,length:2,default:[10,10]},{name:"precision",type:"number",default:2.5}]},ut(HA,co,{transform(t,e){var n,r=this.value,i=this.generator;if(!r.length||t.modified())for(var a in t)H(i[a])&&i[a](t[a]);return n=i(),r.length?e.mod.push(Lt(r[0],n)):e.add.push(Rt(n)),r[0]=n,e}}),YA.Definition={type:"heatmap",metadata:{modifies:!0},params:[{name:"field",type:"field"},{name:"color",type:"string",expr:!0},{name:"opacity",type:"number",expr:!0},{name:"resolve",type:"enum",values:["shared","independent"],default:"independent"},{name:"as",type:"string",default:"image"}]},ut(YA,co,{transform(t,e){if(!e.changed()&&!t.modified())return e.StopPropagation;var n=e.materialize(e.SOURCE).source,r="shared"===t.resolve,i=t.field||f,a=function(t,e){let n;H(t)?(n=n=>t(n,e),n.dep=VA(t)):t?n=Z(t):(n=t=>t.$value/t.$max||0,n.dep=!0);return n}(t.opacity,t),o=function(t,e){let n;H(t)?(n=n=>Jp(t(n,e)),n.dep=VA(t)):n=Z(Jp(t||"#888"));return n}(t.color,t),u=t.as||"image",s={$x:0,$y:0,$value:0,$max:r?Qe(n.map(t=>Qe(i(t).values))):0};return n.forEach(t=>{const e=i(t),n=K({},t,s);r||(n.$max=Qe(e.values||[])),t[u]=function(t,e,n,r){const i=t.width,a=t.height,o=t.x1||0,u=t.y1||0,s=t.x2||i,l=t.y2||a,c=t.values,f=c?t=>c[t]:h,d=bf(s-o,l-u),p=d.getContext("2d"),g=p.getImageData(0,0,s-o,l-u),m=g.data;for(let t=u,a=0;t<l;++t){e.$y=t-u;for(let u=o,l=t*i;u<s;++u,a+=4){e.$x=u-o,e.$value=f(u+l);const t=n(e);m[a+0]=t.r,m[a+1]=t.g,m[a+2]=t.b,m[a+3]=~~(255*r(e))}}return p.putImageData(g,0,0),d}(e,n,o.dep?o:Z(o(n)),a.dep?a:Z(a(n)))}),e.reflow(!0).modifies(u)}}),ut(GA,co,{transform(t,e){let n=this.value;return!n||t.modified("type")?(this.value=n=function(t){var e=LA((t||"mercator").toLowerCase());e||u("Unrecognized projection type: "+t);return e()}(t.type),$A.forEach(e=>{null!=t[e]&&XA(n,e,t[e])})):$A.forEach(e=>{t.modified(e)&&XA(n,e,t[e])}),null!=t.pointRadius&&n.path.pointRadius(t.pointRadius),t.fit&&function(t,e){var n=function(t){return 1===(t=I(t)).length?t[0]:{type:Fx,features:t.reduce((t,e)=>t.concat(function(t){return t.type===Fx?t.features:I(t).filter(t=>null!=t).map(t=>t.type===Cx?t:{type:Cx,geometry:t})}(e)),[])}}(e.fit);e.extent?t.fitExtent(e.extent,n):e.size&&t.fitSize(e.size,n)}(n,t),e.fork(e.NO_SOURCE|e.NO_FIELDS)}});var JA=Object.freeze({__proto__:null,contour:Dx,geojson:Sx,geopath:jA,geopoint:IA,geoshape:WA,graticule:HA,heatmap:YA,isocontour:yx,kde2d:Ax,projection:GA});function ZA(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,a,o,u,s,l,c,f,h,d=t._root,p={data:r},g=t._x0,m=t._y0,y=t._x1,v=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((l=e>=(a=(g+y)/2))?g=a:y=a,(c=n>=(o=(m+v)/2))?m=o:v=o,i=d,!(d=d[f=c<<1|l]))return i[f]=p,t;if(u=+t._x.call(null,d.data),s=+t._y.call(null,d.data),e===u&&n===s)return p.next=d,i?i[f]=p:t._root=p,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(l=e>=(a=(g+y)/2))?g=a:y=a,(c=n>=(o=(m+v)/2))?m=o:v=o}while((f=c<<1|l)==(h=(s>=o)<<1|u>=a));return i[h]=d,i[f]=p,t}function QA(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i}function KA(t){return t[0]}function tM(t){return t[1]}function eM(t,e,n){var r=new nM(null==e?KA:e,null==n?tM:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function nM(t,e,n,r,i,a){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=a,this._root=void 0}function rM(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var iM=eM.prototype=nM.prototype;function aM(t){return function(){return t}}function oM(t){return 1e-6*(t()-.5)}function uM(t){return t.x+t.vx}function sM(t){return t.y+t.vy}function lM(t){return t.index}function cM(t,e){var n=t.get(e);if(!n)throw new Error("node not found: "+e);return n}iM.copy=function(){var t,e,n=new nM(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=rM(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=rM(e));return n},iM.add=function(t){const e=+this._x.call(null,t),n=+this._y.call(null,t);return ZA(this.cover(e,n),e,n,t)},iM.addAll=function(t){var e,n,r,i,a=t.length,o=new Array(a),u=new Array(a),s=1/0,l=1/0,c=-1/0,f=-1/0;for(n=0;n<a;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(o[n]=r,u[n]=i,r<s&&(s=r),r>c&&(c=r),i<l&&(l=i),i>f&&(f=i));if(s>c||l>f)return this;for(this.cover(s,l).cover(c,f),n=0;n<a;++n)ZA(this,o[n],u[n],t[n]);return this},iM.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,a=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,a=(r=Math.floor(e))+1;else{for(var o,u,s=i-n||1,l=this._root;n>t||t>=i||r>e||e>=a;)switch(u=(e<r)<<1|t<n,(o=new Array(4))[u]=l,l=o,s*=2,u){case 0:i=n+s,a=r+s;break;case 1:n=i-s,a=r+s;break;case 2:i=n+s,r=a-s;break;case 3:n=i-s,r=a-s}this._root&&this._root.length&&(this._root=l)}return this._x0=n,this._y0=r,this._x1=i,this._y1=a,this},iM.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},iM.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},iM.find=function(t,e,n){var r,i,a,o,u,s,l,c=this._x0,f=this._y0,h=this._x1,d=this._y1,p=[],g=this._root;for(g&&p.push(new QA(g,c,f,h,d)),null==n?n=1/0:(c=t-n,f=e-n,h=t+n,d=e+n,n*=n);s=p.pop();)if(!(!(g=s.node)||(i=s.x0)>h||(a=s.y0)>d||(o=s.x1)<c||(u=s.y1)<f))if(g.length){var m=(i+o)/2,y=(a+u)/2;p.push(new QA(g[3],m,y,o,u),new QA(g[2],i,y,m,u),new QA(g[1],m,a,o,y),new QA(g[0],i,a,m,y)),(l=(e>=y)<<1|t>=m)&&(s=p[p.length-1],p[p.length-1]=p[p.length-1-l],p[p.length-1-l]=s)}else{var v=t-+this._x.call(null,g.data),_=e-+this._y.call(null,g.data),x=v*v+_*_;if(x<n){var b=Math.sqrt(n=x);c=t-b,f=e-b,h=t+b,d=e+b,r=g.data}}return r},iM.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(o=+this._y.call(null,t)))return this;var e,n,r,i,a,o,u,s,l,c,f,h,d=this._root,p=this._x0,g=this._y0,m=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((l=a>=(u=(p+m)/2))?p=u:m=u,(c=o>=(s=(g+y)/2))?g=s:y=s,e=d,!(d=d[f=c<<1|l]))return this;if(!d.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,h=f)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):e?(i?e[f]=i:delete e[f],(d=e[0]||e[1]||e[2]||e[3])&&d===(e[3]||e[2]||e[1]||e[0])&&!d.length&&(n?n[h]=d:this._root=d),this):(this._root=i,this)},iM.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},iM.root=function(){return this._root},iM.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},iM.visit=function(t){var e,n,r,i,a,o,u=[],s=this._root;for(s&&u.push(new QA(s,this._x0,this._y0,this._x1,this._y1));e=u.pop();)if(!t(s=e.node,r=e.x0,i=e.y0,a=e.x1,o=e.y1)&&s.length){var l=(r+a)/2,c=(i+o)/2;(n=s[3])&&u.push(new QA(n,l,c,a,o)),(n=s[2])&&u.push(new QA(n,r,c,l,o)),(n=s[1])&&u.push(new QA(n,l,i,a,c)),(n=s[0])&&u.push(new QA(n,r,i,l,c))}return this},iM.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new QA(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var a,o=e.x0,u=e.y0,s=e.x1,l=e.y1,c=(o+s)/2,f=(u+l)/2;(a=i[0])&&n.push(new QA(a,o,u,c,f)),(a=i[1])&&n.push(new QA(a,c,u,s,f)),(a=i[2])&&n.push(new QA(a,o,f,c,l)),(a=i[3])&&n.push(new QA(a,c,f,s,l))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},iM.x=function(t){return arguments.length?(this._x=t,this):this._x},iM.y=function(t){return arguments.length?(this._y=t,this):this._y};var fM={value:()=>{}};function hM(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new dM(r)}function dM(t){this._=t}function pM(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function gM(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function mM(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=fM,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}dM.prototype=hM.prototype={constructor:dM,on:function(t,e){var n,r=this._,i=pM(t+"",r),a=-1,o=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<o;)if(n=(t=i[a]).type)r[n]=mM(r[n],t.name,e);else if(null==e)for(n in r)r[n]=mM(r[n],t.name,null);return this}for(;++a<o;)if((n=(t=i[a]).type)&&(n=gM(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new dM(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),a=0;a<n;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,n=(r=this._[t]).length;a<n;++a)r[a].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(e,n)}};var yM,vM,_M=0,xM=0,bM=0,wM=0,kM=0,AM=0,MM="object"==typeof performance&&performance.now?performance:Date,EM="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function DM(){return kM||(EM(CM),kM=MM.now()+AM)}function CM(){kM=0}function FM(){this._call=this._time=this._next=null}function SM(t,e,n){var r=new FM;return r.restart(t,e,n),r}function BM(){kM=(wM=MM.now())+AM,_M=xM=0;try{!function(){DM(),++_M;for(var t,e=yM;e;)(t=kM-e._time)>=0&&e._call.call(null,t),e=e._next;--_M}()}finally{_M=0,function(){var t,e,n=yM,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:yM=e);vM=t,zM(r)}(),kM=0}}function TM(){var t=MM.now(),e=t-wM;e>1e3&&(AM-=e,wM=t)}function zM(t){_M||(xM&&(xM=clearTimeout(xM)),t-kM>24?(t<1/0&&(xM=setTimeout(BM,t-MM.now()-AM)),bM&&(bM=clearInterval(bM))):(bM||(wM=MM.now(),bM=setInterval(TM,1e3)),_M=1,EM(BM)))}FM.prototype=SM.prototype={constructor:FM,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?DM():+n)+(null==e?0:+e),this._next||vM===this||(vM?vM._next=this:yM=this,vM=this),this._call=t,this._time=n,zM()},stop:function(){this._call&&(this._call=null,this._time=1/0,zM())}};const NM=4294967296;function OM(t){return t.x}function RM(t){return t.y}var $M=Math.PI*(3-Math.sqrt(5));function qM(t){var e,n=1,r=.001,i=1-Math.pow(r,1/300),a=0,o=.6,u=new Map,s=SM(f),l=hM("tick","end"),c=function(){let t=1;return()=>(t=(1664525*t+1013904223)%NM)/NM}();function f(){h(),l.call("tick",e),n<r&&(s.stop(),l.call("end",e))}function h(r){var s,l,c=t.length;void 0===r&&(r=1);for(var f=0;f<r;++f)for(n+=(a-n)*i,u.forEach((function(t){t(n)})),s=0;s<c;++s)null==(l=t[s]).fx?l.x+=l.vx*=o:(l.x=l.fx,l.vx=0),null==l.fy?l.y+=l.vy*=o:(l.y=l.fy,l.vy=0);return e}function d(){for(var e,n=0,r=t.length;n<r;++n){if((e=t[n]).index=n,null!=e.fx&&(e.x=e.fx),null!=e.fy&&(e.y=e.fy),isNaN(e.x)||isNaN(e.y)){var i=10*Math.sqrt(.5+n),a=n*$M;e.x=i*Math.cos(a),e.y=i*Math.sin(a)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function p(e){return e.initialize&&e.initialize(t,c),e}return null==t&&(t=[]),d(),e={tick:h,restart:function(){return s.restart(f),e},stop:function(){return s.stop(),e},nodes:function(n){return arguments.length?(t=n,d(),u.forEach(p),e):t},alpha:function(t){return arguments.length?(n=+t,e):n},alphaMin:function(t){return arguments.length?(r=+t,e):r},alphaDecay:function(t){return arguments.length?(i=+t,e):+i},alphaTarget:function(t){return arguments.length?(a=+t,e):a},velocityDecay:function(t){return arguments.length?(o=1-t,e):1-o},randomSource:function(t){return arguments.length?(c=t,u.forEach(p),e):c},force:function(t,n){return arguments.length>1?(null==n?u.delete(t):u.set(t,p(n)),e):u.get(t)},find:function(e,n,r){var i,a,o,u,s,l=0,c=t.length;for(null==r?r=1/0:r*=r,l=0;l<c;++l)(o=(i=e-(u=t[l]).x)*i+(a=n-u.y)*a)<r&&(s=u,r=o);return s},on:function(t,n){return arguments.length>1?(l.on(t,n),e):l.on(t)}}}const LM={center:function(t,e){var n,r=1;function i(){var i,a,o=n.length,u=0,s=0;for(i=0;i<o;++i)u+=(a=n[i]).x,s+=a.y;for(u=(u/o-t)*r,s=(s/o-e)*r,i=0;i<o;++i)(a=n[i]).x-=u,a.y-=s}return null==t&&(t=0),null==e&&(e=0),i.initialize=function(t){n=t},i.x=function(e){return arguments.length?(t=+e,i):t},i.y=function(t){return arguments.length?(e=+t,i):e},i.strength=function(t){return arguments.length?(r=+t,i):r},i},collide:function(t){var e,n,r,i=1,a=1;function o(){for(var t,o,s,l,c,f,h,d=e.length,p=0;p<a;++p)for(o=eM(e,uM,sM).visitAfter(u),t=0;t<d;++t)s=e[t],f=n[s.index],h=f*f,l=s.x+s.vx,c=s.y+s.vy,o.visit(g);function g(t,e,n,a,o){var u=t.data,d=t.r,p=f+d;if(!u)return e>l+p||a<l-p||n>c+p||o<c-p;if(u.index>s.index){var g=l-u.x-u.vx,m=c-u.y-u.vy,y=g*g+m*m;y<p*p&&(0===g&&(y+=(g=oM(r))*g),0===m&&(y+=(m=oM(r))*m),y=(p-(y=Math.sqrt(y)))/y*i,s.vx+=(g*=y)*(p=(d*=d)/(h+d)),s.vy+=(m*=y)*p,u.vx-=g*(p=1-p),u.vy-=m*p)}}}function u(t){if(t.data)return t.r=n[t.data.index];for(var e=t.r=0;e<4;++e)t[e]&&t[e].r>t.r&&(t.r=t[e].r)}function s(){if(e){var r,i,a=e.length;for(n=new Array(a),r=0;r<a;++r)i=e[r],n[i.index]=+t(i,r,e)}}return"function"!=typeof t&&(t=aM(null==t?1:+t)),o.initialize=function(t,n){e=t,r=n,s()},o.iterations=function(t){return arguments.length?(a=+t,o):a},o.strength=function(t){return arguments.length?(i=+t,o):i},o.radius=function(e){return arguments.length?(t="function"==typeof e?e:aM(+e),s(),o):t},o},nbody:function(){var t,e,n,r,i,a=aM(-30),o=1,u=1/0,s=.81;function l(n){var i,a=t.length,o=eM(t,OM,RM).visitAfter(f);for(r=n,i=0;i<a;++i)e=t[i],o.visit(h)}function c(){if(t){var e,n,r=t.length;for(i=new Array(r),e=0;e<r;++e)n=t[e],i[n.index]=+a(n,e,t)}}function f(t){var e,n,r,a,o,u=0,s=0;if(t.length){for(r=a=o=0;o<4;++o)(e=t[o])&&(n=Math.abs(e.value))&&(u+=e.value,s+=n,r+=n*e.x,a+=n*e.y);t.x=r/s,t.y=a/s}else{(e=t).x=e.data.x,e.y=e.data.y;do{u+=i[e.data.index]}while(e=e.next)}t.value=u}function h(t,a,l,c){if(!t.value)return!0;var f=t.x-e.x,h=t.y-e.y,d=c-a,p=f*f+h*h;if(d*d/s<p)return p<u&&(0===f&&(p+=(f=oM(n))*f),0===h&&(p+=(h=oM(n))*h),p<o&&(p=Math.sqrt(o*p)),e.vx+=f*t.value*r/p,e.vy+=h*t.value*r/p),!0;if(!(t.length||p>=u)){(t.data!==e||t.next)&&(0===f&&(p+=(f=oM(n))*f),0===h&&(p+=(h=oM(n))*h),p<o&&(p=Math.sqrt(o*p)));do{t.data!==e&&(d=i[t.data.index]*r/p,e.vx+=f*d,e.vy+=h*d)}while(t=t.next)}}return l.initialize=function(e,r){t=e,n=r,c()},l.strength=function(t){return arguments.length?(a="function"==typeof t?t:aM(+t),c(),l):a},l.distanceMin=function(t){return arguments.length?(o=t*t,l):Math.sqrt(o)},l.distanceMax=function(t){return arguments.length?(u=t*t,l):Math.sqrt(u)},l.theta=function(t){return arguments.length?(s=t*t,l):Math.sqrt(s)},l},link:function(t){var e,n,r,i,a,o,u=lM,s=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},l=aM(30),c=1;function f(r){for(var i=0,u=t.length;i<c;++i)for(var s,l,f,h,d,p,g,m=0;m<u;++m)l=(s=t[m]).source,h=(f=s.target).x+f.vx-l.x-l.vx||oM(o),d=f.y+f.vy-l.y-l.vy||oM(o),h*=p=((p=Math.sqrt(h*h+d*d))-n[m])/p*r*e[m],d*=p,f.vx-=h*(g=a[m]),f.vy-=d*g,l.vx+=h*(g=1-g),l.vy+=d*g}function h(){if(r){var o,s,l=r.length,c=t.length,f=new Map(r.map((t,e)=>[u(t,e,r),t]));for(o=0,i=new Array(l);o<c;++o)(s=t[o]).index=o,"object"!=typeof s.source&&(s.source=cM(f,s.source)),"object"!=typeof s.target&&(s.target=cM(f,s.target)),i[s.source.index]=(i[s.source.index]||0)+1,i[s.target.index]=(i[s.target.index]||0)+1;for(o=0,a=new Array(c);o<c;++o)s=t[o],a[o]=i[s.source.index]/(i[s.source.index]+i[s.target.index]);e=new Array(c),d(),n=new Array(c),p()}}function d(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+s(t[n],n,t)}function p(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+l(t[e],e,t)}return null==t&&(t=[]),f.initialize=function(t,e){r=t,o=e,h()},f.links=function(e){return arguments.length?(t=e,h(),f):t},f.id=function(t){return arguments.length?(u=t,f):u},f.iterations=function(t){return arguments.length?(c=+t,f):c},f.strength=function(t){return arguments.length?(s="function"==typeof t?t:aM(+t),d(),f):s},f.distance=function(t){return arguments.length?(l="function"==typeof t?t:aM(+t),p(),f):l},f},x:function(t){var e,n,r,i=aM(.1);function a(t){for(var i,a=0,o=e.length;a<o;++a)(i=e[a]).vx+=(r[a]-i.x)*n[a]*t}function o(){if(e){var a,o=e.length;for(n=new Array(o),r=new Array(o),a=0;a<o;++a)n[a]=isNaN(r[a]=+t(e[a],a,e))?0:+i(e[a],a,e)}}return"function"!=typeof t&&(t=aM(null==t?0:+t)),a.initialize=function(t){e=t,o()},a.strength=function(t){return arguments.length?(i="function"==typeof t?t:aM(+t),o(),a):i},a.x=function(e){return arguments.length?(t="function"==typeof e?e:aM(+e),o(),a):t},a},y:function(t){var e,n,r,i=aM(.1);function a(t){for(var i,a=0,o=e.length;a<o;++a)(i=e[a]).vy+=(r[a]-i.y)*n[a]*t}function o(){if(e){var a,o=e.length;for(n=new Array(o),r=new Array(o),a=0;a<o;++a)n[a]=isNaN(r[a]=+t(e[a],a,e))?0:+i(e[a],a,e)}}return"function"!=typeof t&&(t=aM(null==t?0:+t)),a.initialize=function(t){e=t,o()},a.strength=function(t){return arguments.length?(i="function"==typeof t?t:aM(+t),o(),a):i},a.y=function(e){return arguments.length?(t="function"==typeof e?e:aM(+e),o(),a):t},a}},UM="forces",PM=["alpha","alphaMin","alphaTarget","velocityDecay","forces"],jM=["static","iterations"],IM=["x","y","vx","vy"];function WM(t){co.call(this,null,t)}function HM(t,e,n,r){var i,a,o,u,s=I(e.forces);for(i=0,a=PM.length;i<a;++i)(o=PM[i])!==UM&&e.modified(o)&&t[o](e[o]);for(i=0,a=s.length;i<a;++i)u=UM+i,(o=n||e.modified(UM,i)?VM(s[i]):r&&YM(s[i],r)?t.force(u):null)&&t.force(u,o);for(a=t.numForces||0;i<a;++i)t.force(UM+i,null);return t.numForces=s.length,t}function YM(t,e){var n,i;for(n in t)if(H(i=t[n])&&e.modified(r(i)))return 1;return 0}function VM(t){var e,n;for(n in rt(LM,t.force)||u("Unrecognized force: "+t.force),e=LM[t.force](),t)H(e[n])&&GM(e[n],t[n],t);return e}function GM(t,e,n){t(H(e)?t=>e(t,n):e)}WM.Definition={type:"Force",metadata:{modifies:!0},params:[{name:"static",type:"boolean",default:!1},{name:"restart",type:"boolean",default:!1},{name:"iterations",type:"number",default:300},{name:"alpha",type:"number",default:1},{name:"alphaMin",type:"number",default:.001},{name:"alphaTarget",type:"number",default:0},{name:"velocityDecay",type:"number",default:.4},{name:"forces",type:"param",array:!0,params:[{key:{force:"center"},params:[{name:"x",type:"number",default:0},{name:"y",type:"number",default:0}]},{key:{force:"collide"},params:[{name:"radius",type:"number",expr:!0},{name:"strength",type:"number",default:.7},{name:"iterations",type:"number",default:1}]},{key:{force:"nbody"},params:[{name:"strength",type:"number",default:-30},{name:"theta",type:"number",default:.9},{name:"distanceMin",type:"number",default:1},{name:"distanceMax",type:"number"}]},{key:{force:"link"},params:[{name:"links",type:"data"},{name:"id",type:"field"},{name:"distance",type:"number",default:30,expr:!0},{name:"strength",type:"number",expr:!0},{name:"iterations",type:"number",default:1}]},{key:{force:"x"},params:[{name:"strength",type:"number",default:.1},{name:"x",type:"field"}]},{key:{force:"y"},params:[{name:"strength",type:"number",default:.1},{name:"y",type:"field"}]}]},{name:"as",type:"string",array:!0,modify:!1,default:IM}]},ut(WM,co,{transform(t,e){var n,r,i=this.value,a=e.changed(e.ADD_REM),o=t.modified(PM),u=t.iterations||300;if(i?(a&&(e.modifies("index"),i.nodes(e.source)),(o||e.changed(e.MOD))&&HM(i,t,0,e)):(this.value=i=function(t,e){const n=qM(t),r=n.stop,i=n.restart;let a=!1;return n.stopped=()=>a,n.restart=()=>(a=!1,i()),n.stop=()=>(a=!0,r()),HM(n,e,!0).on("end",()=>a=!0)}(e.source,t),i.on("tick",(n=e.dataflow,r=this,()=>n.touch(r).run())),t.static||(a=!0,i.tick()),e.modifies("index")),o||a||t.modified(jM)||e.changed()&&t.restart)if(i.alpha(Math.max(i.alpha(),t.alpha||1)).alphaDecay(1-Math.pow(i.alphaMin(),1/u)),t.static)for(i.stop();--u>=0;)i.tick();else if(i.stopped()&&i.restart(),!a)return e.StopPropagation;return this.finish(t,e)},finish(t,e){const n=e.dataflow;for(let t,e=this._argops,u=0,s=e.length;u<s;++u)if(t=e[u],t.name===UM&&"link"===t.op._argval.force)for(var r,i=t.op._argops,a=0,o=i.length;a<o;++a)if("links"===i[a].name&&(r=i[a].op.source)){n.pulse(r,n.changeset().reflow());break}return e.reflow(t.modified()).modifies(IM)}});var XM=Object.freeze({__proto__:null,force:WM});function JM(t,e,n){var r={};return t.each(t=>{var i=t.data;n(i)&&(r[e(i)]=t)}),t.lookup=r,t}function ZM(t,e){return t.parent===e.parent?1:2}function QM(t,e){return t+e.x}function KM(t,e){return Math.max(t,e.y)}function tE(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function eE(t,e){t instanceof Map?(t=[void 0,t],void 0===e&&(e=rE)):void 0===e&&(e=nE);for(var n,r,i,a,o,u=new oE(t),s=[u];n=s.pop();)if((i=e(n.data))&&(o=(i=Array.from(i)).length))for(n.children=i,a=o-1;a>=0;--a)s.push(r=i[a]=new oE(i[a])),r.parent=n,r.depth=n.depth+1;return u.eachBefore(aE)}function nE(t){return t.children}function rE(t){return Array.isArray(t)?t[1]:null}function iE(t){void 0!==t.data.value&&(t.value=t.data.value),t.data=t.data.data}function aE(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function oE(t){this.data=t,this.depth=this.height=0,this.parent=null}function uE(t){for(var e,n,r=0,i=(t=function(t){for(var e,n,r=t.length;r;)n=Math.random()*r--|0,e=t[r],t[r]=t[n],t[n]=e;return t}(Array.from(t))).length,a=[];r<i;)e=t[r],n&&cE(n,e)?++r:(n=hE(a=sE(a,e)),r=0);return n}function sE(t,e){var n,r;if(fE(e,t))return[e];for(n=0;n<t.length;++n)if(lE(e,t[n])&&fE(dE(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(r=n+1;r<t.length;++r)if(lE(dE(t[n],t[r]),e)&&lE(dE(t[n],e),t[r])&&lE(dE(t[r],e),t[n])&&fE(pE(t[n],t[r],e),t))return[t[n],t[r],e];throw new Error}function lE(t,e){var n=t.r-e.r,r=e.x-t.x,i=e.y-t.y;return n<0||n*n<r*r+i*i}function cE(t,e){var n=t.r-e.r+1e-9*Math.max(t.r,e.r,1),r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function fE(t,e){for(var n=0;n<e.length;++n)if(!cE(t,e[n]))return!1;return!0}function hE(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return dE(t[0],t[1]);case 3:return pE(t[0],t[1],t[2])}}function dE(t,e){var n=t.x,r=t.y,i=t.r,a=e.x,o=e.y,u=e.r,s=a-n,l=o-r,c=u-i,f=Math.sqrt(s*s+l*l);return{x:(n+a+s/f*c)/2,y:(r+o+l/f*c)/2,r:(f+i+u)/2}}function pE(t,e,n){var r=t.x,i=t.y,a=t.r,o=e.x,u=e.y,s=e.r,l=n.x,c=n.y,f=n.r,h=r-o,d=r-l,p=i-u,g=i-c,m=s-a,y=f-a,v=r*r+i*i-a*a,_=v-o*o-u*u+s*s,x=v-l*l-c*c+f*f,b=d*p-h*g,w=(p*x-g*_)/(2*b)-r,k=(g*m-p*y)/b,A=(d*_-h*x)/(2*b)-i,M=(h*y-d*m)/b,E=k*k+M*M-1,D=2*(a+w*k+A*M),C=w*w+A*A-a*a,F=-(E?(D+Math.sqrt(D*D-4*E*C))/(2*E):C/D);return{x:r+w+k*F,y:i+A+M*F,r:F}}function gE(t,e,n){var r,i,a,o,u=t.x-e.x,s=t.y-e.y,l=u*u+s*s;l?(i=e.r+n.r,i*=i,o=t.r+n.r,i>(o*=o)?(r=(l+o-i)/(2*l),a=Math.sqrt(Math.max(0,o/l-r*r)),n.x=t.x-r*u-a*s,n.y=t.y-r*s+a*u):(r=(l+i-o)/(2*l),a=Math.sqrt(Math.max(0,i/l-r*r)),n.x=e.x+r*u-a*s,n.y=e.y+r*s+a*u)):(n.x=e.x+n.r,n.y=e.y)}function mE(t,e){var n=t.r+e.r-1e-6,r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function yE(t){var e=t._,n=t.next._,r=e.r+n.r,i=(e.x*n.r+n.x*e.r)/r,a=(e.y*n.r+n.y*e.r)/r;return i*i+a*a}function vE(t){this._=t,this.next=null,this.previous=null}function _E(t){if(!(i=(t=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}(t)).length))return 0;var e,n,r,i,a,o,u,s,l,c,f;if((e=t[0]).x=0,e.y=0,!(i>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(i>2))return e.r+n.r;gE(n,e,r=t[2]),e=new vE(e),n=new vE(n),r=new vE(r),e.next=r.previous=n,n.next=e.previous=r,r.next=n.previous=e;t:for(u=3;u<i;++u){gE(e._,n._,r=t[u]),r=new vE(r),s=n.next,l=e.previous,c=n._.r,f=e._.r;do{if(c<=f){if(mE(s._,r._)){n=s,e.next=n,n.previous=e,--u;continue t}c+=s._.r,s=s.next}else{if(mE(l._,r._)){(e=l).next=n,n.previous=e,--u;continue t}f+=l._.r,l=l.previous}}while(s!==l.next);for(r.previous=e,r.next=n,e.next=n.previous=n=r,a=yE(e);(r=r.next)!==n;)(o=yE(r))<a&&(e=r,a=o);n=e.next}for(e=[n._],r=n;(r=r.next)!==n;)e.push(r._);for(r=uE(e),u=0;u<i;++u)(e=t[u]).x-=r.x,e.y-=r.y;return r.r}function xE(t){return null==t?null:bE(t)}function bE(t){if("function"!=typeof t)throw new Error;return t}function wE(){return 0}function kE(t){return function(){return t}}function AE(t){return Math.sqrt(t.value)}function ME(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function EE(t,e){return function(n){if(r=n.children){var r,i,a,o=r.length,u=t(n)*e||0;if(u)for(i=0;i<o;++i)r[i].r+=u;if(a=_E(r),u)for(i=0;i<o;++i)r[i].r-=u;n.r=a+u}}}function DE(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}function CE(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function FE(t,e,n,r,i){for(var a,o=t.children,u=-1,s=o.length,l=t.value&&(r-e)/t.value;++u<s;)(a=o[u]).y0=n,a.y1=i,a.x0=e,a.x1=e+=a.value*l}oE.prototype=eE.prototype={constructor:oE,count:function(){return this.eachAfter(tE)},each:function(t,e){let n=-1;for(const r of this)t.call(e,r,++n,this);return this},eachAfter:function(t,e){for(var n,r,i,a=this,o=[a],u=[],s=-1;a=o.pop();)if(u.push(a),n=a.children)for(r=0,i=n.length;r<i;++r)o.push(n[r]);for(;a=u.pop();)t.call(e,a,++s,this);return this},eachBefore:function(t,e){for(var n,r,i=this,a=[i],o=-1;i=a.pop();)if(t.call(e,i,++o,this),n=i.children)for(r=n.length-1;r>=0;--r)a.push(n[r]);return this},find:function(t,e){let n=-1;for(const r of this)if(t.call(e,r,++n,this))return r},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;t=n.pop(),e=r.pop();for(;t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){return Array.from(this)},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return eE(this).eachBefore(iE)},[Symbol.iterator]:function*(){var t,e,n,r,i=this,a=[i];do{for(t=a.reverse(),a=[];i=t.pop();)if(yield i,e=i.children)for(n=0,r=e.length;n<r;++n)a.push(e[n])}while(a.length)}};var SE={depth:-1},BE={};function TE(t){return t.id}function zE(t){return t.parentId}function NE(){var t=TE,e=zE;function n(n){var r,i,a,o,u,s,l,c=Array.from(n),f=c.length,h=new Map;for(i=0;i<f;++i)r=c[i],u=c[i]=new oE(r),null!=(s=t(r,i,n))&&(s+="")&&(l=u.id=s,h.set(l,h.has(l)?BE:u)),null!=(s=e(r,i,n))&&(s+="")&&(u.parent=s);for(i=0;i<f;++i)if(s=(u=c[i]).parent){if(!(o=h.get(s)))throw new Error("missing: "+s);if(o===BE)throw new Error("ambiguous: "+s);o.children?o.children.push(u):o.children=[u],u.parent=o}else{if(a)throw new Error("multiple roots");a=u}if(!a)throw new Error("no root");if(a.parent=SE,a.eachBefore((function(t){t.depth=t.parent.depth+1,--f})).eachBefore(aE),a.parent=null,f>0)throw new Error("cycle");return a}return n.id=function(e){return arguments.length?(t=bE(e),n):t},n.parentId=function(t){return arguments.length?(e=bE(t),n):e},n}function OE(t,e){return t.parent===e.parent?1:2}function RE(t){var e=t.children;return e?e[0]:t.t}function $E(t){var e=t.children;return e?e[e.length-1]:t.t}function qE(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function LE(t,e,n){return t.a.parent===e.parent?t.a:n}function UE(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}function PE(t,e,n,r,i){for(var a,o=t.children,u=-1,s=o.length,l=t.value&&(i-n)/t.value;++u<s;)(a=o[u]).x0=e,a.x1=r,a.y0=n,a.y1=n+=a.value*l}UE.prototype=Object.create(oE.prototype);var jE=(1+Math.sqrt(5))/2;function IE(t,e,n,r,i,a){for(var o,u,s,l,c,f,h,d,p,g,m,y=[],v=e.children,_=0,x=0,b=v.length,w=e.value;_<b;){s=i-n,l=a-r;do{c=v[x++].value}while(!c&&x<b);for(f=h=c,m=c*c*(g=Math.max(l/s,s/l)/(w*t)),p=Math.max(h/m,m/f);x<b;++x){if(c+=u=v[x].value,u<f&&(f=u),u>h&&(h=u),m=c*c*g,(d=Math.max(h/m,m/f))>p){c-=u;break}p=d}y.push(o={value:c,dice:s<l,children:v.slice(_,x)}),o.dice?FE(o,n,r,i,w?r+=l*c/w:a):PE(o,n,r,w?n+=s*c/w:i,a),w-=c,_=x}return y}var WE=function t(e){function n(t,n,r,i,a){IE(e,t,n,r,i,a)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(jE);var HE=function t(e){function n(t,n,r,i,a){if((o=t._squarify)&&o.ratio===e)for(var o,u,s,l,c,f=-1,h=o.length,d=t.value;++f<h;){for(s=(u=o[f]).children,l=u.value=0,c=s.length;l<c;++l)u.value+=s[l].value;u.dice?FE(u,n,r,i,d?r+=(a-r)*u.value/d:a):PE(u,n,r,d?n+=(i-n)*u.value/d:i,a),d-=u.value}else t._squarify=o=IE(e,t,n,r,i,a),o.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(jE);function YE(t){co.call(this,null,t)}YE.Definition={type:"Nest",metadata:{treesource:!0,changes:!0},params:[{name:"keys",type:"field",array:!0},{name:"generate",type:"boolean"}]};const VE=t=>t.values;function GE(){const t=[],e={entries:e=>function e(n,r){if(++r>t.length)return n;const i=[];for(const t in n)i.push({key:t,values:e(n[t],r)});return i}(function e(n,r){if(r>=t.length)return n;const i=n.length,a=t[r++],o={},u={};let s,l,c,f=-1;for(;++f<i;)s=a(l=n[f])+"",(c=o[s])?c.push(l):o[s]=[l];for(s in o)u[s]=e(o[s],r);return u}(e,0),0),key:n=>(t.push(n),e)};return e}function XE(t){co.call(this,null,t)}ut(YE,co,{transform(t,e){e.source||u("Nest transform requires an upstream data source.");var n=t.generate,r=t.modified(),i=e.clone(),a=this.value;return(!a||r||e.changed())&&(a&&a.each(t=>{t.children&&zt(t.data)&&i.rem.push(t.data)}),this.value=a=eE({values:I(t.keys).reduce((t,e)=>(t.key(e),t),GE()).entries(i.source)},VE),n&&a.each(t=>{t.children&&(t=Rt(t.data),i.add.push(t),i.source.push(t))}),JM(a,Nt,Nt)),i.source.root=a,i}});const JE=(t,e)=>t.parent===e.parent?1:2;ut(XE,co,{transform(t,e){e.source&&e.source.root||u(this.constructor.name+" transform requires a backing tree data source.");const n=this.layout(t.method),r=this.fields,i=e.source.root,a=t.as||r;t.field?i.sum(t.field):i.count(),t.sort&&i.sort(Ut(t.sort,t=>t.data)),function(t,e,n){for(let r,i=0,a=e.length;i<a;++i)r=e[i],r in n&&t[r](n[r])}(n,this.params,t),n.separation&&n.separation(!1!==t.separation?JE:d);try{this.value=n(i)}catch(t){u(t)}return i.each(t=>function(t,e,n){const r=t.data,i=e.length-1;for(let a=0;a<i;++a)r[n[a]]=t[e[a]];r[n[i]]=t.children?t.children.length:0}(t,r,a)),e.reflow(t.modified()).modifies(a).modifies("leaf")}});const ZE=["x","y","r","depth","children"];function QE(t){XE.call(this,t)}QE.Definition={type:"Pack",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"padding",type:"number",default:0},{name:"radius",type:"field",default:null},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:ZE.length,default:ZE}]},ut(QE,XE,{layout:function(){var t=null,e=1,n=1,r=wE;function i(i){return i.x=e/2,i.y=n/2,t?i.eachBefore(ME(t)).eachAfter(EE(r,.5)).eachBefore(DE(1)):i.eachBefore(ME(AE)).eachAfter(EE(wE,1)).eachAfter(EE(r,i.r/Math.min(e,n))).eachBefore(DE(Math.min(e,n)/(2*i.r))),i}return i.radius=function(e){return arguments.length?(t=xE(e),i):t},i.size=function(t){return arguments.length?(e=+t[0],n=+t[1],i):[e,n]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:kE(+t),i):r},i},params:["radius","size","padding"],fields:ZE});const KE=["x0","y0","x1","y1","depth","children"];function tD(t){XE.call(this,t)}function eD(t){co.call(this,null,t)}tD.Definition={type:"Partition",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"padding",type:"number",default:0},{name:"round",type:"boolean",default:!1},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:KE.length,default:KE}]},ut(tD,XE,{layout:function(){var t=1,e=1,n=0,r=!1;function i(i){var a=i.height+1;return i.x0=i.y0=n,i.x1=t,i.y1=e/a,i.eachBefore(function(t,e){return function(r){r.children&&FE(r,r.x0,t*(r.depth+1)/e,r.x1,t*(r.depth+2)/e);var i=r.x0,a=r.y0,o=r.x1-n,u=r.y1-n;o<i&&(i=o=(i+o)/2),u<a&&(a=u=(a+u)/2),r.x0=i,r.y0=a,r.x1=o,r.y1=u}}(e,a)),r&&i.eachBefore(CE),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(n){return arguments.length?(t=+n[0],e=+n[1],i):[t,e]},i.padding=function(t){return arguments.length?(n=+t,i):n},i},params:["size","round","padding"],fields:KE}),eD.Definition={type:"Stratify",metadata:{treesource:!0},params:[{name:"key",type:"field",required:!0},{name:"parentKey",type:"field",required:!0}]},ut(eD,co,{transform(t,e){e.source||u("Stratify transform requires an upstream data source.");let n=this.value;const r=t.modified(),i=e.fork(e.ALL).materialize(e.SOURCE),a=!n||r||e.changed(e.ADD_REM)||e.modified(t.key.fields)||e.modified(t.parentKey.fields);return i.source=i.source.slice(),a&&(n=i.source.length?JM(NE().id(t.key).parentId(t.parentKey)(i.source),t.key,p):JM(NE()([{}]),t.key,t.key)),i.source.root=this.value=n,i}});var nD={tidy:function(){var t=OE,e=1,n=1,r=null;function i(i){var s=function(t){for(var e,n,r,i,a,o=new UE(t,0),u=[o];e=u.pop();)if(r=e._.children)for(e.children=new Array(a=r.length),i=a-1;i>=0;--i)u.push(n=e.children[i]=new UE(r[i],i)),n.parent=e;return(o.parent=new UE(null,0)).children=[o],o}(i);if(s.eachAfter(a),s.parent.m=-s.z,s.eachBefore(o),r)i.eachBefore(u);else{var l=i,c=i,f=i;i.eachBefore((function(t){t.x<l.x&&(l=t),t.x>c.x&&(c=t),t.depth>f.depth&&(f=t)}));var h=l===c?1:t(l,c)/2,d=h-l.x,p=e/(c.x+h+d),g=n/(f.depth||1);i.eachBefore((function(t){t.x=(t.x+d)*p,t.y=t.depth*g}))}return i}function a(e){var n=e.children,r=e.parent.children,i=e.i?r[e.i-1]:null;if(n){!function(t){for(var e,n=0,r=0,i=t.children,a=i.length;--a>=0;)(e=i[a]).z+=n,e.m+=n,n+=e.s+(r+=e.c)}(e);var a=(n[0].z+n[n.length-1].z)/2;i?(e.z=i.z+t(e._,i._),e.m=e.z-a):e.z=a}else i&&(e.z=i.z+t(e._,i._));e.parent.A=function(e,n,r){if(n){for(var i,a=e,o=e,u=n,s=a.parent.children[0],l=a.m,c=o.m,f=u.m,h=s.m;u=$E(u),a=RE(a),u&&a;)s=RE(s),(o=$E(o)).a=e,(i=u.z+f-a.z-l+t(u._,a._))>0&&(qE(LE(u,e,r),e,i),l+=i,c+=i),f+=u.m,l+=a.m,h+=s.m,c+=o.m;u&&!$E(o)&&(o.t=u,o.m+=f-c),a&&!RE(s)&&(s.t=a,s.m+=l-h,r=e)}return r}(e,i,e.parent.A||r[0])}function o(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function u(t){t.x*=e,t.y=t.depth*n}return i.separation=function(e){return arguments.length?(t=e,i):t},i.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],i):r?null:[e,n]},i.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],i):r?[e,n]:null},i},cluster:function(){var t=ZM,e=1,n=1,r=!1;function i(i){var a,o=0;i.eachAfter((function(e){var n=e.children;n?(e.x=function(t){return t.reduce(QM,0)/t.length}(n),e.y=function(t){return 1+t.reduce(KM,0)}(n)):(e.x=a?o+=t(e,a):0,e.y=0,a=e)}));var u=function(t){for(var e;e=t.children;)t=e[0];return t}(i),s=function(t){for(var e;e=t.children;)t=e[e.length-1];return t}(i),l=u.x-t(u,s)/2,c=s.x+t(s,u)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*e,t.y=(i.y-t.y)*n}:function(t){t.x=(t.x-l)/(c-l)*e,t.y=(1-(i.y?t.y/i.y:1))*n})}return i.separation=function(e){return arguments.length?(t=e,i):t},i.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],i):r?null:[e,n]},i.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],i):r?[e,n]:null},i}};const rD=["x","y","depth","children"];function iD(t){XE.call(this,t)}function aD(t){co.call(this,[],t)}iD.Definition={type:"Tree",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"method",type:"enum",default:"tidy",values:["tidy","cluster"]},{name:"size",type:"number",array:!0,length:2},{name:"nodeSize",type:"number",array:!0,length:2},{name:"separation",type:"boolean",default:!0},{name:"as",type:"string",array:!0,length:rD.length,default:rD}]},ut(iD,XE,{layout(t){var e=t||"tidy";if(rt(nD,e))return nD[e]();u("Unrecognized Tree layout method: "+e)},params:["size","nodeSize"],fields:rD}),aD.Definition={type:"TreeLinks",metadata:{tree:!0,generates:!0,changes:!0},params:[]},ut(aD,co,{transform(t,e){const n=this.value,r=e.source&&e.source.root,i=e.fork(e.NO_SOURCE),a={};return r||u("TreeLinks transform requires a tree data source."),e.changed(e.ADD_REM)?(i.rem=n,e.visit(e.SOURCE,t=>a[Nt(t)]=1),r.each(t=>{const e=t.data,n=t.parent&&t.parent.data;n&&a[Nt(e)]&&a[Nt(n)]&&i.add.push(Rt({source:n,target:e}))}),this.value=i.add):e.changed(e.MOD)&&(e.visit(e.MOD,t=>a[Nt(t)]=1),n.forEach(t=>{(a[Nt(t.source)]||a[Nt(t.target)])&&i.mod.push(t)})),i}});const oD={binary:function(t,e,n,r,i){var a,o,u=t.children,s=u.length,l=new Array(s+1);for(l[0]=o=a=0;a<s;++a)l[a+1]=o+=u[a].value;!function t(e,n,r,i,a,o,s){if(e>=n-1){var c=u[e];return c.x0=i,c.y0=a,c.x1=o,void(c.y1=s)}var f=l[e],h=r/2+f,d=e+1,p=n-1;for(;d<p;){var g=d+p>>>1;l[g]<h?d=g+1:p=g}h-l[d-1]<l[d]-h&&e+1<d&&--d;var m=l[d]-f,y=r-m;if(o-i>s-a){var v=r?(i*y+o*m)/r:o;t(e,d,m,i,a,v,s),t(d,n,y,v,a,o,s)}else{var _=r?(a*y+s*m)/r:s;t(e,d,m,i,a,o,_),t(d,n,y,i,_,o,s)}}(0,s,t.value,e,n,r,i)},dice:FE,slice:PE,slicedice:function(t,e,n,r,i){(1&t.depth?PE:FE)(t,e,n,r,i)},squarify:WE,resquarify:HE},uD=["x0","y0","x1","y1","depth","children"];function sD(t){XE.call(this,t)}sD.Definition={type:"Treemap",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"method",type:"enum",default:"squarify",values:["squarify","resquarify","binary","dice","slice","slicedice"]},{name:"padding",type:"number",default:0},{name:"paddingInner",type:"number",default:0},{name:"paddingOuter",type:"number",default:0},{name:"paddingTop",type:"number",default:0},{name:"paddingRight",type:"number",default:0},{name:"paddingBottom",type:"number",default:0},{name:"paddingLeft",type:"number",default:0},{name:"ratio",type:"number",default:1.618033988749895},{name:"round",type:"boolean",default:!1},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:uD.length,default:uD}]},ut(sD,XE,{layout(){const t=function(){var t=WE,e=!1,n=1,r=1,i=[0],a=wE,o=wE,u=wE,s=wE,l=wE;function c(t){return t.x0=t.y0=0,t.x1=n,t.y1=r,t.eachBefore(f),i=[0],e&&t.eachBefore(CE),t}function f(e){var n=i[e.depth],r=e.x0+n,c=e.y0+n,f=e.x1-n,h=e.y1-n;f<r&&(r=f=(r+f)/2),h<c&&(c=h=(c+h)/2),e.x0=r,e.y0=c,e.x1=f,e.y1=h,e.children&&(n=i[e.depth+1]=a(e)/2,r+=l(e)-n,c+=o(e)-n,(f-=u(e)-n)<r&&(r=f=(r+f)/2),(h-=s(e)-n)<c&&(c=h=(c+h)/2),t(e,r,c,f,h))}return c.round=function(t){return arguments.length?(e=!!t,c):e},c.size=function(t){return arguments.length?(n=+t[0],r=+t[1],c):[n,r]},c.tile=function(e){return arguments.length?(t=bE(e),c):t},c.padding=function(t){return arguments.length?c.paddingInner(t).paddingOuter(t):c.paddingInner()},c.paddingInner=function(t){return arguments.length?(a="function"==typeof t?t:kE(+t),c):a},c.paddingOuter=function(t){return arguments.length?c.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):c.paddingTop()},c.paddingTop=function(t){return arguments.length?(o="function"==typeof t?t:kE(+t),c):o},c.paddingRight=function(t){return arguments.length?(u="function"==typeof t?t:kE(+t),c):u},c.paddingBottom=function(t){return arguments.length?(s="function"==typeof t?t:kE(+t),c):s},c.paddingLeft=function(t){return arguments.length?(l="function"==typeof t?t:kE(+t),c):l},c}();return t.ratio=e=>{const n=t.tile();n.ratio&&t.tile(n.ratio(e))},t.method=e=>{rt(oD,e)?t.tile(oD[e]):u("Unrecognized Treemap layout method: "+e)},t},params:["method","ratio","size","round","padding","paddingInner","paddingOuter","paddingTop","paddingRight","paddingBottom","paddingLeft"],fields:uD});var lD=Object.freeze({__proto__:null,nest:YE,pack:QE,partition:tD,stratify:eD,tree:iD,treelinks:aD,treemap:sD});function cD(t,e){var n,r,i,a,o,u,s=[],l=function(t){return t(a)};if(null==e)s.push(t);else for(n={},r=0,i=t.length;r<i;++r)a=t[r],(u=n[o=e.map(l)])||(n[o]=u=[],u.dims=o,s.push(u)),u.push(a);return s}function fD(t){co.call(this,null,t)}fD.Definition={type:"Loess",metadata:{generates:!0},params:[{name:"x",type:"field",required:!0},{name:"y",type:"field",required:!0},{name:"groupby",type:"field",array:!0},{name:"bandwidth",type:"number",default:.3},{name:"as",type:"string",array:!0}]},ut(fD,co,{transform(t,e){const r=e.fork(e.NO_SOURCE|e.NO_FIELDS);if(!this.value||e.changed()||t.modified()){const i=cD(e.materialize(e.SOURCE).source,t.groupby),a=(t.groupby||[]).map(n),o=a.length,u=t.as||[n(t.x),n(t.y)],s=[];i.forEach(e=>{hu(e,t.x,t.y,t.bandwidth||.3).forEach(t=>{const n={};for(let t=0;t<o;++t)n[a[t]]=e.dims[t];n[u[0]]=t[0],n[u[1]]=t[1],s.push(Rt(n))})}),this.value&&(r.rem=this.value),this.value=r.add=r.source=s}return r}});const hD={linear:au,log:ou,exp:uu,pow:su,quad:lu,poly:cu};function dD(t){co.call(this,null,t)}dD.Definition={type:"Regression",metadata:{generates:!0},params:[{name:"x",type:"field",required:!0},{name:"y",type:"field",required:!0},{name:"groupby",type:"field",array:!0},{name:"method",type:"string",default:"linear",values:Object.keys(hD)},{name:"order",type:"number",default:3},{name:"extent",type:"number",array:!0,length:2},{name:"params",type:"boolean",default:!1},{name:"as",type:"string",array:!0}]},ut(dD,co,{transform(t,e){const r=e.fork(e.NO_SOURCE|e.NO_FIELDS);if(!this.value||e.changed()||t.modified()){const i=cD(e.materialize(e.SOURCE).source,t.groupby),a=(t.groupby||[]).map(n),o=t.method||"linear",s=t.order||3,l=((t,e)=>"poly"===t?e:"quad"===t?2:1)(o,s),c=t.as||[n(t.x),n(t.y)],f=hD[o],h=[];let d=t.extent;rt(hD,o)||u("Invalid regression method: "+o),null!=d&&"log"===o&&d[0]<=0&&(e.dataflow.warn("Ignoring extent with values <= 0 for log regression."),d=null),i.forEach(n=>{if(n.length<=l)return void e.dataflow.warn("Skipping regression with more parameters than data points.");const r=f(n,t.x,t.y,s);if(t.params)return void h.push(Rt({keys:n.dims,coef:r.coef,rSquared:r.rSquared}));const i=d||tt(n,t.x),u=t=>{const e={};for(let t=0;t<a.length;++t)e[a[t]]=n.dims[t];e[c[0]]=t[0],e[c[1]]=t[1],h.push(Rt(e))};"linear"===o?i.forEach(t=>u([t,r.predict(t)])):mu(r.predict,i,25,200).forEach(u)}),this.value&&(r.rem=this.value),this.value=r.add=r.source=h}return r}});var pD=Object.freeze({__proto__:null,loess:fD,regression:dD});const gD=Math.pow(2,-52),mD=new Uint32Array(512);class yD{static from(t,e=MD,n=ED){const r=t.length,i=new Float64Array(2*r);for(let a=0;a<r;a++){const r=t[a];i[2*a]=e(r),i[2*a+1]=n(r)}return new yD(i)}constructor(t){const e=t.length>>1;if(e>0&&"number"!=typeof t[0])throw new Error("Expected coords to contain numbers.");this.coords=t;const n=Math.max(2*e-5,0);this._triangles=new Uint32Array(3*n),this._halfedges=new Int32Array(3*n),this._hashSize=Math.ceil(Math.sqrt(e)),this._hullPrev=new Uint32Array(e),this._hullNext=new Uint32Array(e),this._hullTri=new Uint32Array(e),this._hullHash=new Int32Array(this._hashSize).fill(-1),this._ids=new Uint32Array(e),this._dists=new Float64Array(e),this.update()}update(){const{coords:t,_hullPrev:e,_hullNext:n,_hullTri:r,_hullHash:i}=this,a=t.length>>1;let o=1/0,u=1/0,s=-1/0,l=-1/0;for(let e=0;e<a;e++){const n=t[2*e],r=t[2*e+1];n<o&&(o=n),r<u&&(u=r),n>s&&(s=n),r>l&&(l=r),this._ids[e]=e}const c=(o+s)/2,f=(u+l)/2;let h,d,p,g=1/0;for(let e=0;e<a;e++){const n=vD(c,f,t[2*e],t[2*e+1]);n<g&&(h=e,g=n)}const m=t[2*h],y=t[2*h+1];g=1/0;for(let e=0;e<a;e++){if(e===h)continue;const n=vD(m,y,t[2*e],t[2*e+1]);n<g&&n>0&&(d=e,g=n)}let v=t[2*d],_=t[2*d+1],x=1/0;for(let e=0;e<a;e++){if(e===h||e===d)continue;const n=wD(m,y,v,_,t[2*e],t[2*e+1]);n<x&&(p=e,x=n)}let b=t[2*p],w=t[2*p+1];if(x===1/0){for(let e=0;e<a;e++)this._dists[e]=t[2*e]-t[0]||t[2*e+1]-t[1];kD(this._ids,this._dists,0,a-1);const e=new Uint32Array(a);let n=0;for(let t=0,r=-1/0;t<a;t++){const i=this._ids[t];this._dists[i]>r&&(e[n++]=i,r=this._dists[i])}return this.hull=e.subarray(0,n),this.triangles=new Uint32Array(0),void(this.halfedges=new Uint32Array(0))}if(xD(m,y,v,_,b,w)){const t=d,e=v,n=_;d=p,v=b,_=w,p=t,b=e,w=n}const k=function(t,e,n,r,i,a){const o=n-t,u=r-e,s=i-t,l=a-e,c=o*o+u*u,f=s*s+l*l,h=.5/(o*l-u*s);return{x:t+(l*c-u*f)*h,y:e+(o*f-s*c)*h}}(m,y,v,_,b,w);this._cx=k.x,this._cy=k.y;for(let e=0;e<a;e++)this._dists[e]=vD(t[2*e],t[2*e+1],k.x,k.y);kD(this._ids,this._dists,0,a-1),this._hullStart=h;let A=3;n[h]=e[p]=d,n[d]=e[h]=p,n[p]=e[d]=h,r[h]=0,r[d]=1,r[p]=2,i.fill(-1),i[this._hashKey(m,y)]=h,i[this._hashKey(v,_)]=d,i[this._hashKey(b,w)]=p,this.trianglesLen=0,this._addTriangle(h,d,p,-1,-1,-1);for(let a,o,u=0;u<this._ids.length;u++){const s=this._ids[u],l=t[2*s],c=t[2*s+1];if(u>0&&Math.abs(l-a)<=gD&&Math.abs(c-o)<=gD)continue;if(a=l,o=c,s===h||s===d||s===p)continue;let f=0;for(let t=0,e=this._hashKey(l,c);t<this._hashSize&&(f=i[(e+t)%this._hashSize],-1===f||f===n[f]);t++);f=e[f];let g,m=f;for(;g=n[m],!xD(l,c,t[2*m],t[2*m+1],t[2*g],t[2*g+1]);)if(m=g,m===f){m=-1;break}if(-1===m)continue;let y=this._addTriangle(m,s,n[m],-1,-1,r[m]);r[s]=this._legalize(y+2),r[m]=y,A++;let v=n[m];for(;g=n[v],xD(l,c,t[2*v],t[2*v+1],t[2*g],t[2*g+1]);)y=this._addTriangle(v,s,g,r[s],-1,r[v]),r[s]=this._legalize(y+2),n[v]=v,A--,v=g;if(m===f)for(;g=e[m],xD(l,c,t[2*g],t[2*g+1],t[2*m],t[2*m+1]);)y=this._addTriangle(g,s,m,-1,r[m],r[g]),this._legalize(y+2),r[g]=y,n[m]=m,A--,m=g;this._hullStart=e[s]=m,n[m]=e[v]=s,n[s]=v,i[this._hashKey(l,c)]=s,i[this._hashKey(t[2*m],t[2*m+1])]=m}this.hull=new Uint32Array(A);for(let t=0,e=this._hullStart;t<A;t++)this.hull[t]=e,e=n[e];this.triangles=this._triangles.subarray(0,this.trianglesLen),this.halfedges=this._halfedges.subarray(0,this.trianglesLen)}_hashKey(t,e){return Math.floor(function(t,e){const n=t/(Math.abs(t)+Math.abs(e));return(e>0?3-n:1+n)/4}(t-this._cx,e-this._cy)*this._hashSize)%this._hashSize}_legalize(t){const{_triangles:e,_halfedges:n,coords:r}=this;let i=0,a=0;for(;;){const o=n[t],u=t-t%3;if(a=u+(t+2)%3,-1===o){if(0===i)break;t=mD[--i];continue}const s=o-o%3,l=u+(t+1)%3,c=s+(o+2)%3,f=e[a],h=e[t],d=e[l],p=e[c];if(bD(r[2*f],r[2*f+1],r[2*h],r[2*h+1],r[2*d],r[2*d+1],r[2*p],r[2*p+1])){e[t]=p,e[o]=f;const r=n[c];if(-1===r){let e=this._hullStart;do{if(this._hullTri[e]===c){this._hullTri[e]=t;break}e=this._hullPrev[e]}while(e!==this._hullStart)}this._link(t,r),this._link(o,n[a]),this._link(a,c);const u=s+(o+1)%3;i<mD.length&&(mD[i++]=u)}else{if(0===i)break;t=mD[--i]}}return a}_link(t,e){this._halfedges[t]=e,-1!==e&&(this._halfedges[e]=t)}_addTriangle(t,e,n,r,i,a){const o=this.trianglesLen;return this._triangles[o]=t,this._triangles[o+1]=e,this._triangles[o+2]=n,this._link(o,r),this._link(o+1,i),this._link(o+2,a),this.trianglesLen+=3,o}}function vD(t,e,n,r){const i=t-n,a=e-r;return i*i+a*a}function _D(t,e,n,r,i,a){const o=(r-e)*(i-t),u=(n-t)*(a-e);return Math.abs(o-u)>=33306690738754716e-32*Math.abs(o+u)?o-u:0}function xD(t,e,n,r,i,a){return(_D(i,a,t,e,n,r)||_D(t,e,n,r,i,a)||_D(n,r,i,a,t,e))<0}function bD(t,e,n,r,i,a,o,u){const s=t-o,l=e-u,c=n-o,f=r-u,h=i-o,d=a-u,p=c*c+f*f,g=h*h+d*d;return s*(f*g-p*d)-l*(c*g-p*h)+(s*s+l*l)*(c*d-f*h)<0}function wD(t,e,n,r,i,a){const o=n-t,u=r-e,s=i-t,l=a-e,c=o*o+u*u,f=s*s+l*l,h=.5/(o*l-u*s),d=(l*c-u*f)*h,p=(o*f-s*c)*h;return d*d+p*p}function kD(t,e,n,r){if(r-n<=20)for(let i=n+1;i<=r;i++){const r=t[i],a=e[r];let o=i-1;for(;o>=n&&e[t[o]]>a;)t[o+1]=t[o--];t[o+1]=r}else{let i=n+1,a=r;AD(t,n+r>>1,i),e[t[n]]>e[t[r]]&&AD(t,n,r),e[t[i]]>e[t[r]]&&AD(t,i,r),e[t[n]]>e[t[i]]&&AD(t,n,i);const o=t[i],u=e[o];for(;;){do{i++}while(e[t[i]]<u);do{a--}while(e[t[a]]>u);if(a<i)break;AD(t,i,a)}t[n+1]=t[a],t[a]=o,r-i+1>=a-n?(kD(t,e,i,r),kD(t,e,n,a-1)):(kD(t,e,n,a-1),kD(t,e,i,r))}}function AD(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function MD(t){return t[0]}function ED(t){return t[1]}const DD=1e-6;class CD{constructor(){this._x0=this._y0=this._x1=this._y1=null,this._=""}moveTo(t,e){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")}lineTo(t,e){this._+=`L${this._x1=+t},${this._y1=+e}`}arc(t,e,n){const r=(t=+t)+(n=+n),i=e=+e;if(n<0)throw new Error("negative radius");null===this._x1?this._+=`M${r},${i}`:(Math.abs(this._x1-r)>DD||Math.abs(this._y1-i)>DD)&&(this._+="L"+r+","+i),n&&(this._+=`A${n},${n},0,1,1,${t-n},${e}A${n},${n},0,1,1,${this._x1=r},${this._y1=i}`)}rect(t,e,n,r){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}h${+n}v${+r}h${-n}Z`}value(){return this._||null}}class FD{constructor(){this._=[]}moveTo(t,e){this._.push([t,e])}closePath(){this._.push(this._[0].slice())}lineTo(t,e){this._.push([t,e])}value(){return this._.length?this._:null}}class SD{constructor(t,[e,n,r,i]=[0,0,960,500]){if(!((r=+r)>=(e=+e)&&(i=+i)>=(n=+n)))throw new Error("invalid bounds");this.delaunay=t,this._circumcenters=new Float64Array(2*t.points.length),this.vectors=new Float64Array(2*t.points.length),this.xmax=r,this.xmin=e,this.ymax=i,this.ymin=n,this._init()}update(){return this.delaunay.update(),this._init(),this}_init(){const{delaunay:{points:t,hull:e,triangles:n},vectors:r}=this,i=this.circumcenters=this._circumcenters.subarray(0,n.length/3*2);for(let e,r,a=0,o=0,u=n.length;a<u;a+=3,o+=2){const u=2*n[a],s=2*n[a+1],l=2*n[a+2],c=t[u],f=t[u+1],h=t[s],d=t[s+1],p=t[l],g=t[l+1],m=h-c,y=d-f,v=p-c,_=g-f,x=m*m+y*y,b=v*v+_*_,w=2*(m*_-y*v);if(w)if(Math.abs(w)<1e-8)e=(c+p)/2,r=(f+g)/2;else{const t=1/w;e=c+(_*x-y*b)*t,r=f+(m*b-v*x)*t}else e=(c+p)/2-1e8*_,r=(f+g)/2+1e8*v;i[o]=e,i[o+1]=r}let a,o,u,s=e[e.length-1],l=4*s,c=t[2*s],f=t[2*s+1];r.fill(0);for(let n=0;n<e.length;++n)s=e[n],a=l,o=c,u=f,l=4*s,c=t[2*s],f=t[2*s+1],r[a+2]=r[l]=u-f,r[a+3]=r[l+1]=c-o}render(t){const e=null==t?t=new CD:void 0,{delaunay:{halfedges:n,inedges:r,hull:i},circumcenters:a,vectors:o}=this;if(i.length<=1)return null;for(let e=0,r=n.length;e<r;++e){const r=n[e];if(r<e)continue;const i=2*Math.floor(e/3),o=2*Math.floor(r/3),u=a[i],s=a[i+1],l=a[o],c=a[o+1];this._renderSegment(u,s,l,c,t)}let u,s=i[i.length-1];for(let e=0;e<i.length;++e){u=s,s=i[e];const n=2*Math.floor(r[s]/3),l=a[n],c=a[n+1],f=4*u,h=this._project(l,c,o[f+2],o[f+3]);h&&this._renderSegment(l,c,h[0],h[1],t)}return e&&e.value()}renderBounds(t){const e=null==t?t=new CD:void 0;return t.rect(this.xmin,this.ymin,this.xmax-this.xmin,this.ymax-this.ymin),e&&e.value()}renderCell(t,e){const n=null==e?e=new CD:void 0,r=this._clip(t);if(null===r||!r.length)return;e.moveTo(r[0],r[1]);let i=r.length;for(;r[0]===r[i-2]&&r[1]===r[i-1]&&i>1;)i-=2;for(let t=2;t<i;t+=2)r[t]===r[t-2]&&r[t+1]===r[t-1]||e.lineTo(r[t],r[t+1]);return e.closePath(),n&&n.value()}*cellPolygons(){const{delaunay:{points:t}}=this;for(let e=0,n=t.length/2;e<n;++e){const t=this.cellPolygon(e);t&&(t.index=e,yield t)}}cellPolygon(t){const e=new FD;return this.renderCell(t,e),e.value()}_renderSegment(t,e,n,r,i){let a;const o=this._regioncode(t,e),u=this._regioncode(n,r);0===o&&0===u?(i.moveTo(t,e),i.lineTo(n,r)):(a=this._clipSegment(t,e,n,r,o,u))&&(i.moveTo(a[0],a[1]),i.lineTo(a[2],a[3]))}contains(t,e,n){return(e=+e)==e&&(n=+n)==n&&this.delaunay._step(t,e,n)===t}*neighbors(t){const e=this._clip(t);if(e)for(const n of this.delaunay.neighbors(t)){const t=this._clip(n);if(t)t:for(let r=0,i=e.length;r<i;r+=2)for(let a=0,o=t.length;a<o;a+=2)if(e[r]==t[a]&&e[r+1]==t[a+1]&&e[(r+2)%i]==t[(a+o-2)%o]&&e[(r+3)%i]==t[(a+o-1)%o]){yield n;break t}}}_cell(t){const{circumcenters:e,delaunay:{inedges:n,halfedges:r,triangles:i}}=this,a=n[t];if(-1===a)return null;const o=[];let u=a;do{const n=Math.floor(u/3);if(o.push(e[2*n],e[2*n+1]),u=u%3==2?u-2:u+1,i[u]!==t)break;u=r[u]}while(u!==a&&-1!==u);return o}_clip(t){if(0===t&&1===this.delaunay.hull.length)return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];const e=this._cell(t);if(null===e)return null;const{vectors:n}=this,r=4*t;return n[r]||n[r+1]?this._clipInfinite(t,e,n[r],n[r+1],n[r+2],n[r+3]):this._clipFinite(t,e)}_clipFinite(t,e){const n=e.length;let r,i,a,o,u,s=null,l=e[n-2],c=e[n-1],f=this._regioncode(l,c);for(let h=0;h<n;h+=2)if(r=l,i=c,l=e[h],c=e[h+1],a=f,f=this._regioncode(l,c),0===a&&0===f)o=u,u=0,s?s.push(l,c):s=[l,c];else{let e,n,h,d,p;if(0===a){if(null===(e=this._clipSegment(r,i,l,c,a,f)))continue;[n,h,d,p]=e}else{if(null===(e=this._clipSegment(l,c,r,i,f,a)))continue;[d,p,n,h]=e,o=u,u=this._edgecode(n,h),o&&u&&this._edge(t,o,u,s,s.length),s?s.push(n,h):s=[n,h]}o=u,u=this._edgecode(d,p),o&&u&&this._edge(t,o,u,s,s.length),s?s.push(d,p):s=[d,p]}if(s)o=u,u=this._edgecode(s[0],s[1]),o&&u&&this._edge(t,o,u,s,s.length);else if(this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2))return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];return s}_clipSegment(t,e,n,r,i,a){for(;;){if(0===i&&0===a)return[t,e,n,r];if(i&a)return null;let o,u,s=i||a;8&s?(o=t+(n-t)*(this.ymax-e)/(r-e),u=this.ymax):4&s?(o=t+(n-t)*(this.ymin-e)/(r-e),u=this.ymin):2&s?(u=e+(r-e)*(this.xmax-t)/(n-t),o=this.xmax):(u=e+(r-e)*(this.xmin-t)/(n-t),o=this.xmin),i?(t=o,e=u,i=this._regioncode(t,e)):(n=o,r=u,a=this._regioncode(n,r))}}_clipInfinite(t,e,n,r,i,a){let o,u=Array.from(e);if((o=this._project(u[0],u[1],n,r))&&u.unshift(o[0],o[1]),(o=this._project(u[u.length-2],u[u.length-1],i,a))&&u.push(o[0],o[1]),u=this._clipFinite(t,u))for(let e,n=0,r=u.length,i=this._edgecode(u[r-2],u[r-1]);n<r;n+=2)e=i,i=this._edgecode(u[n],u[n+1]),e&&i&&(n=this._edge(t,e,i,u,n),r=u.length);else this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2)&&(u=[this.xmin,this.ymin,this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax]);return u}_edge(t,e,n,r,i){for(;e!==n;){let n,a;switch(e){case 5:e=4;continue;case 4:e=6,n=this.xmax,a=this.ymin;break;case 6:e=2;continue;case 2:e=10,n=this.xmax,a=this.ymax;break;case 10:e=8;continue;case 8:e=9,n=this.xmin,a=this.ymax;break;case 9:e=1;continue;case 1:e=5,n=this.xmin,a=this.ymin}r[i]===n&&r[i+1]===a||!this.contains(t,n,a)||(r.splice(i,0,n,a),i+=2)}if(r.length>4)for(let t=0;t<r.length;t+=2){const e=(t+2)%r.length,n=(t+4)%r.length;(r[t]===r[e]&&r[e]===r[n]||r[t+1]===r[e+1]&&r[e+1]===r[n+1])&&(r.splice(e,2),t-=2)}return i}_project(t,e,n,r){let i,a,o,u=1/0;if(r<0){if(e<=this.ymin)return null;(i=(this.ymin-e)/r)<u&&(o=this.ymin,a=t+(u=i)*n)}else if(r>0){if(e>=this.ymax)return null;(i=(this.ymax-e)/r)<u&&(o=this.ymax,a=t+(u=i)*n)}if(n>0){if(t>=this.xmax)return null;(i=(this.xmax-t)/n)<u&&(a=this.xmax,o=e+(u=i)*r)}else if(n<0){if(t<=this.xmin)return null;(i=(this.xmin-t)/n)<u&&(a=this.xmin,o=e+(u=i)*r)}return[a,o]}_edgecode(t,e){return(t===this.xmin?1:t===this.xmax?2:0)|(e===this.ymin?4:e===this.ymax?8:0)}_regioncode(t,e){return(t<this.xmin?1:t>this.xmax?2:0)|(e<this.ymin?4:e>this.ymax?8:0)}}const BD=2*Math.PI,TD=Math.pow;function zD(t){return t[0]}function ND(t){return t[1]}function OD(t,e,n){return[t+Math.sin(t+e)*n,e+Math.cos(t-e)*n]}class RD{static from(t,e=zD,n=ND,r){return new RD("length"in t?function(t,e,n,r){const i=t.length,a=new Float64Array(2*i);for(let o=0;o<i;++o){const i=t[o];a[2*o]=e.call(r,i,o,t),a[2*o+1]=n.call(r,i,o,t)}return a}(t,e,n,r):Float64Array.from(function*(t,e,n,r){let i=0;for(const a of t)yield e.call(r,a,i,t),yield n.call(r,a,i,t),++i}(t,e,n,r)))}constructor(t){this._delaunator=new yD(t),this.inedges=new Int32Array(t.length/2),this._hullIndex=new Int32Array(t.length/2),this.points=this._delaunator.coords,this._init()}update(){return this._delaunator.update(),this._init(),this}_init(){const t=this._delaunator,e=this.points;if(t.hull&&t.hull.length>2&&function(t){const{triangles:e,coords:n}=t;for(let t=0;t<e.length;t+=3){const r=2*e[t],i=2*e[t+1],a=2*e[t+2];if((n[a]-n[r])*(n[i+1]-n[r+1])-(n[i]-n[r])*(n[a+1]-n[r+1])>1e-10)return!1}return!0}(t)){this.collinear=Int32Array.from({length:e.length/2},(t,e)=>e).sort((t,n)=>e[2*t]-e[2*n]||e[2*t+1]-e[2*n+1]);const t=this.collinear[0],n=this.collinear[this.collinear.length-1],r=[e[2*t],e[2*t+1],e[2*n],e[2*n+1]],i=1e-8*Math.hypot(r[3]-r[1],r[2]-r[0]);for(let t=0,n=e.length/2;t<n;++t){const n=OD(e[2*t],e[2*t+1],i);e[2*t]=n[0],e[2*t+1]=n[1]}this._delaunator=new yD(e)}else delete this.collinear;const n=this.halfedges=this._delaunator.halfedges,r=this.hull=this._delaunator.hull,i=this.triangles=this._delaunator.triangles,a=this.inedges.fill(-1),o=this._hullIndex.fill(-1);for(let t=0,e=n.length;t<e;++t){const e=i[t%3==2?t-2:t+1];-1!==n[t]&&-1!==a[e]||(a[e]=t)}for(let t=0,e=r.length;t<e;++t)o[r[t]]=t;r.length<=2&&r.length>0&&(this.triangles=new Int32Array(3).fill(-1),this.halfedges=new Int32Array(3).fill(-1),this.triangles[0]=r[0],this.triangles[1]=r[1],this.triangles[2]=r[1],a[r[0]]=1,2===r.length&&(a[r[1]]=0))}voronoi(t){return new SD(this,t)}*neighbors(t){const{inedges:e,hull:n,_hullIndex:r,halfedges:i,triangles:a,collinear:o}=this;if(o){const e=o.indexOf(t);return e>0&&(yield o[e-1]),void(e<o.length-1&&(yield o[e+1]))}const u=e[t];if(-1===u)return;let s=u,l=-1;do{if(yield l=a[s],s=s%3==2?s-2:s+1,a[s]!==t)return;if(s=i[s],-1===s){const e=n[(r[t]+1)%n.length];return void(e!==l&&(yield e))}}while(s!==u)}find(t,e,n=0){if((t=+t)!=t||(e=+e)!=e)return-1;const r=n;let i;for(;(i=this._step(n,t,e))>=0&&i!==n&&i!==r;)n=i;return i}_step(t,e,n){const{inedges:r,hull:i,_hullIndex:a,halfedges:o,triangles:u,points:s}=this;if(-1===r[t]||!s.length)return(t+1)%(s.length>>1);let l=t,c=TD(e-s[2*t],2)+TD(n-s[2*t+1],2);const f=r[t];let h=f;do{let r=u[h];const f=TD(e-s[2*r],2)+TD(n-s[2*r+1],2);if(f<c&&(c=f,l=r),h=h%3==2?h-2:h+1,u[h]!==t)break;if(h=o[h],-1===h){if(h=i[(a[t]+1)%i.length],h!==r&&TD(e-s[2*h],2)+TD(n-s[2*h+1],2)<c)return h;break}}while(h!==f);return l}render(t){const e=null==t?t=new CD:void 0,{points:n,halfedges:r,triangles:i}=this;for(let e=0,a=r.length;e<a;++e){const a=r[e];if(a<e)continue;const o=2*i[e],u=2*i[a];t.moveTo(n[o],n[o+1]),t.lineTo(n[u],n[u+1])}return this.renderHull(t),e&&e.value()}renderPoints(t,e=2){const n=null==t?t=new CD:void 0,{points:r}=this;for(let n=0,i=r.length;n<i;n+=2){const i=r[n],a=r[n+1];t.moveTo(i+e,a),t.arc(i,a,e,0,BD)}return n&&n.value()}renderHull(t){const e=null==t?t=new CD:void 0,{hull:n,points:r}=this,i=2*n[0],a=n.length;t.moveTo(r[i],r[i+1]);for(let e=1;e<a;++e){const i=2*n[e];t.lineTo(r[i],r[i+1])}return t.closePath(),e&&e.value()}hullPolygon(){const t=new FD;return this.renderHull(t),t.value()}renderTriangle(t,e){const n=null==e?e=new CD:void 0,{points:r,triangles:i}=this,a=2*i[t*=3],o=2*i[t+1],u=2*i[t+2];return e.moveTo(r[a],r[a+1]),e.lineTo(r[o],r[o+1]),e.lineTo(r[u],r[u+1]),e.closePath(),n&&n.value()}*trianglePolygons(){const{triangles:t}=this;for(let e=0,n=t.length/3;e<n;++e)yield this.trianglePolygon(e)}trianglePolygon(t){const e=new FD;return this.renderTriangle(t,e),e.value()}}function $D(t){co.call(this,null,t)}$D.Definition={type:"Voronoi",metadata:{modifies:!0},params:[{name:"x",type:"field",required:!0},{name:"y",type:"field",required:!0},{name:"size",type:"number",array:!0,length:2},{name:"extent",type:"array",array:!0,length:2,default:[[-1e5,-1e5],[1e5,1e5]],content:{type:"number",array:!0,length:2}},{name:"as",type:"string",default:"path"}]};const qD=[-1e5,-1e5,1e5,1e5];function LD(t){const e=t[0][0],n=t[0][1];let r=t.length-1;for(;t[r][0]===e&&t[r][1]===n;--r);return"M"+t.slice(0,r+1).join("L")+"Z"}ut($D,co,{transform(t,e){const n=t.as||"path",r=e.source;if(!r||!r.length)return e;let i=t.size;i=i?[0,0,i[0],i[1]]:(i=t.extent)?[i[0][0],i[0][1],i[1][0],i[1][1]]:qD;const a=this.value=RD.from(r,t.x,t.y).voronoi(i);for(let t=0,e=r.length;t<e;++t){const e=a.cellPolygon(t);r[t][n]=e?LD(e):null}return e.reflow(t.modified()).modifies(n)}});var UD=Object.freeze({__proto__:null,voronoi:$D}),PD=Math.PI/180,jD=2048;function ID(){var t,e,n,r,i,a,o,u=[256,256],s=GD,l=[],c=Math.random,f={};function h(t,e,n){for(var r,i,a,o=e.x,l=e.y,f=Math.sqrt(u[0]*u[0]+u[1]*u[1]),h=s(u),d=c()<.5?1:-1,p=-d;(r=h(p+=d))&&(i=~~r[0],a=~~r[1],!(Math.min(Math.abs(i),Math.abs(a))>=f));)if(e.x=o+i,e.y=l+a,!(e.x+e.x0<0||e.y+e.y0<0||e.x+e.x1>u[0]||e.y+e.y1>u[1])&&(!n||!HD(e,t,u[0]))&&(!n||VD(e,n))){for(var g,m=e.sprite,y=e.width>>5,v=u[0]>>5,_=e.x-(y<<4),x=127&_,b=32-x,w=e.y1-e.y0,k=(e.y+e.y0)*v+(_>>5),A=0;A<w;A++){g=0;for(var M=0;M<=y;M++)t[k+M]|=g<<b|(M<y?(g=m[A*y+M])>>>x:0);k+=v}return e.sprite=null,!0}return!1}return f.layout=function(){for(var s=function(t){t.width=t.height=1;var e=Math.sqrt(t.getContext("2d").getImageData(0,0,1,1).data.length>>2);t.width=2048/e,t.height=jD/e;var n=t.getContext("2d");return n.fillStyle=n.strokeStyle="red",n.textAlign="center",{context:n,ratio:e}}(bf()),f=function(t){var e=[],n=-1;for(;++n<t;)e[n]=0;return e}((u[0]>>5)*u[1]),d=null,p=l.length,g=-1,m=[],y=l.map(u=>({text:t(u),font:e(u),style:r(u),weight:i(u),rotate:a(u),size:~~(n(u)+1e-14),padding:o(u),xoff:0,yoff:0,x1:0,y1:0,x0:0,y0:0,hasText:!1,sprite:null,datum:u})).sort((t,e)=>e.size-t.size);++g<p;){var v=y[g];v.x=u[0]*(c()+.5)>>1,v.y=u[1]*(c()+.5)>>1,WD(s,v,y,g),v.hasText&&h(f,v,d)&&(m.push(v),d?YD(d,v):d=[{x:v.x+v.x0,y:v.y+v.y0},{x:v.x+v.x1,y:v.y+v.y1}],v.x-=u[0]>>1,v.y-=u[1]>>1)}return m},f.words=function(t){return arguments.length?(l=t,f):l},f.size=function(t){return arguments.length?(u=[+t[0],+t[1]],f):u},f.font=function(t){return arguments.length?(e=XD(t),f):e},f.fontStyle=function(t){return arguments.length?(r=XD(t),f):r},f.fontWeight=function(t){return arguments.length?(i=XD(t),f):i},f.rotate=function(t){return arguments.length?(a=XD(t),f):a},f.text=function(e){return arguments.length?(t=XD(e),f):t},f.spiral=function(t){return arguments.length?(s=JD[t]||t,f):s},f.fontSize=function(t){return arguments.length?(n=XD(t),f):n},f.padding=function(t){return arguments.length?(o=XD(t),f):o},f.random=function(t){return arguments.length?(c=t,f):c},f}function WD(t,e,n,r){if(!e.sprite){var i=t.context,a=t.ratio;i.clearRect(0,0,2048/a,jD/a);var o,u,s,l,c,f=0,h=0,d=0,p=n.length;for(--r;++r<p;){if(e=n[r],i.save(),i.font=e.style+" "+e.weight+" "+~~((e.size+1)/a)+"px "+e.font,o=i.measureText(e.text+"m").width*a,s=e.size<<1,e.rotate){var g=Math.sin(e.rotate*PD),m=Math.cos(e.rotate*PD),y=o*m,v=o*g,_=s*m,x=s*g;o=Math.max(Math.abs(y+x),Math.abs(y-x))+31>>5<<5,s=~~Math.max(Math.abs(v+_),Math.abs(v-_))}else o=o+31>>5<<5;if(s>d&&(d=s),f+o>=2048&&(f=0,h+=d,d=0),h+s>=jD)break;i.translate((f+(o>>1))/a,(h+(s>>1))/a),e.rotate&&i.rotate(e.rotate*PD),i.fillText(e.text,0,0),e.padding&&(i.lineWidth=2*e.padding,i.strokeText(e.text,0,0)),i.restore(),e.width=o,e.height=s,e.xoff=f,e.yoff=h,e.x1=o>>1,e.y1=s>>1,e.x0=-e.x1,e.y0=-e.y1,e.hasText=!0,f+=o}for(var b=i.getImageData(0,0,2048/a,jD/a).data,w=[];--r>=0;)if((e=n[r]).hasText){for(u=(o=e.width)>>5,s=e.y1-e.y0,l=0;l<s*u;l++)w[l]=0;if(null==(f=e.xoff))return;h=e.yoff;var k=0,A=-1;for(c=0;c<s;c++){for(l=0;l<o;l++){var M=u*c+(l>>5),E=b[2048*(h+c)+(f+l)<<2]?1<<31-l%32:0;w[M]|=E,k|=E}k?A=c:(e.y0++,s--,c--,h++)}e.y1=e.y0+A,e.sprite=w.slice(0,(e.y1-e.y0)*u)}}}function HD(t,e,n){n>>=5;for(var r,i=t.sprite,a=t.width>>5,o=t.x-(a<<4),u=127&o,s=32-u,l=t.y1-t.y0,c=(t.y+t.y0)*n+(o>>5),f=0;f<l;f++){r=0;for(var h=0;h<=a;h++)if((r<<s|(h<a?(r=i[f*a+h])>>>u:0))&e[c+h])return!0;c+=n}return!1}function YD(t,e){var n=t[0],r=t[1];e.x+e.x0<n.x&&(n.x=e.x+e.x0),e.y+e.y0<n.y&&(n.y=e.y+e.y0),e.x+e.x1>r.x&&(r.x=e.x+e.x1),e.y+e.y1>r.y&&(r.y=e.y+e.y1)}function VD(t,e){return t.x+t.x1>e[0].x&&t.x+t.x0<e[1].x&&t.y+t.y1>e[0].y&&t.y+t.y0<e[1].y}function GD(t){var e=t[0]/t[1];return function(t){return[e*(t*=.1)*Math.cos(t),t*Math.sin(t)]}}function XD(t){return"function"==typeof t?t:function(){return t}}var JD={archimedean:GD,rectangular:function(t){var e=4*t[0]/t[1],n=0,r=0;return function(t){var i=t<0?-1:1;switch(Math.sqrt(1+4*i*t)-i&3){case 0:n+=e;break;case 1:r+=4;break;case 2:n-=e;break;default:r-=4}return[n,r]}}},ZD=["x","y","font","fontSize","fontStyle","fontWeight","angle"],QD=["text","font","rotate","fontSize","fontStyle","fontWeight"];function KD(t){co.call(this,ID(),t)}KD.Definition={type:"Wordcloud",metadata:{modifies:!0},params:[{name:"size",type:"number",array:!0,length:2},{name:"font",type:"string",expr:!0,default:"sans-serif"},{name:"fontStyle",type:"string",expr:!0,default:"normal"},{name:"fontWeight",type:"string",expr:!0,default:"normal"},{name:"fontSize",type:"number",expr:!0,default:14},{name:"fontSizeRange",type:"number",array:"nullable",default:[10,50]},{name:"rotate",type:"number",expr:!0,default:0},{name:"text",type:"field"},{name:"spiral",type:"string",values:["archimedean","rectangular"]},{name:"padding",type:"number",expr:!0},{name:"as",type:"string",array:!0,length:7,default:ZD}]},ut(KD,co,{transform(e,n){!e.size||e.size[0]&&e.size[1]||u("Wordcloud size dimensions must be non-zero.");const r=e.modified();if(!(r||n.changed(n.ADD_REM)||QD.some((function(t){var r=e[t];return H(r)&&n.modified(r.fields)}))))return;const i=n.materialize(n.SOURCE).source,a=this.value,o=e.as||ZD;let s,l=e.fontSize||14;if(H(l)?s=e.fontSizeRange:l=Z(l),s){const t=l,e=vy("sqrt")().domain(tt(i,t)).range(s);l=n=>e(t(n))}i.forEach(t=>{t[o[0]]=NaN,t[o[1]]=NaN,t[o[3]]=0});const c=a.words(i).text(e.text).size(e.size||[500,500]).padding(e.padding||1).spiral(e.spiral||"archimedean").rotate(e.rotate||0).font(e.font||"sans-serif").fontStyle(e.fontStyle||"normal").fontWeight(e.fontWeight||"normal").fontSize(l).random(t.random).layout(),f=a.size(),h=f[0]>>1,d=f[1]>>1,p=c.length;for(let t,e,n=0;n<p;++n)t=c[n],e=t.datum,e[o[0]]=t.x+h,e[o[1]]=t.y+d,e[o[2]]=t.font,e[o[3]]=t.size,e[o[4]]=t.style,e[o[5]]=t.weight,e[o[6]]=t.rotate;return n.reflow(r).modifies(o)}});var tC=Object.freeze({__proto__:null,wordcloud:KD});const eC=t=>new Uint8Array(t),nC=t=>new Uint16Array(t),rC=t=>new Uint32Array(t);function iC(t,e,n){const r=(e<257?eC:e<65537?nC:rC)(t);return n&&r.set(n),r}function aC(t,e,n){const r=1<<e;return{one:r,zero:~r,range:n.slice(),bisect:t.bisect,index:t.index,size:t.size,onAdd(t,e){const n=this,i=n.bisect(n.range,t.value),a=t.index,o=i[0],u=i[1],s=a.length;let l;for(l=0;l<o;++l)e[a[l]]|=r;for(l=u;l<s;++l)e[a[l]]|=r;return n}}}function oC(){let t=rC(0),e=[],n=0;return{insert:function(r,i,a){if(!i.length)return[];const o=n,u=i.length,s=rC(u);let l,c,f,h=Array(u);for(f=0;f<u;++f)h[f]=r(i[f]),s[f]=f;if(h=function(t,e){return t.sort.call(e,(e,n)=>{const r=t[e],i=t[n];return r<i?-1:r>i?1:0}),function(t,e){return Array.from(e,e=>t[e])}(t,e)}(h,s),o)l=e,c=t,e=Array(o+u),t=rC(o+u),function(t,e,n,r,i,a,o,u,s){let l,c=0,f=0;for(l=0;c<r&&f<o;++l)e[c]<i[f]?(u[l]=e[c],s[l]=n[c++]):(u[l]=i[f],s[l]=a[f++]+t);for(;c<r;++c,++l)u[l]=e[c],s[l]=n[c];for(;f<o;++f,++l)u[l]=i[f],s[l]=a[f]+t}(a,l,c,o,h,s,u,e,t);else{if(a>0)for(f=0;f<u;++f)s[f]+=a;e=h,t=s}return n=o+u,{index:s,value:h}},remove:function(r,i){const a=n;let o,u,s;for(u=0;!i[t[u]]&&u<a;++u);for(s=u;u<a;++u)i[o=t[u]]||(t[s]=o,e[s]=e[u],++s);n=a-r},bisect:function(t,r){let i;return r?i=r.length:(r=e,i=n),[Ie(r,t[0],0,i),je(r,t[1],0,i)]},reindex:function(e){for(let r=0,i=n;r<i;++r)t[r]=e[t[r]]},index:()=>t,size:()=>n}}function uC(t){co.call(this,function(){let t=8,e=[],n=rC(0),r=iC(0,t),i=iC(0,t);return{data:()=>e,seen:()=>n=function(t,e,n){return t.length>=e?t:((n=n||new t.constructor(e)).set(t),n)}(n,e.length),add(t){for(let n,r=0,i=e.length,a=t.length;r<a;++r)n=t[r],n._index=i++,e.push(n)},remove(t,n){const a=e.length,o=Array(a-t),u=e;let s,l,c;for(l=0;!n[l]&&l<a;++l)o[l]=e[l],u[l]=l;for(c=l;l<a;++l)s=e[l],n[l]?u[l]=-1:(u[l]=c,r[c]=r[l],i[c]=i[l],o[c]=s,s._index=c++),r[l]=0;return e=o,u},size:()=>e.length,curr:()=>r,prev:()=>i,reset:t=>i[t]=r[t],all:()=>t<257?255:t<65537?65535:4294967295,set(t,e){r[t]|=e},clear(t,e){r[t]&=~e},resize(e,n){(e>r.length||n>t)&&(t=Math.max(n,t),r=iC(e,t,r),i=iC(e,t))}}}(),t),this._indices=null,this._dims=null}function sC(t){co.call(this,null,t)}uC.Definition={type:"CrossFilter",metadata:{},params:[{name:"fields",type:"field",array:!0,required:!0},{name:"query",type:"array",array:!0,required:!0,content:{type:"number",array:!0,length:2}}]},ut(uC,co,{transform(t,e){return this._dims?t.modified("fields")||t.fields.some(t=>e.modified(t.fields))?this.reinit(t,e):this.eval(t,e):this.init(t,e)},init(t,e){const n=t.fields,r=t.query,i=this._indices={},a=this._dims=[],o=r.length;let u,s,l=0;for(;l<o;++l)u=n[l].fname,s=i[u]||(i[u]=oC()),a.push(aC(s,l,r[l]));return this.eval(t,e)},reinit(t,e){const n=e.materialize().fork(),r=t.fields,i=t.query,a=this._indices,o=this._dims,u=this.value,s=u.curr(),l=u.prev(),c=u.all(),f=n.rem=n.add,h=n.mod,d=i.length,p={};let g,m,y,v,_,x,b,w,k;if(l.set(s),e.rem.length&&(_=this.remove(t,e,n)),e.add.length&&u.add(e.add),e.mod.length)for(x={},v=e.mod,b=0,w=v.length;b<w;++b)x[v[b]._index]=1;for(b=0;b<d;++b)k=r[b],(!o[b]||t.modified("fields",b)||e.modified(k.fields))&&(y=k.fname,(g=p[y])||(a[y]=m=oC(),p[y]=g=m.insert(k,e.source,0)),o[b]=aC(m,b,i[b]).onAdd(g,s));for(b=0,w=u.data().length;b<w;++b)_[b]||(l[b]!==s[b]?f.push(b):x[b]&&s[b]!==c&&h.push(b));return u.mask=(1<<d)-1,n},eval(t,e){const n=e.materialize().fork(),r=this._dims.length;let i=0;return e.rem.length&&(this.remove(t,e,n),i|=(1<<r)-1),t.modified("query")&&!t.modified("fields")&&(i|=this.update(t,e,n)),e.add.length&&(this.insert(t,e,n),i|=(1<<r)-1),e.mod.length&&(this.modify(e,n),i|=(1<<r)-1),this.value.mask=i,n},insert(t,e,n){const r=e.add,i=this.value,a=this._dims,o=this._indices,u=t.fields,s={},l=n.add,c=i.size()+r.length,f=a.length;let h,d,p,g=i.size();i.resize(c,f),i.add(r);const m=i.curr(),y=i.prev(),v=i.all();for(h=0;h<f;++h)d=u[h].fname,p=s[d]||(s[d]=o[d].insert(u[h],r,g)),a[h].onAdd(p,m);for(;g<c;++g)y[g]=v,m[g]!==v&&l.push(g)},modify(t,e){const n=e.mod,r=this.value,i=r.curr(),a=r.all(),o=t.mod;let u,s,l;for(u=0,s=o.length;u<s;++u)l=o[u]._index,i[l]!==a&&n.push(l)},remove(t,e,n){const r=this._indices,i=this.value,a=i.curr(),o=i.prev(),u=i.all(),s={},l=n.rem,c=e.rem;let f,h,d,p;for(f=0,h=c.length;f<h;++f)d=c[f]._index,s[d]=1,o[d]=p=a[d],a[d]=u,p!==u&&l.push(d);for(d in r)r[d].remove(h,s);return this.reindex(e,h,s),s},reindex(t,e,n){const r=this._indices,i=this.value;t.runAfter(()=>{const t=i.remove(e,n);for(const e in r)r[e].reindex(t)})},update(t,e,n){const r=this._dims,i=t.query,a=e.stamp,o=r.length;let u,s,l=0;for(n.filters=0,s=0;s<o;++s)t.modified("query",s)&&(u=s,++l);if(1===l)l=r[u].one,this.incrementOne(r[u],i[u],n.add,n.rem);else for(s=0,l=0;s<o;++s)t.modified("query",s)&&(l|=r[s].one,this.incrementAll(r[s],i[s],a,n.add),n.rem=n.add);return l},incrementAll(t,e,n,r){const i=this.value,a=i.seen(),o=i.curr(),u=i.prev(),s=t.index(),l=t.bisect(t.range),c=t.bisect(e),f=c[0],h=c[1],d=l[0],p=l[1],g=t.one;let m,y,v;if(f<d)for(m=f,y=Math.min(d,h);m<y;++m)v=s[m],a[v]!==n&&(u[v]=o[v],a[v]=n,r.push(v)),o[v]^=g;else if(f>d)for(m=d,y=Math.min(f,p);m<y;++m)v=s[m],a[v]!==n&&(u[v]=o[v],a[v]=n,r.push(v)),o[v]^=g;if(h>p)for(m=Math.max(f,p),y=h;m<y;++m)v=s[m],a[v]!==n&&(u[v]=o[v],a[v]=n,r.push(v)),o[v]^=g;else if(h<p)for(m=Math.max(d,h),y=p;m<y;++m)v=s[m],a[v]!==n&&(u[v]=o[v],a[v]=n,r.push(v)),o[v]^=g;t.range=e.slice()},incrementOne(t,e,n,r){const i=this.value.curr(),a=t.index(),o=t.bisect(t.range),u=t.bisect(e),s=u[0],l=u[1],c=o[0],f=o[1],h=t.one;let d,p,g;if(s<c)for(d=s,p=Math.min(c,l);d<p;++d)g=a[d],i[g]^=h,n.push(g);else if(s>c)for(d=c,p=Math.min(s,f);d<p;++d)g=a[d],i[g]^=h,r.push(g);if(l>f)for(d=Math.max(s,f),p=l;d<p;++d)g=a[d],i[g]^=h,n.push(g);else if(l<f)for(d=Math.max(c,l),p=f;d<p;++d)g=a[d],i[g]^=h,r.push(g);t.range=e.slice()}}),sC.Definition={type:"ResolveFilter",metadata:{},params:[{name:"ignore",type:"number",required:!0,description:"A bit mask indicating which filters to ignore."},{name:"filter",type:"object",required:!0,description:"Per-tuple filter bitmaps from a CrossFilter transform."}]},ut(sC,co,{transform(t,e){const n=~(t.ignore||0),r=t.filter,i=r.mask;if(0==(i&n))return e.StopPropagation;const a=e.fork(e.ALL),o=r.data(),u=r.curr(),s=r.prev(),l=t=>u[t]&n?null:o[t];return a.filter(a.MOD,l),i&i-1?(a.filter(a.ADD,t=>{const e=u[t]&n;return!e&&e^s[t]&n?o[t]:null}),a.filter(a.REM,t=>{const e=u[t]&n;return e&&!(e^e^s[t]&n)?o[t]:null})):(a.filter(a.ADD,l),a.filter(a.REM,t=>(u[t]&n)===i?o[t]:null)),a.filter(a.SOURCE,t=>l(t._index))}});var lC=Object.freeze({__proto__:null,crossfilter:uC,resolvefilter:sC});function cC(t,e){t&&(null==e?t.removeAttribute("aria-label"):t.setAttribute("aria-label",e))}const fC="default";function hC(t,e){const n=t.globalCursor()?"undefined"!=typeof document&&document.body:t.container();if(n)return null==e?n.style.removeProperty("cursor"):n.style.cursor=e}function dC(t,e){var n=t._runtime.data;return rt(n,e)||u("Unrecognized data set: "+e),n[e]}function pC(t,e){Pt(e)||u("Second argument to changes must be a changeset.");var n=dC(this,t);return n.modified=!0,this.pulse(n.input,e)}function gC(t){var e=t.padding();return Math.max(0,t._viewWidth+e.left+e.right)}function mC(t){var e=t.padding();return Math.max(0,t._viewHeight+e.top+e.bottom)}function yC(t){var e=t.padding(),n=t._origin;return[e.left+n[0],e.top+n[1]]}function vC(t,e,n){var r,i,a=t._renderer,o=a&&a.canvas();return o&&(i=yC(t),(r=Fd(e.changedTouches?e.changedTouches[0]:e,o))[0]-=i[0],r[1]-=i[1]),e.dataflow=t,e.item=n,e.vega=function(t,e,n){var r=e?"group"===e.mark.marktype?e:e.mark.group:null;function i(t){var n,i=r;if(t)for(n=e;n;n=n.mark.group)if(n.mark.name===t){i=n;break}return i&&i.mark&&i.mark.interactive?i:{}}function a(t){if(!t)return n;dt(t)&&(t=i(t));for(var e=n.slice();t;)e[0]-=t.x||0,e[1]-=t.y||0,t=t.mark&&t.mark.group;return e}return{view:Z(t),item:Z(e||{}),group:i,xy:a,x:function(t){return a(t)[0]},y:function(t){return a(t)[1]}}}(t,n,r),e}const _C="view",xC={trap:!1};function bC(t,e,n){const r=t._eventConfig&&t._eventConfig[e];return!(!1===r||_(r)&&!r[n])||(t.warn(`Blocked ${e} ${n} event listener.`),!1)}function wC(t){return t.item}function kC(t){return t.item.mark.source}function AC(t){return function(e,n){return n.vega.view().changeset().encode(n.item,t)}}function MC(t,e,n){var r=document.createElement(t);for(var i in e)r.setAttribute(i,e[i]);return null!=n&&(r.textContent=n),r}const EC="vega-bind",DC="vega-bind-name";function CC(t,e,n){if(!e)return;const r=n.param;let i=n.state;return i||(i=n.state={elements:null,active:!1,set:null,update:e=>{e!==t.signal(r.signal)&&t.runAsync(null,()=>{i.source=!0,t.signal(r.signal,e)})}},r.debounce&&(i.update=Q(r.debounce,i.update))),function(t,e,n,r){const i=MC("div",{class:EC}),a="radio"===n.input?i:i.appendChild(MC("label"));a.appendChild(MC("span",{class:DC},n.name||n.signal)),e.appendChild(i);let o=FC;switch(n.input){case"checkbox":o=SC;break;case"select":o=BC;break;case"radio":o=TC;break;case"range":o=zC}o(t,a,n,r)}(i,e,r,t.signal(r.signal)),i.active||(t.on(t._signals[r.signal],null,()=>{i.source?i.source=!1:i.set(t.signal(r.signal))}),i.active=!0),i}function FC(t,e,n,r){const i=MC("input");for(const t in n)"signal"!==t&&"element"!==t&&i.setAttribute("input"===t?"type":t,n[t]);i.setAttribute("name",n.signal),i.value=r,e.appendChild(i),i.addEventListener("input",()=>t.update(i.value)),t.elements=[i],t.set=t=>i.value=t}function SC(t,e,n,r){const i={type:"checkbox",name:n.signal};r&&(i.checked=!0);const a=MC("input",i);e.appendChild(a),a.addEventListener("change",()=>t.update(a.checked)),t.elements=[a],t.set=t=>a.checked=!!t||null}function BC(t,e,n,r){const i=MC("select",{name:n.signal}),a=n.labels||[];n.options.forEach((t,e)=>{const n={value:t};NC(t,r)&&(n.selected=!0),i.appendChild(MC("option",n,(a[e]||t)+""))}),e.appendChild(i),i.addEventListener("change",()=>{t.update(n.options[i.selectedIndex])}),t.elements=[i],t.set=t=>{for(let e=0,r=n.options.length;e<r;++e)if(NC(n.options[e],t))return void(i.selectedIndex=e)}}function TC(t,e,n,r){const i=MC("span",{class:"vega-bind-radio"}),a=n.labels||[];e.appendChild(i),t.elements=n.options.map((e,o)=>{const u={type:"radio",name:n.signal,value:e};NC(e,r)&&(u.checked=!0);const s=MC("input",u);s.addEventListener("change",()=>t.update(e));const l=MC("label",{},(a[o]||e)+"");return l.prepend(s),i.appendChild(l),s}),t.set=e=>{const n=t.elements,r=n.length;for(let t=0;t<r;++t)NC(n[t].value,e)&&(n[t].checked=!0)}}function zC(t,e,n,r){r=void 0!==r?r:(+n.max+ +n.min)/2;const i=null!=n.max?n.max:Math.max(100,+r)||100,a=n.min||Math.min(0,i,+r)||0,o=n.step||Ze(a,i,100),u=MC("input",{type:"range",name:n.signal,min:a,max:i,step:o});u.value=r;const s=MC("span",{},+r);e.appendChild(u),e.appendChild(s);const l=()=>{s.textContent=u.value,t.update(+u.value)};u.addEventListener("input",l),u.addEventListener("change",l),t.elements=[u],t.set=t=>{u.value=t,s.textContent=t}}function NC(t,e){return t===e||t+""==e+""}function OC(t,e,n,r,i,a){return(e=e||new r(t.loader())).initialize(n,gC(t),mC(t),yC(t),i,a).background(t.background())}function RC(t,e){return e?function(){try{e.apply(this,arguments)}catch(e){t.error(e)}}:null}function $C(t,e){if("string"==typeof e){if("undefined"==typeof document)return t.error("DOM document instance not found."),null;if(!(e=document.querySelector(e)))return t.error("Signal bind element not found: "+e),null}if(e)try{e.innerHTML=""}catch(n){e=null,t.error(n)}return e}const qC=t=>+t||0;function LC(t){return _(t)?{top:qC(t.top),bottom:qC(t.bottom),left:qC(t.left),right:qC(t.right)}:(t=>({top:t,bottom:t,left:t,right:t}))(qC(t))}async function UC(t,e,n,r){const i=jv(e),a=i&&i.headless;return a||u("Unrecognized renderer type: "+e),await t.runAsync(),OC(t,null,null,a,n,r).renderAsync(t._scenegraph.root)}function PC(t){const e=this.context.data[t];return e?e.values.value:[]}const jC=t=>function(e,n){return this.context.dataflow.locale()[t](n)(e)},IC=jC("format"),WC=jC("timeFormat"),HC=jC("utcFormat"),YC=jC("timeParse"),VC=jC("utcParse"),GC=new Date(2e3,0,1);function XC(t,e,n){return Number.isInteger(t)&&Number.isInteger(e)?(GC.setYear(2e3),GC.setMonth(t),GC.setDate(e),WC.call(this,GC,n)):""}const JC="RawCode",ZC="Literal",QC="Property",KC="Identifier",tF="ArrayExpression",eF="BinaryExpression",nF="CallExpression",rF="ConditionalExpression",iF="LogicalExpression",aF="MemberExpression",oF="ObjectExpression",uF="UnaryExpression";function sF(t){this.type=t}var lF,cF,fF,hF,dF;sF.prototype.visit=function(t){let e,n,r;if(t(this))return 1;for(e=function(t){switch(t.type){case tF:return t.elements;case eF:case iF:return[t.left,t.right];case nF:return[t.callee].concat(t.arguments);case rF:return[t.test,t.consequent,t.alternate];case aF:return[t.object,t.property];case oF:return t.properties;case QC:return[t.key,t.value];case uF:return[t.argument];case KC:case ZC:case JC:default:return[]}}(this),n=0,r=e.length;n<r;++n)if(e[n].visit(t))return 1};(lF={})[1]="Boolean",lF[2]="<end>",lF[3]="Identifier",lF[4]="Keyword",lF[5]="Null",lF[6]="Numeric",lF[7]="Punctuator",lF[8]="String",lF[9]="RegularExpression";var pF="Identifier",gF="Unexpected token %0",mF="Invalid regular expression",yF="Invalid regular expression: missing /",vF="Octal literals are not allowed in strict mode.",_F="ILLEGAL",xF="Disabled.",bF=new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"),wF=new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]");function kF(t,e){if(!t)throw new Error("ASSERT: "+e)}function AF(t){return t>=48&&t<=57}function MF(t){return"0123456789abcdefABCDEF".indexOf(t)>=0}function EF(t){return"01234567".indexOf(t)>=0}function DF(t){return 32===t||9===t||11===t||12===t||160===t||t>=5760&&[5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(t)>=0}function CF(t){return 10===t||13===t||8232===t||8233===t}function FF(t){return 36===t||95===t||t>=65&&t<=90||t>=97&&t<=122||92===t||t>=128&&bF.test(String.fromCharCode(t))}function SF(t){return 36===t||95===t||t>=65&&t<=90||t>=97&&t<=122||t>=48&&t<=57||92===t||t>=128&&wF.test(String.fromCharCode(t))}var BF={if:1,in:1,do:1,var:1,for:1,new:1,try:1,let:1,this:1,else:1,case:1,void:1,with:1,enum:1,while:1,break:1,catch:1,throw:1,const:1,yield:1,class:1,super:1,return:1,typeof:1,delete:1,switch:1,export:1,import:1,public:1,static:1,default:1,finally:1,extends:1,package:1,private:1,function:1,continue:1,debugger:1,interface:1,protected:1,instanceof:1,implements:1};function TF(){for(var t;fF<hF&&(DF(t=cF.charCodeAt(fF))||CF(t));)++fF}function zF(t){var e,n,r,i=0;for(n="u"===t?4:2,e=0;e<n;++e)fF<hF&&MF(cF[fF])?(r=cF[fF++],i=16*i+"0123456789abcdef".indexOf(r.toLowerCase())):XF({},gF,_F);return String.fromCharCode(i)}function NF(){var t,e,n,r;for(e=0,"}"===(t=cF[fF])&&XF({},gF,_F);fF<hF&&MF(t=cF[fF++]);)e=16*e+"0123456789abcdef".indexOf(t.toLowerCase());return(e>1114111||"}"!==t)&&XF({},gF,_F),e<=65535?String.fromCharCode(e):(n=55296+(e-65536>>10),r=56320+(e-65536&1023),String.fromCharCode(n,r))}function OF(){var t,e;for(t=cF.charCodeAt(fF++),e=String.fromCharCode(t),92===t&&(117!==cF.charCodeAt(fF)&&XF({},gF,_F),++fF,(t=zF("u"))&&"\\"!==t&&FF(t.charCodeAt(0))||XF({},gF,_F),e=t);fF<hF&&SF(t=cF.charCodeAt(fF));)++fF,e+=String.fromCharCode(t),92===t&&(e=e.substr(0,e.length-1),117!==cF.charCodeAt(fF)&&XF({},gF,_F),++fF,(t=zF("u"))&&"\\"!==t&&SF(t.charCodeAt(0))||XF({},gF,_F),e+=t);return e}function RF(){var t,e;return t=fF,{type:1===(e=92===cF.charCodeAt(fF)?OF():function(){var t,e;for(t=fF++;fF<hF;){if(92===(e=cF.charCodeAt(fF)))return fF=t,OF();if(!SF(e))break;++fF}return cF.slice(t,fF)}()).length?3:BF.hasOwnProperty(e)?4:"null"===e?5:"true"===e||"false"===e?1:3,value:e,start:t,end:fF}}function $F(){var t,e,n,r,i=fF,a=cF.charCodeAt(fF),o=cF[fF];switch(a){case 46:case 40:case 41:case 59:case 44:case 123:case 125:case 91:case 93:case 58:case 63:case 126:return++fF,{type:7,value:String.fromCharCode(a),start:i,end:fF};default:if(61===(t=cF.charCodeAt(fF+1)))switch(a){case 43:case 45:case 47:case 60:case 62:case 94:case 124:case 37:case 38:case 42:return fF+=2,{type:7,value:String.fromCharCode(a)+String.fromCharCode(t),start:i,end:fF};case 33:case 61:return fF+=2,61===cF.charCodeAt(fF)&&++fF,{type:7,value:cF.slice(i,fF),start:i,end:fF}}}return">>>="===(r=cF.substr(fF,4))?{type:7,value:r,start:i,end:fF+=4}:">>>"===(n=r.substr(0,3))||"<<="===n||">>="===n?{type:7,value:n,start:i,end:fF+=3}:o===(e=n.substr(0,2))[1]&&"+-<>&|".indexOf(o)>=0||"=>"===e?{type:7,value:e,start:i,end:fF+=2}:"<>=!+-*%&|^/".indexOf(o)>=0?{type:7,value:o,start:i,end:++fF}:void XF({},gF,_F)}function qF(){var t,e,n;if(kF(AF((n=cF[fF]).charCodeAt(0))||"."===n,"Numeric literal must start with a decimal digit or a decimal point"),e=fF,t="","."!==n){if(t=cF[fF++],n=cF[fF],"0"===t){if("x"===n||"X"===n)return++fF,function(t){for(var e="";fF<hF&&MF(cF[fF]);)e+=cF[fF++];return 0===e.length&&XF({},gF,_F),FF(cF.charCodeAt(fF))&&XF({},gF,_F),{type:6,value:parseInt("0x"+e,16),start:t,end:fF}}(e);if(EF(n))return function(t){for(var e="0"+cF[fF++];fF<hF&&EF(cF[fF]);)e+=cF[fF++];return(FF(cF.charCodeAt(fF))||AF(cF.charCodeAt(fF)))&&XF({},gF,_F),{type:6,value:parseInt(e,8),octal:!0,start:t,end:fF}}(e);n&&AF(n.charCodeAt(0))&&XF({},gF,_F)}for(;AF(cF.charCodeAt(fF));)t+=cF[fF++];n=cF[fF]}if("."===n){for(t+=cF[fF++];AF(cF.charCodeAt(fF));)t+=cF[fF++];n=cF[fF]}if("e"===n||"E"===n)if(t+=cF[fF++],"+"!==(n=cF[fF])&&"-"!==n||(t+=cF[fF++]),AF(cF.charCodeAt(fF)))for(;AF(cF.charCodeAt(fF));)t+=cF[fF++];else XF({},gF,_F);return FF(cF.charCodeAt(fF))&&XF({},gF,_F),{type:6,value:parseFloat(t),start:e,end:fF}}function LF(){var t,e,n,r;return dF=null,TF(),t=fF,e=function(){var t,e,n,r;for(kF("/"===(t=cF[fF]),"Regular expression literal must start with a slash"),e=cF[fF++],n=!1,r=!1;fF<hF;)if(e+=t=cF[fF++],"\\"===t)CF((t=cF[fF++]).charCodeAt(0))&&XF({},yF),e+=t;else if(CF(t.charCodeAt(0)))XF({},yF);else if(n)"]"===t&&(n=!1);else{if("/"===t){r=!0;break}"["===t&&(n=!0)}return r||XF({},yF),{value:e.substr(1,e.length-2),literal:e}}(),n=function(){var t,e,n;for(e="",n="";fF<hF&&SF((t=cF[fF]).charCodeAt(0));)++fF,"\\"===t&&fF<hF?XF({},gF,_F):(n+=t,e+=t);return n.search(/[^gimuy]/g)>=0&&XF({},mF,n),{value:n,literal:e}}(),r=function(t,e){var n=t;e.indexOf("u")>=0&&(n=n.replace(/\\u\{([0-9a-fA-F]+)\}/g,(t,e)=>{if(parseInt(e,16)<=1114111)return"x";XF({},mF)}).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"x"));try{new RegExp(n)}catch(t){XF({},mF)}try{return new RegExp(t,e)}catch(t){return null}}(e.value,n.value),{literal:e.literal+n.literal,value:r,regex:{pattern:e.value,flags:n.value},start:t,end:fF}}function UF(){var t;return TF(),fF>=hF?{type:2,start:fF,end:fF}:FF(t=cF.charCodeAt(fF))?RF():40===t||41===t||59===t?$F():39===t||34===t?function(){var t,e,n,r,i="",a=!1;for(kF("'"===(t=cF[fF])||'"'===t,"String literal must starts with a quote"),e=fF,++fF;fF<hF;){if((n=cF[fF++])===t){t="";break}if("\\"===n)if((n=cF[fF++])&&CF(n.charCodeAt(0)))"\r"===n&&"\n"===cF[fF]&&++fF;else switch(n){case"u":case"x":"{"===cF[fF]?(++fF,i+=NF()):i+=zF(n);break;case"n":i+="\n";break;case"r":i+="\r";break;case"t":i+="\t";break;case"b":i+="\b";break;case"f":i+="\f";break;case"v":i+="\v";break;default:EF(n)?(0!==(r="01234567".indexOf(n))&&(a=!0),fF<hF&&EF(cF[fF])&&(a=!0,r=8*r+"01234567".indexOf(cF[fF++]),"0123".indexOf(n)>=0&&fF<hF&&EF(cF[fF])&&(r=8*r+"01234567".indexOf(cF[fF++]))),i+=String.fromCharCode(r)):i+=n}else{if(CF(n.charCodeAt(0)))break;i+=n}}return""!==t&&XF({},gF,_F),{type:8,value:i,octal:a,start:e,end:fF}}():46===t?AF(cF.charCodeAt(fF+1))?qF():$F():AF(t)?qF():$F()}function PF(){var t;return fF=(t=dF).end,dF=UF(),fF=t.end,t}function jF(){var t;t=fF,dF=UF(),fF=t}function IF(t,e,n){var r=new sF("||"===t||"&&"===t?"LogicalExpression":"BinaryExpression");return r.operator=t,r.left=e,r.right=n,r}function WF(t,e){var n=new sF("CallExpression");return n.callee=t,n.arguments=e,n}function HF(t){var e=new sF(pF);return e.name=t,e}function YF(t){var e=new sF("Literal");return e.value=t.value,e.raw=cF.slice(t.start,t.end),t.regex&&("//"===e.raw&&(e.raw="/(?:)/"),e.regex=t.regex),e}function VF(t,e,n){var r=new sF("MemberExpression");return r.computed="["===t,r.object=e,r.property=n,r.computed||(n.member=!0),r}function GF(t,e,n){var r=new sF("Property");return r.key=e,r.value=n,r.kind=t,r}function XF(t,e){var n,r=Array.prototype.slice.call(arguments,2),i=e.replace(/%(\d)/g,(t,e)=>(kF(e<r.length,"Message reference must be in range"),r[e]));throw(n=new Error(i)).index=fF,n.description=i,n}function JF(t){2===t.type&&XF(t,"Unexpected end of input"),6===t.type&&XF(t,"Unexpected number"),8===t.type&&XF(t,"Unexpected string"),3===t.type&&XF(t,"Unexpected identifier"),4===t.type&&XF(t,"Unexpected reserved word"),XF(t,gF,t.value)}function ZF(t){var e=PF();7===e.type&&e.value===t||JF(e)}function QF(t){return 7===dF.type&&dF.value===t}function KF(t){return 4===dF.type&&dF.value===t}function tS(){var t=[];for(fF=dF.start,ZF("[");!QF("]");)QF(",")?(PF(),t.push(null)):(t.push(hS()),QF("]")||ZF(","));return PF(),function(t){var e=new sF("ArrayExpression");return e.elements=t,e}(t)}function eS(){var t;return fF=dF.start,8===(t=PF()).type||6===t.type?(t.octal&&XF(t,vF),YF(t)):HF(t.value)}function nS(){var t,e,n;return fF=dF.start,3===(t=dF).type?(n=eS(),ZF(":"),GF("init",n,hS())):2!==t.type&&7!==t.type?(e=eS(),ZF(":"),GF("init",e,hS())):void JF(t)}function rS(){var t,e,n=[],r={},i=String;for(fF=dF.start,ZF("{");!QF("}");)e="$"+((t=nS()).key.type===pF?t.key.name:i(t.key.value)),Object.prototype.hasOwnProperty.call(r,e)?XF({},"Duplicate data property in object literal not allowed in strict mode"):r[e]=!0,n.push(t),QF("}")||ZF(",");return ZF("}"),function(t){var e=new sF("ObjectExpression");return e.properties=t,e}(n)}var iS={if:1};function aS(){var t,e,n;if(QF("("))return function(){var t;return ZF("("),t=dS(),ZF(")"),t}();if(QF("["))return tS();if(QF("{"))return rS();if(t=dF.type,fF=dF.start,3===t||iS[dF.value])n=HF(PF().value);else if(8===t||6===t)dF.octal&&XF(dF,vF),n=YF(PF());else{if(4===t)throw new Error(xF);1===t?((e=PF()).value="true"===e.value,n=YF(e)):5===t?((e=PF()).value=null,n=YF(e)):QF("/")||QF("/=")?(n=YF(LF()),jF()):JF(PF())}return n}function oS(){var t=[];if(ZF("("),!QF(")"))for(;fF<hF&&(t.push(hS()),!QF(")"));)ZF(",");return ZF(")"),t}function uS(){return ZF("."),fF=dF.start,function(t){return 3===t.type||4===t.type||1===t.type||5===t.type}(t=PF())||JF(t),HF(t.value);var t}function sS(){var t;return ZF("["),t=dS(),ZF("]"),t}function lS(){var t=function(){var t;for(t=aS();;)if(QF("."))t=VF(".",t,uS());else if(QF("("))t=WF(t,oS());else{if(!QF("["))break;t=VF("[",t,sS())}return t}();if(7===dF.type&&(QF("++")||QF("--")))throw new Error(xF);return t}function cS(){var t,e;if(7!==dF.type&&4!==dF.type)e=lS();else{if(QF("++")||QF("--"))throw new Error(xF);if(QF("+")||QF("-")||QF("~")||QF("!"))t=PF(),e=cS(),e=function(t,e){var n=new sF("UnaryExpression");return n.operator=t,n.argument=e,n.prefix=!0,n}(t.value,e);else{if(KF("delete")||KF("void")||KF("typeof"))throw new Error(xF);e=lS()}}return e}function fS(t){var e=0;if(7!==t.type&&4!==t.type)return 0;switch(t.value){case"||":e=1;break;case"&&":e=2;break;case"|":e=3;break;case"^":e=4;break;case"&":e=5;break;case"==":case"!=":case"===":case"!==":e=6;break;case"<":case">":case"<=":case">=":case"instanceof":case"in":e=7;break;case"<<":case">>":case">>>":e=8;break;case"+":case"-":e=9;break;case"*":case"/":case"%":e=11}return e}function hS(){var t,e;return t=function(){var t,e,n,r,i,a,o,u,s,l;if(t=dF,s=cS(),0===(i=fS(r=dF)))return s;for(r.prec=i,PF(),e=[t,dF],a=[s,r,o=cS()];(i=fS(dF))>0;){for(;a.length>2&&i<=a[a.length-2].prec;)o=a.pop(),u=a.pop().value,s=a.pop(),e.pop(),n=IF(u,s,o),a.push(n);(r=PF()).prec=i,a.push(r),e.push(dF),n=cS(),a.push(n)}for(n=a[l=a.length-1],e.pop();l>1;)e.pop(),n=IF(a[l-1].value,a[l-2],n),l-=2;return n}(),QF("?")&&(PF(),e=hS(),ZF(":"),t=function(t,e,n){var r=new sF("ConditionalExpression");return r.test=t,r.consequent=e,r.alternate=n,r}(t,e,hS())),t}function dS(){var t=hS();if(QF(","))throw new Error(xF);return t}var pS={NaN:"NaN",E:"Math.E",LN2:"Math.LN2",LN10:"Math.LN10",LOG2E:"Math.LOG2E",LOG10E:"Math.LOG10E",PI:"Math.PI",SQRT1_2:"Math.SQRT1_2",SQRT2:"Math.SQRT2",MIN_VALUE:"Number.MIN_VALUE",MAX_VALUE:"Number.MAX_VALUE"};function gS(t){function e(e,n,r){return i=>function(e,n,r,i){let a=t(n[0]);return r&&(a=r+"("+a+")",0===r.lastIndexOf("new ",0)&&(a="("+a+")")),a+"."+e+(i<0?"":0===i?"()":"("+n.slice(1).map(t).join(",")+")")}(e,i,n,r)}const n="new Date",r="String",i="RegExp";return{isNaN:"Number.isNaN",isFinite:"Number.isFinite",abs:"Math.abs",acos:"Math.acos",asin:"Math.asin",atan:"Math.atan",atan2:"Math.atan2",ceil:"Math.ceil",cos:"Math.cos",exp:"Math.exp",floor:"Math.floor",log:"Math.log",max:"Math.max",min:"Math.min",pow:"Math.pow",random:"Math.random",round:"Math.round",sin:"Math.sin",sqrt:"Math.sqrt",tan:"Math.tan",clamp:function(e){e.length<3&&u("Missing arguments to clamp function."),e.length>3&&u("Too many arguments to clamp function.");const n=e.map(t);return"Math.max("+n[1]+", Math.min("+n[2]+","+n[0]+"))"},now:"Date.now",utc:"Date.UTC",datetime:n,date:e("getDate",n,0),day:e("getDay",n,0),year:e("getFullYear",n,0),month:e("getMonth",n,0),hours:e("getHours",n,0),minutes:e("getMinutes",n,0),seconds:e("getSeconds",n,0),milliseconds:e("getMilliseconds",n,0),time:e("getTime",n,0),timezoneoffset:e("getTimezoneOffset",n,0),utcdate:e("getUTCDate",n,0),utcday:e("getUTCDay",n,0),utcyear:e("getUTCFullYear",n,0),utcmonth:e("getUTCMonth",n,0),utchours:e("getUTCHours",n,0),utcminutes:e("getUTCMinutes",n,0),utcseconds:e("getUTCSeconds",n,0),utcmilliseconds:e("getUTCMilliseconds",n,0),length:e("length",null,-1),join:e("join",null),indexof:e("indexOf",null),lastindexof:e("lastIndexOf",null),slice:e("slice",null),reverse:function(e){return"("+t(e[0])+").slice().reverse()"},parseFloat:"parseFloat",parseInt:"parseInt",upper:e("toUpperCase",r,0),lower:e("toLowerCase",r,0),substring:e("substring",r),split:e("split",r),replace:e("replace",r),trim:e("trim",r,0),regexp:i,test:e("test",i),if:function(e){e.length<3&&u("Missing arguments to if function."),e.length>3&&u("Too many arguments to if function.");const n=e.map(t);return"("+n[0]+"?"+n[1]+":"+n[2]+")"}}}function mS(t,e,n,r){e[0].type!==ZC&&u("First argument to data functions must be a string literal.");const i=e[0].value,a=":"+i;if(!rt(a,r))try{r[a]=n.getData(i).tuplesRef()}catch(t){}}function yS(t,e,n,r){if(e[0].type===ZC)vS(n,r,e[0].value);else for(t in n.scales)vS(n,r,t)}function vS(t,e,n){const r="%"+n;if(!rt(e,r))try{e[r]=t.scaleRef(n)}catch(t){}}function _S(t,e){let n;return H(t)?t:dt(t)?(n=e.scales[t])&&n.value:void 0}function xS(t,e,n){e.__bandwidth=t=>t&&t.bandwidth?t.bandwidth():0,n._bandwidth=yS,n._range=yS,n._scale=yS;const r=e=>"_["+(e.type===ZC?bt("%"+e.value):bt("%")+"+"+t(e))+"]";return{_bandwidth:t=>`this.__bandwidth(${r(t[0])})`,_range:t=>r(t[0])+".range()",_scale:e=>`${r(e[0])}(${t(e[1])})`}}function bS(t,e){return function(n,r,i){if(n){const e=_S(n,(i||this).context);return e&&e.path[t](r)}return e(r)}}const wS=bS("area",(function(t){return Ab=new We,ob(t,Mb),2*Ab})),kS=bS("bounds",(function(t){var e,n,r,i,a,o,u;if(gb=pb=-(hb=db=1/0),bb=[],ob(t,Kb),n=bb.length){for(bb.sort(sw),e=1,a=[r=bb[0]];e<n;++e)lw(r,(i=bb[e])[0])||lw(r,i[1])?(uw(r[0],i[1])>uw(r[0],r[1])&&(r[1]=i[1]),uw(i[0],r[1])>uw(r[0],r[1])&&(r[0]=i[0])):a.push(r=i);for(o=-1/0,e=0,r=a[n=a.length-1];e<=n;r=i,++e)i=a[e],(u=uw(r[1],i[0]))>o&&(o=u,hb=i[0],pb=r[1])}return bb=wb=null,hb===1/0||db===1/0?[[NaN,NaN],[NaN,NaN]]:[[hb,db],[pb,gb]]})),AS=bS("centroid",(function(t){$b=qb=Lb=Ub=Pb=jb=Ib=Wb=0,Hb=new We,Yb=new We,Vb=new We,ob(t,cw);var e=+Hb,n=+Yb,r=+Vb,i=Hx(e,n,r);return i<Tx&&(e=jb,n=Ib,r=Wb,qb<Bx&&(e=Lb,n=Ub,r=Pb),(i=Hx(e,n,r))<Tx)?[NaN,NaN]:[Px(n,e)*$x,Kx(r/i)*$x]}));function MS(t,e,n){try{t[e].apply(t,["EXPRESSION"].concat([].slice.call(n)))}catch(e){t.warn(e)}return n[n.length-1]}function ES(t){const e=t/255;return e<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)}function DS(t){const e=Jp(t);return.2126*ES(e.r)+.7152*ES(e.g)+.0722*ES(e.b)}function CS(t,e){return t===e||t!=t&&e!=e||(v(t)?!(!v(e)||t.length!==e.length)&&function(t,e){for(let n=0,r=t.length;n<r;++n)if(!CS(t[n],e[n]))return!1;return!0}(t,e):!(!_(t)||!_(e))&&FS(t,e))}function FS(t,e){for(const n in t)if(!CS(t[n],e[n]))return!1;return!0}function SS(t){return e=>FS(t,e)}const BS=t=>t.data;function TS(t,e){const n=PC.call(e,t);return n.root&&n.root.lookup||{}}const zS=()=>"undefined"!=typeof window&&window||null;const NS="intersect",OS="union";var RS="index:unit";function $S(t,e){for(var n,r,i=e.fields,a=e.values,o=i.length,u=0;u<o;++u)if((r=i[u]).getter=l.getter||l(r.field),ct(n=r.getter(t))&&(n=M(n)),ct(a[u])&&(a[u]=M(a[u])),ct(a[u][0])&&(a[u]=a[u].map(M)),"E"===r.type){if(v(a[u])?a[u].indexOf(n)<0:n!==a[u])return!1}else if("R"===r.type){if(!st(n,a[u]))return!1}else if("R-RE"===r.type){if(!st(n,a[u],!0,!1))return!1}else if("R-E"===r.type){if(!st(n,a[u],!1,!1))return!1}else if("R-LE"===r.type&&!st(n,a[u],!1,!0))return!1;return!0}var qS={E_union:function(t,e){if(!t.length)return e;for(var n=0,r=e.length;n<r;++n)t.indexOf(e[n])<0&&t.push(e[n]);return t},E_intersect:function(t,e){return t.length?t.filter(t=>e.indexOf(t)>=0):e},R_union:function(t,e){var n=M(e[0]),r=M(e[1]);return n>r&&(n=e[1],r=e[0]),t.length?(t[0]>n&&(t[0]=n),t[1]<r&&(t[1]=r),t):[n,r]},R_intersect:function(t,e){var n=M(e[0]),r=M(e[1]);return n>r&&(n=e[1],r=e[0]),t.length?r<t[0]||t[1]<n?[]:(t[0]<n&&(t[0]=n),t[1]>r&&(t[1]=r),t):[n,r]}};function LS(t,e,n,r){e[0].type!==ZC&&u("First argument to selection functions must be a string literal.");const i=e[0].value,a="unit",o="@unit",s=":"+i;(e.length>=2&&A(e).value)!==NS||rt(r,o)||(r["@unit"]=n.getData(i).indataRef(n,a)),rt(r,s)||(r[s]=n.getData(i).tuplesRef())}const US={random:()=>t.random(),cumulativeNormal:Uo,cumulativeLogNormal:Yo,cumulativeUniform:Qo,densityNormal:Lo,densityLogNormal:Ho,densityUniform:Zo,quantileNormal:Po,quantileLogNormal:Vo,quantileUniform:Ko,sampleNormal:qo,sampleLogNormal:Wo,sampleUniform:Jo,isArray:v,isBoolean:lt,isDate:ct,isDefined:t=>void 0!==t,isNumber:ft,isObject:_,isRegExp:ht,isString:dt,isTuple:zt,isValid:t=>null!=t&&t==t,toBoolean:wt,toDate:At,toNumber:M,toString:Mt,flush:ot,lerp:gt,merge:function(){const t=[].slice.call(arguments);return t.unshift({}),K.apply(null,t)},pad:_t,peek:A,span:xt,inrange:st,truncate:Dt,rgb:Jp,lab:pg,hcl:bg,hsl:rg,luminance:DS,contrast:function(t,e){const n=DS(t),r=DS(e);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)},sequence:He,format:IC,utcFormat:HC,utcParse:VC,utcOffset:Vr,utcSequence:Jr,timeFormat:WC,timeParse:YC,timeOffset:Yr,timeSequence:Xr,timeUnitSpecifier:Wn,monthFormat:function(t){return XC.call(this,t,1,"%B")},monthAbbrevFormat:function(t){return XC.call(this,t,1,"%b")},dayFormat:function(t){return XC.call(this,0,2+t,"%A")},dayAbbrevFormat:function(t){return XC.call(this,0,2+t,"%a")},quarter:P,utcquarter:j,week:wr,utcweek:Cr,dayofyear:br,utcdayofyear:Dr,warn:function(){return MS(this.context.dataflow,"warn",arguments)},info:function(){return MS(this.context.dataflow,"info",arguments)},debug:function(){return MS(this.context.dataflow,"debug",arguments)},extent:tt,inScope:function(t){const e=this.context.group;let n=!1;if(e)for(;t;){if(t===e){n=!0;break}t=t.mark.group}return n},intersect:function(t,e,n){if(!t)return[];const[r,i]=t,a=(new vf).set(r[0],r[1],i[0],i[1]);return Iv(n||this.context.dataflow.scenegraph().root,a,function(t){let e=null;if(t){const n=I(t.marktype),r=I(t.markname);e=t=>(!n.length||n.some(e=>t.marktype===e))&&(!r.length||r.some(e=>t.name===e))}return e}(e))},clampRange:W,pinchDistance:function(t){const e=t.touches,n=e[0].clientX-e[1].clientX,r=e[0].clientY-e[1].clientY;return Math.sqrt(n*n+r*r)},pinchAngle:function(t){const e=t.touches;return Math.atan2(e[0].clientY-e[1].clientY,e[0].clientX-e[1].clientX)},screen:function(){const t=zS();return t?t.screen:{}},containerSize:function(){const t=this.context.dataflow,e=t.container&&t.container();return e?[e.clientWidth,e.clientHeight]:[void 0,void 0]},windowSize:function(){const t=zS();return t?[t.innerWidth,t.innerHeight]:[void 0,void 0]},bandspace:function(t,e,n){return rp(t||0,e||0,n||0)},setdata:function(t,e){const n=this.context.dataflow,r=this.context.data[t].input;return n.pulse(r,n.changeset().remove(p).insert(e)),1},pathShape:function(t){let e=null;return function(n){return n?Uc(n,e=e||Fc(t)):t}},panLinear:T,panLog:z,panPow:N,panSymlog:O,zoomLinear:$,zoomLog:q,zoomPow:L,zoomSymlog:U,encode:function(t,e,n){if(t){const n=this.context.dataflow,r=t.mark.source;n.pulse(r,n.changeset().encode(t,e))}return void 0!==n?n:t},modify:function(t,e,n,r,i,a){const o=this.context.dataflow,u=this.context.data[t],s=u.input,l=o.stamp();let c,f,h=u.changes;if(!1===o._trigger||!(s.value.length||e||r))return 0;if((!h||h.stamp<l)&&(u.changes=h=o.changeset(),h.stamp=l,o.runAfter(()=>{u.modified=!0,o.pulse(s,h).run()},!0,1)),n&&(c=!0===n?p:v(n)||zt(n)?n:SS(n),h.remove(c)),e&&h.insert(e),r&&(c=SS(r),s.value.some(c)?h.remove(c):h.insert(r)),i)for(f in a)h.modify(i,f,a[f]);return 1}},PS=["view","item","group","xy","x","y"],jS="this.",IS={},WS={blacklist:["_"],whitelist:["datum","event","item"],fieldvar:"datum",globalvar:t=>`_[${bt("$"+t)}]`,functions:function(t){const e=gS(t);PS.forEach(t=>e[t]="event.vega."+t);for(const t in US)e[t]=jS+t;return K(e,xS(t,US,IS)),e},constants:pS,visitors:IS},HS=function(t){const e=(t=t||{}).whitelist?Et(t.whitelist):{},n=t.blacklist?Et(t.blacklist):{},r=t.constants||pS,i=(t.functions||gS)(h),a=t.globalvar,o=t.fieldvar,s=H(a)?a:t=>`${a}["${t}"]`;let l={},c={},f=0;function h(t){if(dt(t))return t;const e=d[t.type];return null==e&&u("Unsupported type: "+t.type),e(t)}const d={Literal:t=>t.raw,Identifier:t=>{const i=t.name;return f>0?i:rt(n,i)?u("Illegal identifier: "+i):rt(r,i)?r[i]:rt(e,i)?i:(l[i]=1,s(i))},MemberExpression:t=>{const e=!t.computed,n=h(t.object);e&&(f+=1);const r=h(t.property);return n===o&&(c[function(t){const e=t&&t.length-1;return e&&('"'===t[0]&&'"'===t[e]||"'"===t[0]&&"'"===t[e])?t.slice(1,-1):t}(r)]=1),e&&(f-=1),n+(e?"."+r:"["+r+"]")},CallExpression:t=>{"Identifier"!==t.callee.type&&u("Illegal callee type: "+t.callee.type);const e=t.callee.name,n=t.arguments,r=rt(i,e)&&i[e];return r||u("Unrecognized function: "+e),H(r)?r(n):r+"("+n.map(h).join(",")+")"},ArrayExpression:t=>"["+t.elements.map(h).join(",")+"]",BinaryExpression:t=>"("+h(t.left)+t.operator+h(t.right)+")",UnaryExpression:t=>"("+t.operator+h(t.argument)+")",ConditionalExpression:t=>"("+h(t.test)+"?"+h(t.consequent)+":"+h(t.alternate)+")",LogicalExpression:t=>"("+h(t.left)+t.operator+h(t.right)+")",ObjectExpression:t=>"{"+t.properties.map(h).join(",")+"}",Property:t=>{f+=1;const e=h(t.key);return f-=1,e+":"+h(t.value)}};function p(t){const e={code:h(t),globals:Object.keys(l),fields:Object.keys(c)};return l={},c={},e}return p.functions=i,p.constants=r,p}(WS);function YS(t,e,n){return 1===arguments.length?US[t]:(US[t]=e,n&&(IS[t]=n),HS&&(HS.functions[t]=jS+t),this)}function VS(t,e){const n={};let r;try{r=function(t){fF=0,hF=(cF=t).length,dF=null,jF();var e=dS();if(2!==dF.type)throw new Error("Unexpect token after expression.");return e}(t=dt(t)?t:bt(t)+"")}catch(e){u("Expression parse error: "+t)}r.visit(t=>{if(t.type!==nF)return;const r=t.callee.name,i=WS.visitors[r];i&&i(r,t.arguments,e,n)});const i=HS(r);return i.globals.forEach(t=>{const r="$"+t;!rt(n,r)&&e.getSignal(t)&&(n[r]=e.signalRef(t))}),{$expr:K({code:i.code},e.options.ast?{ast:r}:null),$fields:i.fields,$params:n}}YS("bandwidth",(function(t,e){const n=_S(t,(e||this).context);return n&&n.bandwidth?n.bandwidth():0}),yS),YS("copy",(function(t,e){const n=_S(t,(e||this).context);return n?n.copy():void 0}),yS),YS("domain",(function(t,e){const n=_S(t,(e||this).context);return n?n.domain():[]}),yS),YS("range",(function(t,e){const n=_S(t,(e||this).context);return n&&n.range?n.range():[]}),yS),YS("invert",(function(t,e,n){const r=_S(t,(n||this).context);return r?v(e)?(r.invertRange||r.invert)(e):(r.invert||r.invertExtent)(e):void 0}),yS),YS("scale",(function(t,e,n){const r=_S(t,(n||this).context);return r?r(e):void 0}),yS),YS("gradient",(function(t,e,n,r,i){t=_S(t,(i||this).context);const a=fl(e,n);let o=t.domain(),u=o[0],s=A(o),l=f;return s-u?l=By(t,u,s):t=(t.interpolator?vy("sequential")().interpolator(t.interpolator()):vy("linear")().interpolate(t.interpolate()).range(t.range())).domain([u=0,s=1]),t.ticks&&(o=t.ticks(+r||15),u!==o[0]&&o.unshift(u),s!==A(o)&&o.push(s)),o.forEach(e=>a.stop(l(e),t(e))),a}),yS),YS("geoArea",wS,yS),YS("geoBounds",kS,yS),YS("geoCentroid",AS,yS),YS("geoShape",(function(t,e,n){const r=_S(t,(n||this).context);return function(t){return r?r.path.context(t)(e):""}}),yS),YS("indata",(function(t,e,n){const r=this.context.data[t]["index:"+e],i=r?r.value.get(n):void 0;return i?i.count:i}),(function(t,e,n,r){e[0].type!==ZC&&u("First argument to indata must be a string literal."),e[1].type!==ZC&&u("Second argument to indata must be a string literal.");const i=e[0].value,a=e[1].value,o="@"+a;rt(o,r)||(r[o]=n.getData(i).indataRef(n,a))})),YS("data",PC,mS),YS("treePath",(function(t,e,n){const r=TS(t,this),i=r[e],a=r[n];return i&&a?i.path(a).map(BS):void 0}),mS),YS("treeAncestors",(function(t,e){const n=TS(t,this)[e];return n?n.ancestors().map(BS):void 0}),mS),YS("vlSelectionTest",(function(t,e,n){for(var r,i,a,o,u,s=this.context.data[t],l=s?s.values.value:[],c=s?s[RS]&&s[RS].value:void 0,f=n===NS,h=l.length,d=0;d<h;++d)if(r=l[d],c&&f){if(-1===(a=(i=i||{})[o=r.unit]||0))continue;if(u=$S(e,r),i[o]=u?-1:++a,u&&1===c.size)return!0;if(!u&&a===c.get(o).count)return!1}else if(f^(u=$S(e,r)))return u;return h&&f}),LS),YS("vlSelectionResolve",(function(t,e,n){for(var r,i,a,o,u,s,l,c,f,h,d,p=this.context.data[t],g=p?p.values.value:[],m={},y={},v={},_=g.length,x=0;x<_;++x){for(o=(r=g[x]).unit,i=r.fields,a=r.values,h=0,d=i.length;h<d;++h)u=i[h],l=(s=m[u.field]||(m[u.field]={}))[o]||(s[o]=[]),v[u.field]=c=u.type.charAt(0),f=qS[c+"_union"],s[o]=f(l,I(a[h]));n&&(l=y[o]||(y[o]=[])).push(I(a).reduce((t,e,n)=>(t[i[n].field]=e,t),{}))}return e=e||OS,Object.keys(m).forEach(t=>{m[t]=Object.keys(m[t]).map(e=>m[t][e]).reduce((n,r)=>void 0===n?r:qS[v[t]+"_"+e](n,r))}),g=Object.keys(y),n&&g.length&&(m.vlMulti=e===OS?{or:g.reduce((t,e)=>(t.push.apply(t,y[e]),t),[])}:{and:g.map(t=>({or:y[t]}))}),m}),LS);const GS=Et(["rule"]),XS=Et(["group","image","rect"]);function JS(t){return(t+"").toLowerCase()}function ZS(t,e,n){";"!==n[n.length-1]&&(n="return("+n+");");var r=Function.apply(null,e.concat(n));return t&&t.functions?r.bind(t.functions):r}var QS={operator:(t,e)=>ZS(t,["_"],e.code),parameter:(t,e)=>ZS(t,["datum","_"],e.code),event:(t,e)=>ZS(t,["event"],e.code),handler:(t,e)=>ZS(t,["_","event"],`var datum=event.item&&event.item.datum;return ${e.code};`),encode:(t,e)=>{const{marktype:n,channels:r}=e;let i="var o=item,datum=o.datum,m=0,$;";for(const t in r){const e="o["+bt(t)+"]";i+=`$=${r[t].code};if(${e}!==$)${e}=$,m=1;`}return i+=function(t,e){let n="";return GS[e]||(t.x2&&(t.x?(XS[e]&&(n+="if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;"),n+="o.width=o.x2-o.x;"):n+="o.x=o.x2-(o.width||0);"),t.xc&&(n+="o.x=o.xc-(o.width||0)/2;"),t.y2&&(t.y?(XS[e]&&(n+="if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;"),n+="o.height=o.y2-o.y;"):n+="o.y=o.y2-(o.height||0);"),t.yc&&(n+="o.y=o.yc-(o.height||0)/2;")),n}(r,n),i+="return m;",ZS(t,["item","_"],i)},codegen:{get(t){const e=`[${t.map(bt).join("][")}]`,n=Function("_",`return _${e};`);return n.path=e,n},comparator(t,e){let n;const r=Function("a","b","var u, v; return "+t.map((t,r)=>{const i=e[r];let a,o;return t.path?(a="a"+t.path,o="b"+t.path):((n=n||{})["f"+r]=t,a=`this.f${r}(a)`,o=`this.f${r}(b)`),function(t,e,n,r){return`((u = ${t}) < (v = ${e}) || u == null) && v != null ? ${n}\n  : (u > v || v == null) && u != null ? ${r}\n  : ((v = v instanceof Date ? +v : v), (u = u instanceof Date ? +u : u)) !== u && v === v ? ${n}\n  : v !== v && u === u ? ${r} : `}(a,o,-i,i)}).join("")+"0;");return n?r.bind(n):r}}};function KS(t,e,n){if(!t||!_(t))return t;for(let r,i=0,a=tB.length;i<a;++i)if(r=tB[i],rt(t,r.key))return r.parse(t,e,n);return t}var tB=[{key:"$ref",parse:function(t,e){return e.get(t.$ref)||u("Operator not defined: "+t.$ref)}},{key:"$key",parse:function(t,e){const n="k:"+t.$key+"_"+!!t.$flat;return e.fn[n]||(e.fn[n]=pt(t.$key,t.$flat,e.expr.codegen))}},{key:"$expr",parse:function(t,n,r){t.$params&&n.parseParameters(t.$params,r);const i="e:"+t.$expr.code+"_"+t.$name;return n.fn[i]||(n.fn[i]=e(n.parameterExpression(t.$expr),t.$fields,t.$name))}},{key:"$field",parse:function(t,e){if(!t.$field)return null;const n="f:"+t.$field+"_"+t.$name;return e.fn[n]||(e.fn[n]=l(t.$field,t.$name,e.expr.codegen))}},{key:"$encode",parse:function(t,n){const r=t.$encode,i={};for(const t in r){const a=r[t];i[t]=e(n.encodeExpression(a.$expr),a.$fields),i[t].output=a.$output}return i}},{key:"$compare",parse:function(t,e){const n="c:"+t.$compare+"_"+t.$order,r=I(t.$compare).map(t=>t&&t.$tupleid?Nt:t);return e.fn[n]||(e.fn[n]=Y(r,t.$order,e.expr.codegen))}},{key:"$context",parse:function(t,e){return e}},{key:"$subflow",parse:function(t,e){const n=t.$subflow;return function(t,r,i){const a=e.fork().parse(n),o=a.get(n.operators[0].id),u=a.signals.parent;return u&&u.set(i),o.detachSubflow=()=>e.detach(a),o}}},{key:"$tupleid",parse:function(){return Nt}}];var eB={skip:!0};function nB(t,e,n,r){return new rB(t,e,n,r)}function rB(t,e,n,r){this.dataflow=t,this.transforms=e,this.events=t.events.bind(t),this.expr=r||QS,this.signals={},this.scales={},this.nodes={},this.data={},this.fn={},n&&(this.functions=Object.create(n),this.functions.context=this)}function iB(t){this.dataflow=t.dataflow,this.transforms=t.transforms,this.events=t.events,this.expr=t.expr,this.signals=Object.create(t.signals),this.scales=Object.create(t.scales),this.nodes=Object.create(t.nodes),this.data=Object.create(t.data),this.fn=Object.create(t.fn),t.functions&&(this.functions=Object.create(t.functions),this.functions.context=this)}rB.prototype=iB.prototype={fork(){const t=new iB(this);return(this.subcontext||(this.subcontext=[])).push(t),t},detach(t){this.subcontext=this.subcontext.filter(e=>e!==t);const e=Object.keys(t.nodes);for(const n of e)t.nodes[n]._targets=null;for(const n of e)t.nodes[n].detach();t.nodes=null},get(t){return this.nodes[t]},set(t,e){return this.nodes[t]=e},add(t,e){const n=this,r=n.dataflow,i=t.value;if(n.set(t.id,e),function(t){return"collect"===JS(t)}(t.type)&&i&&(i.$ingest?r.ingest(e,i.$ingest,i.$format):i.$request?r.preload(e,i.$request,i.$format):r.pulse(e,r.changeset().insert(i))),t.root&&(n.root=e),t.parent){var a=n.get(t.parent.$ref);a?(r.connect(a,[e]),e.targets().add(a)):(n.unresolved=n.unresolved||[]).push(()=>{a=n.get(t.parent.$ref),r.connect(a,[e]),e.targets().add(a)})}if(t.signal&&(n.signals[t.signal]=e),t.scale&&(n.scales[t.scale]=e),t.data)for(const r in t.data){const i=n.data[r]||(n.data[r]={});t.data[r].forEach(t=>i[t]=e)}},resolve(){return(this.unresolved||[]).forEach(t=>t()),delete this.unresolved,this},operator(t,e){this.add(t,this.dataflow.add(t.value,e))},transform(t,e){this.add(t,this.dataflow.add(this.transforms[JS(e)]))},stream(t,e){this.set(t.id,e)},update(t,e,n,r,i){this.dataflow.on(e,n,r,i,t.options)},operatorExpression(t){return this.expr.operator(this,t)},parameterExpression(t){return this.expr.parameter(this,t)},eventExpression(t){return this.expr.event(this,t)},handlerExpression(t){return this.expr.handler(this,t)},encodeExpression(t){return this.expr.encode(this,t)},parse:function(t){const e=this,n=t.operators||[];return t.background&&(e.background=t.background),t.eventConfig&&(e.eventConfig=t.eventConfig),t.locale&&(e.locale=t.locale),n.forEach(t=>e.parseOperator(t)),n.forEach(t=>e.parseOperatorParameters(t)),(t.streams||[]).forEach(t=>e.parseStream(t)),(t.updates||[]).forEach(t=>e.parseUpdate(t)),e.resolve()},parseOperator:function(t){const e=this;!function(t){return"operator"===JS(t)}(t.type)&&t.type?e.transform(t,t.type):e.operator(t,t.update?e.operatorExpression(t.update):null)},parseOperatorParameters:function(t){const e=this;if(t.params){const n=e.get(t.id);n||u("Invalid operator id: "+t.id),e.dataflow.connect(n,n.parameters(e.parseParameters(t.params),t.react,t.initonly))}},parseParameters:function(t,e){e=e||{};const n=this;for(const r in t){const i=t[r];e[r]=v(i)?i.map(t=>KS(t,n,e)):KS(i,n,e)}return e},parseStream:function(t){var e,n=this,r=null!=t.filter?n.eventExpression(t.filter):void 0,i=null!=t.stream?n.get(t.stream):void 0;t.source?i=n.events(t.source,t.type,r):t.merge&&(i=(e=t.merge.map(t=>n.get(t)))[0].merge.apply(e[0],e.slice(1))),t.between&&(e=t.between.map(t=>n.get(t)),i=i.between(e[0],e[1])),t.filter&&(i=i.filter(r)),null!=t.throttle&&(i=i.throttle(+t.throttle)),null!=t.debounce&&(i=i.debounce(+t.debounce)),null==i&&u("Invalid stream definition: "+JSON.stringify(t)),t.consume&&i.consume(!0),n.stream(t,i)},parseUpdate:function(t){var e,n=this,r=_(r=t.source)?r.$ref:r,i=n.get(r),a=t.update,o=void 0;i||u("Source not defined: "+t.source),e=t.target&&t.target.$expr?n.eventExpression(t.target.$expr):n.get(t.target),a&&a.$expr&&(a.$params&&(o=n.parseParameters(a.$params)),a=n.handlerExpression(a.$expr)),n.update(t,i,e,a,o)},getState:function(t){var e=this,n={};if(t.signals){var r=n.signals={};Object.keys(e.signals).forEach(n=>{var i=e.signals[n];t.signals(n,i)&&(r[n]=i.value)})}if(t.data){var i=n.data={};Object.keys(e.data).forEach(n=>{var r=e.data[n];t.data(n,r)&&(i[n]=r.input.value)})}return e.subcontext&&!1!==t.recurse&&(n.subcontext=e.subcontext.map(e=>e.getState(t))),n},setState:function(t){var e=this,n=e.dataflow,r=t.data,i=t.signals;Object.keys(i||{}).forEach(t=>{n.update(e.signals[t],i[t],eB)}),Object.keys(r||{}).forEach(t=>{n.pulse(e.data[t].input,n.changeset().remove(p).insert(r[t]))}),(t.subcontext||[]).forEach((t,n)=>{var r=e.subcontext[n];r&&r.setState(t)})}};var aB="width",oB="height",uB="padding",sB={skip:!0};function lB(t,e){var n=t.autosize(),r=t.padding();return e-(n&&n.contains===uB?r.left+r.right:0)}function cB(t,e){var n=t.autosize(),r=t.padding();return e-(n&&n.contains===uB?r.top+r.bottom:0)}function fB(t,e){return e.modified&&v(e.input.value)&&t.indexOf("_:vega:_")}function hB(t,e){return!("parent"===t||e instanceof fo.proxy)}function dB(t,e,n,r){var i=t.element();i&&i.setAttribute("title",function(t){return null==t?"":v(t)?pB(t):_(t)&&!ct(t)?(e=t,Object.keys(e).map(t=>{var n=e[t];return t+": "+(v(n)?pB(n):gB(n))}).join("\n")):t+"";var e}(r))}function pB(t){return"["+t.map(gB).join(", ")+"]"}function gB(t){return v(t)?"[…]":_(t)&&!ct(t)?"{…}":t}function mB(t,e){const n=this;if(e=e||{},so.call(n),e.loader&&n.loader(e.loader),e.logger&&n.logger(e.logger),null!=e.logLevel&&n.logLevel(e.logLevel),e.locale||t.locale){const r=K({},t.locale,e.locale);n.locale(Ha(r.number,r.time))}n._el=null,n._elBind=null,n._renderType=e.renderer||Uv.Canvas,n._scenegraph=new wd;const r=n._scenegraph.root;n._renderer=null,n._tooltip=e.tooltip||dB,n._redraw=!0,n._handler=(new Gd).scene(r),n._globalCursor=!1,n._preventDefault=!1,n._timers=[],n._eventListeners=[],n._resizeListeners=[],n._eventConfig=function(t){const e=K({defaults:{}},t),n=(t,e)=>{e.forEach(e=>{v(t[e])&&(t[e]=Et(t[e]))})};return n(e.defaults,["prevent","allow"]),n(e,["view","window","selector"]),e}(t.eventConfig),n.globalCursor(n._eventConfig.globalCursor);const i=function(t,e,n){return nB(t,fo,US,n).parse(e)}(n,t,e.expr);n._runtime=i,n._signals=i.signals,n._bind=(t.bindings||[]).map(t=>({state:null,param:K({},t)})),i.root&&i.root.set(r),r.source=i.data.root.input,n.pulse(i.data.root.input,n.changeset().insert(r.items)),n._width=n.width(),n._height=n.height(),n._viewWidth=lB(n,n._width),n._viewHeight=cB(n,n._height),n._origin=[0,0],n._resize=0,n._autosize=1,function(t){var e=t._signals,n=e.width,r=e.height,i=e.padding;function a(){t._autosize=t._resize=1}t._resizeWidth=t.add(null,e=>{t._width=e.size,t._viewWidth=lB(t,e.size),a()},{size:n}),t._resizeHeight=t.add(null,e=>{t._height=e.size,t._viewHeight=cB(t,e.size),a()},{size:r});var o=t.add(null,a,{pad:i});t._resizeWidth.rank=n.rank+1,t._resizeHeight.rank=r.rank+1,o.rank=i.rank+1}(n),function(t){t.add(null,e=>(t._background=e.bg,t._resize=1,e.bg),{bg:t._signals.background})}(n),function(t){const e=t._signals.cursor||(t._signals.cursor=t.add({user:fC,item:null}));t.on(t.events("view","mousemove"),e,(t,n)=>{const r=e.value,i=r?dt(r)?r:r.user:fC,a=n.item&&n.item.cursor||null;return r&&i===r.user&&a==r.item?r:{user:i,item:a}}),t.add(null,(function(e){let n=e.cursor,r=this.value;return dt(n)||(r=n.item,n=n.user),hC(t,n&&n!==fC?n:r||n),r}),{cursor:e})}(n),n.description(t.description),e.hover&&n.hover(),e.container&&n.initialize(e.container,e.bind)}function yB(t,e){return rt(t._signals,e)?t._signals[e]:u("Unrecognized signal name: "+bt(e))}function vB(t,e){const n=(t._targets||[]).filter(t=>t._update&&t._update.handler===e);return n.length?n[0]:null}function _B(t,e,n,r){var i=vB(n,r);return i||((i=RC(t,()=>r(e,n.value))).handler=r,t.on(n,null,i)),t}function xB(t,e,n){var r=vB(e,n);return r&&e._targets.remove(r),t}function bB(t){return _(t)?t:{type:t||"pad"}}ut(mB,so,{async evaluate(t,e,n){if(await so.prototype.evaluate.call(this,t,e),this._redraw||this._resize)try{this._renderer&&(this._resize&&(this._resize=0,function(t){var e=yC(t),n=gC(t),r=mC(t);t._renderer.background(t.background()),t._renderer.resize(n,r,e),t._handler.origin(e),t._resizeListeners.forEach(e=>{try{e(n,r)}catch(e){t.error(e)}})}(this)),await this._renderer.renderAsync(this._scenegraph.root)),this._redraw=!1}catch(t){this.error(t)}return n&&St(this,n),this},dirty(t){this._redraw=!0,this._renderer&&this._renderer.dirty(t)},description(t){if(arguments.length){const e=null!=t?t+"":null;return e!==this._desc&&cC(this._el,this._desc=e),this}return this._desc},container(){return this._el},scenegraph(){return this._scenegraph},origin(){return this._origin.slice()},signal(t,e,n){var r=yB(this,t);return 1===arguments.length?r.value:this.update(r,e,n)},width(t){return arguments.length?this.signal("width",t):this.signal("width")},height(t){return arguments.length?this.signal("height",t):this.signal("height")},padding(t){return arguments.length?this.signal("padding",LC(t)):LC(this.signal("padding"))},autosize(t){return arguments.length?this.signal("autosize",t):this.signal("autosize")},background(t){return arguments.length?this.signal("background",t):this.signal("background")},renderer(t){return arguments.length?(jv(t)||u("Unrecognized renderer type: "+t),t!==this._renderType&&(this._renderType=t,this._resetRenderer()),this):this._renderType},tooltip(t){return arguments.length?(t!==this._tooltip&&(this._tooltip=t,this._resetRenderer()),this):this._tooltip},loader(t){return arguments.length?(t!==this._loader&&(so.prototype.loader.call(this,t),this._resetRenderer()),this):this._loader},resize(){return this._autosize=1,this.touch(yB(this,"autosize"))},_resetRenderer(){this._renderer&&(this._renderer=null,this.initialize(this._el,this._elBind))},_resizeView:function(t,e,n,r,i,a){this.runAfter(o=>{var u=0;o._autosize=0,o.width()!==n&&(u=1,o.signal(aB,n,sB),o._resizeWidth.skip(!0)),o.height()!==r&&(u=1,o.signal(oB,r,sB),o._resizeHeight.skip(!0)),o._viewWidth!==t&&(o._resize=1,o._viewWidth=t),o._viewHeight!==e&&(o._resize=1,o._viewHeight=e),o._origin[0]===i[0]&&o._origin[1]===i[1]||(o._resize=1,o._origin=i),u&&o.run("enter"),a&&o.runAfter(t=>t.resize())},!1,1)},addEventListener(t,e,n){var r=e;return n&&!1===n.trap||((r=RC(this,e)).raw=e),this._handler.on(t,r),this},removeEventListener(t,e){for(var n,r,i=this._handler.handlers(t),a=i.length;--a>=0;)if(r=i[a].type,n=i[a].handler,t===r&&(e===n||e===n.raw)){this._handler.off(r,n);break}return this},addResizeListener(t){var e=this._resizeListeners;return e.indexOf(t)<0&&e.push(t),this},removeResizeListener(t){var e=this._resizeListeners,n=e.indexOf(t);return n>=0&&e.splice(n,1),this},addSignalListener(t,e){return _B(this,t,yB(this,t),e)},removeSignalListener(t,e){return xB(this,yB(this,t),e)},addDataListener(t,e){return _B(this,t,dC(this,t).values,e)},removeDataListener(t,e){return xB(this,dC(this,t).values,e)},globalCursor(t){if(arguments.length){if(this._globalCursor!==!!t){const e=hC(this,null);this._globalCursor=!!t,e&&hC(this,e)}return this}return this._globalCursor},preventDefault(t){return arguments.length?(this._preventDefault=t,this):this._preventDefault},timer:function(t,e){this._timers.push(function(t,e,n){var r=new FM,i=e;return null==e?(r.restart(t,e,n),r):(r._restart=r.restart,r.restart=function(t,e,n){e=+e,n=null==n?DM():+n,r._restart((function a(o){o+=i,r._restart(a,i+=e,n),t(o)}),e,n)},r.restart(t,e,n),r)}((function(e){t({timestamp:Date.now(),elapsed:e})}),e))},events:function(t,e,n){var r,i=this,a=new Jt(n),o=function(n,r){i.runAsync(null,()=>{t===_C&&function(t,e){var n=t._eventConfig.defaults,r=n.prevent,i=n.allow;return!1!==r&&!0!==i&&(!0===r||!1===i||(r?r[e]:i?!i[e]:t.preventDefault()))}(i,e)&&n.preventDefault(),a.receive(vC(i,n,r))})};if("timer"===t)bC(i,"timer",e)&&i.timer(o,e);else if(t===_C)bC(i,"view",e)&&i.addEventListener(e,o,xC);else if("window"===t?bC(i,"window",e)&&"undefined"!=typeof window&&(r=[window]):"undefined"!=typeof document&&bC(i,"selector",e)&&(r=document.querySelectorAll(t)),r){for(var u=0,s=r.length;u<s;++u)r[u].addEventListener(e,o);i._eventListeners.push({type:e,sources:r,handler:o})}else i.warn("Can not resolve event source: "+t);return a},finalize:function(){var t,e,n,r=this._tooltip,i=this._timers,a=this._eventListeners;for(t=i.length;--t>=0;)i[t].stop();for(t=a.length;--t>=0;)for(e=(n=a[t]).sources.length;--e>=0;)n.sources[e].removeEventListener(n.type,n.handler);return r&&r.call(this,this._handler,null,null,null),this},hover:function(t,e){return e=[e||"update",(t=[t||"hover"])[0]],this.on(this.events("view","mouseover",wC),kC,AC(t)),this.on(this.events("view","mouseout",wC),kC,AC(e)),this},data:function(t,e){return arguments.length<2?dC(this,t).values.value:pC.call(this,t,jt().remove(p).insert(e))},change:pC,insert:function(t,e){return pC.call(this,t,jt().insert(e))},remove:function(t,e){return pC.call(this,t,jt().remove(e))},scale:function(t){var e=this._runtime.scales;return rt(e,t)||u("Unrecognized scale or projection: "+t),e[t].value},initialize:function(t,e){const n=this,r=n._renderType,i=n._eventConfig.bind,a=jv(r);t=n._el=t?$C(n,t):null,function(t){const e=t.container();e&&(e.setAttribute("role","graphics-document"),e.setAttribute("aria-roleDescription","visualization"),cC(e,t.description()))}(n),a||n.error("Unrecognized renderer type: "+r);const o=a.handler||Gd,u=t?a.renderer:a.headless;return n._renderer=u?OC(n,n._renderer,t,u):null,n._handler=function(t,e,n,r){var i=new r(t.loader(),RC(t,t.tooltip())).scene(t.scenegraph().root).initialize(n,yC(t),t);return e&&e.handlers().forEach(t=>{i.on(t.type,t.handler)}),i}(n,n._handler,t,o),n._redraw=!0,t&&"none"!==i&&(e=e?n._elBind=$C(n,e):t.appendChild(MC("form",{class:"vega-bindings"})),n._bind.forEach(t=>{t.param.element&&"container"!==i&&(t.element=$C(n,t.param.element))}),n._bind.forEach(t=>{CC(n,t.element||e,t)})),n},toImageURL:async function(t,e){t!==Uv.Canvas&&t!==Uv.SVG&&t!==Uv.PNG&&u("Unrecognized image type: "+t);const n=await UC(this,t,e);return t===Uv.SVG?function(t,e){var n=new Blob([t],{type:e});return window.URL.createObjectURL(n)}(n.svg(),"image/svg+xml"):n.canvas().toDataURL("image/png")},toCanvas:async function(t,e){return(await UC(this,Uv.Canvas,t,e)).canvas()},toSVG:async function(t){return(await UC(this,Uv.SVG,t)).svg()},getState:function(t){return this._runtime.getState(t||{data:fB,signals:hB,recurse:!0})},setState:function(t){return this.runAsync(null,e=>{e._trigger=!1,e._runtime.setState(t)},t=>{t._trigger=!0}),this}});const wB=t=>+t||0;function kB(t){return _(t)?t.signal?t:{top:wB(t.top),bottom:wB(t.bottom),left:wB(t.left),right:wB(t.right)}:{top:e=wB(t),bottom:e,left:e,right:e};var e}const AB=t=>_(t)&&!v(t)?K({},t):{value:t};function MB(t,e,n,r){if(null!=n){return _(n)&&!v(n)||v(n)&&n.length&&_(n[0])?t.update[e]=n:t[r||"enter"][e]={value:n},1}return 0}function EB(t,e,n){for(const n in e)MB(t,n,e[n]);for(const e in n)MB(t,e,n[e],"update")}function DB(t,e,n){for(const r in e)n&&rt(n,r)||(t[r]=K(t[r]||{},e[r]));return t}function CB(t,e){return e&&(e.enter&&e.enter[t]||e.update&&e.update[t])}const FB="mark",SB="frame",BB="scope",TB="legend-label",zB="title-text",NB="title-subtitle";function OB(t,e,n){t[e]=n&&n.signal?{signal:n.signal}:{value:n}}const RB=t=>dt(t)?bt(t):t.signal?`(${t.signal})`:UB(t);function $B(t){if(null!=t.gradient)return function(t){const e=[t.start,t.stop,t.count].map(t=>null==t?null:bt(t));for(;e.length&&null==A(e);)e.pop();return e.unshift(RB(t.gradient)),`gradient(${e.join(",")})`}(t);let e=t.signal?`(${t.signal})`:t.color?function(t){return t.c?qB("hcl",t.h,t.c,t.l):t.h||t.s?qB("hsl",t.h,t.s,t.l):t.l||t.a?qB("lab",t.l,t.a,t.b):t.r||t.g||t.b?qB("rgb",t.r,t.g,t.b):null}(t.color):null!=t.field?UB(t.field):void 0!==t.value?bt(t.value):void 0;return null!=t.scale&&(e=function(t,e){const n=RB(t.scale);null!=t.range?e=`lerp(_range(${n}), ${+t.range})`:(void 0!==e&&(e=`_scale(${n}, ${e})`),t.band&&(e=(e?e+"+":"")+`_bandwidth(${n})`+(1==+t.band?"":"*"+LB(t.band)),t.extra&&(e=`(datum.extra ? _scale(${n}, datum.extra.value) : ${e})`)),null==e&&(e="0"));return e}(t,e)),void 0===e&&(e=null),null!=t.exponent&&(e=`pow(${e},${LB(t.exponent)})`),null!=t.mult&&(e+="*"+LB(t.mult)),null!=t.offset&&(e+="+"+LB(t.offset)),t.round&&(e=`round(${e})`),e}const qB=(t,e,n,r)=>`(${t}(${[e,n,r].map($B).join(",")})+'')`;function LB(t){return _(t)?"("+$B(t)+")":t}function UB(t){return function t(e){let n,r,i;if(e.signal)n="datum",i=e.signal;else if(e.group||e.parent){for(r=Math.max(1,e.level||1),n="item";r-- >0;)n+=".mark.group";e.parent?(i=e.parent,n+=".datum"):i=e.group}else e.datum?(n="datum",i=e.datum):u("Invalid field reference: "+bt(e));e.signal||(i=dt(i)?s(i).map(bt).join("]["):t(i));return n+"["+i+"]"}(_(t)?t:{datum:t})}function PB(t,e,n,r,i,a){const o={};(a=a||{}).encoders={$encode:o},t=function(t,e,n,r,i){const a={},o={};let u,s,l,c;for(s in s="lineBreak","text"!==e||null==i[s]||CB(s,t)||OB(a,s,i[s]),("legend"==n||String(n).startsWith("axis"))&&(n=null),c=n===SB?i.group:n===FB?K({},i.mark,i[e]):null,c)l=CB(s,t)||("fill"===s||"stroke"===s)&&(CB("fill",t)||CB("stroke",t)),l||OB(a,s,c[s]);for(s in I(r).forEach(e=>{const n=i.style&&i.style[e];for(const e in n)CB(e,t)||OB(a,e,n[e])}),t=K({},t),a)c=a[s],c.signal?(u=u||{})[s]=c:o[s]=c;return t.enter=K(o,t.enter),u&&(t.update=K(u,t.update)),t}(t,e,n,r,i.config);for(const n in t)o[n]=jB(t[n],e,a,i);return a}function jB(t,e,n,r){const i={},a={};for(const e in t)null!=t[e]&&(i[e]=IB((o=t[e],v(o)?function(t){let e="";return t.forEach(t=>{const n=$B(t);e+=t.test?`(${t.test})?${n}:`:n}),":"===A(e)&&(e+="null"),e}(o):$B(o)),r,n,a));var o;return{$expr:{marktype:e,channels:i},$fields:Object.keys(a),$output:Object.keys(t)}}function IB(t,e,n,r){const i=VS(t,e);return i.$fields.forEach(t=>r[t]=1),K(n,i.$params),i.$expr}const WB=["value","update","init","react","bind"];function HB(t,e){u(t+' for "outer" push: '+bt(e))}function YB(t,e){const n=t.name;if("outer"===t.push)e.signals[n]||HB("No prior signal definition",n),WB.forEach(e=>{void 0!==t[e]&&HB("Invalid property ",e)});else{const r=e.addSignal(n,t.value);!1===t.react&&(r.react=!1),t.bind&&e.addBinding(n,t.bind)}}function VB(t,e,n,r){this.id=-1,this.type=t,this.value=e,this.params=n,r&&(this.parent=r)}function GB(t,e,n,r){return new VB(t,e,n,r)}function XB(t,e){return GB("operator",t,e)}function JB(t){const e={$ref:t.id};return t.id<0&&(t.refs=t.refs||[]).push(e),e}function ZB(t,e){return e?{$field:t,$name:e}:{$field:t}}const QB=ZB("key");function KB(t,e){return{$compare:t,$order:e}}function tT(t,e){return(t&&t.signal?"$"+t.signal:t||"")+(t&&e?"_":"")+(e&&e.signal?"$"+e.signal:e||"")}const eT="scope",nT="view";function rT(t){return t&&t.signal}function iT(t){if(rT(t))return!0;if(_(t))for(const e in t)if(iT(t[e]))return!0;return!1}function aT(t,e){return null!=t?t:e}function oT(t){return t&&t.signal||t}const uT="timer";function sT(t,e){return(t.merge?lT:t.stream?cT:t.type?fT:u("Invalid stream specification: "+bt(t)))(t,e)}function lT(t,e){const n=hT({merge:t.merge.map(t=>sT(t,e))},t,e);return e.addStream(n).id}function cT(t,e){const n=hT({stream:sT(t.stream,e)},t,e);return e.addStream(n).id}function fT(t,e){let n;t.type===uT?(n=e.event(uT,t.throttle),t={between:t.between,filter:t.filter}):n=e.event(function(t){return t===eT?nT:t||nT}(t.source),t.type);const r=hT({stream:n},t,e);return 1===Object.keys(r).length?n:e.addStream(r).id}function hT(t,e,n){let r=e.between;return r&&(2!==r.length&&u('Stream "between" parameter must have 2 entries: '+bt(e)),t.between=[sT(r[0],n),sT(r[1],n)]),r=e.filter?[].concat(e.filter):[],(e.marktype||e.markname||e.markrole)&&r.push(function(t,e,n){const r="event.item";return r+(t&&"*"!==t?"&&"+r+".mark.marktype==='"+t+"'":"")+(n?"&&"+r+".mark.role==='"+n+"'":"")+(e?"&&"+r+".mark.name==='"+e+"'":"")}(e.marktype,e.markname,e.markrole)),e.source===eT&&r.push("inScope(event.item)"),r.length&&(t.filter=VS("("+r.join(")&&(")+")",n).$expr),null!=(r=e.throttle)&&(t.throttle=+r),null!=(r=e.debounce)&&(t.debounce=+r),e.consume&&(t.consume=!0),t}const dT="[",pT="]",gT=/[[\]{}]/,mT={"*":1,arc:1,area:1,group:1,image:1,line:1,path:1,rect:1,rule:1,shape:1,symbol:1,text:1,trail:1};let yT,vT;function _T(t,e,n,r,i){const a=t.length;let o,u=0;for(;e<a;++e){if(o=t[e],!u&&o===n)return e;i&&i.indexOf(o)>=0?--u:r&&r.indexOf(o)>=0&&++u}return e}function xT(t){const e=[],n=t.length;let r=0,i=0;for(;i<n;)i=_T(t,i,",","[{","]}"),e.push(t.substring(r,i).trim()),r=++i;if(0===e.length)throw"Empty event selector: "+t;return e}function bT(t){return"["===t[0]?function(t){const e=t.length;let n,r=1;if(r=_T(t,r,pT,dT,pT),r===e)throw"Empty between selector: "+t;if(n=xT(t.substring(1,r)),2!==n.length)throw"Between selector must have two elements: "+t;if(">"!==(t=t.slice(r+1).trim())[0])throw"Expected '>' after between selector: "+t;n=n.map(bT);const i=bT(t.slice(1).trim());if(i.between)return{between:n,stream:i};i.between=n;return i}(t):function(t){const e={source:yT},n=[];let r,i,a=[0,0],o=0,u=0,s=t.length,l=0;if("}"===t[s-1]){if(l=t.lastIndexOf("{"),!(l>=0))throw"Unmatched right brace: "+t;try{a=function(t){const e=t.split(",");if(!t.length||e.length>2)throw t;return e.map(e=>{const n=+e;if(n!=n)throw t;return n})}(t.substring(l+1,s-1))}catch(e){throw"Invalid throttle specification: "+t}s=(t=t.slice(0,l).trim()).length,l=0}if(!s)throw t;"@"===t[0]&&(o=++l);r=_T(t,l,":"),r<s&&(n.push(t.substring(u,r).trim()),u=l=++r);if(l=_T(t,l,dT),l===s)n.push(t.substring(u,s).trim());else if(n.push(t.substring(u,l).trim()),i=[],u=++l,u===s)throw"Unmatched left bracket: "+t;for(;l<s;){if(l=_T(t,l,pT),l===s)throw"Unmatched left bracket: "+t;if(i.push(t.substring(u,l).trim()),l<s-1&&t[++l]!==dT)throw"Expected left bracket: "+t;u=++l}if(!(s=n.length)||gT.test(n[s-1]))throw"Invalid event selector: "+t;s>1?(e.type=n[1],o?e.markname=n[0].slice(1):!function(t){return vT[t]}(n[0])?e.source=n[0]:e.marktype=n[0]):e.type=n[0];"!"===e.type.slice(-1)&&(e.consume=!0,e.type=e.type.slice(0,-1));null!=i&&(e.filter=i);a[0]&&(e.throttle=a[0]);a[1]&&(e.debounce=a[1]);return e}(t)}const wT={code:"_.$value",ast:{type:"Identifier",value:"value"}};function kT(t,e,n){const r=t.encode,i={target:n};let a=t.events,o=t.update,s=[];a||u("Signal update missing events specification."),dt(a)&&(a=function(t,e,n){return yT=e||"view",vT=n||mT,xT(t.trim()).map(bT)}(a,e.isSubscope()?eT:nT)),a=I(a).filter(t=>t.signal||t.scale?(s.push(t),0):1),s.length>1&&(s=[AT(s)]),a.length&&s.push(a.length>1?{merge:a}:a[0]),null!=r&&(o&&u("Signal encode and update are mutually exclusive."),o="encode(item(),"+bt(r)+")"),i.update=dt(o)?VS(o,e):null!=o.expr?VS(o.expr,e):null!=o.value?o.value:null!=o.signal?{$expr:wT,$params:{$value:e.signalRef(o.signal)}}:u("Invalid signal update specification."),t.force&&(i.options={force:!0}),s.forEach(t=>e.addUpdate(K(function(t,e){return{source:t.signal?e.signalRef(t.signal):t.scale?e.scaleRef(t.scale):sT(t,e)}}(t,e),i)))}function AT(t){return{signal:"["+t.map(t=>t.scale?'scale("'+t.scale+'")':t.signal)+"]"}}const MT=t=>(e,n,r)=>GB(t,n,e||void 0,r),ET=MT("aggregate"),DT=MT("axisticks"),CT=MT("bound"),FT=MT("collect"),ST=MT("compare"),BT=MT("datajoin"),TT=MT("encode"),zT=MT("expression"),NT=MT("facet"),OT=MT("field"),RT=MT("key"),$T=MT("legendentries"),qT=MT("load"),LT=MT("mark"),UT=MT("multiextent"),PT=MT("multivalues"),jT=MT("overlap"),IT=MT("params"),WT=MT("prefacet"),HT=MT("projection"),YT=MT("proxy"),VT=MT("relay"),GT=MT("render"),XT=MT("scale"),JT=MT("sieve"),ZT=MT("sortitems"),QT=MT("viewlayout"),KT=MT("values");let tz=0;const ez={min:"min",max:"max",count:"sum"};function nz(t,e){const n=e.getScale(t.name).params;let r;for(r in n.domain=oz(t.domain,t,e),null!=t.range&&(n.range=function t(e,n,r){const i=n.config.range;let a=e.range;if(a.signal)return n.signalRef(a.signal);if(dt(a)){if(i&&rt(i,a))return t(e=K({},e,{range:i[a]}),n,r);"width"===a?a=[0,{signal:"width"}]:"height"===a?a=wy(e.type)?[0,{signal:"height"}]:[{signal:"height"},0]:u("Unrecognized scale range value: "+bt(a))}else{if(a.scheme)return r.scheme=v(a.scheme)?iz(a.scheme,n):rz(a.scheme,n),a.extent&&(r.schemeExtent=iz(a.extent,n)),void(a.count&&(r.schemeCount=rz(a.count,n)));if(a.step)return void(r.rangeStep=rz(a.step,n));if(wy(e.type)&&!v(a))return oz(a,e,n);v(a)||u("Unsupported range type: "+bt(a))}return a.map(t=>(v(t)?iz:rz)(t,n))}(t,e,n)),null!=t.interpolate&&function(t,e){e.interpolate=rz(t.type||t),null!=t.gamma&&(e.interpolateGamma=rz(t.gamma))}(t.interpolate,n),null!=t.nice&&(n.nice=function(t){return _(t)?{interval:rz(t.interval),step:rz(t.step)}:rz(t)}(t.nice)),null!=t.bins&&(n.bins=function(t,e){return t.signal||v(t)?iz(t,e):e.objectProperty(t)}(t.bins,e)),t)rt(n,r)||"name"===r||(n[r]=rz(t[r],e))}function rz(t,e){return _(t)?t.signal?e.signalRef(t.signal):u("Unsupported object: "+bt(t)):t}function iz(t,e){return t.signal?e.signalRef(t.signal):t.map(t=>rz(t,e))}function az(t){u("Can not find data set: "+bt(t))}function oz(t,e,n){if(t)return t.signal?n.signalRef(t.signal):(v(t)?uz:t.fields?lz:sz)(t,e,n);null==e.domainMin&&null==e.domainMax||u("No scale domain defined for domainMin/domainMax to override.")}function uz(t,e,n){return t.map(t=>rz(t,n))}function sz(t,e,n){const r=n.getData(t.data);return r||az(t.data),wy(e.type)?r.valuesRef(n,t.field,fz(t.sort,!1)):Ey(e.type)?r.domainRef(n,t.field):r.extentRef(n,t.field)}function lz(t,e,n){const r=t.data,i=t.fields.reduce((t,e)=>(e=dt(e)?{data:r,field:e}:v(e)||e.signal?function(t,e){const n="_:vega:_"+tz++,r=FT({});if(v(t))r.value={$ingest:t};else if(t.signal){const i="setdata("+bt(n)+","+t.signal+")";r.params.input=e.signalRef(i)}return e.addDataPipeline(n,[r,JT({})]),{data:n,field:"data"}}(e,n):e,t.push(e),t),[]);return(wy(e.type)?cz:Ey(e.type)?hz:dz)(t,n,i)}function cz(t,e,n){const r=fz(t.sort,!0);let i,a;const o=n.map(t=>{const n=e.getData(t.data);return n||az(t.data),n.countsRef(e,t.field,r)}),u={groupby:QB,pulse:o};r&&(i=r.op||"count",a=r.field?tT(i,r.field):"count",u.ops=[ez[i]],u.fields=[e.fieldRef(a)],u.as=[a]),i=e.add(ET(u));const s=e.add(FT({pulse:JB(i)}));return a=e.add(KT({field:QB,sort:e.sortRef(r),pulse:JB(s)})),JB(a)}function fz(t,e){return t&&(t.field||t.op?t.field||"count"===t.op?e&&t.field&&t.op&&!ez[t.op]&&u("Multiple domain scales can not be sorted using "+t.op):u("No field provided for sort aggregate op: "+t.op):_(t)?t.field="key":t={field:"key"}),t}function hz(t,e,n){const r=n.map(t=>{const n=e.getData(t.data);return n||az(t.data),n.domainRef(e,t.field)});return JB(e.add(PT({values:r})))}function dz(t,e,n){const r=n.map(t=>{const n=e.getData(t.data);return n||az(t.data),n.extentRef(e,t.field)});return JB(e.add(UT({extents:r})))}function pz(t,e,n){return v(t)?t.map(t=>pz(t,e,n)):_(t)?t.signal?n.signalRef(t.signal):"fit"===e?t:u("Unsupported parameter object: "+bt(t)):t}const gz="top",mz="left",yz="right",vz="bottom",_z="center",xz="index",bz="label",wz="perc",kz="value",Az="guide-label",Mz="guide-title",Ez="group-title",Dz="group-subtitle",Cz="symbol",Fz="gradient",Sz="discrete",Bz="size",Tz=[Bz,"shape","fill","stroke","strokeWidth","strokeDash","opacity"],zz={name:1,style:1,interactive:1},Nz={value:0},Oz={value:1},Rz="group",$z="rect",qz="rule",Lz="text";function Uz(t){return t.type=Rz,t.interactive=t.interactive||!1,t}function Pz(t,e){const n=(n,r)=>aT(t[n],aT(e[n],r));return n.isVertical=n=>"vertical"===aT(t.direction,e.direction||(n?e.symbolDirection:e.gradientDirection)),n.gradientLength=()=>aT(t.gradientLength,e.gradientLength||e.gradientWidth),n.gradientThickness=()=>aT(t.gradientThickness,e.gradientThickness||e.gradientHeight),n.entryColumns=()=>aT(t.columns,aT(e.columns,+n.isVertical(!0))),n}function jz(t,e){const n=e&&(e.update&&e.update[t]||e.enter&&e.enter[t]);return n&&n.signal?n:n?n.value:null}function Iz(t,e,n){return`item.anchor === 'start' ? ${t} : item.anchor === 'end' ? ${e} : ${n}`}const Wz=Iz(bt(mz),bt(yz),bt(_z));function Hz(t,e){return e?t?_(t)?Object.assign({},t,{offset:Hz(t.offset,e)}):{value:t,offset:e}:e:t}function Yz(t,e){return e?(t.name=e.name,t.style=e.style||t.style,t.interactive=!!e.interactive,t.encode=DB(t.encode,e,zz)):t.interactive=!1,t}function Vz(t,e,n,r){const i=Pz(t,n),a=i.isVertical(),o=i.gradientThickness(),u=i.gradientLength();let s,l,c,f,h;a?(l=[0,1],c=[0,0],f=o,h=u):(l=[0,0],c=[1,0],f=u,h=o);const d={enter:s={opacity:Nz,x:Nz,y:Nz,width:AB(f),height:AB(h)},update:K({},s,{opacity:Oz,fill:{gradient:e,start:l,stop:c}}),exit:{opacity:Nz}};return EB(d,{stroke:i("gradientStrokeColor"),strokeWidth:i("gradientStrokeWidth")},{opacity:i("gradientOpacity")}),Yz({type:$z,role:"legend-gradient",encode:d},r)}function Gz(t,e,n,r,i){const a=Pz(t,n),o=a.isVertical(),u=a.gradientThickness(),s=a.gradientLength();let l,c,f,h,d="";o?(l="y",f="y2",c="x",h="width",d="1-"):(l="x",f="x2",c="y",h="height");const p={opacity:Nz,fill:{scale:e,field:kz}};p[l]={signal:d+"datum."+wz,mult:s},p[c]=Nz,p[f]={signal:d+"datum.perc2",mult:s},p[h]=AB(u);const g={enter:p,update:K({},p,{opacity:Oz}),exit:{opacity:Nz}};return EB(g,{stroke:a("gradientStrokeColor"),strokeWidth:a("gradientStrokeWidth")},{opacity:a("gradientOpacity")}),Yz({type:$z,role:"legend-band",key:kz,from:i,encode:g},r)}function Xz(t,e,n,r){const i=Pz(t,e),a=i.isVertical(),o=AB(i.gradientThickness()),u=i.gradientLength();let s,l,c,f,h=i("labelOverlap"),d="";const p={enter:s={opacity:Nz},update:l={opacity:Oz,text:{field:bz}},exit:{opacity:Nz}};return EB(p,{fill:i("labelColor"),fillOpacity:i("labelOpacity"),font:i("labelFont"),fontSize:i("labelFontSize"),fontStyle:i("labelFontStyle"),fontWeight:i("labelFontWeight"),limit:aT(t.labelLimit,e.gradientLabelLimit)}),a?(s.align={value:"left"},s.baseline=l.baseline={signal:'datum.perc<=0?"bottom":datum.perc>=1?"top":"middle"'},c="y",f="x",d="1-"):(s.align=l.align={signal:'datum.perc<=0?"left":datum.perc>=1?"right":"center"'},s.baseline={value:"top"},c="x",f="y"),s[c]=l[c]={signal:d+"datum."+wz,mult:u},s[f]=l[f]=o,o.offset=aT(t.labelOffset,e.gradientLabelOffset)||0,h=h?{separation:i("labelSeparation"),method:h,order:"datum.index"}:void 0,Yz({type:Lz,role:TB,style:Az,key:kz,from:r,encode:p,overlap:h},n)}function Jz(t,e,n,r,i){const a=Pz(t,e),o=n.entries,u=!(!o||!o.interactive),s=o?o.name:void 0,l=a("clipHeight"),c=a("symbolOffset"),f={data:"value"},h=`(${i}) ? datum.offset : datum.size`,d=l?AB(l):{field:Bz},p="datum.index",g=`max(1, ${i})`;let m,y,v,_,x;d.mult=.5,m={enter:y={opacity:Nz,x:{signal:h,mult:.5,offset:c},y:d},update:v={opacity:Oz,x:y.x,y:y.y},exit:{opacity:Nz}};let b=null,w=null;t.fill||(b=e.symbolBaseFillColor,w=e.symbolBaseStrokeColor),EB(m,{fill:a("symbolFillColor",b),shape:a("symbolType"),size:a("symbolSize"),stroke:a("symbolStrokeColor",w),strokeDash:a("symbolDash"),strokeDashOffset:a("symbolDashOffset"),strokeWidth:a("symbolStrokeWidth")},{opacity:a("symbolOpacity")}),Tz.forEach(e=>{t[e]&&(v[e]=y[e]={scale:t[e],field:kz})});const k=Yz({type:"symbol",role:"legend-symbol",key:kz,from:f,clip:!!l||void 0,encode:m},n.symbols),A=AB(c);A.offset=a("labelOffset"),m={enter:y={opacity:Nz,x:{signal:h,offset:A},y:d},update:v={opacity:Oz,text:{field:bz},x:y.x,y:y.y},exit:{opacity:Nz}},EB(m,{align:a("labelAlign"),baseline:a("labelBaseline"),fill:a("labelColor"),fillOpacity:a("labelOpacity"),font:a("labelFont"),fontSize:a("labelFontSize"),fontStyle:a("labelFontStyle"),fontWeight:a("labelFontWeight"),limit:a("labelLimit")});const M=Yz({type:Lz,role:TB,style:Az,key:kz,from:f,encode:m},n.labels);return m={enter:{noBound:{value:!l},width:Nz,height:l?AB(l):Nz,opacity:Nz},exit:{opacity:Nz},update:v={opacity:Oz,row:{signal:null},column:{signal:null}}},a.isVertical(!0)?(_=`ceil(item.mark.items.length / ${g})`,v.row.signal=`${p}%${_}`,v.column.signal=`floor(${p} / ${_})`,x={field:["row",p]}):(v.row.signal=`floor(${p} / ${g})`,v.column.signal=`${p} % ${g}`,x={field:p}),v.column.signal=`(${i})?${v.column.signal}:${p}`,Uz({role:BB,from:r={facet:{data:r,name:"value",groupby:xz}},encode:DB(m,o,zz),marks:[k,M],name:s,interactive:u,sort:x})}const Zz='item.orient === "left"',Qz='item.orient === "right"',Kz=`(${Zz} || ${Qz})`,tN="datum.vgrad && "+Kz,eN=Iz('"top"','"bottom"','"middle"'),nN=`datum.vgrad && ${Qz} ? (${Iz('"right"','"left"','"center"')}) : (${Kz} && !(datum.vgrad && ${Zz})) ? "left" : ${Wz}`,rN=`item._anchor || (${Kz} ? "middle" : "start")`,iN=`${tN} ? (${Zz} ? -90 : 90) : 0`,aN=`${Kz} ? (datum.vgrad ? (${Qz} ? "bottom" : "top") : ${eN}) : "top"`;function oN(t,e){let n;return _(t)&&(t.signal?n=t.signal:t.path?n="pathShape("+uN(t.path)+")":t.sphere&&(n="geoShape("+uN(t.sphere)+', {type: "Sphere"})')),n?e.signalRef(n):!!t}function uN(t){return _(t)&&t.signal?t.signal:bt(t)}function sN(t){const e=t.role||"";return e.indexOf("axis")&&e.indexOf("legend")&&e.indexOf("title")?t.type===Rz?BB:e||FB:e}function lN(t){return{marktype:t.type,name:t.name||void 0,role:t.role||sN(t),zindex:+t.zindex||void 0,aria:t.aria,description:t.description}}function cN(t,e){return t&&t.signal?e.signalRef(t.signal):!1!==t}function fN(t,e){const n=ho(t.type);n||u("Unrecognized transform type: "+bt(t.type));const r=GB(n.type.toLowerCase(),null,hN(n,t,e));return t.signal&&e.addSignal(t.signal,e.proxy(r)),r.metadata=n.metadata||{},r}function hN(t,e,n){const r={},i=t.params.length;for(let a=0;a<i;++a){const i=t.params[a];r[i.name]=dN(i,e,n)}return r}function dN(t,e,n){const r=t.type,i=e[t.name];return"index"===r?function(t,e,n){dt(e.from)||u('Lookup "from" parameter must be a string literal.');return n.getData(e.from).lookupRef(n,e.key)}(0,e,n):void 0!==i?"param"===r?function(t,e,n){const r=e[t.name];return t.array?(v(r)||u("Expected an array of sub-parameters. Instead: "+bt(r)),r.map(e=>gN(t,e,n))):gN(t,r,n)}(t,e,n):"projection"===r?n.projectionRef(e[t.name]):t.array&&!rT(i)?i.map(e=>pN(t,e,n)):pN(t,i,n):void(t.required&&u("Missing required "+bt(e.type)+" parameter: "+bt(t.name)))}function pN(t,e,n){const r=t.type;if(rT(e))return _N(r)?u("Expression references can not be signals."):xN(r)?n.fieldRef(e):bN(r)?n.compareRef(e):n.signalRef(e.signal);{const i=t.expr||xN(r);return i&&mN(e)?n.exprRef(e.expr,e.as):i&&yN(e)?ZB(e.field,e.as):_N(r)?VS(e,n):vN(r)?JB(n.getData(e).values):xN(r)?ZB(e):bN(r)?n.compareRef(e):e}}function gN(t,e,n){const r=t.params.length;let i;for(let n=0;n<r;++n){i=t.params[n];for(const t in i.key)if(i.key[t]!==e[t]){i=null;break}if(i)break}i||u("Unsupported parameter: "+bt(e));const a=K(hN(i,e,n),i.key);return JB(n.add(IT(a)))}const mN=t=>t&&t.expr,yN=t=>t&&t.field,vN=t=>"data"===t,_N=t=>"expr"===t,xN=t=>"field"===t,bN=t=>"compare"===t;function wN(t,e){return t.$ref?t:t.data&&t.data.$ref?t.data:JB(e.getData(t.data).output)}function kN(t,e,n,r,i){this.scope=t,this.input=e,this.output=n,this.values=r,this.aggregate=i,this.index={}}function AN(t){return dt(t)?t:null}function MN(t,e,n){const r=tT(n.op,n.field);let i;if(e.ops){for(let t=0,n=e.as.length;t<n;++t)if(e.as[t]===r)return}else e.ops=["count"],e.fields=[null],e.as=["count"];n.op&&(e.ops.push((i=n.op.signal)?t.signalRef(i):n.op),e.fields.push(t.fieldRef(n.field)),e.as.push(r))}function EN(t,e,n,r,i,a,o){const u=e[n]||(e[n]={}),s=function(t){return _(t)?("descending"===t.order?"-":"+")+tT(t.op,t.field):""}(a);let l,c,f=AN(i);if(null!=f&&(t=e.scope,f+=s?"|"+s:"",l=u[f]),!l){const n=a?{field:QB,pulse:e.countsRef(t,i,a)}:{field:t.fieldRef(i),pulse:JB(e.output)};s&&(n.sort=t.sortRef(a)),c=t.add(GB(r,void 0,n)),o&&(e.index[i]=c),l=JB(c),null!=f&&(u[f]=l)}return l}function DN(t,e,n){const r=t.remove,i=t.insert,a=t.toggle,o=t.modify,u=t.values,s=e.add(XB()),l=VS("if("+t.trigger+',modify("'+n+'",'+[i,r,a,o,u].map(t=>null==t?"null":t).join(",")+"),0)",e);s.update=l.$expr,s.params=l.$params}function CN(t,e){const n=sN(t),r=t.type===Rz,i=t.from&&t.from.facet,a=t.overlap;let o,s,l,c,f,h,d,p=t.layout||n===BB||n===SB;const g=n===FB||p||i,m=function(t,e,n){let r,i,a,o,s;return t?(r=t.facet)&&(e||u("Only group marks can be faceted."),null!=r.field?o=s=wN(r,n):(t.data?s=JB(n.getData(t.data).aggregate):(a=fN(K({type:"aggregate",groupby:I(r.groupby)},r.aggregate),n),a.params.key=n.keyRef(r.groupby),a.params.pulse=wN(r,n),o=s=JB(n.add(a))),i=n.keyRef(r.groupby,!0))):o=JB(n.add(FT(null,[{}]))),o||(o=wN(t,n)),{key:i,pulse:o,parent:s}}(t.from,r,e);s=e.add(BT({key:m.key||(t.key?ZB(t.key):void 0),pulse:m.pulse,clean:!r}));const y=JB(s);s=l=e.add(FT({pulse:y})),s=e.add(LT({markdef:lN(t),interactive:cN(t.interactive,e),clip:oN(t.clip,e),context:{$context:!0},groups:e.lookup(),parent:e.signals.parent?e.signalRef("parent"):null,index:e.markpath(),pulse:JB(s)}));const v=JB(s);s=c=e.add(TT(PB(t.encode,t.type,n,t.style,e,{mod:!1,pulse:v}))),s.params.parent=e.encode(),t.transform&&t.transform.forEach(t=>{const n=fN(t,e),r=n.metadata;(r.generates||r.changes)&&u("Mark transforms should not generate new data."),r.nomod||(c.params.mod=!0),n.params.pulse=JB(s),e.add(s=n)}),t.sort&&(s=e.add(ZT({sort:e.compareRef(t.sort),pulse:JB(s)})));const _=JB(s);(i||p)&&(p=e.add(QT({layout:e.objectProperty(t.layout),legends:e.legends,mark:v,pulse:_})),h=JB(p));const x=e.add(CT({mark:v,pulse:h||_}));d=JB(x),r&&(g&&(o=e.operators,o.pop(),p&&o.pop()),e.pushState(_,h||d,y),i?function(t,e,n){const r=t.from.facet,i=r.name,a=wN(r,e);let o;r.name||u("Facet must have a name: "+bt(r)),r.data||u("Facet must reference a data set: "+bt(r)),r.field?o=e.add(WT({field:e.fieldRef(r.field),pulse:a})):r.groupby?o=e.add(NT({key:e.keyRef(r.groupby),group:JB(e.proxy(n.parent)),pulse:a})):u("Facet must specify groupby or field: "+bt(r));const s=e.fork(),l=s.add(FT()),c=s.add(JT({pulse:JB(l)}));s.addData(i,new kN(s,l,l,c)),s.addSignal("parent",null),o.params.subflow={$subflow:s.parse(t).toRuntime()}}(t,e,m):g?function(t,e,n){const r=e.add(WT({pulse:n.pulse})),i=e.fork();i.add(JT()),i.addSignal("parent",null),r.params.subflow={$subflow:i.parse(t).toRuntime()}}(t,e,m):e.parse(t),e.popState(),g&&(p&&o.push(p),o.push(x))),a&&(d=function(t,e,n){const r=t.method,i=t.bound,a=t.separation,o={separation:rT(a)?n.signalRef(a.signal):a,method:rT(r)?n.signalRef(r.signal):r,pulse:e};t.order&&(o.sort=n.compareRef({field:t.order}));if(i){const t=i.tolerance;o.boundTolerance=rT(t)?n.signalRef(t.signal):+t,o.boundScale=n.scaleRef(i.scale),o.boundOrient=i.orient}return JB(n.add(jT(o)))}(a,d,e));const b=e.add(GT({pulse:d})),w=e.add(JT({pulse:JB(b)},void 0,e.parent()));null!=t.name&&(f=t.name,e.addData(f,new kN(e,l,b,w)),t.on&&t.on.forEach(t=>{(t.insert||t.remove||t.toggle)&&u("Marks only support modify triggers."),DN(t,e,f)}))}function FN(t,e){const n=e.config.legend,r=t.encode||{},i=Pz(t,n),a=r.legend||{},o=a.name||void 0,s=a.interactive,l=a.style,c={};let f,h,d,p=0;Tz.forEach(e=>t[e]?(c[e]=t[e],p=p||t[e]):0),p||u("Missing valid scale for legend.");const g=function(t,e){let n=t.type||Cz;t.type||1!==function(t){return Tz.reduce((e,n)=>e+(t[n]?1:0),0)}(t)||!t.fill&&!t.stroke||(n=by(e)?Fz:ky(e)?Sz:Cz);return n!==Fz?n:ky(e)?Sz:Fz}(t,e.scaleType(p)),m={title:null!=t.title,scales:c,type:g,vgrad:"symbol"!==g&&i.isVertical()},y=JB(e.add(FT(null,[m]))),v=JB(e.add($T(h={type:g,scale:e.scaleRef(p),count:e.objectProperty(i("tickCount")),limit:e.property(i("symbolLimit")),values:e.objectProperty(t.values),minstep:e.property(t.tickMinStep),formatType:e.property(t.formatType),formatSpecifier:e.property(t.format)})));return g===Fz?(d=[Vz(t,p,n,r.gradient),Xz(t,n,r.labels,v)],h.count=h.count||e.signalRef(`max(2,2*floor((${oT(i.gradientLength())})/100))`)):g===Sz?d=[Gz(t,p,n,r.gradient,v),Xz(t,n,r.labels,v)]:(f=function(t,e){const n=Pz(t,e);return{align:n("gridAlign"),columns:n.entryColumns(),center:{row:!0,column:!1},padding:{row:n("rowPadding"),column:n("columnPadding")}}}(t,n),d=[Jz(t,n,r,v,oT(f.columns))],h.size=function(t,e,n){const r=oT(BN("size",t,n)),i=oT(BN("strokeWidth",t,n)),a=oT(function(t,e,n){return jz("fontSize",t)||function(t,e,n){const r=e.config.style[n];return r&&r[t]}("fontSize",e,n)}(n[1].encode,e,Az));return VS(`max(ceil(sqrt(${r})+${i}),${a})`,e)}(t,e,d[0].marks)),d=[Uz({role:"legend-entry",from:y,encode:{enter:{x:{value:0},y:{value:0}}},marks:d,layout:f,interactive:s})],m.title&&d.push(function(t,e,n,r){const i=Pz(t,e),a={enter:{opacity:Nz},update:{opacity:Oz,x:{field:{group:"padding"}},y:{field:{group:"padding"}}},exit:{opacity:Nz}};return EB(a,{orient:i("titleOrient"),_anchor:i("titleAnchor"),anchor:{signal:rN},angle:{signal:iN},align:{signal:nN},baseline:{signal:aN},text:t.title,fill:i("titleColor"),fillOpacity:i("titleOpacity"),font:i("titleFont"),fontSize:i("titleFontSize"),fontStyle:i("titleFontStyle"),fontWeight:i("titleFontWeight"),limit:i("titleLimit"),lineHeight:i("titleLineHeight")},{align:i("titleAlign"),baseline:i("titleBaseline")}),Yz({type:Lz,role:"legend-title",style:Mz,from:r,encode:a},n)}(t,n,r.title,y)),CN(Uz({role:"legend",from:y,encode:DB(SN(i,t,n),a,zz),marks:d,aria:i("aria"),description:i("description"),zindex:i("zindex"),name:o,interactive:s,style:l}),e)}function SN(t,e,n){const r={enter:{},update:{}};return EB(r,{orient:t("orient"),offset:t("offset"),padding:t("padding"),titlePadding:t("titlePadding"),cornerRadius:t("cornerRadius"),fill:t("fillColor"),stroke:t("strokeColor"),strokeWidth:n.strokeWidth,strokeDash:n.strokeDash,x:t("legendX"),y:t("legendY"),format:e.format,formatType:e.formatType}),r}function BN(t,e,n){return e[t]?`scale("${e[t]}",datum)`:jz(t,n[0].encode)}kN.fromEntries=function(t,e){const n=e.length,r=e[n-1],i=e[n-2];let a=e[0],o=null,u=1;for(a&&"load"===a.type&&(a=e[1]),t.add(e[0]);u<n;++u)e[u].params.pulse=JB(e[u-1]),t.add(e[u]),"aggregate"===e[u].type&&(o=e[u]);return new kN(t,a,i,r,o)},kN.prototype={countsRef(t,e,n){const r=this,i=r.counts||(r.counts={}),a=AN(e);let o,u,s;return null!=a&&(t=r.scope,o=i[a]),o?n&&n.field&&MN(t,o.agg.params,n):(s={groupby:t.fieldRef(e,"key"),pulse:JB(r.output)},n&&n.field&&MN(t,s,n),u=t.add(ET(s)),o=t.add(FT({pulse:JB(u)})),o={agg:u,ref:JB(o)},null!=a&&(i[a]=o)),o.ref},tuplesRef(){return JB(this.values)},extentRef(t,e){return EN(t,this,"extent","extent",e,!1)},domainRef(t,e){return EN(t,this,"domain","values",e,!1)},valuesRef(t,e,n){return EN(t,this,"vals","values",e,n||!0)},lookupRef(t,e){return EN(t,this,"lookup","tupleindex",e,!1)},indataRef(t,e){return EN(t,this,"indata","tupleindex",e,!0,!0)}};function TN(t,e){const n=Pz(t=dt(t)?{text:t}:t,e.config.title),r=t.encode||{},i=r.group||{},a=i.name||void 0,o=i.interactive,u=i.style,s=[],l=JB(e.add(FT(null,[{}])));return s.push(function(t,e,n,r){const i={value:0},a=t.text,o={enter:{opacity:i},update:{opacity:{value:1}},exit:{opacity:i}};return EB(o,{text:a,align:{signal:"item.mark.group.align"},angle:{signal:"item.mark.group.angle"},limit:{signal:"item.mark.group.limit"},baseline:"top",dx:e("dx"),dy:e("dy"),fill:e("color"),font:e("font"),fontSize:e("fontSize"),fontStyle:e("fontStyle"),fontWeight:e("fontWeight"),lineHeight:e("lineHeight")},{align:e("align"),angle:e("angle"),baseline:e("baseline")}),Yz({type:Lz,role:zB,style:Ez,from:r,encode:o},n)}(t,n,function(t){const e=t.encode;return e&&e.title||K({name:t.name,interactive:t.interactive,style:t.style},e)}(t),l)),t.subtitle&&s.push(function(t,e,n,r){const i={value:0},a=t.subtitle,o={enter:{opacity:i},update:{opacity:{value:1}},exit:{opacity:i}};return EB(o,{text:a,align:{signal:"item.mark.group.align"},angle:{signal:"item.mark.group.angle"},limit:{signal:"item.mark.group.limit"},baseline:"top",dx:e("dx"),dy:e("dy"),fill:e("subtitleColor"),font:e("subtitleFont"),fontSize:e("subtitleFontSize"),fontStyle:e("subtitleFontStyle"),fontWeight:e("subtitleFontWeight"),lineHeight:e("subtitleLineHeight")},{align:e("align"),angle:e("angle"),baseline:e("baseline")}),Yz({type:Lz,role:NB,style:Dz,from:r,encode:o},n)}(t,n,r.subtitle,l)),CN(Uz({role:"title",from:l,encode:zN(n,i),marks:s,aria:n("aria"),description:n("description"),zindex:n("zindex"),name:a,interactive:o,style:u}),e)}function zN(t,e){const n={enter:{},update:{}};return EB(n,{orient:t("orient"),anchor:t("anchor"),align:{signal:Wz},angle:{signal:'item.orient==="left"?-90:item.orient==="right"?90:0'},limit:t("limit"),frame:t("frame"),offset:t("offset")||0,padding:t("subtitlePadding")}),DB(n,e,zz)}function NN(t,e){const n=[];t.transform&&t.transform.forEach(t=>{n.push(fN(t,e))}),t.on&&t.on.forEach(n=>{DN(n,e,t.name)}),e.addDataPipeline(t.name,function(t,e,n){const r=[];let i,a,o,u,s,l=null,c=!1,f=!1;t.values?iT(t.values)||iT(t.format)?(r.push(RN(e,t)),r.push(l=ON())):r.push(l=ON({$ingest:t.values,$format:t.format})):t.url?iT(t.url)||iT(t.format)?(r.push(RN(e,t)),r.push(l=ON())):r.push(l=ON({$request:t.url,$format:t.format})):t.source&&(l=i=I(t.source).map(t=>JB(e.getData(t).output)),r.push(null));for(a=0,o=n.length;a<o;++a)u=n[a],s=u.metadata,l||s.source||r.push(l=ON()),r.push(u),s.generates&&(f=!0),s.modifies&&!f&&(c=!0),s.source?l=u:s.changes&&(l=null);i&&(o=i.length-1,r[0]=VT({derive:c,pulse:o?i:i[0]}),(c||o)&&r.splice(1,0,ON()));l||r.push(ON());return r.push(JT({})),r}(t,e,n))}function ON(t){const e=FT({},t);return e.metadata={source:!0},e}function RN(t,e){return qT({url:e.url?t.property(e.url):void 0,async:e.async?t.property(e.async):void 0,values:e.values?t.property(e.values):void 0,format:t.objectProperty(e.format)})}const $N=t=>t===vz||t===gz,qN=(t,e,n)=>rT(t)?WN(t.signal,e,n):t===mz||t===gz?e:n,LN=(t,e,n)=>rT(t)?jN(t.signal,e,n):$N(t)?e:n,UN=(t,e,n)=>rT(t)?IN(t.signal,e,n):$N(t)?n:e,PN=(t,e,n)=>rT(t)?HN(t.signal,e,n):t===gz?{value:e}:{value:n},jN=(t,e,n)=>VN(`${t} === 'top' || ${t} === 'bottom'`,e,n),IN=(t,e,n)=>VN(`${t} !== 'top' && ${t} !== 'bottom'`,e,n),WN=(t,e,n)=>XN(`${t} === 'left' || ${t} === 'top'`,e,n),HN=(t,e,n)=>XN(t+" === 'top'",e,n),YN=(t,e,n)=>XN(t+" === 'right'",e,n),VN=(t,e,n)=>(e=null!=e?AB(e):e,n=null!=n?AB(n):n,GN(e)&&GN(n)?{signal:`${t} ? (${e=e?e.signal||bt(e.value):null}) : (${n=n?n.signal||bt(n.value):null})`}:[K({test:t},e)].concat(n||[])),GN=t=>null==t||1===Object.keys(t).length,XN=(t,e,n)=>({signal:`${t} ? (${ZN(e)}) : (${ZN(n)})`}),JN=(t,e,n,r,i)=>({signal:(null!=r?`${t} === 'left' ? (${ZN(r)}) : `:"")+(null!=n?`${t} === 'bottom' ? (${ZN(n)}) : `:"")+(null!=i?`${t} === 'right' ? (${ZN(i)}) : `:"")+(null!=e?`${t} === 'top' ? (${ZN(e)}) : `:"")+"(null)"}),ZN=t=>rT(t)?t.signal:null==t?null:bt(t),QN=(t,e)=>{const n=t.signal;return n&&n.endsWith("(null)")?{signal:n.slice(0,-6)+e.signal}:t};function KN(t,e,n,r){let i;if(e&&rt(e,t))return e[t];if(rt(n,t))return n[t];if(t.startsWith("title")){switch(t){case"titleColor":i="fill";break;case"titleFont":case"titleFontSize":case"titleFontWeight":i=t[5].toLowerCase()+t.slice(6)}return r["guide-title"][i]}if(t.startsWith("label")){switch(t){case"labelColor":i="fill";break;case"labelFont":case"labelFontSize":i=t[5].toLowerCase()+t.slice(6)}return r["guide-label"][i]}return null}function tO(t){const e={};for(const n of t)if(n)for(const t in n)e[t]=1;return Object.keys(e)}function eO(t,e){return{scale:t.scale,range:e}}function nO(t,e,n,r,i){const a=Pz(t,e),o=t.orient,u=t.gridScale,s=qN(o,1,-1),l=function(t,e){if(1===e);else if(_(t)){let n=t=K({},t);for(;null!=n.mult;){if(!_(n.mult))return n.mult=rT(e)?{signal:`(${n.mult}) * (${e.signal})`}:n.mult*e,t;n=n.mult=K({},n.mult)}n.mult=e}else t=rT(e)?{signal:`(${e.signal}) * (${t||0})`}:e*(t||0);return t}(t.offset,s);let c,f,h;const d={enter:c={opacity:Nz},update:h={opacity:Oz},exit:f={opacity:Nz}};EB(d,{stroke:a("gridColor"),strokeCap:a("gridCap"),strokeDash:a("gridDash"),strokeDashOffset:a("gridDashOffset"),strokeOpacity:a("gridOpacity"),strokeWidth:a("gridWidth")});const p={scale:t.scale,field:kz,band:i.band,extra:i.extra,offset:i.offset,round:a("tickRound")},g=LN(o,{signal:"height"},{signal:"width"}),m=u?{scale:u,range:0,mult:s,offset:l}:{value:0,offset:l},y=u?{scale:u,range:1,mult:s,offset:l}:K(g,{mult:s,offset:l});return c.x=h.x=LN(o,p,m),c.y=h.y=UN(o,p,m),c.x2=h.x2=UN(o,y),c.y2=h.y2=LN(o,y),f.x=LN(o,p),f.y=UN(o,p),Yz({type:qz,role:"axis-grid",key:kz,from:r,encode:d},n)}function rO(t,e,n,r,i){return{signal:'flush(range("'+t+'"), scale("'+t+'", datum.value), '+e+","+n+","+r+","+i+")"}}function iO(t,e,n,r,i,a){const o=Pz(t,e),u=t.orient,s=t.scale,l=qN(u,-1,1),c=oT(o("labelFlush")),f=oT(o("labelFlushOffset")),h=o("labelAlign"),d=o("labelBaseline");let p,g=0===c||!!c;const m=AB(i);m.mult=l,m.offset=AB(o("labelPadding")||0),m.offset.mult=l;const y={scale:s,field:kz,band:.5,offset:Hz(a.offset,o("labelOffset"))},v=LN(u,g?rO(s,c,'"left"','"right"','"center"'):{value:"center"},((t,e,n)=>rT(t)?YN(t.signal,e,n):t===yz?{value:e}:{value:n})(u,"left","right")),_=LN(u,PN(u,"bottom","top"),g?rO(s,c,'"top"','"bottom"','"middle"'):{value:"middle"}),x=rO(s,c,`-(${f})`,f,0);g=g&&f;const b={opacity:Nz,x:LN(u,y,m),y:UN(u,y,m)},w={enter:b,update:p={opacity:Oz,text:{field:bz},x:b.x,y:b.y,align:v,baseline:_},exit:{opacity:Nz,x:b.x,y:b.y}};EB(w,{dx:!h&&g?LN(u,x):null,dy:!d&&g?UN(u,x):null}),EB(w,{angle:o("labelAngle"),fill:o("labelColor"),fillOpacity:o("labelOpacity"),font:o("labelFont"),fontSize:o("labelFontSize"),fontWeight:o("labelFontWeight"),fontStyle:o("labelFontStyle"),limit:o("labelLimit"),lineHeight:o("labelLineHeight")},{align:h,baseline:d});const k=o("labelBound");let A=o("labelOverlap");return A=A||k?{separation:o("labelSeparation"),method:A,order:"datum.index",bound:k?{scale:s,orient:u,tolerance:k}:null}:void 0,p.align!==v&&(p.align=QN(p.align,v)),p.baseline!==_&&(p.baseline=QN(p.baseline,_)),Yz({type:Lz,role:"axis-label",style:Az,key:kz,from:r,encode:w,overlap:A},n)}function aO(t,e,n,r){const i=Pz(t,e),a=t.orient,o=qN(a,-1,1);let u,s;const l={enter:u={opacity:Nz,anchor:AB(i("titleAnchor",null)),align:{signal:Wz}},update:s=K({},u,{opacity:Oz,text:AB(t.title)}),exit:{opacity:Nz}},c={signal:`lerp(range("${t.scale}"), ${Iz(0,1,.5)})`};return s.x=LN(a,c),s.y=UN(a,c),u.angle=LN(a,Nz,((t,e)=>0===e?0:rT(t)?{signal:`(${t.signal}) * ${e}`}:{value:t*e})(o,90)),u.baseline=LN(a,PN(a,vz,gz),{value:vz}),s.angle=u.angle,s.baseline=u.baseline,EB(l,{fill:i("titleColor"),fillOpacity:i("titleOpacity"),font:i("titleFont"),fontSize:i("titleFontSize"),fontStyle:i("titleFontStyle"),fontWeight:i("titleFontWeight"),limit:i("titleLimit"),lineHeight:i("titleLineHeight")},{align:i("titleAlign"),angle:i("titleAngle"),baseline:i("titleBaseline")}),function(t,e,n,r){const i=(t,e)=>null!=t?(n.update[e]=QN(AB(t),n.update[e]),!1):!CB(e,r),a=i(t("titleX"),"x"),o=i(t("titleY"),"y");n.enter.auto=o===a?AB(o):LN(e,AB(o),AB(a))}(i,a,l,n),l.update.align=QN(l.update.align,u.align),l.update.angle=QN(l.update.angle,u.angle),l.update.baseline=QN(l.update.baseline,u.baseline),Yz({type:Lz,role:"axis-title",style:Mz,from:r,encode:l},n)}function oO(t,e){const n=function(t,e){var n,r,i,a=e.config,o=a.style,u=a.axis,s="band"===e.scaleType(t.scale)&&a.axisBand,l=t.orient;if(rT(l)){const t=tO([a.axisX,a.axisY]),e=tO([a.axisTop,a.axisBottom,a.axisLeft,a.axisRight]);for(i of(n={},t))n[i]=LN(l,KN(i,a.axisX,u,o),KN(i,a.axisY,u,o));for(i of(r={},e))r[i]=JN(l.signal,KN(i,a.axisTop,u,o),KN(i,a.axisBottom,u,o),KN(i,a.axisLeft,u,o),KN(i,a.axisRight,u,o))}else n=l===gz||l===vz?a.axisX:a.axisY,r=a["axis"+l[0].toUpperCase()+l.slice(1)];return n||r||s?K({},u,n,r,s):u}(t,e),r=t.encode||{},i=r.axis||{},a=i.name||void 0,o=i.interactive,u=i.style,s=Pz(t,n),l=function(t){const e=t("tickBand");let n,r,i=t("tickOffset");return e?e.signal?(n={signal:`(${e.signal}) === 'extent' ? 1 : 0.5`},r={signal:`(${e.signal}) === 'extent'`},_(i)||(i={signal:`(${e.signal}) === 'extent' ? 0 : ${i}`})):"extent"===e?(n=1,r=!0,i=0):(n=.5,r=!1):(n=t("bandPosition"),r=t("tickExtra")),{extra:r,band:n,offset:i}}(s),c={scale:t.scale,ticks:!!s("ticks"),labels:!!s("labels"),grid:!!s("grid"),domain:!!s("domain"),title:null!=t.title},f=JB(e.add(FT({},[c]))),h=JB(e.add(DT({scale:e.scaleRef(t.scale),extra:e.property(l.extra),count:e.objectProperty(t.tickCount),values:e.objectProperty(t.values),minstep:e.property(t.tickMinStep),formatType:e.property(t.formatType),formatSpecifier:e.property(t.format)}))),d=[];let p;return c.grid&&d.push(nO(t,n,r.grid,h,l)),c.ticks&&(p=s("tickSize"),d.push(function(t,e,n,r,i,a){const o=Pz(t,e),u=t.orient,s=qN(u,-1,1);let l,c,f;const h={enter:l={opacity:Nz},update:f={opacity:Oz},exit:c={opacity:Nz}};EB(h,{stroke:o("tickColor"),strokeCap:o("tickCap"),strokeDash:o("tickDash"),strokeDashOffset:o("tickDashOffset"),strokeOpacity:o("tickOpacity"),strokeWidth:o("tickWidth")});const d=AB(i);d.mult=s;const p={scale:t.scale,field:kz,band:a.band,extra:a.extra,offset:a.offset,round:o("tickRound")};return f.y=l.y=LN(u,Nz,p),f.y2=l.y2=LN(u,d),c.x=LN(u,p),f.x=l.x=UN(u,Nz,p),f.x2=l.x2=UN(u,d),c.y=UN(u,p),Yz({type:qz,role:"axis-tick",key:kz,from:r,encode:h},n)}(t,n,r.ticks,h,p,l))),c.labels&&(p=c.ticks?p:0,d.push(iO(t,n,r.labels,h,p,l))),c.domain&&d.push(function(t,e,n,r){const i=Pz(t,e),a=t.orient;let o,u;const s={enter:o={opacity:Nz},update:u={opacity:Oz},exit:{opacity:Nz}};EB(s,{stroke:i("domainColor"),strokeCap:i("domainCap"),strokeDash:i("domainDash"),strokeDashOffset:i("domainDashOffset"),strokeWidth:i("domainWidth"),strokeOpacity:i("domainOpacity")});const l=eO(t,0),c=eO(t,1);return o.x=u.x=LN(a,l,Nz),o.x2=u.x2=LN(a,c),o.y=u.y=UN(a,l,Nz),o.y2=u.y2=UN(a,c),Yz({type:qz,role:"axis-domain",from:r,encode:s},n)}(t,n,r.domain,f)),c.title&&d.push(aO(t,n,r.title,f)),CN(Uz({role:"axis",from:f,encode:DB(uO(s,t),i,zz),marks:d,aria:s("aria"),description:s("description"),zindex:s("zindex"),name:a,interactive:o,style:u}),e)}function uO(t,e){const n={enter:{},update:{}};return EB(n,{orient:t("orient"),offset:t("offset")||0,position:aT(e.position,0),titlePadding:t("titlePadding"),minExtent:t("minExtent"),maxExtent:t("maxExtent"),range:{signal:`abs(span(range("${e.scale}")))`},translate:t("translate"),format:e.format,formatType:e.formatType}),n}function sO(t,e,n){const r=I(t.signals),i=I(t.scales);return n||r.forEach(t=>YB(t,e)),I(t.projections).forEach(t=>function(t,e){const n=e.config.projection||{},r={};for(const n in t)"name"!==n&&(r[n]=pz(t[n],n,e));for(const t in n)null==r[t]&&(r[t]=pz(n[t],t,e));e.addProjection(t.name,r)}(t,e)),i.forEach(t=>function(t,e){const n=t.type||"linear";_y(n)||u("Unrecognized scale type: "+bt(n)),e.addScale(t.name,{type:n,domain:void 0})}(t,e)),I(t.data).forEach(t=>NN(t,e)),i.forEach(t=>nz(t,e)),(n||r).forEach(t=>function(t,e){const n=e.getSignal(t.name);let r=t.update;t.init&&(r?u("Signals can not include both init and update expressions."):(r=t.init,n.initonly=!0)),r&&(r=VS(r,e),n.update=r.$expr,n.params=r.$params),t.on&&t.on.forEach(t=>kT(t,e,n.id))}(t,e)),I(t.axes).forEach(t=>oO(t,e)),I(t.marks).forEach(t=>CN(t,e)),I(t.legends).forEach(t=>FN(t,e)),t.title&&TN(t.title,e),e.parseLambdas(),e}function lO(t,e){const n=e.config,r=JB(e.root=e.add(XB())),i=function(t,e){const n=n=>aT(t[n],e[n]),r=[cO("background",n("background")),cO("autosize",bB(n("autosize"))),cO("padding",kB(n("padding"))),cO("width",n("width")||0),cO("height",n("height")||0)],i=r.reduce((t,e)=>(t[e.name]=e,t),{}),a={};return I(t.signals).forEach(t=>{rt(i,t.name)?t=K(i[t.name],t):r.push(t),a[t.name]=t}),I(e.signals).forEach(t=>{rt(a,t.name)||rt(i,t.name)||r.push(t)}),r}(t,n);i.forEach(t=>YB(t,e)),e.description=t.description||n.description,e.eventConfig=n.events,e.legends=e.objectProperty(n.legend&&n.legend.layout),e.locale=n.locale;const a=e.add(FT()),o=e.add(TT(PB((t=>DB({enter:{x:{value:0},y:{value:0}},update:{width:{signal:"width"},height:{signal:"height"}}},t))(t.encode),Rz,SB,t.style,e,{pulse:JB(a)}))),u=e.add(QT({layout:e.objectProperty(t.layout),legends:e.legends,autosize:e.signalRef("autosize"),mark:r,pulse:JB(o)}));e.operators.pop(),e.pushState(JB(o),JB(u),null),sO(t,e,i),e.operators.push(u);let s=e.add(CT({mark:r,pulse:JB(u)}));return s=e.add(GT({pulse:JB(s)})),s=e.add(JT({pulse:JB(s)})),e.addData("root",new kN(e,a,a,s)),e}function cO(t,e){return e&&e.signal?{name:t,update:e.signal}:{name:t,value:e}}function fO(t,e){this.config=t||{},this.options=e||{},this.bindings=[],this.field={},this.signals={},this.lambdas={},this.scales={},this.events={},this.data={},this.streams=[],this.updates=[],this.operators=[],this.eventConfig=null,this.locale=null,this._id=0,this._subid=0,this._nextsub=[0],this._parent=[],this._encode=[],this._lookup=[],this._markpath=[]}function hO(t){this.config=t.config,this.options=t.options,this.legends=t.legends,this.field=Object.create(t.field),this.signals=Object.create(t.signals),this.lambdas=Object.create(t.lambdas),this.scales=Object.create(t.scales),this.events=Object.create(t.events),this.data=Object.create(t.data),this.streams=[],this.updates=[],this.operators=[],this._id=0,this._subid=++t._nextsub[0],this._nextsub=t._nextsub,this._parent=t._parent.slice(),this._encode=t._encode.slice(),this._lookup=t._lookup.slice(),this._markpath=t._markpath}function dO(t){return(v(t)?pO:gO)(t)}function pO(t){const e=t.length;let n="[";for(let r=0;r<e;++r){const e=t[r];n+=(r>0?",":"")+(_(e)?e.signal||dO(e):bt(e))}return n+"]"}function gO(t){let e,n,r="{",i=0;for(e in t)n=t[e],r+=(++i>1?",":"")+bt(e)+":"+(_(n)?n.signal||dO(n):bt(n));return r+"}"}fO.prototype=hO.prototype={parse(t){return sO(t,this)},fork(){return new hO(this)},isSubscope(){return this._subid>0},toRuntime(){return this.finish(),{description:this.description,operators:this.operators,streams:this.streams,updates:this.updates,bindings:this.bindings,eventConfig:this.eventConfig,locale:this.locale}},id(){return(this._subid?this._subid+":":0)+this._id++},add(t){return this.operators.push(t),t.id=this.id(),t.refs&&(t.refs.forEach(e=>{e.$ref=t.id}),t.refs=null),t},proxy(t){const e=t instanceof VB?JB(t):t;return this.add(YT({value:e}))},addStream(t){return this.streams.push(t),t.id=this.id(),t},addUpdate(t){return this.updates.push(t),t},finish(){let t,e;for(t in this.root&&(this.root.root=!0),this.signals)this.signals[t].signal=t;for(t in this.scales)this.scales[t].scale=t;function n(t,e,n){let r,i;t&&(r=t.data||(t.data={}),i=r[e]||(r[e]=[]),i.push(n))}for(t in this.data){e=this.data[t],n(e.input,t,"input"),n(e.output,t,"output"),n(e.values,t,"values");for(const r in e.index)n(e.index[r],t,"index:"+r)}return this},pushState(t,e,n){this._encode.push(JB(this.add(JT({pulse:t})))),this._parent.push(e),this._lookup.push(n?JB(this.proxy(n)):null),this._markpath.push(-1)},popState(){this._encode.pop(),this._parent.pop(),this._lookup.pop(),this._markpath.pop()},parent(){return A(this._parent)},encode(){return A(this._encode)},lookup(){return A(this._lookup)},markpath(){const t=this._markpath;return++t[t.length-1]},fieldRef(t,e){if(dt(t))return ZB(t,e);t.signal||u("Unsupported field reference: "+bt(t));const n=t.signal;let r=this.field[n];if(!r){const t={name:this.signalRef(n)};e&&(t.as=e),this.field[n]=r=JB(this.add(OT(t)))}return r},compareRef(t){let e=!1;const n=t=>rT(t)?(e=!0,this.signalRef(t.signal)):function(t){return t&&t.expr}(t)?(e=!0,this.exprRef(t.expr)):t,r=I(t.field).map(n),i=I(t.order).map(n);return e?JB(this.add(ST({fields:r,orders:i}))):KB(r,i)},keyRef(t,e){let n=!1;const r=this.signals;return t=I(t).map(t=>rT(t)?(n=!0,JB(r[t.signal])):t),n?JB(this.add(RT({fields:t,flat:e}))):function(t,e){const n={$key:t};return e&&(n.$flat=!0),n}(t,e)},sortRef(t){if(!t)return t;const e=tT(t.op,t.field),n=t.order||"ascending";return n.signal?JB(this.add(ST({fields:e,orders:this.signalRef(n.signal)}))):KB(e,n)},event(t,e){const n=t+":"+e;if(!this.events[n]){const r=this.id();this.streams.push({id:r,source:t,type:e}),this.events[n]=r}return this.events[n]},hasOwnSignal(t){return rt(this.signals,t)},addSignal(t,e){this.hasOwnSignal(t)&&u("Duplicate signal name: "+bt(t));const n=e instanceof VB?e:this.add(XB(e));return this.signals[t]=n},getSignal(t){return this.signals[t]||u("Unrecognized signal name: "+bt(t)),this.signals[t]},signalRef(t){return this.signals[t]?JB(this.signals[t]):(rt(this.lambdas,t)||(this.lambdas[t]=this.add(XB(null))),JB(this.lambdas[t]))},parseLambdas(){const t=Object.keys(this.lambdas);for(let e=0,n=t.length;e<n;++e){const n=t[e],r=VS(n,this),i=this.lambdas[n];i.params=r.$params,i.update=r.$expr}},property(t){return t&&t.signal?this.signalRef(t.signal):t},objectProperty(t){return t&&_(t)?this.signalRef(t.signal||dO(t)):t},exprRef(t,e){const n={expr:VS(t,this)};return e&&(n.expr.$name=e),JB(this.add(zT(n)))},addBinding(t,e){this.bindings||u("Nested signals do not support binding: "+bt(t)),this.bindings.push(K({signal:t},e))},addScaleProj(t,e){rt(this.scales,t)&&u("Duplicate scale or projection name: "+bt(t)),this.scales[t]=this.add(e)},addScale(t,e){this.addScaleProj(t,XT(e))},addProjection(t,e){this.addScaleProj(t,HT(e))},getScale(t){return this.scales[t]||u("Unrecognized scale name: "+bt(t)),this.scales[t]},scaleRef(t){return JB(this.getScale(t))},scaleType(t){return this.getScale(t).params.type},projectionRef(t){return this.scaleRef(t)},projectionType(t){return this.scaleType(t)},addData(t,e){return rt(this.data,t)&&u("Duplicate data set name: "+bt(t)),this.data[t]=e},getData(t){return this.data[t]||u("Undefined data set name: "+bt(t)),this.data[t]},addDataPipeline(t,e){return rt(this.data,t)&&u("Duplicate data set name: "+bt(t)),this.addData(t,kN.fromEntries(this,e))}},K(fo,Ss,T_,lx,JA,XM,lD,pD,UD,tC,lC),t.Bounds=vf,t.CanvasHandler=Gd,t.CanvasRenderer=Kd,t.DATE=zn,t.DAY=Nn,t.DAYOFYEAR=On,t.Dataflow=so,t.Debug=4,t.Error=1,t.EventStream=Jt,t.Gradient=fl,t.GroupItem=xf,t.HOURS=Rn,t.Handler=Sd,t.Info=3,t.Item=_f,t.MILLISECONDS=Ln,t.MINUTES=$n,t.MONTH=Bn,t.Marks=gd,t.MultiPulse=ro,t.None=0,t.Operator=Vt,t.Parameters=Wt,t.Pulse=Ka,t.QUARTER=Sn,t.RenderType=Uv,t.Renderer=Td,t.ResourceLoader=kf,t.SECONDS=qn,t.SVGHandler=ep,t.SVGRenderer=kv,t.SVGStringRenderer=$v,t.Scenegraph=wd,t.TIME_UNITS=Un,t.Transform=co,t.View=mB,t.WEEK=Tn,t.Warn=2,t.YEAR=Fn,t.accessor=e,t.accessorFields=r,t.accessorName=n,t.array=I,t.ascending=V,t.bandwidthNRD=Bo,t.bin=To,t.bootstrapCI=zo,t.boundClip=Gv,t.boundContext=Wf,t.boundItem=md,t.boundMark=vd,t.boundStroke=Ef,t.changeset=jt,t.clampRange=W,t.compare=Y,t.constant=Z,t.cumulativeLogNormal=Yo,t.cumulativeNormal=Uo,t.cumulativeUniform=Qo,t.dayofyear=br,t.debounce=Q,t.defaultLocale=Ya,t.definition=ho,t.densityLogNormal=Ho,t.densityNormal=Lo,t.densityUniform=Zo,t.domChild=Ed,t.domClear=Dd,t.domCreate=Ad,t.domFind=Md,t.dotbin=No,t.error=u,t.expressionFunction=YS,t.extend=K,t.extent=tt,t.extentIndex=et,t.falsy=g,t.fastmap=at,t.field=l,t.flush=ot,t.font=ld,t.fontFamily=sd,t.fontSize=rd,t.format=Ne,t.formatLocale=Cn,t.formats=Oe,t.hasOwnProperty=rt,t.id=c,t.identity=f,t.inferType=he,t.inferTypes=de,t.ingest=Rt,t.inherits=ut,t.inrange=st,t.interpolate=Ty,t.interpolateColors=Fy,t.interpolateRange=Cy,t.intersect=Iv,t.intersectBoxLine=eh,t.intersectPath=Zf,t.intersectPoint=Qf,t.intersectRule=th,t.isArray=v,t.isBoolean=lt,t.isDate=ct,t.isFunction=H,t.isNumber=ft,t.isObject=_,t.isRegExp=ht,t.isString=dt,t.isTuple=zt,t.key=pt,t.lerp=gt,t.lineHeight=id,t.loader=Ga,t.locale=Ha,t.logger=y,t.lruCache=mt,t.markup=vv,t.merge=yt,t.mergeConfig=b,t.multiLineOffset=od,t.one=d,t.pad=_t,t.panLinear=T,t.panLog=z,t.panPow=N,t.panSymlog=O,t.parse=function(t,e,n){return _(t)||u("Input Vega specification must be an object."),lO(t,new fO(e=b(function(){const t="sans-serif",e="#4c78a8",n="#000",r="#888",i="#ddd";return{description:"Vega visualization",padding:0,autosize:"pad",background:null,events:{defaults:{allow:["wheel"]}},group:null,mark:null,arc:{fill:e},area:{fill:e},image:null,line:{stroke:e,strokeWidth:2},path:{stroke:e},rect:{fill:e},rule:{stroke:n},shape:{stroke:e},symbol:{fill:e,size:64},text:{fill:n,font:t,fontSize:11},trail:{fill:e,size:2},style:{"guide-label":{fill:n,font:t,fontSize:10},"guide-title":{fill:n,font:t,fontSize:11,fontWeight:"bold"},"group-title":{fill:n,font:t,fontSize:13,fontWeight:"bold"},"group-subtitle":{fill:n,font:t,fontSize:12},point:{size:30,strokeWidth:2,shape:"circle"},circle:{size:30,strokeWidth:2},square:{size:30,strokeWidth:2,shape:"square"},cell:{fill:"transparent",stroke:i}},title:{orient:"top",anchor:"middle",offset:4,subtitlePadding:3},axis:{minExtent:0,maxExtent:200,bandPosition:.5,domain:!0,domainWidth:1,domainColor:r,grid:!1,gridWidth:1,gridColor:i,labels:!0,labelAngle:0,labelLimit:180,labelOffset:0,labelPadding:2,ticks:!0,tickColor:r,tickOffset:0,tickRound:!0,tickSize:5,tickWidth:1,titlePadding:4},axisBand:{tickOffset:-.5},projection:{type:"mercator"},legend:{orient:"right",padding:0,gridAlign:"each",columnPadding:10,rowPadding:2,symbolDirection:"vertical",gradientDirection:"vertical",gradientLength:200,gradientThickness:16,gradientStrokeColor:i,gradientStrokeWidth:0,gradientLabelOffset:2,labelAlign:"left",labelBaseline:"middle",labelLimit:160,labelOffset:4,labelOverlap:!0,symbolLimit:30,symbolType:"circle",symbolSize:100,symbolOffset:0,symbolStrokeWidth:1.5,symbolBaseFillColor:"transparent",symbolBaseStrokeColor:r,titleLimit:180,titleOrient:"top",titlePadding:5,layout:{offset:18,direction:"horizontal",left:{direction:"vertical"},right:{direction:"vertical"}}},range:{category:{scheme:"tableau10"},ordinal:{scheme:"blues"},heatmap:{scheme:"yellowgreenblue"},ramp:{scheme:"blues"},diverging:{scheme:"blueorange",extent:[1,0]},symbol:["circle","square","triangle-up","cross","diamond","triangle-right","triangle-down","triangle-left"]}}}(),e,t.config),n)).toRuntime()},t.pathCurves=Ec,t.pathEqual=Jv,t.pathParse=Fc,t.pathRectangle=Kc,t.pathRender=Uc,t.pathSymbols=Wc,t.pathTrail=tf,t.peek=A,t.point=Fd,t.projection=LA,t.quantileLogNormal=Vo,t.quantileNormal=Po,t.quantileUniform=Ko,t.quantiles=Fo,t.quantizeInterpolator=Sy,t.quarter=P,t.quartiles=So,t.randomInteger=function(e,n){let r,i,a;null==n&&(n=e,e=0);const o={min(t){return arguments.length?(r=t||0,a=i-r,o):r},max(t){return arguments.length?(i=t||0,a=i-r,o):i},sample:()=>r+Math.floor(a*t.random()),pdf:t=>t===Math.floor(t)&&t>=r&&t<i?1/a:0,cdf(t){const e=Math.floor(t);return e<r?0:e>=i?1:(e-r+1)/a},icdf:t=>t>=0&&t<=1?r-1+Math.floor(t*a):NaN};return o.min(e).max(n)},t.randomKDE=Io,t.randomLCG=function(t){return function(){return(t=(1103515245*t+12345)%2147483647)/2147483647}},t.randomLogNormal=Go,t.randomMixture=Xo,t.randomNormal=jo,t.randomUniform=tu,t.read=Va,t.regressionExp=uu,t.regressionLinear=au,t.regressionLoess=hu,t.regressionLog=ou,t.regressionPoly=cu,t.regressionPow=su,t.regressionQuad=lu,t.renderModule=jv,t.repeat=vt,t.resetDefaultLocale=function(){return En(),Pa(),Ya()},t.resetSVGClipId=mf,t.resetSVGDefIds=function(){mf(),ol=0},t.responseType=Re,t.runtimeContext=nB,t.sampleCurve=mu,t.sampleLogNormal=Wo,t.sampleNormal=qo,t.sampleUniform=Jo,t.scale=vy,t.sceneEqual=Xv,t.sceneFromJSON=bd,t.scenePickVisit=hh,t.sceneToJSON=xd,t.sceneVisit=fh,t.sceneZOrder=ch,t.scheme=Ry,t.serializeXML=_v,t.setRandom=function(e){t.random=e},t.span=xt,t.splitAccessPath=s,t.stringValue=bt,t.textMetrics=Zh,t.timeBin=fi,t.timeFloor=$r,t.timeFormatLocale=Ia,t.timeInterval=Ir,t.timeOffset=Yr,t.timeSequence=Xr,t.timeUnitSpecifier=Wn,t.timeUnits=jn,t.toBoolean=wt,t.toDate=At,t.toNumber=M,t.toSet=Et,t.toString=Mt,t.transform=po,t.transforms=fo,t.truncate=Dt,t.truthy=p,t.tupleid=Nt,t.typeParsers=le,t.utcFloor=Ur,t.utcInterval=Wr,t.utcOffset=Vr,t.utcSequence=Jr,t.utcdayofyear=Dr,t.utcquarter=j,t.utcweek=Cr,t.version="5.15.0",t.visitArray=Ct,t.week=wr,t.writeConfig=w,t.zero=h,t.zoomLinear=$,t.zoomLog=q,t.zoomPow=L,t.zoomSymlog=U,Object.defineProperty(t,"__esModule",{value:!0})}));
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("vega"),require("vega-lite")):"function"==typeof define&&define.amd?define(["vega","vega-lite"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).vegaEmbed=t(e.vega,e.vegaLite)}(this,(function(e,t){"use strict";function r(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,n.get?n:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var n=r(e),o=r(t),i=function(){return(i=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function a(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{l(n.next(e))}catch(e){i(e)}}function s(e){try{l(n.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}l((n=n.apply(e,t||[])).next())}))}function s(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}
/*!
   * https://github.com/Starcounter-Jack/JSON-Patch
   * (c) 2017 Joachim Wester
   * MIT license
   */var l,c=(l=function(e,t){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),p=Object.prototype.hasOwnProperty;function d(e,t){return p.call(e,t)}function u(e){if(Array.isArray(e)){for(var t=new Array(e.length),r=0;r<t.length;r++)t[r]=""+r;return t}if(Object.keys)return Object.keys(e);t=[];for(var n in e)d(e,n)&&t.push(n);return t}function f(e){switch(typeof e){case"object":return JSON.parse(JSON.stringify(e));case"undefined":return null;default:return e}}function h(e){for(var t,r=0,n=e.length;r<n;){if(!((t=e.charCodeAt(r))>=48&&t<=57))return!1;r++}return!0}function v(e){return-1===e.indexOf("/")&&-1===e.indexOf("~")?e:e.replace(/~/g,"~0").replace(/\//g,"~1")}function g(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}function m(e,t){var r=[e];for(var n in t){var o="object"==typeof t[n]?JSON.stringify(t[n],null,2):t[n];void 0!==o&&r.push(n+": "+o)}return r.join("\n")}var E=function(e){function t(t,r,n,o,i){var a=this.constructor,s=e.call(this,m(t,{name:r,index:n,operation:o,tree:i}))||this;return s.name=r,s.index=n,s.operation=o,s.tree=i,Object.setPrototypeOf(s,a.prototype),s.message=m(t,{name:r,index:n,operation:o,tree:i}),s}return c(t,e),t}(Error),b=E,y=f,w={add:function(e,t,r){return e[t]=this.value,{newDocument:r}},remove:function(e,t,r){var n=e[t];return delete e[t],{newDocument:r,removed:n}},replace:function(e,t,r){var n=e[t];return e[t]=this.value,{newDocument:r,removed:n}},move:function(e,t,r){var n=I(r,this.path);n&&(n=f(n));var o=A(r,{op:"remove",path:this.from}).removed;return A(r,{op:"add",path:this.path,value:o}),{newDocument:r,removed:n}},copy:function(e,t,r){var n=I(r,this.from);return A(r,{op:"add",path:this.path,value:f(n)}),{newDocument:r}},test:function(e,t,r){return{newDocument:r,test:L(e[t],this.value)}},_get:function(e,t,r){return this.value=e[t],{newDocument:r}}},O={add:function(e,t,r){return h(t)?e.splice(t,0,this.value):e[t]=this.value,{newDocument:r,index:t}},remove:function(e,t,r){return{newDocument:r,removed:e.splice(t,1)[0]}},replace:function(e,t,r){var n=e[t];return e[t]=this.value,{newDocument:r,removed:n}},move:w.move,copy:w.copy,test:w.test,_get:w._get};function I(e,t){if(""==t)return e;var r={op:"_get",path:t};return A(e,r),r.value}function A(e,t,r,n,o,i){if(void 0===r&&(r=!1),void 0===n&&(n=!0),void 0===o&&(o=!0),void 0===i&&(i=0),r&&("function"==typeof r?r(t,0,e,t.path):N(t,0)),""===t.path){var a={newDocument:e};if("add"===t.op)return a.newDocument=t.value,a;if("replace"===t.op)return a.newDocument=t.value,a.removed=e,a;if("move"===t.op||"copy"===t.op)return a.newDocument=I(e,t.from),"move"===t.op&&(a.removed=e),a;if("test"===t.op){if(a.test=L(e,t.value),!1===a.test)throw new b("Test operation failed","TEST_OPERATION_FAILED",i,t,e);return a.newDocument=e,a}if("remove"===t.op)return a.removed=e,a.newDocument=null,a;if("_get"===t.op)return t.value=e,a;if(r)throw new b("Operation `op` property is not one of operations defined in RFC-6902","OPERATION_OP_INVALID",i,t,e);return a}n||(e=f(e));var s=(t.path||"").split("/"),l=e,c=1,p=s.length,d=void 0,u=void 0,v=void 0;for(v="function"==typeof r?r:N;;){if(u=s[c],o&&"__proto__"==u)throw new TypeError("JSON-Patch: modifying `__proto__` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README");if(r&&void 0===d&&(void 0===l[u]?d=s.slice(0,c).join("/"):c==p-1&&(d=t.path),void 0!==d&&v(t,0,e,d)),c++,Array.isArray(l)){if("-"===u)u=l.length;else{if(r&&!h(u))throw new b("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index","OPERATION_PATH_ILLEGAL_ARRAY_INDEX",i,t,e);h(u)&&(u=~~u)}if(c>=p){if(r&&"add"===t.op&&u>l.length)throw new b("The specified index MUST NOT be greater than the number of elements in the array","OPERATION_VALUE_OUT_OF_BOUNDS",i,t,e);if(!1===(a=O[t.op].call(t,l,u,e)).test)throw new b("Test operation failed","TEST_OPERATION_FAILED",i,t,e);return a}}else if(u&&-1!=u.indexOf("~")&&(u=g(u)),c>=p){if(!1===(a=w[t.op].call(t,l,u,e)).test)throw new b("Test operation failed","TEST_OPERATION_FAILED",i,t,e);return a}l=l[u]}}function R(e,t,r,n,o){if(void 0===n&&(n=!0),void 0===o&&(o=!0),r&&!Array.isArray(t))throw new b("Patch sequence must be an array","SEQUENCE_NOT_AN_ARRAY");n||(e=f(e));for(var i=new Array(t.length),a=0,s=t.length;a<s;a++)i[a]=A(e,t[a],r,!0,o,a),e=i[a].newDocument;return i.newDocument=e,i}function N(e,t,r,n){if("object"!=typeof e||null===e||Array.isArray(e))throw new b("Operation is not an object","OPERATION_NOT_AN_OBJECT",t,e,r);if(!w[e.op])throw new b("Operation `op` property is not one of operations defined in RFC-6902","OPERATION_OP_INVALID",t,e,r);if("string"!=typeof e.path)throw new b("Operation `path` property is not a string","OPERATION_PATH_INVALID",t,e,r);if(0!==e.path.indexOf("/")&&e.path.length>0)throw new b('Operation `path` property must start with "/"',"OPERATION_PATH_INVALID",t,e,r);if(("move"===e.op||"copy"===e.op)&&"string"!=typeof e.from)throw new b("Operation `from` property is not present (applicable in `move` and `copy` operations)","OPERATION_FROM_REQUIRED",t,e,r);if(("add"===e.op||"replace"===e.op||"test"===e.op)&&void 0===e.value)throw new b("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)","OPERATION_VALUE_REQUIRED",t,e,r);if(("add"===e.op||"replace"===e.op||"test"===e.op)&&function e(t){if(void 0===t)return!0;if(t)if(Array.isArray(t)){for(var r=0,n=t.length;r<n;r++)if(e(t[r]))return!0}else if("object"==typeof t){var o=u(t),i=o.length;for(r=0;r<i;r++)if(e(t[o[r]]))return!0}return!1}(e.value))throw new b("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)","OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED",t,e,r);if(r)if("add"==e.op){var o=e.path.split("/").length,i=n.split("/").length;if(o!==i+1&&o!==i)throw new b("Cannot perform an `add` operation at the desired path","OPERATION_PATH_CANNOT_ADD",t,e,r)}else if("replace"===e.op||"remove"===e.op||"_get"===e.op){if(e.path!==n)throw new b("Cannot perform the operation at a path that does not exist","OPERATION_PATH_UNRESOLVABLE",t,e,r)}else if("move"===e.op||"copy"===e.op){var a=T([{op:"_get",path:e.from,value:void 0}],r);if(a&&"OPERATION_PATH_UNRESOLVABLE"===a.name)throw new b("Cannot perform the operation from a path that does not exist","OPERATION_FROM_UNRESOLVABLE",t,e,r)}}function T(e,t,r){try{if(!Array.isArray(e))throw new b("Patch sequence must be an array","SEQUENCE_NOT_AN_ARRAY");if(t)R(f(t),f(e),r||!0);else{r=r||N;for(var n=0;n<e.length;n++)r(e[n],n,t,void 0)}}catch(e){if(e instanceof b)return e;throw e}}function L(e,t){if(e===t)return!0;if(e&&t&&"object"==typeof e&&"object"==typeof t){var r,n,o,i=Array.isArray(e),a=Array.isArray(t);if(i&&a){if((n=e.length)!=t.length)return!1;for(r=n;0!=r--;)if(!L(e[r],t[r]))return!1;return!0}if(i!=a)return!1;var s=Object.keys(e);if((n=s.length)!==Object.keys(t).length)return!1;for(r=n;0!=r--;)if(!t.hasOwnProperty(s[r]))return!1;for(r=n;0!=r--;)if(!L(e[o=s[r]],t[o]))return!1;return!0}return e!=e&&t!=t}var $=Object.freeze({__proto__:null,JsonPatchError:b,deepClone:y,getValueByPointer:I,applyOperation:A,applyPatch:R,applyReducer:function(e,t,r){var n=A(e,t);if(!1===n.test)throw new b("Test operation failed","TEST_OPERATION_FAILED",r,t,e);return n.newDocument},validator:N,validate:T,_areEquals:L}),S=new WeakMap,x=function(e){this.observers=new Map,this.obj=e},C=function(e,t){this.callback=e,this.observer=t};
/*!
   * https://github.com/Starcounter-Jack/JSON-Patch
   * (c) 2017 Joachim Wester
   * MIT license
   */function D(e,t){void 0===t&&(t=!1);var r=S.get(e.object);F(r.value,e.object,e.patches,"",t),e.patches.length&&R(r.value,e.patches);var n=e.patches;return n.length>0&&(e.patches=[],e.callback&&e.callback(n)),n}function F(e,t,r,n,o){if(t!==e){"function"==typeof t.toJSON&&(t=t.toJSON());for(var i=u(t),a=u(e),s=!1,l=a.length-1;l>=0;l--){var c=e[h=a[l]];if(!d(t,h)||void 0===t[h]&&void 0!==c&&!1===Array.isArray(t))Array.isArray(e)===Array.isArray(t)?(o&&r.push({op:"test",path:n+"/"+v(h),value:f(c)}),r.push({op:"remove",path:n+"/"+v(h)}),s=!0):(o&&r.push({op:"test",path:n,value:e}),r.push({op:"replace",path:n,value:t}));else{var p=t[h];"object"==typeof c&&null!=c&&"object"==typeof p&&null!=p?F(c,p,r,n+"/"+v(h),o):c!==p&&(o&&r.push({op:"test",path:n+"/"+v(h),value:f(c)}),r.push({op:"replace",path:n+"/"+v(h),value:f(p)}))}}if(s||i.length!=a.length)for(l=0;l<i.length;l++){var h;d(e,h=i[l])||void 0===t[h]||r.push({op:"add",path:n+"/"+v(h),value:f(t[h])})}}}var P=Object.freeze({__proto__:null,unobserve:function(e,t){t.unobserve()},observe:function(e,t){var r,n=function(e){return S.get(e)}(e);if(n){var o=function(e,t){return e.observers.get(t)}(n,t);r=o&&o.observer}else n=new x(e),S.set(e,n);if(r)return r;if(r={},n.value=f(e),t){r.callback=t,r.next=null;var i=function(){D(r)},a=function(){clearTimeout(r.next),r.next=setTimeout(i)};"undefined"!=typeof window&&(window.addEventListener("mouseup",a),window.addEventListener("keyup",a),window.addEventListener("mousedown",a),window.addEventListener("keydown",a),window.addEventListener("change",a))}return r.patches=[],r.object=e,r.unobserve=function(){D(r),clearTimeout(r.next),function(e,t){e.observers.delete(t.callback)}(n,r),"undefined"!=typeof window&&(window.removeEventListener("mouseup",a),window.removeEventListener("keyup",a),window.removeEventListener("mousedown",a),window.removeEventListener("keydown",a),window.removeEventListener("change",a))},n.observers.set(t,new C(t,r)),r},generate:D,compare:function(e,t,r){void 0===r&&(r=!1);var n=[];return F(e,t,n,"",r),n}});Object.assign({},$,P,{JsonPatchError:E,deepClone:f,escapePathComponent:v,unescapePathComponent:g});var k=/("(?:[^\\"]|\\.)*")|[:,]/g,_=function(e,t){var r,n,o;return t=t||{},r=JSON.stringify([1],void 0,void 0===t.indent?2:t.indent).slice(2,-3),n=""===r?1/0:void 0===t.maxLength?80:t.maxLength,o=t.replacer,function e(t,i,a){var s,l,c,p,d,u,f,h,v,g,m,E;if(t&&"function"==typeof t.toJSON&&(t=t.toJSON()),void 0===(m=JSON.stringify(t,o)))return m;if(f=n-i.length-a,m.length<=f&&(v=m.replace(k,(function(e,t){return t||e+" "}))).length<=f)return v;if(null!=o&&(t=JSON.parse(m),o=void 0),"object"==typeof t&&null!==t){if(h=i+r,c=[],l=0,Array.isArray(t))for(g="[",s="]",f=t.length;l<f;l++)c.push(e(t[l],h,l===f-1?0:1)||"null");else for(g="{",s="}",f=(u=Object.keys(t)).length;l<f;l++)p=u[l],d=JSON.stringify(p)+": ",void 0!==(E=e(t[p],h,d.length+(l===f-1?0:1)))&&c.push(d+E);if(c.length>0)return[g,r+c.join(",\n"+h),s].join("\n"+i)}return m}(e,"",0)};var j={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER||9007199254740991,MAX_SAFE_COMPONENT_LENGTH:16};var z="object"==typeof process&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{},M=function(e,t,r){return e(r={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&r.path)}},r.exports),r.exports}((function(e,t){const{MAX_SAFE_COMPONENT_LENGTH:r}=j,n=(t=e.exports={}).re=[],o=t.src=[],i=t.t={};let a=0;const s=(e,t,r)=>{const s=a++;z(s,t),i[e]=s,o[s]=t,n[s]=new RegExp(t,r?"g":void 0)};s("NUMERICIDENTIFIER","0|[1-9]\\d*"),s("NUMERICIDENTIFIERLOOSE","[0-9]+"),s("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),s("MAINVERSION",`(${o[i.NUMERICIDENTIFIER]})\\.(${o[i.NUMERICIDENTIFIER]})\\.(${o[i.NUMERICIDENTIFIER]})`),s("MAINVERSIONLOOSE",`(${o[i.NUMERICIDENTIFIERLOOSE]})\\.(${o[i.NUMERICIDENTIFIERLOOSE]})\\.(${o[i.NUMERICIDENTIFIERLOOSE]})`),s("PRERELEASEIDENTIFIER",`(?:${o[i.NUMERICIDENTIFIER]}|${o[i.NONNUMERICIDENTIFIER]})`),s("PRERELEASEIDENTIFIERLOOSE",`(?:${o[i.NUMERICIDENTIFIERLOOSE]}|${o[i.NONNUMERICIDENTIFIER]})`),s("PRERELEASE",`(?:-(${o[i.PRERELEASEIDENTIFIER]}(?:\\.${o[i.PRERELEASEIDENTIFIER]})*))`),s("PRERELEASELOOSE",`(?:-?(${o[i.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${o[i.PRERELEASEIDENTIFIERLOOSE]})*))`),s("BUILDIDENTIFIER","[0-9A-Za-z-]+"),s("BUILD",`(?:\\+(${o[i.BUILDIDENTIFIER]}(?:\\.${o[i.BUILDIDENTIFIER]})*))`),s("FULLPLAIN",`v?${o[i.MAINVERSION]}${o[i.PRERELEASE]}?${o[i.BUILD]}?`),s("FULL",`^${o[i.FULLPLAIN]}$`),s("LOOSEPLAIN",`[v=\\s]*${o[i.MAINVERSIONLOOSE]}${o[i.PRERELEASELOOSE]}?${o[i.BUILD]}?`),s("LOOSE",`^${o[i.LOOSEPLAIN]}$`),s("GTLT","((?:<|>)?=?)"),s("XRANGEIDENTIFIERLOOSE",o[i.NUMERICIDENTIFIERLOOSE]+"|x|X|\\*"),s("XRANGEIDENTIFIER",o[i.NUMERICIDENTIFIER]+"|x|X|\\*"),s("XRANGEPLAIN",`[v=\\s]*(${o[i.XRANGEIDENTIFIER]})(?:\\.(${o[i.XRANGEIDENTIFIER]})(?:\\.(${o[i.XRANGEIDENTIFIER]})(?:${o[i.PRERELEASE]})?${o[i.BUILD]}?)?)?`),s("XRANGEPLAINLOOSE",`[v=\\s]*(${o[i.XRANGEIDENTIFIERLOOSE]})(?:\\.(${o[i.XRANGEIDENTIFIERLOOSE]})(?:\\.(${o[i.XRANGEIDENTIFIERLOOSE]})(?:${o[i.PRERELEASELOOSE]})?${o[i.BUILD]}?)?)?`),s("XRANGE",`^${o[i.GTLT]}\\s*${o[i.XRANGEPLAIN]}$`),s("XRANGELOOSE",`^${o[i.GTLT]}\\s*${o[i.XRANGEPLAINLOOSE]}$`),s("COERCE",`(^|[^\\d])(\\d{1,${r}})(?:\\.(\\d{1,${r}}))?(?:\\.(\\d{1,${r}}))?(?:$|[^\\d])`),s("COERCERTL",o[i.COERCE],!0),s("LONETILDE","(?:~>?)"),s("TILDETRIM",`(\\s*)${o[i.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",s("TILDE",`^${o[i.LONETILDE]}${o[i.XRANGEPLAIN]}$`),s("TILDELOOSE",`^${o[i.LONETILDE]}${o[i.XRANGEPLAINLOOSE]}$`),s("LONECARET","(?:\\^)"),s("CARETTRIM",`(\\s*)${o[i.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",s("CARET",`^${o[i.LONECARET]}${o[i.XRANGEPLAIN]}$`),s("CARETLOOSE",`^${o[i.LONECARET]}${o[i.XRANGEPLAINLOOSE]}$`),s("COMPARATORLOOSE",`^${o[i.GTLT]}\\s*(${o[i.LOOSEPLAIN]})$|^$`),s("COMPARATOR",`^${o[i.GTLT]}\\s*(${o[i.FULLPLAIN]})$|^$`),s("COMPARATORTRIM",`(\\s*)${o[i.GTLT]}\\s*(${o[i.LOOSEPLAIN]}|${o[i.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",s("HYPHENRANGE",`^\\s*(${o[i.XRANGEPLAIN]})\\s+-\\s+(${o[i.XRANGEPLAIN]})\\s*$`),s("HYPHENRANGELOOSE",`^\\s*(${o[i.XRANGEPLAINLOOSE]})\\s+-\\s+(${o[i.XRANGEPLAINLOOSE]})\\s*$`),s("STAR","(<|>)?=?\\s*\\*"),s("GTE0","^\\s*>=\\s*0.0.0\\s*$"),s("GTE0PRE","^\\s*>=\\s*0.0.0-0\\s*$")}));const B=/^[0-9]+$/,G=(e,t)=>{const r=B.test(e),n=B.test(t);return r&&n&&(e=+e,t=+t),e===t?0:r&&!n?-1:n&&!r?1:e<t?-1:1};var U={compareIdentifiers:G,rcompareIdentifiers:(e,t)=>G(t,e)};const{MAX_LENGTH:X,MAX_SAFE_INTEGER:V}=j,{re:W,t:H}=M,{compareIdentifiers:q}=U;class Y{constructor(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof Y){if(e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease)return e;e=e.version}else if("string"!=typeof e)throw new TypeError("Invalid Version: "+e);if(e.length>X)throw new TypeError(`version is longer than ${X} characters`);z("SemVer",e,t),this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease;const r=e.trim().match(t.loose?W[H.LOOSE]:W[H.FULL]);if(!r)throw new TypeError("Invalid Version: "+e);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>V||this.major<0)throw new TypeError("Invalid major version");if(this.minor>V||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>V||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map(e=>{if(/^[0-9]+$/.test(e)){const t=+e;if(t>=0&&t<V)return t}return e}):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+="-"+this.prerelease.join(".")),this.version}toString(){return this.version}compare(e){if(z("SemVer.compare",this.version,this.options,e),!(e instanceof Y)){if("string"==typeof e&&e===this.version)return 0;e=new Y(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof Y||(e=new Y(e,this.options)),q(this.major,e.major)||q(this.minor,e.minor)||q(this.patch,e.patch)}comparePre(e){if(e instanceof Y||(e=new Y(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let t=0;do{const r=this.prerelease[t],n=e.prerelease[t];if(z("prerelease compare",t,r,n),void 0===r&&void 0===n)return 0;if(void 0===n)return 1;if(void 0===r)return-1;if(r!==n)return q(r,n)}while(++t)}compareBuild(e){e instanceof Y||(e=new Y(e,this.options));let t=0;do{const r=this.build[t],n=e.build[t];if(z("prerelease compare",t,r,n),void 0===r&&void 0===n)return 0;if(void 0===n)return 1;if(void 0===r)return-1;if(r!==n)return q(r,n)}while(++t)}inc(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{let e=this.prerelease.length;for(;--e>=0;)"number"==typeof this.prerelease[e]&&(this.prerelease[e]++,e=-2);-1===e&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error("invalid increment argument: "+e)}return this.format(),this.raw=this.version,this}}var J=Y;const{MAX_LENGTH:Q}=j,{re:Z,t:K}=M;var ee=(e,t)=>{if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof J)return e;if("string"!=typeof e)return null;if(e.length>Q)return null;if(!(t.loose?Z[K.LOOSE]:Z[K.FULL]).test(e))return null;try{return new J(e,t)}catch(e){return null}};var te=(e,t)=>{const r=ee(e,t);return r?r.version:null};var re=(e,t)=>{const r=ee(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null};var ne=(e,t,r,n)=>{"string"==typeof r&&(n=r,r=void 0);try{return new J(e,r).inc(t,n).version}catch(e){return null}};var oe=(e,t,r)=>new J(e,r).compare(new J(t,r));var ie=(e,t,r)=>0===oe(e,t,r);var ae=(e,t)=>{if(ie(e,t))return null;{const r=ee(e),n=ee(t),o=r.prerelease.length||n.prerelease.length,i=o?"pre":"",a=o?"prerelease":"";for(const e in r)if(("major"===e||"minor"===e||"patch"===e)&&r[e]!==n[e])return i+e;return a}};var se=(e,t)=>new J(e,t).major;var le=(e,t)=>new J(e,t).minor;var ce=(e,t)=>new J(e,t).patch;var pe=(e,t)=>{const r=ee(e,t);return r&&r.prerelease.length?r.prerelease:null};var de=(e,t,r)=>oe(t,e,r);var ue=(e,t)=>oe(e,t,!0);var fe=(e,t,r)=>{const n=new J(e,r),o=new J(t,r);return n.compare(o)||n.compareBuild(o)};var he=(e,t)=>e.sort((e,r)=>fe(e,r,t));var ve=(e,t)=>e.sort((e,r)=>fe(r,e,t));var ge=(e,t,r)=>oe(e,t,r)>0;var me=(e,t,r)=>oe(e,t,r)<0;var Ee=(e,t,r)=>0!==oe(e,t,r);var be=(e,t,r)=>oe(e,t,r)>=0;var ye=(e,t,r)=>oe(e,t,r)<=0;var we=(e,t,r,n)=>{switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e===r;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e!==r;case"":case"=":case"==":return ie(e,r,n);case"!=":return Ee(e,r,n);case">":return ge(e,r,n);case">=":return be(e,r,n);case"<":return me(e,r,n);case"<=":return ye(e,r,n);default:throw new TypeError("Invalid operator: "+t)}};const{re:Oe,t:Ie}=M;var Ae=(e,t)=>{if(e instanceof J)return e;if("number"==typeof e&&(e=String(e)),"string"!=typeof e)return null;let r=null;if((t=t||{}).rtl){let t;for(;(t=Oe[Ie.COERCERTL].exec(e))&&(!r||r.index+r[0].length!==e.length);)r&&t.index+t[0].length===r.index+r[0].length||(r=t),Oe[Ie.COERCERTL].lastIndex=t.index+t[1].length+t[2].length;Oe[Ie.COERCERTL].lastIndex=-1}else r=e.match(Oe[Ie.COERCE]);return null===r?null:ee(`${r[2]}.${r[3]||"0"}.${r[4]||"0"}`,t)};class Re{constructor(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof Re)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new Re(e.raw,t);if(e instanceof He)return this.raw=e.value,this.set=[[e]],this.format(),this;if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map(e=>this.parseRange(e.trim())).filter(e=>e.length),!this.set.length)throw new TypeError("Invalid SemVer Range: "+e);this.format()}format(){return this.range=this.set.map(e=>e.join(" ").trim()).join("||").trim(),this.range}toString(){return this.range}parseRange(e){const t=this.options.loose;e=e.trim();const r=t?Te[Le.HYPHENRANGELOOSE]:Te[Le.HYPHENRANGE];e=e.replace(r,Ue(this.options.includePrerelease)),z("hyphen replace",e),e=e.replace(Te[Le.COMPARATORTRIM],$e),z("comparator trim",e,Te[Le.COMPARATORTRIM]),e=(e=(e=e.replace(Te[Le.TILDETRIM],Se)).replace(Te[Le.CARETTRIM],xe)).split(/\s+/).join(" ");const n=t?Te[Le.COMPARATORLOOSE]:Te[Le.COMPARATOR];return e.split(" ").map(e=>De(e,this.options)).join(" ").split(/\s+/).map(e=>Ge(e,this.options)).filter(this.options.loose?e=>!!e.match(n):()=>!0).map(e=>new He(e,this.options))}intersects(e,t){if(!(e instanceof Re))throw new TypeError("a Range is required");return this.set.some(r=>Ce(r,t)&&e.set.some(e=>Ce(e,t)&&r.every(r=>e.every(e=>r.intersects(e,t)))))}test(e){if(!e)return!1;if("string"==typeof e)try{e=new J(e,this.options)}catch(e){return!1}for(let t=0;t<this.set.length;t++)if(Xe(this.set[t],e,this.options))return!0;return!1}}var Ne=Re;const{re:Te,t:Le,comparatorTrimReplace:$e,tildeTrimReplace:Se,caretTrimReplace:xe}=M,Ce=(e,t)=>{let r=!0;const n=e.slice();let o=n.pop();for(;r&&n.length;)r=n.every(e=>o.intersects(e,t)),o=n.pop();return r},De=(e,t)=>(z("comp",e,t),e=_e(e,t),z("caret",e),e=Pe(e,t),z("tildes",e),e=ze(e,t),z("xrange",e),e=Be(e,t),z("stars",e),e),Fe=e=>!e||"x"===e.toLowerCase()||"*"===e,Pe=(e,t)=>e.trim().split(/\s+/).map(e=>ke(e,t)).join(" "),ke=(e,t)=>{const r=t.loose?Te[Le.TILDELOOSE]:Te[Le.TILDE];return e.replace(r,(t,r,n,o,i)=>{let a;return z("tilde",e,t,r,n,o,i),Fe(r)?a="":Fe(n)?a=`>=${r}.0.0 <${+r+1}.0.0-0`:Fe(o)?a=`>=${r}.${n}.0 <${r}.${+n+1}.0-0`:i?(z("replaceTilde pr",i),a=`>=${r}.${n}.${o}-${i} <${r}.${+n+1}.0-0`):a=`>=${r}.${n}.${o} <${r}.${+n+1}.0-0`,z("tilde return",a),a})},_e=(e,t)=>e.trim().split(/\s+/).map(e=>je(e,t)).join(" "),je=(e,t)=>{z("caret",e,t);const r=t.loose?Te[Le.CARETLOOSE]:Te[Le.CARET],n=t.includePrerelease?"-0":"";return e.replace(r,(t,r,o,i,a)=>{let s;return z("caret",e,t,r,o,i,a),Fe(r)?s="":Fe(o)?s=`>=${r}.0.0${n} <${+r+1}.0.0-0`:Fe(i)?s="0"===r?`>=${r}.${o}.0${n} <${r}.${+o+1}.0-0`:`>=${r}.${o}.0${n} <${+r+1}.0.0-0`:a?(z("replaceCaret pr",a),s="0"===r?"0"===o?`>=${r}.${o}.${i}-${a} <${r}.${o}.${+i+1}-0`:`>=${r}.${o}.${i}-${a} <${r}.${+o+1}.0-0`:`>=${r}.${o}.${i}-${a} <${+r+1}.0.0-0`):(z("no pr"),s="0"===r?"0"===o?`>=${r}.${o}.${i}${n} <${r}.${o}.${+i+1}-0`:`>=${r}.${o}.${i}${n} <${r}.${+o+1}.0-0`:`>=${r}.${o}.${i} <${+r+1}.0.0-0`),z("caret return",s),s})},ze=(e,t)=>(z("replaceXRanges",e,t),e.split(/\s+/).map(e=>Me(e,t)).join(" ")),Me=(e,t)=>{e=e.trim();const r=t.loose?Te[Le.XRANGELOOSE]:Te[Le.XRANGE];return e.replace(r,(r,n,o,i,a,s)=>{z("xRange",e,r,n,o,i,a,s);const l=Fe(o),c=l||Fe(i),p=c||Fe(a),d=p;return"="===n&&d&&(n=""),s=t.includePrerelease?"-0":"",l?r=">"===n||"<"===n?"<0.0.0-0":"*":n&&d?(c&&(i=0),a=0,">"===n?(n=">=",c?(o=+o+1,i=0,a=0):(i=+i+1,a=0)):"<="===n&&(n="<",c?o=+o+1:i=+i+1),"<"===n&&(s="-0"),r=`${n+o}.${i}.${a}${s}`):c?r=`>=${o}.0.0${s} <${+o+1}.0.0-0`:p&&(r=`>=${o}.${i}.0${s} <${o}.${+i+1}.0-0`),z("xRange return",r),r})},Be=(e,t)=>(z("replaceStars",e,t),e.trim().replace(Te[Le.STAR],"")),Ge=(e,t)=>(z("replaceGTE0",e,t),e.trim().replace(Te[t.includePrerelease?Le.GTE0PRE:Le.GTE0],"")),Ue=e=>(t,r,n,o,i,a,s,l,c,p,d,u,f)=>`${r=Fe(n)?"":Fe(o)?`>=${n}.0.0${e?"-0":""}`:Fe(i)?`>=${n}.${o}.0${e?"-0":""}`:a?">="+r:`>=${r}${e?"-0":""}`} ${l=Fe(c)?"":Fe(p)?`<${+c+1}.0.0-0`:Fe(d)?`<${c}.${+p+1}.0-0`:u?`<=${c}.${p}.${d}-${u}`:e?`<${c}.${p}.${+d+1}-0`:"<="+l}`.trim(),Xe=(e,t,r)=>{for(let r=0;r<e.length;r++)if(!e[r].test(t))return!1;if(t.prerelease.length&&!r.includePrerelease){for(let r=0;r<e.length;r++)if(z(e[r].semver),e[r].semver!==He.ANY&&e[r].semver.prerelease.length>0){const n=e[r].semver;if(n.major===t.major&&n.minor===t.minor&&n.patch===t.patch)return!0}return!1}return!0},Ve=Symbol("SemVer ANY");class We{static get ANY(){return Ve}constructor(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof We){if(e.loose===!!t.loose)return e;e=e.value}z("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===Ve?this.value="":this.value=this.operator+this.semver.version,z("comp",this)}parse(e){const t=this.options.loose?qe[Ye.COMPARATORLOOSE]:qe[Ye.COMPARATOR],r=e.match(t);if(!r)throw new TypeError("Invalid comparator: "+e);this.operator=void 0!==r[1]?r[1]:"","="===this.operator&&(this.operator=""),r[2]?this.semver=new J(r[2],this.options.loose):this.semver=Ve}toString(){return this.value}test(e){if(z("Comparator.test",e,this.options.loose),this.semver===Ve||e===Ve)return!0;if("string"==typeof e)try{e=new J(e,this.options)}catch(e){return!1}return we(e,this.operator,this.semver,this.options)}intersects(e,t){if(!(e instanceof We))throw new TypeError("a Comparator is required");if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return""===this.value||new Ne(e.value,t).test(this.value);if(""===e.operator)return""===e.value||new Ne(this.value,t).test(e.semver);const r=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),n=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),o=this.semver.version===e.semver.version,i=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),a=we(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),s=we(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return r||n||o&&i||a||s}}var He=We;const{re:qe,t:Ye}=M;var Je=(e,t,r)=>{try{t=new Ne(t,r)}catch(e){return!1}return t.test(e)};var Qe=(e,t)=>new Ne(e,t).set.map(e=>e.map(e=>e.value).join(" ").trim().split(" "));var Ze=(e,t,r)=>{let n=null,o=null,i=null;try{i=new Ne(t,r)}catch(e){return null}return e.forEach(e=>{i.test(e)&&(n&&-1!==o.compare(e)||(n=e,o=new J(n,r)))}),n};var Ke=(e,t,r)=>{let n=null,o=null,i=null;try{i=new Ne(t,r)}catch(e){return null}return e.forEach(e=>{i.test(e)&&(n&&1!==o.compare(e)||(n=e,o=new J(n,r)))}),n};var et=(e,t)=>{e=new Ne(e,t);let r=new J("0.0.0");if(e.test(r))return r;if(r=new J("0.0.0-0"),e.test(r))return r;r=null;for(let t=0;t<e.set.length;++t){e.set[t].forEach(e=>{const t=new J(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":r&&!ge(r,t)||(r=t);break;case"<":case"<=":break;default:throw new Error("Unexpected operation: "+e.operator)}})}return r&&e.test(r)?r:null};var tt=(e,t)=>{try{return new Ne(e,t).range||"*"}catch(e){return null}};const{ANY:rt}=He;var nt=(e,t,r,n)=>{let o,i,a,s,l;switch(e=new J(e,n),t=new Ne(t,n),r){case">":o=ge,i=ye,a=me,s=">",l=">=";break;case"<":o=me,i=be,a=ge,s="<",l="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(Je(e,t,n))return!1;for(let r=0;r<t.set.length;++r){const c=t.set[r];let p=null,d=null;if(c.forEach(e=>{e.semver===rt&&(e=new He(">=0.0.0")),p=p||e,d=d||e,o(e.semver,p.semver,n)?p=e:a(e.semver,d.semver,n)&&(d=e)}),p.operator===s||p.operator===l)return!1;if((!d.operator||d.operator===s)&&i(e,d.semver))return!1;if(d.operator===l&&a(e,d.semver))return!1}return!0};var ot=(e,t,r)=>nt(e,t,">",r);var it=(e,t,r)=>nt(e,t,"<",r);var at=(e,t,r)=>(e=new Ne(e,r),t=new Ne(t,r),e.intersects(t));const{ANY:st}=He,lt=(e,t,r)=>{if(1===e.length&&e[0].semver===st)return 1===t.length&&t[0].semver===st;const n=new Set;let o,i,a,s,l,c,p;for(const t of e)">"===t.operator||">="===t.operator?o=ct(o,t,r):"<"===t.operator||"<="===t.operator?i=pt(i,t,r):n.add(t.semver);if(n.size>1)return null;if(o&&i){if(a=oe(o.semver,i.semver,r),a>0)return null;if(0===a&&(">="!==o.operator||"<="!==i.operator))return null}for(const e of n){if(o&&!Je(e,String(o),r))return null;if(i&&!Je(e,String(i),r))return null;for(const n of t)if(!Je(e,String(n),r))return!1;return!0}for(const e of t){if(p=p||">"===e.operator||">="===e.operator,c=c||"<"===e.operator||"<="===e.operator,o)if(">"===e.operator||">="===e.operator){if(s=ct(o,e,r),s===e)return!1}else if(">="===o.operator&&!Je(o.semver,String(e),r))return!1;if(i)if("<"===e.operator||"<="===e.operator){if(l=pt(i,e,r),l===e)return!1}else if("<="===i.operator&&!Je(i.semver,String(e),r))return!1;if(!e.operator&&(i||o)&&0!==a)return!1}return!(o&&c&&!i&&0!==a)&&!(i&&p&&!o&&0!==a)},ct=(e,t,r)=>{if(!e)return t;const n=oe(e.semver,t.semver,r);return n>0?e:n<0||">"===t.operator&&">="===e.operator?t:e},pt=(e,t,r)=>{if(!e)return t;const n=oe(e.semver,t.semver,r);return n<0?e:n>0||"<"===t.operator&&"<="===e.operator?t:e};var dt=(e,t,r)=>{e=new Ne(e,r),t=new Ne(t,r);let n=!1;e:for(const o of e.set){for(const e of t.set){const t=lt(o,e,r);if(n=n||null!==t,t)continue e}if(n)return!1}return!0},ut={re:M.re,src:M.src,tokens:M.t,SEMVER_SPEC_VERSION:j.SEMVER_SPEC_VERSION,SemVer:J,compareIdentifiers:U.compareIdentifiers,rcompareIdentifiers:U.rcompareIdentifiers,parse:ee,valid:te,clean:re,inc:ne,diff:ae,major:se,minor:le,patch:ce,prerelease:pe,compare:oe,rcompare:de,compareLoose:ue,compareBuild:fe,sort:he,rsort:ve,gt:ge,lt:me,eq:ie,neq:Ee,gte:be,lte:ye,cmp:we,coerce:Ae,Comparator:He,Range:Ne,satisfies:Je,toComparators:Qe,maxSatisfying:Ze,minSatisfying:Ke,minVersion:et,validRange:tt,outside:nt,gtr:ot,ltr:it,intersects:at,simplifyRange:(e,t,r)=>{const n=[];let o=null,i=null;const a=e.sort((e,t)=>oe(e,t,r));for(const e of a){Je(e,t,r)?(i=e,o||(o=e)):(i&&n.push([o,i]),i=null,o=null)}o&&n.push([o,null]);const s=[];for(const[e,t]of n)e===t?s.push(e):t||e!==a[0]?t?e===a[0]?s.push("<="+t):s.push(`${e} - ${t}`):s.push(">="+e):s.push("*");const l=s.join(" || "),c="string"==typeof t.raw?t.raw:String(t);return l.length<c.length?l:t},subset:dt};function ft(e){const[t,r]=/\/schema\/([\w-]+)\/([\w\.\-]+)\.json$/g.exec(e).slice(1,3);return{library:t,version:r}}const ht="#fff",vt={background:"#333",title:{color:ht},style:{"guide-label":{fill:ht},"guide-title":{fill:ht}},axis:{domainColor:ht,gridColor:"#888",tickColor:ht}},gt="#4572a7",mt={background:"#fff",arc:{fill:gt},area:{fill:gt},line:{stroke:gt,strokeWidth:2},path:{stroke:gt},rect:{fill:gt},shape:{stroke:gt},symbol:{fill:gt,strokeWidth:1.5,size:50},axis:{bandPosition:.5,grid:!0,gridColor:"#000000",gridOpacity:1,gridWidth:.5,labelPadding:10,tickSize:5,tickWidth:.5},axisBand:{grid:!1,tickExtra:!0},legend:{labelBaseline:"middle",labelFontSize:11,symbolSize:50,symbolType:"square"},range:{category:["#4572a7","#aa4643","#8aa453","#71598e","#4598ae","#d98445","#94aace","#d09393","#b9cc98","#a99cbc"]}},Et="#30a2da",bt="#cbcbcb",yt="#f0f0f0",wt="#333",Ot={arc:{fill:Et},area:{fill:Et},axis:{domainColor:bt,grid:!0,gridColor:bt,gridWidth:1,labelColor:"#999",labelFontSize:10,titleColor:"#333",tickColor:bt,tickSize:10,titleFontSize:14,titlePadding:10,labelPadding:4},axisBand:{grid:!1},background:yt,group:{fill:yt},legend:{labelColor:wt,labelFontSize:11,padding:1,symbolSize:30,symbolType:"square",titleColor:wt,titleFontSize:14,titlePadding:10},line:{stroke:Et,strokeWidth:2},path:{stroke:Et,strokeWidth:.5},rect:{fill:Et},range:{category:["#30a2da","#fc4f30","#e5ae38","#6d904f","#8b8b8b","#b96db8","#ff9e27","#56cc60","#52d2ca","#52689e","#545454","#9fe4f8"],diverging:["#cc0020","#e77866","#f6e7e1","#d6e8ed","#91bfd9","#1d78b5"],heatmap:["#d6e8ed","#cee0e5","#91bfd9","#549cc6","#1d78b5"]},point:{filled:!0,shape:"circle"},shape:{stroke:Et},bar:{binSpacing:2,fill:Et,stroke:null},title:{anchor:"start",fontSize:24,fontWeight:600,offset:20}},It="#000",At={group:{fill:"#e5e5e5"},arc:{fill:It},area:{fill:It},line:{stroke:It},path:{stroke:It},rect:{fill:It},shape:{stroke:It},symbol:{fill:It,size:40},axis:{domain:!1,grid:!0,gridColor:"#FFFFFF",gridOpacity:1,labelColor:"#7F7F7F",labelPadding:4,tickColor:"#7F7F7F",tickSize:5.67,titleFontSize:16,titleFontWeight:"normal"},legend:{labelBaseline:"middle",labelFontSize:11,symbolSize:40},range:{category:["#000000","#7F7F7F","#1A1A1A","#999999","#333333","#B0B0B0","#4D4D4D","#C9C9C9","#666666","#DCDCDC"]}},Rt="Benton Gothic, sans-serif",Nt="#82c6df",Tt="Benton Gothic Bold, sans-serif",Lt="normal",$t={"category-6":["#ec8431","#829eb1","#c89d29","#3580b1","#adc839","#ab7fb4"],"fire-7":["#fbf2c7","#f9e39c","#f8d36e","#f4bb6a","#e68a4f","#d15a40","#ab4232"],"fireandice-6":["#e68a4f","#f4bb6a","#f9e39c","#dadfe2","#a6b7c6","#849eae"],"ice-7":["#edefee","#dadfe2","#c4ccd2","#a6b7c6","#849eae","#607785","#47525d"]},St={background:"#ffffff",title:{anchor:"start",color:"#000000",font:Tt,fontSize:22,fontWeight:"normal"},arc:{fill:Nt},area:{fill:Nt},line:{stroke:Nt,strokeWidth:2},path:{stroke:Nt},rect:{fill:Nt},shape:{stroke:Nt},symbol:{fill:Nt,size:30},axis:{labelFont:Rt,labelFontSize:11.5,labelFontWeight:"normal",titleFont:Tt,titleFontSize:13,titleFontWeight:Lt},axisX:{labelAngle:0,labelPadding:4,tickSize:3},axisY:{labelBaseline:"middle",maxExtent:45,minExtent:45,tickSize:2,titleAlign:"left",titleAngle:0,titleX:-45,titleY:-11},legend:{labelFont:Rt,labelFontSize:11.5,symbolType:"square",titleFont:Tt,titleFontSize:13,titleFontWeight:Lt},range:{category:$t["category-6"],diverging:$t["fireandice-6"],heatmap:$t["fire-7"],ordinal:$t["fire-7"],ramp:$t["fire-7"]}},xt="#ab5787",Ct="#979797",Dt={background:"#f9f9f9",arc:{fill:xt},area:{fill:xt},line:{stroke:xt},path:{stroke:xt},rect:{fill:xt},shape:{stroke:xt},symbol:{fill:xt,size:30},axis:{domainColor:Ct,domainWidth:.5,gridWidth:.2,labelColor:Ct,tickColor:Ct,tickWidth:.2,titleColor:Ct},axisBand:{grid:!1},axisX:{grid:!0,tickSize:10},axisY:{domain:!1,grid:!0,tickSize:0},legend:{labelFontSize:11,padding:1,symbolSize:30,symbolType:"square"},range:{category:["#ab5787","#51b2e5","#703c5c","#168dd9","#d190b6","#00609f","#d365ba","#154866","#666666","#c4c4c4"]}},Ft="#3e5c69",Pt={background:"#fff",arc:{fill:Ft},area:{fill:Ft},line:{stroke:Ft},path:{stroke:Ft},rect:{fill:Ft},shape:{stroke:Ft},symbol:{fill:Ft},axis:{domainWidth:.5,grid:!0,labelPadding:2,tickSize:5,tickWidth:.5,titleFontWeight:"normal"},axisBand:{grid:!1},axisX:{gridWidth:.2},axisY:{gridDash:[3],gridWidth:.4},legend:{labelFontSize:11,padding:1,symbolType:"square"},range:{category:["#3e5c69","#6793a6","#182429","#0570b0","#3690c0","#74a9cf","#a6bddb","#e2ddf2"]}},kt="#1696d2",_t="#000000",jt="Lato",zt="Lato",Mt={"main-colors":["#1696d2","#d2d2d2","#000000","#fdbf11","#ec008b","#55b748","#5c5859","#db2b27"],"shades-blue":["#CFE8F3","#A2D4EC","#73BFE2","#46ABDB","#1696D2","#12719E","#0A4C6A","#062635"],"shades-gray":["#F5F5F5","#ECECEC","#E3E3E3","#DCDBDB","#D2D2D2","#9D9D9D","#696969","#353535"],"shades-yellow":["#FFF2CF","#FCE39E","#FDD870","#FCCB41","#FDBF11","#E88E2D","#CA5800","#843215"],"shades-magenta":["#F5CBDF","#EB99C2","#E46AA7","#E54096","#EC008B","#AF1F6B","#761548","#351123"],"shades-green":["#DCEDD9","#BCDEB4","#98CF90","#78C26D","#55B748","#408941","#2C5C2D","#1A2E19"],"shades-black":["#D5D5D4","#ADABAC","#848081","#5C5859","#332D2F","#262223","#1A1717","#0E0C0D"],"shades-red":["#F8D5D4","#F1AAA9","#E9807D","#E25552","#DB2B27","#A4201D","#6E1614","#370B0A"],"one-group":["#1696d2","#000000"],"two-groups-cat-1":["#1696d2","#000000"],"two-groups-cat-2":["#1696d2","#fdbf11"],"two-groups-cat-3":["#1696d2","#db2b27"],"two-groups-seq":["#a2d4ec","#1696d2"],"three-groups-cat":["#1696d2","#fdbf11","#000000"],"three-groups-seq":["#a2d4ec","#1696d2","#0a4c6a"],"four-groups-cat-1":["#000000","#d2d2d2","#fdbf11","#1696d2"],"four-groups-cat-2":["#1696d2","#ec0008b","#fdbf11","#5c5859"],"four-groups-seq":["#cfe8f3","#73bf42","#1696d2","#0a4c6a"],"five-groups-cat-1":["#1696d2","#fdbf11","#d2d2d2","#ec008b","#000000"],"five-groups-cat-2":["#1696d2","#0a4c6a","#d2d2d2","#fdbf11","#332d2f"],"five-groups-seq":["#cfe8f3","#73bf42","#1696d2","#0a4c6a","#000000"],"six-groups-cat-1":["#1696d2","#ec008b","#fdbf11","#000000","#d2d2d2","#55b748"],"six-groups-cat-2":["#1696d2","#d2d2d2","#ec008b","#fdbf11","#332d2f","#0a4c6a"],"six-groups-seq":["#cfe8f3","#a2d4ec","#73bfe2","#46abdb","#1696d2","#12719e"],"diverging-colors":["#ca5800","#fdbf11","#fdd870","#fff2cf","#cfe8f3","#73bfe2","#1696d2","#0a4c6a"]},Bt={background:"#FFFFFF",title:{anchor:"start",fontSize:18,font:jt},axisX:{domain:!0,domainColor:_t,domainWidth:1,grid:!1,labelFontSize:12,labelFont:zt,labelAngle:0,tickColor:_t,tickSize:5,titleFontSize:12,titlePadding:10,titleFont:jt},axisY:{domain:!1,domainWidth:1,grid:!0,gridColor:"#DEDDDD",gridWidth:1,labelFontSize:12,labelFont:zt,labelPadding:8,ticks:!1,titleFontSize:12,titlePadding:10,titleFont:jt,titleAngle:0,titleY:-10,titleX:18},legend:{labelFontSize:12,labelFont:zt,symbolSize:100,titleFontSize:12,titlePadding:10,titleFont:jt,orient:"right",offset:10},view:{stroke:"transparent"},range:{category:Mt["six-groups-cat-1"],diverging:Mt["diverging-colors"],heatmap:Mt["diverging-colors"],ordinal:Mt["six-groups-seq"],ramp:Mt["shades-blue"]},area:{fill:kt},rect:{fill:kt},line:{color:kt,stroke:kt,strokeWidth:5},trail:{color:kt,stroke:kt,strokeWidth:0,size:1},path:{stroke:kt,strokeWidth:.5},point:{filled:!0},text:{font:"Lato",color:kt,fontSize:11,align:"center",fontWeight:400,size:11},style:{bar:{fill:kt,stroke:null}},arc:{fill:kt},shape:{stroke:kt},symbol:{fill:kt,size:30}},Gt="#3366CC",Ut="#ccc",Xt="Arial, sans-serif",Vt={arc:{fill:Gt},area:{fill:Gt},path:{stroke:Gt},rect:{fill:Gt},shape:{stroke:Gt},symbol:{stroke:Gt},circle:{fill:Gt},background:"#fff",padding:{top:10,right:10,bottom:10,left:10},style:{"guide-label":{font:Xt,fontSize:12},"guide-title":{font:Xt,fontSize:12},"group-title":{font:Xt,fontSize:12}},title:{font:Xt,fontSize:14,fontWeight:"bold",dy:-3,anchor:"start"},axis:{gridColor:Ut,tickColor:Ut,domain:!1,grid:!0},range:{category:["#4285F4","#DB4437","#F4B400","#0F9D58","#AB47BC","#00ACC1","#FF7043","#9E9D24","#5C6BC0","#F06292","#00796B","#C2185B"],heatmap:["#c6dafc","#5e97f6","#2a56c6"]}},Wt="2.9.0";var Ht=Object.freeze({__proto__:null,dark:vt,excel:mt,fivethirtyeight:Ot,ggplot2:At,googlecharts:Vt,latimes:St,quartz:Dt,urbaninstitute:Bt,version:Wt,vox:Pt});function qt(e,t,r){return e.fields=t||[],e.fname=r,e}function Yt(e){return 1===e.length?Jt(e[0]):Qt(e)}const Jt=e=>function(t){return t[e]},Qt=e=>{const t=e.length;return function(r){for(let n=0;n<t;++n)r=r[e[n]];return r}};function Zt(e){throw Error(e)}(function(e,t,r){const n=function(e){const t=[],r=e.length;let n,o,i,a=null,s=0,l="";function c(){t.push(l+e.substring(n,o)),l="",n=o+1}for(e+="",n=o=0;o<r;++o)if(i=e[o],"\\"===i)l+=e.substring(n,o),l+=e.substring(++o,++o),n=o;else if(i===a)c(),a=null,s=-1;else{if(a)continue;n===s&&'"'===i||n===s&&"'"===i?(n=o+1,a=i):"."!==i||s?"["===i?(o>n&&c(),s=n=o+1):"]"===i&&(s||Zt("Access path missing open bracket: "+e),s>0&&c(),s=0,n=o+1):o>n?c():n=o+1}return s&&Zt("Access path missing closing bracket: "+e),a&&Zt("Access path missing closing quote: "+e),o>n&&(o++,c()),t}(e);e=1===n.length?n[0]:e,qt((r&&r.get||Yt)(n),[e],t||e)})("id"),qt(e=>e,[],"identity"),qt(()=>0,[],"zero"),qt(()=>1,[],"one"),qt(()=>!0,[],"true"),qt(()=>!1,[],"false");var Kt=Array.isArray;function er(e){return e===Object(e)}var tr="#vg-tooltip-element {\n  visibility: hidden;\n  padding: 8px;\n  position: fixed;\n  z-index: 1000;\n  font-family: sans-serif;\n  font-size: 11px;\n  border-radius: 3px;\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n  /* The default theme is the light theme. */\n  background-color: rgba(255, 255, 255, 0.95);\n  border: 1px solid #d9d9d9;\n  color: black; }\n  #vg-tooltip-element.visible {\n    visibility: visible; }\n  #vg-tooltip-element h2 {\n    margin-top: 0;\n    margin-bottom: 10px;\n    font-size: 13px; }\n  #vg-tooltip-element img {\n    max-width: 200px;\n    max-height: 200px; }\n  #vg-tooltip-element table {\n    border-spacing: 0; }\n    #vg-tooltip-element table tr {\n      border: none; }\n      #vg-tooltip-element table tr td {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        padding-top: 2px;\n        padding-bottom: 2px; }\n        #vg-tooltip-element table tr td.key {\n          color: #808080;\n          max-width: 150px;\n          text-align: right;\n          padding-right: 4px; }\n        #vg-tooltip-element table tr td.value {\n          display: block;\n          max-width: 300px;\n          max-height: 7em;\n          text-align: left; }\n  #vg-tooltip-element.dark-theme {\n    background-color: rgba(32, 32, 32, 0.9);\n    border: 1px solid #f5f5f5;\n    color: white; }\n    #vg-tooltip-element.dark-theme td.key {\n      color: #bfbfbf; }\n";const rr="vg-tooltip-element",nr={offsetX:10,offsetY:10,id:rr,styleId:"vega-tooltip-style",theme:"light",disableDefaultStyle:!1,sanitize:function(e){return String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;")},maxDepth:2};function or(e,t,r){if(Kt(e))return`[${e.map(e=>t("string"==typeof e?e:ir(e,r))).join(", ")}]`;if(er(e)){let n="";const o=e,{title:i,image:a}=o,s=
/*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r}(o,["title","image"]);i&&(n+=`<h2>${t(i)}</h2>`),a&&(n+=`<img src="${t(a)}">`);const l=Object.keys(s);if(l.length>0){n+="<table>";for(const e of l){let o=s[e];void 0!==o&&(er(o)&&(o=ir(o,r)),n+=`<tr><td class="key">${t(e)}:</td><td class="value">${t(o)}</td></tr>`)}n+="</table>"}return n||"{}"}return t(e)}function ir(e,t){return JSON.stringify(e,function(e){const t=[];return function(r,n){if("object"!=typeof n||null===n)return n;const o=t.indexOf(this)+1;return t.length=o,t.length>e?"[Object]":t.indexOf(n)>=0?"[Circular]":(t.push(n),n)}}(t))}class ar{constructor(e){this.options=Object.assign(Object.assign({},nr),e);const t=this.options.id;if(this.call=this.tooltipHandler.bind(this),!this.options.disableDefaultStyle&&!document.getElementById(this.options.styleId)){const e=document.createElement("style");e.setAttribute("id",this.options.styleId),e.innerHTML=function(e){if(!/^[A-Za-z]+[-:.\w]*$/.test(e))throw new Error("Invalid HTML ID");return tr.toString().replace(rr,e)}(t);const r=document.head;r.childNodes.length>0?r.insertBefore(e,r.childNodes[0]):r.appendChild(e)}this.el=document.getElementById(t),this.el||(this.el=document.createElement("div"),this.el.setAttribute("id",t),this.el.classList.add("vg-tooltip"),document.body.appendChild(this.el))}tooltipHandler(e,t,r,n){if(null==n||""===n)return void this.el.classList.remove("visible",this.options.theme+"-theme");this.el.innerHTML=or(n,this.options.sanitize,this.options.maxDepth),this.el.classList.add("visible",this.options.theme+"-theme");const{x:o,y:i}=function(e,t,r,n){let o=e.clientX+r;o+t.width>window.innerWidth&&(o=+e.clientX-r-t.width);let i=e.clientY+n;return i+t.height>window.innerHeight&&(i=+e.clientY-n-t.height),{x:o,y:i}}(t,this.el.getBoundingClientRect(),this.options.offsetX,this.options.offsetY);this.el.setAttribute("style",`top: ${i}px; left: ${o}px`)}}var sr;function lr(e){return e.startsWith("http://")||e.startsWith("https://")||e.startsWith("//")}function cr(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];for(var n=0,o=t;n<o.length;n++){var i=o[n];pr(e,i)}return e}function pr(t,r){for(var n=0,o=Object.keys(r);n<o.length;n++){var i=o[n];e.writeConfig(t,i,r[i],!0)}}String.prototype.startsWith||(String.prototype.startsWith=function(e,t){return this.substr(!t||t<0?0:+t,e.length)===e});var dr=n,ur=o,fr="undefined"!=typeof window?window:void 0;void 0===ur&&(null===(sr=null==fr?void 0:fr.vl)||void 0===sr?void 0:sr.compile)&&(ur=fr.vl);var hr={export:{svg:!0,png:!0},source:!0,compiled:!0,editor:!0},vr={CLICK_TO_VIEW_ACTIONS:"Click to view actions",COMPILED_ACTION:"View Compiled Vega",EDITOR_ACTION:"Open in Vega Editor",PNG_ACTION:"Save as PNG",SOURCE_ACTION:"View Source",SVG_ACTION:"Save as SVG"},gr={vega:"Vega","vega-lite":"Vega-Lite"},mr={vega:dr.version,"vega-lite":ur?ur.version:"not available"},Er={vega:function(e){return e},"vega-lite":function(e,t){return ur.compile(e,{config:t}).spec}};function br(e,t,r,n){var o="<html><head>"+t+'</head><body><pre><code class="json">',i="</code></pre>"+r+"</body></html>",a=window.open("");a.document.write(o+e+i),a.document.title=gr[n]+" JSON Source"}function yr(t,r,n){var o,l,c;return void 0===n&&(n={}),a(this,void 0,void 0,(function(){var a,p,d,u,f,h,v,g;return s(this,(function(s){switch(s.label){case 0:return m=n.loader,a=m&&"load"in m?n.loader:dr.loader(n.loader),e.isString(r)?(f=(u=JSON).parse,[4,a.load(r)]):[3,2];case 1:return d=f.apply(u,[s.sent()]),[3,3];case 2:d=r,s.label=3;case 3:return[4,wr(null!==(o=(p=d).usermeta&&p.usermeta.embedOptions)&&void 0!==o?o:{},a)];case 4:return h=s.sent(),[4,wr(n,a)];case 5:return v=s.sent(),g=i(i({},cr(v,h)),{config:e.mergeConfig(null!==(l=v.config)&&void 0!==l?l:{},null!==(c=h.config)&&void 0!==c?c:{})}),[4,Or(t,p,g,a)];case 6:return[2,s.sent()]}var m}))}))}function wr(t,r){var n;return a(this,void 0,void 0,(function(){var o,a,l,c,p,d,u,f;return s(this,(function(s){switch(s.label){case 0:return e.isString(t.config)?(c=(l=JSON).parse,[4,r.load(t.config)]):[3,2];case 1:return a=c.apply(l,[s.sent()]),[3,3];case 2:a=null!==(n=t.config)&&void 0!==n?n:{},s.label=3;case 3:return o=a,e.isString(t.patch)?(f=(u=JSON).parse,[4,r.load(t.patch)]):[3,5];case 4:return d=f.apply(u,[s.sent()]),[3,6];case 5:d=t.patch,s.label=6;case 6:return p=d,[2,i(i(i({},t),p?{patch:p}:{}),o?{config:o}:{})]}}))}))}function Or(t,r,n,o){var l,c,p,d,u,f;return void 0===n&&(n={}),a(this,void 0,void 0,(function(){function h(){U&&document.removeEventListener("click",U),k.finalize()}var v,g,m,E,b,y,w,O,I,A,N,T,L,$,S,x,C,D,F,P,k,j,z,M,B,G,U,X,V,W,H,q,Y,J,Q,Z,K,ee;return s(this,(function(te){switch(te.label){case 0:if(v=n.theme?e.mergeConfig(Ht[n.theme],null!==(l=n.config)&&void 0!==l?l:{}):n.config,g=e.isBoolean(n.actions)?n.actions:cr({},hr,null!==(c=n.actions)&&void 0!==c?c:{}),m=i(i({},vr),n.i18n),E=null!==(p=n.renderer)&&void 0!==p?p:"canvas",b=null!==(d=n.logLevel)&&void 0!==d?d:dr.Warn,y=null!==(u=n.downloadFileName)&&void 0!==u?u:"visualization",!(w="string"==typeof t?document.querySelector(t):t))throw new Error(t+" does not exist");return!1!==n.defaultStyle&&(O="vega-embed-style",I=function(e){var t,r=e.getRootNode?e.getRootNode():document;return r instanceof ShadowRoot?{root:r,rootContainer:r}:{root:document,rootContainer:null!==(t=document.head)&&void 0!==t?t:document.body}}(w),A=I.root,N=I.rootContainer,A.getElementById(O)||((T=document.createElement("style")).id=O,T.innerText=void 0===n.defaultStyle||!0===n.defaultStyle?'.vega-embed {\n  position: relative;\n  display: inline-block;\n  box-sizing: border-box; }\n  .vega-embed.has-actions {\n    padding-right: 38px; }\n  .vega-embed details:not([open]) > :not(summary) {\n    display: none !important; }\n  .vega-embed summary {\n    list-style: none;\n    position: absolute;\n    top: 0;\n    right: 0;\n    padding: 6px;\n    z-index: 1000;\n    background: white;\n    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);\n    color: #1b1e23;\n    border: 1px solid #aaa;\n    border-radius: 999px;\n    opacity: 0.2;\n    transition: opacity 0.4s ease-in;\n    outline: none;\n    cursor: pointer;\n    line-height: 0px; }\n    .vega-embed summary::-webkit-details-marker {\n      display: none; }\n    .vega-embed summary:active {\n      box-shadow: #aaa 0px 0px 0px 1px inset; }\n    .vega-embed summary svg {\n      width: 14px;\n      height: 14px; }\n  .vega-embed details[open] summary {\n    opacity: 0.7; }\n  .vega-embed:hover summary,\n  .vega-embed:focus summary {\n    opacity: 1 !important;\n    transition: opacity 0.2s ease; }\n  .vega-embed .vega-actions {\n    position: absolute;\n    z-index: 1001;\n    top: 35px;\n    right: -9px;\n    display: flex;\n    flex-direction: column;\n    padding-bottom: 8px;\n    padding-top: 8px;\n    border-radius: 4px;\n    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.2);\n    border: 1px solid #d9d9d9;\n    background: white;\n    animation-duration: 0.15s;\n    animation-name: scale-in;\n    animation-timing-function: cubic-bezier(0.2, 0, 0.13, 1.5);\n    text-align: left; }\n    .vega-embed .vega-actions a {\n      padding: 8px 16px;\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: 600;\n      white-space: nowrap;\n      color: #434a56;\n      text-decoration: none; }\n      .vega-embed .vega-actions a:hover {\n        background-color: #f7f7f9;\n        color: black; }\n    .vega-embed .vega-actions::before, .vega-embed .vega-actions::after {\n      content: "";\n      display: inline-block;\n      position: absolute; }\n    .vega-embed .vega-actions::before {\n      left: auto;\n      right: 14px;\n      top: -16px;\n      border: 8px solid #0000;\n      border-bottom-color: #d9d9d9; }\n    .vega-embed .vega-actions::after {\n      left: auto;\n      right: 15px;\n      top: -14px;\n      border: 7px solid #0000;\n      border-bottom-color: #fff; }\n  .vega-embed .chart-wrapper {\n    width: 100%;\n    height: 100%; }\n\n.vega-embed-wrapper {\n  max-width: 100%;\n  overflow: scroll;\n  padding-right: 14px; }\n\n@keyframes scale-in {\n  from {\n    opacity: 0;\n    transform: scale(0.6); }\n  to {\n    opacity: 1;\n    transform: scale(1); } }\n'.toString():n.defaultStyle,N.appendChild(T))),L=function(e,t){var r;if(e.$schema){var n=ft(e.$schema);t&&t!==n.library&&console.warn("The given visualization spec is written in "+gr[n.library]+", but mode argument sets "+(null!==(r=gr[t])&&void 0!==r?r:t)+".");var o=n.library;return ut.satisfies(mr[o],"^"+n.version.slice(1))||console.warn("The input spec uses "+gr[o]+" "+n.version+", but the current version of "+gr[o]+" is v"+mr[o]+"."),o}return"mark"in e||"encoding"in e||"layer"in e||"hconcat"in e||"vconcat"in e||"facet"in e||"repeat"in e?"vega-lite":"marks"in e||"signals"in e||"scales"in e||"axes"in e?"vega":null!=t?t:"vega"}(r,n.mode),$=Er[L](r,v),"vega-lite"===L&&$.$schema&&(S=ft($.$schema),ut.satisfies(mr.vega,"^"+S.version.slice(1))||console.warn("The compiled spec uses Vega "+S.version+", but current version is v"+mr.vega+".")),w.classList.add("vega-embed"),g&&w.classList.add("has-actions"),w.innerHTML="",x=w,g&&((C=document.createElement("div")).classList.add("chart-wrapper"),w.appendChild(C),x=C),(D=n.patch)&&($=D instanceof Function?D($):R($,D,!0,!1).newDocument),n.formatLocale&&dr.formatLocale(n.formatLocale),n.timeFormatLocale&&dr.timeFormatLocale(n.timeFormatLocale),F=n.ast,P=dr.parse($,"vega-lite"===L?{}:v,{ast:F}),k=new dr.View(P,i({loader:o,logLevel:b,renderer:E},F?{expr:dr.expressionInterpreter}:{})),!1!==n.tooltip&&(j=void 0,re=n.tooltip,j="function"==typeof re?n.tooltip:new ar(!0===n.tooltip?{}:n.tooltip).call,k.tooltip(j)),void 0===(z=n.hover)&&(z="vega"===L),z&&(B=(M="boolean"==typeof z?{}:z).hoverSet,G=M.updateSet,k.hover(B,G)),n&&(null!=n.width&&k.width(n.width),null!=n.height&&k.height(n.height),null!=n.padding&&k.padding(n.padding)),[4,k.initialize(x).runAsync()];case 1:if(te.sent(),!1!==g){if(X=w,!1!==n.defaultStyle&&((V=document.createElement("details")).title=m.CLICK_TO_VIEW_ACTIONS,w.append(V),X=V,(W=document.createElement("summary")).innerHTML='\n<svg viewBox="0 0 16 16" fill="currentColor" stroke="none" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">\n  <circle r="2" cy="8" cx="2"></circle>\n  <circle r="2" cy="8" cx="8"></circle>\n  <circle r="2" cy="8" cx="14"></circle>\n</svg>',V.append(W),U=function(e){V.contains(e.target)||V.removeAttribute("open")},document.addEventListener("click",U)),H=document.createElement("div"),X.append(H),H.classList.add("vega-actions"),!0===g||!1!==g.export)for(q=function(e){if(!0===g||!0===g.export||g.export[e]){var t=m[e.toUpperCase()+"_ACTION"],r=document.createElement("a");r.text=t,r.href="#",r.target="_blank",r.download=y+"."+e,r.addEventListener("mousedown",(function(t){return a(this,void 0,void 0,(function(){var r;return s(this,(function(o){switch(o.label){case 0:return t.preventDefault(),[4,k.toImageURL(e,n.scaleFactor)];case 1:return r=o.sent(),this.href=r,[2]}}))}))})),H.append(r)}},Y=0,J=["svg","png"];Y<J.length;Y++)q(J[Y]);!0!==g&&!1===g.source||((Q=document.createElement("a")).text=m.SOURCE_ACTION,Q.href="#",Q.addEventListener("click",(function(e){var t,o;br(_(r),null!==(t=n.sourceHeader)&&void 0!==t?t:"",null!==(o=n.sourceFooter)&&void 0!==o?o:"",L),e.preventDefault()})),H.append(Q)),"vega-lite"!==L||!0!==g&&!1===g.compiled||((Z=document.createElement("a")).text=m.COMPILED_ACTION,Z.href="#",Z.addEventListener("click",(function(e){var t,r;br(_($),null!==(t=n.sourceHeader)&&void 0!==t?t:"",null!==(r=n.sourceFooter)&&void 0!==r?r:"","vega"),e.preventDefault()})),H.append(Z)),!0!==g&&!1===g.editor||(K=null!==(f=n.editorUrl)&&void 0!==f?f:"https://vega.github.io/editor/",(ee=document.createElement("a")).text=m.EDITOR_ACTION,ee.href="#",ee.addEventListener("click",(function(e){!function(e,t,r){var n=e.open(t),o=new URL(t).origin,i=40;e.addEventListener("message",(function t(r){r.source===n&&(i=0,e.removeEventListener("message",t,!1))}),!1),setTimeout((function e(){i<=0||(n.postMessage(r,o),setTimeout(e,250),i-=1)}),250)}(window,K,{config:v,mode:L,renderer:E,spec:_(r)}),e.preventDefault()})),H.append(ee))}return[2,{view:k,spec:r,vgSpec:$,finalize:h}]}var re}))}))}function Ir(e,t){var r;return void 0===t&&(t={}),a(this,void 0,void 0,(function(){var n,o,a,l;return s(this,(function(s){switch(s.label){case 0:return(n=document.createElement("div")).classList.add("vega-embed-wrapper"),o=document.createElement("div"),n.appendChild(o),a=!0===t.actions||!1===t.actions?t.actions:i({export:!0,source:!1,compiled:!0,editor:!0},null!==(r=t.actions)&&void 0!==r?r:{}),[4,yr(o,e,i({actions:a},null!=t?t:{}))];case 1:return l=s.sent(),n.value=l.view,[2,n]}}))}))}function Ar(e){return e instanceof HTMLElement}var Rr=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return t.length>1&&(e.isString(t[0])&&!lr(t[0])||Ar(t[0])||3===t.length)?yr(t[0],t[1],t[2]):Ir(t[0],t[1])};return Rr.vegaLite=ur,Rr.vl=ur,Rr.container=Ir,Rr.embed=yr,Rr.vega=dr,Rr.default=yr,Rr.version="6.12.2",Rr}));
//# sourceMappingURL=vega-embed.min.js.map
/*! itgz compression */
//var LZString=function(){function o(o,r){if(!t[o]){t[o]={};for(var n=0;n<o.length;n++)t[o][o.charAt(n)]=n}return t[o][r]}var r=String.fromCharCode,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",t={},i={compressToBase64:function(o){if(null==o)return"";var r=i._compress(o,6,function(o){return n.charAt(o)});switch(r.length%4){default:case 0:return r;case 1:return r+"===";case 2:return r+"==";case 3:return r+"="}},decompressFromBase64:function(r){return null==r?"":""==r?null:i._decompress(r.length,32,function(e){return o(n,r.charAt(e))})},compressToUTF16:function(o){return null==o?"":i._compress(o,15,function(o){return r(o+32)})+" "},decompressFromUTF16:function(o){return null==o?"":""==o?null:i._decompress(o.length,16384,function(r){return o.charCodeAt(r)-32})},compressToUint8Array:function(o){for(var r=i.compress(o),n=new Uint8Array(2*r.length),e=0,t=r.length;t>e;e++){var s=r.charCodeAt(e);n[2*e]=s>>>8,n[2*e+1]=s%256}return n},decompressFromUint8Array:function(o){if(null===o||void 0===o)return i.decompress(o);for(var n=new Array(o.length/2),e=0,t=n.length;t>e;e++)n[e]=256*o[2*e]+o[2*e+1];var s=[];return n.forEach(function(o){s.push(r(o))}),i.decompress(s.join(""))},compressToEncodedURIComponent:function(o){return null==o?"":i._compress(o,6,function(o){return e.charAt(o)})},decompressFromEncodedURIComponent:function(r){return null==r?"":""==r?null:(r=r.replace(/ /g,"+"),i._decompress(r.length,32,function(n){return o(e,r.charAt(n))}))},compress:function(o){return i._compress(o,16,function(o){return r(o)})},_compress:function(o,r,n){if(null==o)return"";var e,t,i,s={},p={},u="",c="",a="",l=2,f=3,h=2,d=[],m=0,v=0;for(i=0;i<o.length;i+=1)if(u=o.charAt(i),Object.prototype.hasOwnProperty.call(s,u)||(s[u]=f++,p[u]=!0),c=a+u,Object.prototype.hasOwnProperty.call(s,c))a=c;else{if(Object.prototype.hasOwnProperty.call(p,a)){if(a.charCodeAt(0)<256){for(e=0;h>e;e++)m<<=1,v==r-1?(v=0,d.push(n(m)),m=0):v++;for(t=a.charCodeAt(0),e=0;8>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}else{for(t=1,e=0;h>e;e++)m=m<<1|t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t=0;for(t=a.charCodeAt(0),e=0;16>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}l--,0==l&&(l=Math.pow(2,h),h++),delete p[a]}else for(t=s[a],e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;l--,0==l&&(l=Math.pow(2,h),h++),s[c]=f++,a=String(u)}if(""!==a){if(Object.prototype.hasOwnProperty.call(p,a)){if(a.charCodeAt(0)<256){for(e=0;h>e;e++)m<<=1,v==r-1?(v=0,d.push(n(m)),m=0):v++;for(t=a.charCodeAt(0),e=0;8>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}else{for(t=1,e=0;h>e;e++)m=m<<1|t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t=0;for(t=a.charCodeAt(0),e=0;16>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}l--,0==l&&(l=Math.pow(2,h),h++),delete p[a]}else for(t=s[a],e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;l--,0==l&&(l=Math.pow(2,h),h++)}for(t=2,e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;for(;;){if(m<<=1,v==r-1){d.push(n(m));break}v++}return d.join("")},decompress:function(o){return null==o?"":""==o?null:i._decompress(o.length,32768,function(r){return o.charCodeAt(r)})},_decompress:function(o,n,e){var t,i,s,p,u,c,a,l,f=[],h=4,d=4,m=3,v="",w=[],A={val:e(0),position:n,index:1};for(i=0;3>i;i+=1)f[i]=i;for(p=0,c=Math.pow(2,2),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;switch(t=p){case 0:for(p=0,c=Math.pow(2,8),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;l=r(p);break;case 1:for(p=0,c=Math.pow(2,16),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;l=r(p);break;case 2:return""}for(f[3]=l,s=l,w.push(l);;){if(A.index>o)return"";for(p=0,c=Math.pow(2,m),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;switch(l=p){case 0:for(p=0,c=Math.pow(2,8),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;f[d++]=r(p),l=d-1,h--;break;case 1:for(p=0,c=Math.pow(2,16),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;f[d++]=r(p),l=d-1,h--;break;case 2:return w.join("")}if(0==h&&(h=Math.pow(2,m),m++),f[l])v=f[l];else{if(l!==d)return null;v=s+s.charAt(0)}w.push(v),f[d++]=s+v.charAt(0),h--,s=v,0==h&&(h=Math.pow(2,m),m++)}}};return i}();"function"==typeof define&&define.amd?define(function(){return LZString}):"undefined"!=typeof module&&null!=module&&(module.exports=LZString);
var itgz=function(){function o(o,r){if(!t[o]){t[o]={};for(var n=0;n<o.length;n++)t[o][o.charAt(n)]=n}return t[o][r]}var r=String.fromCharCode,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",t={},i={compressToBase64:function(o){if(null==o)return"";var r=i._compress(o,6,function(o){return n.charAt(o)});switch(r.length%4){default:case 0:return r;case 1:return r+"===";case 2:return r+"==";case 3:return r+"="}},decompressFromBase64:function(r){return null==r?"":""==r?null:i._decompress(r.length,32,function(e){return o(n,r.charAt(e))})},compressToUTF16:function(o){return null==o?"":i._compress(o,15,function(o){return r(o+32)})+" "},decompressFromUTF16:function(o){return null==o?"":""==o?null:i._decompress(o.length,16384,function(r){return o.charCodeAt(r)-32})},compressToUint8Array:function(o){for(var r=i.compress(o),n=new Uint8Array(2*r.length),e=0,t=r.length;t>e;e++){var s=r.charCodeAt(e);n[2*e]=s>>>8,n[2*e+1]=s%256}return n},decompressFromUint8Array:function(o){if(null===o||void 0===o)return i.decompress(o);for(var n=new Array(o.length/2),e=0,t=n.length;t>e;e++)n[e]=256*o[2*e]+o[2*e+1];var s=[];return n.forEach(function(o){s.push(r(o))}),i.decompress(s.join(""))},compressToEncodedURIComponent:function(o){return null==o?"":i._compress(o,6,function(o){return e.charAt(o)})},decompressFromEncodedURIComponent:function(r){return null==r?"":""==r?null:(r=r.replace(/ /g,"+"),i._decompress(r.length,32,function(n){return o(e,r.charAt(n))}))},compress:function(o){return i._compress(o,16,function(o){return r(o)})},_compress:function(o,r,n){if(null==o)return"";var e,t,i,s={},p={},u="",c="",a="",l=2,f=3,h=2,d=[],m=0,v=0;for(i=0;i<o.length;i+=1)if(u=o.charAt(i),Object.prototype.hasOwnProperty.call(s,u)||(s[u]=f++,p[u]=!0),c=a+u,Object.prototype.hasOwnProperty.call(s,c))a=c;else{if(Object.prototype.hasOwnProperty.call(p,a)){if(a.charCodeAt(0)<256){for(e=0;h>e;e++)m<<=1,v==r-1?(v=0,d.push(n(m)),m=0):v++;for(t=a.charCodeAt(0),e=0;8>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}else{for(t=1,e=0;h>e;e++)m=m<<1|t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t=0;for(t=a.charCodeAt(0),e=0;16>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}l--,0==l&&(l=Math.pow(2,h),h++),delete p[a]}else for(t=s[a],e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;l--,0==l&&(l=Math.pow(2,h),h++),s[c]=f++,a=String(u)}if(""!==a){if(Object.prototype.hasOwnProperty.call(p,a)){if(a.charCodeAt(0)<256){for(e=0;h>e;e++)m<<=1,v==r-1?(v=0,d.push(n(m)),m=0):v++;for(t=a.charCodeAt(0),e=0;8>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}else{for(t=1,e=0;h>e;e++)m=m<<1|t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t=0;for(t=a.charCodeAt(0),e=0;16>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}l--,0==l&&(l=Math.pow(2,h),h++),delete p[a]}else for(t=s[a],e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;l--,0==l&&(l=Math.pow(2,h),h++)}for(t=2,e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;for(;;){if(m<<=1,v==r-1){d.push(n(m));break}v++}return d.join("")},decompress:function(o){return null==o?"":""==o?null:i._decompress(o.length,32768,function(r){return o.charCodeAt(r)})},_decompress:function(o,n,e){var t,i,s,p,u,c,a,l,f=[],h=4,d=4,m=3,v="",w=[],A={val:e(0),position:n,index:1};for(i=0;3>i;i+=1)f[i]=i;for(p=0,c=Math.pow(2,2),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;switch(t=p){case 0:for(p=0,c=Math.pow(2,8),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;l=r(p);break;case 1:for(p=0,c=Math.pow(2,16),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;l=r(p);break;case 2:return""}for(f[3]=l,s=l,w.push(l);;){if(A.index>o)return"";for(p=0,c=Math.pow(2,m),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;switch(l=p){case 0:for(p=0,c=Math.pow(2,8),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;f[d++]=r(p),l=d-1,h--;break;case 1:for(p=0,c=Math.pow(2,16),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;f[d++]=r(p),l=d-1,h--;break;case 2:return w.join("")}if(0==h&&(h=Math.pow(2,m),m++),f[l])v=f[l];else{if(l!==d)return null;v=s+s.charAt(0)}w.push(v),f[d++]=s+v.charAt(0),h--,s=v,0==h&&(h=Math.pow(2,m),m++)}}};return i}();"function"==typeof define&&define.amd?define(function(){return itgz}):"undefined"!=typeof module&&null!=module&&(module.exports=itgz);
var itg_decomp=function(text){return itgz.decompressFromEncodedURIComponent(text)}  

var EasyAutocomplete=function(c){return c.Configuration=function(b){function c(a,d){function b(d,g){for(var c in g)void 0===d[c]&&a.log("Property '"+c+"' does not exist in EasyAutocomplete options API."),"object"==typeof d[c]&&-1===jQuery.inArray(c,h)&&b(d[c],g[c])}b(f,d)}var f={data:"list-required",url:"list-required",dataType:"json",listLocation:function(a){return a},xmlElementName:"",getValue:function(a){return a},autocompleteOff:!0,placeholder:!1,ajaxCallback:function(){},matchResponseProperty:!1,
list:{sort:{enabled:!1,method:function(a,d){return a=f.getValue(a),d=f.getValue(d),d>a?-1:a>d?1:0}},maxNumberOfElements:6,hideOnEmptyPhrase:!0,match:{enabled:!1,caseSensitive:!1,method:function(a,d){return-1<a.search(d)}},showAnimation:{type:"normal",time:400,callback:function(){}},hideAnimation:{type:"normal",time:400,callback:function(){}},onClickEvent:function(){},onSelectItemEvent:function(){},onLoadEvent:function(){},onChooseEvent:function(){},onKeyEnterEvent:function(){},onMouseOverEvent:function(){},
onMouseOutEvent:function(){},onShowListEvent:function(){},onHideListEvent:function(){}},highlightPhrase:!0,theme:"",cssClasses:"",minCharNumber:0,requestDelay:0,adjustWidth:!0,ajaxSettings:{},preparePostData:function(a,d){return a},loggerEnabled:!0,template:"",categoriesAssigned:!1,categories:[{maxNumberOfElements:4}]},h=["ajaxSettings","template"];this.get=function(a){return f[a]};this.equals=function(a,d){return!(void 0===f[a]||null===f[a]||f[a]!==d)};this.checkDataUrlProperties=function(){return"list-required"!==
f.url||"list-required"!==f.data};this.checkRequiredProperties=function(){for(var a in f)if("required"===f[a])return logger.error("Option "+a+" must be defined"),!1;return!0};this.printPropertiesThatDoesntExist=function(a,d){c(a,d)};(function(){if("xml"===b.dataType&&(b.getValue||(b.getValue=function(a){return jQuery(a).text()}),b.list||(b.list={}),b.list.sort||(b.list.sort={}),b.list.sort.method=function(a,d){return a=b.getValue(a),d=b.getValue(d),d>a?-1:a>d?1:0},b.list.match||(b.list.match={}),b.list.match.method=
function(a,d){return-1<a.search(d)}),void 0!==b.categories&&b.categories instanceof Array){for(var a=[],d=0,g=b.categories.length;g>d;d+=1){var c=b.categories[d],h;for(h in f.categories[0])void 0===c[h]&&(c[h]=f.categories[0][h]);a.push(c)}b.categories=a}})();(function(){function a(d,b){var c=d||{},g;for(g in d)void 0!==b[g]&&null!==b[g]&&("object"!=typeof b[g]||b[g]instanceof Array?c[g]=b[g]:a(d[g],b[g]));return void 0!==b.data&&null!==b.data&&"object"==typeof b.data&&(c.data=b.data),c}f=a(f,b)})();
!0===f.loggerEnabled&&c(console,b);void 0!==b.ajaxSettings&&"object"==typeof b.ajaxSettings?f.ajaxSettings=b.ajaxSettings:f.ajaxSettings={};(function(){if("list-required"!==f.url&&"function"!=typeof f.url){var a=f.url;f.url=function(){return a}}void 0!==f.ajaxSettings.url&&"function"!=typeof f.ajaxSettings.url&&(a=f.ajaxSettings.url,f.ajaxSettings.url=function(){return a});if("string"==typeof f.listLocation){var d=f.listLocation;"XML"===f.dataType.toUpperCase()?f.listLocation=function(a){return jQuery(a).find(d)}:
f.listLocation=function(a){return a[d]}}if("string"==typeof f.getValue){var c=f.getValue;f.getValue=function(a){return a[c]}}void 0!==b.categories&&(f.categoriesAssigned=!0)})()},c}(EasyAutocomplete||{});EasyAutocomplete=function(c){return c.Logger=function(){this.error=function(b){console.log("ERROR: "+b)};this.warning=function(b){console.log("WARNING: "+b)}},c}(EasyAutocomplete||{});
EasyAutocomplete=function(c){return c.Constans=function(){var b={CONTAINER_CLASS:"easy-autocomplete-container",CONTAINER_ID:"eac-container-",WRAPPER_CSS_CLASS:"easy-autocomplete"};this.getValue=function(c){return b[c]}},c}(EasyAutocomplete||{});
EasyAutocomplete=function(c){return c.ListBuilderService=function(b,c){function f(a,d){function c(){var e,c={};return void 0!==a.xmlElementName&&(c.xmlElementName=a.xmlElementName),void 0!==a.listLocation?e=a.listLocation:void 0!==b.get("listLocation")&&(e=b.get("listLocation")),void 0!==e?"string"==typeof e?c.data=jQuery(d).find(e):"function"==typeof e&&(c.data=e(d)):c.data=d,c}function f(){var b={};return void 0!==a.listLocation?"string"==typeof a.listLocation?b.data=d[a.listLocation]:"function"==
typeof a.listLocation&&(b.data=a.listLocation(d)):b.data=d,b}var h={};if(h="XML"===b.get("dataType").toUpperCase()?c():f(),void 0!==a.header&&(h.header=a.header),void 0!==a.maxNumberOfElements&&(h.maxNumberOfElements=a.maxNumberOfElements),void 0!==b.get("list").maxNumberOfElements&&(h.maxListSize=b.get("list").maxNumberOfElements),void 0!==a.getValue)if("string"==typeof a.getValue){var k=a.getValue;h.getValue=function(a){return a[k]}}else"function"==typeof a.getValue&&(h.getValue=a.getValue);else h.getValue=
b.get("getValue");return h}function h(a){var d=[];return void 0===a.xmlElementName&&(a.xmlElementName=b.get("xmlElementName")),jQuery(a.data).find(a.xmlElementName).each(function(){d.push(this)}),d}this.init=function(a){var d=[],c={};return c.data=b.get("listLocation")(a),c.getValue=b.get("getValue"),c.maxListSize=b.get("list").maxNumberOfElements,d.push(c),d};this.updateCategories=function(a,d){if(b.get("categoriesAssigned")){a=[];for(var c=0;c<b.get("categories").length;c+=1){var h=f(b.get("categories")[c],
d);a.push(h)}}return a};this.convertXml=function(a){if("XML"===b.get("dataType").toUpperCase())for(var d=0;d<a.length;d+=1)a[d].data=h(a[d]);return a};this.processData=function(a,d){for(var g=0,h=a.length;h>g;g+=1)a[g].data=c(b,a[g],d);return a};this.checkIfDataExists=function(a){for(var b=0,c=a.length;c>b;b+=1)if(void 0!==a[b].data&&a[b].data instanceof Array&&0<a[b].data.length)return!0;return!1}},c}(EasyAutocomplete||{});
EasyAutocomplete=function(c){return c.proccess=function(b,k,f){function h(a,c){return b.get("list").match.caseSensitive||("string"==typeof a&&(a=a.toLowerCase()),c=c.toLowerCase()),!!b.get("list").match.method(a,c)}c.proccess.match=h;var a=k.data;return a=function(a,c){var d=[];if(b.get("list").match.enabled)for(var f=0,g=a.length;g>f;f+=1){var e=b.get("getValue")(a[f]);h(e,c)&&d.push(a[f])}else d=a;return d}(a,f),a=function(a){return void 0!==k.maxNumberOfElements&&a.length>k.maxNumberOfElements&&
(a=a.slice(0,k.maxNumberOfElements)),a}(a),a=function(a){return b.get("list").sort.enabled&&a.sort(b.get("list").sort.method),a}(a)},c}(EasyAutocomplete||{});
EasyAutocomplete=function(c){return c.Template=function(b){var c={basic:{type:"basic",method:function(b){return b},cssClass:""},description:{type:"description",fields:{description:"description"},method:function(b){return b+" - description"},cssClass:"eac-description"},iconLeft:{type:"iconLeft",fields:{icon:""},method:function(b){return b},cssClass:"eac-icon-left"},iconRight:{type:"iconRight",fields:{iconSrc:""},method:function(b){return b},cssClass:"eac-icon-right"},links:{type:"links",fields:{link:""},
method:function(b){return b},cssClass:""},custom:{type:"custom",method:function(){},cssClass:""}},f=function(b){var a,d=b.fields;return"description"===b.type?(a=c.description.method,"string"==typeof d.description?a=function(a,b){return a+" - <span>"+b[d.description]+"</span>"}:"function"==typeof d.description&&(a=function(a,b){return a+" - <span>"+d.description(b)+"</span>"}),a):"iconRight"===b.type?("string"==typeof d.iconSrc?a=function(a,b){return a+"<img class='eac-icon' src='"+b[d.iconSrc]+"' />"}:
"function"==typeof d.iconSrc&&(a=function(a,b){return a+"<img class='eac-icon' src='"+d.iconSrc(b)+"' />"}),a):"iconLeft"===b.type?("string"==typeof d.iconSrc?a=function(a,b){return"<img class='eac-icon' src='"+b[d.iconSrc]+"' />"+a}:"function"==typeof d.iconSrc&&(a=function(a,b){return"<img class='eac-icon' src='"+d.iconSrc(b)+"' />"+a}),a):"links"===b.type?("string"==typeof d.link?a=function(a,b){return"<a href='"+b[d.link]+"' >"+a+"</a>"}:"function"==typeof d.link&&(a=function(a,b){return"<a href='"+
d.link(b)+"' >"+a+"</a>"}),a):"custom"===b.type?b.method:c.basic.method};this.getTemplateClass=function(b){var a=function(){return""};return b&&b.type&&b.type&&c[b.type]?function(){var a=c[b.type].cssClass;return function(){return a}}():a}(b);this.build=b&&b.type&&b.type&&c[b.type]?f(b):c.basic.method},c}(EasyAutocomplete||{});
EasyAutocomplete=function(c){return c.main=function(b,k){function f(){function a(a,b){if(e.get("highlightPhrase")&&""!==b){var c=b.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&");c=(a+"").replace(new RegExp("("+c+")","gi"),"<b>$1</b>")}else c=a;return c}l.parent().hasClass(r.getValue("WRAPPER_CSS_CLASS"))&&(l.next("."+r.getValue("CONTAINER_CLASS")).remove(),l.unwrap());(function(){var a=jQuery("<div>"),b=r.getValue("WRAPPER_CSS_CLASS");e.get("theme")&&""!==e.get("theme")&&(b+=" eac-"+e.get("theme"));
e.get("cssClasses")&&""!==e.get("cssClasses")&&(b+=" "+e.get("cssClasses"));""!==z.getTemplateClass()&&(b+=" "+z.getTemplateClass());a.addClass(b);l.wrap(a);!0===e.get("adjustWidth")&&(a=l.outerWidth(),l.parent().css("width",a))})();(function(){var b=jQuery("<div>").addClass(r.getValue("CONTAINER_CLASS"));b.attr("id",h()).prepend(jQuery("<ul>"));(function(){b.on("show.eac",function(){switch(e.get("list").showAnimation.type){case "slide":var a=e.get("list").showAnimation.time,c=e.get("list").showAnimation.callback;
b.find("ul").slideDown(a,c);break;case "fade":a=e.get("list").showAnimation.time;c=e.get("list").showAnimation.callback;b.find("ul").fadeIn(a);c;break;default:b.find("ul").show()}e.get("list").onShowListEvent()}).on("hide.eac",function(){switch(e.get("list").hideAnimation.type){case "slide":var a=e.get("list").hideAnimation.time,c=e.get("list").hideAnimation.callback;b.find("ul").slideUp(a,c);break;case "fade":a=e.get("list").hideAnimation.time;c=e.get("list").hideAnimation.callback;b.find("ul").fadeOut(a,
c);break;default:b.find("ul").hide()}e.get("list").onHideListEvent()}).on("selectElement.eac",function(){b.find("ul li").removeClass("selected");b.find("ul li").eq(m).addClass("selected");e.get("list").onSelectItemEvent()}).on("loadElements.eac",function(c,d,f){var g="";c=b.find("ul");c.empty().detach();n=[];for(var h=0,q=0,k=d.length;k>q;q+=1){var v=d[q].data;if(0!==v.length){void 0!==d[q].header&&0<d[q].header.length&&c.append("<div class='eac-category' >"+d[q].header+"</div>");for(var x=0,p=v.length;p>
x&&h<d[q].maxListSize;x+=1)g=jQuery("<li><div class='eac-item'></div></li>"),function(){var b=x,c=h,k=d[q].getValue(v[b]);g.find(" > div").on("click",function(){l.val(k).trigger("change");m=c;u(c);e.get("list").onClickEvent();e.get("list").onChooseEvent()}).mouseover(function(){m=c;u(c);e.get("list").onMouseOverEvent()}).mouseout(function(){e.get("list").onMouseOutEvent()}).html(z.build(a(k,f),v[b]))}(),c.append(g),n.push(v[x]),h+=1}}b.append(c);e.get("list").onLoadEvent()})})();l.after(b)})();t=
jQuery("#"+h());e.get("placeholder")&&l.attr("placeholder",e.get("placeholder"))}function h(){var a=l.attr("id");return r.getValue("CONTAINER_ID")+a}function a(){A("autocompleteOff",!0)&&l.attr("autocomplete","off");(function(){l.focusout(function(){var a,b=l.val();e.get("list").match.caseSensitive||(b=b.toLowerCase());for(var c=0,d=n.length;d>c;c+=1)if(a=e.get("getValue")(n[c]),e.get("list").match.caseSensitive||(a=a.toLowerCase()),a===b)return m=c,void u(m)})})();(function(){l.off("keyup").keyup(function(a){function b(a){function b(){var a=
{},b=e.get("ajaxSettings")||{},c;for(c in b)a[c]=b[c];return a}if(!(a.length<e.get("minCharNumber"))){if("list-required"!==e.get("data")){var c=e.get("data"),f=p.init(c);f=p.updateCategories(f,c);f=p.processData(f,a);t.trigger("loadElements.eac",[f,a]);0<l.parent().find("li").length?d():g()}c=b();void 0!==c.url&&""!==c.url||(c.url=e.get("url"));void 0!==c.dataType&&""!==c.dataType||(c.dataType=e.get("dataType"));void 0!==c.url&&"list-required"!==c.url&&(c.url=c.url(a),c.data=e.get("preparePostData")(c.data,
a),jQuery.ajax(c).done(function(b){var c=p.init(b);c=p.updateCategories(c,b);c=p.convertXml(c);if(!1!==e.get("matchResponseProperty")?"string"==typeof e.get("matchResponseProperty")?b[e.get("matchResponseProperty")]===a:"function"==typeof e.get("matchResponseProperty")?e.get("matchResponseProperty")(b)===a:1:1)c=p.processData(c,a),t.trigger("loadElements.eac",[c,a]);p.checkIfDataExists(c)&&0<l.parent().find("li").length?d():g();e.get("ajaxCallback")()}).fail(function(){w.warning("Fail to load response data")}).always(function(){}))}}
switch(a.keyCode){case 27:g();l.trigger("blur");break;case 38:a.preventDefault();0<n.length&&0<m&&(--m,l.val(e.get("getValue")(n[m])),u(m));break;case 40:a.preventDefault();0<n.length&&m<n.length-1&&(m+=1,l.val(e.get("getValue")(n[m])),u(m));break;default:if(40<a.keyCode||8===a.keyCode){var c=l.val();!0!==e.get("list").hideOnEmptyPhrase||8!==a.keyCode||""!==c?0<e.get("requestDelay")?(void 0!==y&&clearTimeout(y),y=setTimeout(function(){b(c)},e.get("requestDelay"))):b(c):g()}}})})();(function(){l.on("keydown",
function(a){a=a||window.event;return 38===a.keyCode?(suppressKeypress=!0,!1):void 0}).keydown(function(a){13===a.keyCode&&-1<m&&(l.val(e.get("getValue")(n[m])),e.get("list").onKeyEnterEvent(),e.get("list").onChooseEvent(),m=-1,g(),a.preventDefault())})})();l.off("keypress");(function(){l.focus(function(){""!==l.val()&&0<n.length&&(m=-1,d())})})();(function(){l.blur(function(){setTimeout(function(){m=-1;g()},250)})})()}function d(){t.trigger("show.eac")}function g(){t.trigger("hide.eac")}function u(a){t.trigger("selectElement.eac",
a)}var y,r=new c.Constans,e=new c.Configuration(k),w=new c.Logger,z=new c.Template(k.template),p=new c.ListBuilderService(e,c.proccess),A=e.equals,l=b,t="",n=[],m=-1;c.consts=r;this.getConstants=function(){return r};this.getConfiguration=function(){return e};this.getContainer=function(){return t};this.getSelectedItemIndex=function(){return m};this.getItems=function(){return n};this.getItemData=function(a){return n.length<a||void 0===n[a]?-1:n[a]};this.getSelectedItemData=function(){return this.getItemData(m)};
this.build=function(){f()};this.init=function(){0===l.length?w.error("Input field doesn't exist."):e.checkDataUrlProperties()?e.checkRequiredProperties()?(f(),a()):w.error("Will not work without mentioned properties."):w.error("One of options variables 'data' or 'url' must be defined.")}},c.eacHandles=[],c.getHandle=function(b){return c.eacHandles[b]},c.inputHasId=function(b){return void 0!==jQuery(b).attr("id")&&0<jQuery(b).attr("id").length},c.assignRandomId=function(b){do var k="eac-"+Math.floor(1E4*
Math.random());while(0!==jQuery("#"+k).length);elementId=c.consts.getValue("CONTAINER_ID")+k;jQuery(b).attr("id",k)},c.setHandle=function(b,k){c.eacHandles[k]=b},c}(EasyAutocomplete||{});
!function(c){c.fn.easyAutocomplete=function(b){return this.each(function(){var k=c(this),f=new EasyAutocomplete.main(k,b);EasyAutocomplete.inputHasId(k)||EasyAutocomplete.assignRandomId(k);f.init();EasyAutocomplete.setHandle(f,k.attr("id"))})};c.fn.getSelectedItemIndex=function(){var b=c(this).attr("id");return void 0!==b?EasyAutocomplete.getHandle(b).getSelectedItemIndex():-1};c.fn.getItems=function(){var b=c(this).attr("id");return void 0!==b?EasyAutocomplete.getHandle(b).getItems():-1};c.fn.getItemData=
function(b){var k=c(this).attr("id");return void 0!==k&&-1<b?EasyAutocomplete.getHandle(k).getItemData(b):-1};c.fn.getSelectedItemData=function(){var b=c(this).attr("id");return void 0!==b?EasyAutocomplete.getHandle(b).getSelectedItemData():-1}}(jQuery);
/*! jQuery UI - v1.12.1 - 2016-09-14
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function( factory ) {
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define([ "jquery" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
}(function( $ ) {

$.ui = $.ui || {};

var version = $.ui.version = "1.12.1";


/*!
 * jQuery UI Widget 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Widget
//>>group: Core
//>>description: Provides a factory for creating stateful widgets with a common API.
//>>docs: http://api.jqueryui.com/jQuery.widget/
//>>demos: http://jqueryui.com/widget/



var widgetUuid = 0;
var widgetSlice = Array.prototype.slice;

$.cleanData = ( function( orig ) {
	return function( elems ) {
		var events, elem, i;
		for ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {
			try {

				// Only trigger remove when necessary to save time
				events = $._data( elem, "events" );
				if ( events && events.remove ) {
					$( elem ).triggerHandler( "remove" );
				}

			// Http://bugs.jquery.com/ticket/8235
			} catch ( e ) {}
		}
		orig( elems );
	};
} )( $.cleanData );

$.widget = function( name, base, prototype ) {
	var existingConstructor, constructor, basePrototype;

	// ProxiedPrototype allows the provided prototype to remain unmodified
	// so that it can be used as a mixin for multiple widgets (#8876)
	var proxiedPrototype = {};

	var namespace = name.split( "." )[ 0 ];
	name = name.split( "." )[ 1 ];
	var fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	if ( $.isArray( prototype ) ) {
		prototype = $.extend.apply( null, [ {} ].concat( prototype ) );
	}

	// Create selector for plugin
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {

		// Allow instantiation without "new" keyword
		if ( !this._createWidget ) {
			return new constructor( options, element );
		}

		// Allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};

	// Extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,

		// Copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),

		// Track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	} );

	basePrototype = new base();

	// We need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( !$.isFunction( value ) ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = ( function() {
			function _super() {
				return base.prototype[ prop ].apply( this, arguments );
			}

			function _superApply( args ) {
				return base.prototype[ prop ].apply( this, args );
			}

			return function() {
				var __super = this._super;
				var __superApply = this._superApply;
				var returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		} )();
	} );
	constructor.prototype = $.widget.extend( basePrototype, {

		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	} );

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// Redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor,
				child._proto );
		} );

		// Remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.widget.bridge( name, constructor );

	return constructor;
};

$.widget.extend = function( target ) {
	var input = widgetSlice.call( arguments, 1 );
	var inputIndex = 0;
	var inputLength = input.length;
	var key;
	var value;

	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {

				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :

						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );

				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string";
		var args = widgetSlice.call( arguments, 1 );
		var returnValue = this;

		if ( isMethodCall ) {

			// If this is an empty collection, we need to have the instance method
			// return undefined instead of the jQuery instance
			if ( !this.length && options === "instance" ) {
				returnValue = undefined;
			} else {
				this.each( function() {
					var methodValue;
					var instance = $.data( this, fullName );

					if ( options === "instance" ) {
						returnValue = instance;
						return false;
					}

					if ( !instance ) {
						return $.error( "cannot call methods on " + name +
							" prior to initialization; " +
							"attempted to call method '" + options + "'" );
					}

					if ( !$.isFunction( instance[ options ] ) || options.charAt( 0 ) === "_" ) {
						return $.error( "no such method '" + options + "' for " + name +
							" widget instance" );
					}

					methodValue = instance[ options ].apply( instance, args );

					if ( methodValue !== instance && methodValue !== undefined ) {
						returnValue = methodValue && methodValue.jquery ?
							returnValue.pushStack( methodValue.get() ) :
							methodValue;
						return false;
					}
				} );
			}
		} else {

			// Allow multiple hashes to be passed on init
			if ( args.length ) {
				options = $.widget.extend.apply( null, [ options ].concat( args ) );
			}

			this.each( function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} );
					if ( instance._init ) {
						instance._init();
					}
				} else {
					$.data( this, fullName, new object( options, this ) );
				}
			} );
		}

		return returnValue;
	};
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",

	options: {
		classes: {},
		disabled: false,

		// Callbacks
		create: null
	},

	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = widgetUuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();
		this.classesElementLookup = {};

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			} );
			this.document = $( element.style ?

				// Element within the document
				element.ownerDocument :

				// Element is window or document
				element.document || element );
			this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );
		}

		this.options = $.widget.extend( {},
			this.options,
			this._getCreateOptions(),
			options );

		this._create();

		if ( this.options.disabled ) {
			this._setOptionDisabled( this.options.disabled );
		}

		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
	},

	_getCreateOptions: function() {
		return {};
	},

	_getCreateEventData: $.noop,

	_create: $.noop,

	_init: $.noop,

	destroy: function() {
		var that = this;

		this._destroy();
		$.each( this.classesElementLookup, function( key, value ) {
			that._removeClass( value, key );
		} );

		// We can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.off( this.eventNamespace )
			.removeData( this.widgetFullName );
		this.widget()
			.off( this.eventNamespace )
			.removeAttr( "aria-disabled" );

		// Clean up events and states
		this.bindings.off( this.eventNamespace );
	},

	_destroy: $.noop,

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key;
		var parts;
		var curOption;
		var i;

		if ( arguments.length === 0 ) {

			// Don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {

			// Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( arguments.length === 1 ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( arguments.length === 1 ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},

	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},

	_setOption: function( key, value ) {
		if ( key === "classes" ) {
			this._setOptionClasses( value );
		}

		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this._setOptionDisabled( value );
		}

		return this;
	},

	_setOptionClasses: function( value ) {
		var classKey, elements, currentElements;

		for ( classKey in value ) {
			currentElements = this.classesElementLookup[ classKey ];
			if ( value[ classKey ] === this.options.classes[ classKey ] ||
					!currentElements ||
					!currentElements.length ) {
				continue;
			}

			// We are doing this to create a new jQuery object because the _removeClass() call
			// on the next line is going to destroy the reference to the current elements being
			// tracked. We need to save a copy of this collection so that we can add the new classes
			// below.
			elements = $( currentElements.get() );
			this._removeClass( currentElements, classKey );

			// We don't use _addClass() here, because that uses this.options.classes
			// for generating the string of classes. We want to use the value passed in from
			// _setOption(), this is the new value of the classes option which was passed to
			// _setOption(). We pass this value directly to _classes().
			elements.addClass( this._classes( {
				element: elements,
				keys: classKey,
				classes: value,
				add: true
			} ) );
		}
	},

	_setOptionDisabled: function( value ) {
		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null, !!value );

		// If the widget is becoming disabled, then nothing is interactive
		if ( value ) {
			this._removeClass( this.hoverable, null, "ui-state-hover" );
			this._removeClass( this.focusable, null, "ui-state-focus" );
		}
	},

	enable: function() {
		return this._setOptions( { disabled: false } );
	},

	disable: function() {
		return this._setOptions( { disabled: true } );
	},

	_classes: function( options ) {
		var full = [];
		var that = this;

		options = $.extend( {
			element: this.element,
			classes: this.options.classes || {}
		}, options );

		function processClassString( classes, checkOption ) {
			var current, i;
			for ( i = 0; i < classes.length; i++ ) {
				current = that.classesElementLookup[ classes[ i ] ] || $();
				if ( options.add ) {
					current = $( $.unique( current.get().concat( options.element.get() ) ) );
				} else {
					current = $( current.not( options.element ).get() );
				}
				that.classesElementLookup[ classes[ i ] ] = current;
				full.push( classes[ i ] );
				if ( checkOption && options.classes[ classes[ i ] ] ) {
					full.push( options.classes[ classes[ i ] ] );
				}
			}
		}

		this._on( options.element, {
			"remove": "_untrackClassesElement"
		} );

		if ( options.keys ) {
			processClassString( options.keys.match( /\S+/g ) || [], true );
		}
		if ( options.extra ) {
			processClassString( options.extra.match( /\S+/g ) || [] );
		}

		return full.join( " " );
	},

	_untrackClassesElement: function( event ) {
		var that = this;
		$.each( that.classesElementLookup, function( key, value ) {
			if ( $.inArray( event.target, value ) !== -1 ) {
				that.classesElementLookup[ key ] = $( value.not( event.target ).get() );
			}
		} );
	},

	_removeClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, false );
	},

	_addClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, true );
	},

	_toggleClass: function( element, keys, extra, add ) {
		add = ( typeof add === "boolean" ) ? add : extra;
		var shift = ( typeof element === "string" || element === null ),
			options = {
				extra: shift ? keys : extra,
				keys: shift ? element : keys,
				element: shift ? this.element : element,
				add: add
			};
		options.element.toggleClass( this._classes( options ), add );
		return this;
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement;
		var instance = this;

		// No suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// No element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {

				// Allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
						$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// Copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^([\w:-]*)\s*(.*)$/ );
			var eventName = match[ 1 ] + instance.eventNamespace;
			var selector = match[ 2 ];

			if ( selector ) {
				delegateElement.on( eventName, selector, handlerProxy );
			} else {
				element.on( eventName, handlerProxy );
			}
		} );
	},

	_off: function( element, eventName ) {
		eventName = ( eventName || "" ).split( " " ).join( this.eventNamespace + " " ) +
			this.eventNamespace;
		element.off( eventName ).off( eventName );

		// Clear the stack to avoid memory leaks (#10056)
		this.bindings = $( this.bindings.not( element ).get() );
		this.focusable = $( this.focusable.not( element ).get() );
		this.hoverable = $( this.hoverable.not( element ).get() );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-hover" );
			},
			mouseleave: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-hover" );
			}
		} );
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-focus" );
			},
			focusout: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-focus" );
			}
		} );
	},

	_trigger: function( type, event, data ) {
		var prop, orig;
		var callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();

		// The original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// Copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		return !( $.isFunction( callback ) &&
			callback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}

		var hasOptions;
		var effectName = !options ?
			method :
			options === true || typeof options === "number" ?
				defaultEffect :
				options.effect || defaultEffect;

		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		}

		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;

		if ( options.delay ) {
			element.delay( options.delay );
		}

		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue( function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			} );
		}
	};
} );

var widget = $.widget;


/*!
 * jQuery UI Position 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */

//>>label: Position
//>>group: Core
//>>description: Positions elements relative to other elements.
//>>docs: http://api.jqueryui.com/position/
//>>demos: http://jqueryui.com/position/


( function() {
var cachedScrollbarWidth,
	max = Math.max,
	abs = Math.abs,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+(\.[\d]+)?%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

function getOffsets( offsets, width, height ) {
	return [
		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
	var raw = elem[ 0 ];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( $.isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div " +
				"style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>" +
				"<div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[ 0 ];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[ 0 ].clientWidth;
		}

		div.remove();

		return ( cachedScrollbarWidth = w1 - w2 );
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-x" ),
			overflowY = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[ 0 ].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[ 0 ].scrollHeight );
		return {
			width: hasOverflowY ? $.position.scrollbarWidth() : 0,
			height: hasOverflowX ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isWindow = $.isWindow( withinElement[ 0 ] ),
			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9,
			hasOffset = !isWindow && !isDocument;
		return {
			element: withinElement,
			isWindow: isWindow,
			isDocument: isDocument,
			offset: hasOffset ? $( element ).offset() : { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),
			width: withinElement.outerWidth(),
			height: withinElement.outerHeight()
		};
	}
};

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// Make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
		target = $( options.of ),
		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[ 0 ].preventDefault ) {

		// Force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;

	// Clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// Force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1 ) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// Calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// Reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	} );

	// Normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each( function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) +
				scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) +
				scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[ i ] ] ) {
				$.ui.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem: elem
				} );
			}
		} );

		if ( options.using ) {

			// Adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	} );
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// Element is wider than within
			if ( data.collisionWidth > outerWidth ) {

				// Element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -
						withinOffset;
					position.left += overLeft - newOverRight;

				// Element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;

				// Element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}

			// Too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;

			// Too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;

			// Adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// Element is taller than within
			if ( data.collisionHeight > outerHeight ) {

				// Element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -
						withinOffset;
					position.top += overTop - newOverBottom;

				// Element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;

				// Element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}

			// Too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;

			// Too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;

			// Adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -
					outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			} else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +
					atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -
					outerHeight - withinOffset;
				if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
					position.top += myOffset + atOffset + offset;
				}
			} else if ( overBottom > 0 ) {
				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +
					offset - offsetTop;
				if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.ui.position.flip.left.apply( this, arguments );
			$.ui.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.ui.position.flip.top.apply( this, arguments );
			$.ui.position.fit.top.apply( this, arguments );
		}
	}
};

} )();

var position = $.ui.position;


/*!
 * jQuery UI :data 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :data Selector
//>>group: Core
//>>description: Selects elements which have data stored under the specified key.
//>>docs: http://api.jqueryui.com/data-selector/


var data = $.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo( function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		} ) :

		// Support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		}
} );

/*!
 * jQuery UI Disable Selection 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: disableSelection
//>>group: Core
//>>description: Disable selection of text content within the set of matched elements.
//>>docs: http://api.jqueryui.com/disableSelection/

// This file is deprecated


var disableSelection = $.fn.extend( {
	disableSelection: ( function() {
		var eventType = "onselectstart" in document.createElement( "div" ) ?
			"selectstart" :
			"mousedown";

		return function() {
			return this.on( eventType + ".ui-disableSelection", function( event ) {
				event.preventDefault();
			} );
		};
	} )(),

	enableSelection: function() {
		return this.off( ".ui-disableSelection" );
	}
} );


/*!
 * jQuery UI Effects 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Effects Core
//>>group: Effects
// jscs:disable maximumLineLength
//>>description: Extends the internal jQuery effects. Includes morphing and easing. Required by all other effects.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/category/effects-core/
//>>demos: http://jqueryui.com/effect/



var dataSpace = "ui-effects-",
	dataSpaceStyle = "ui-effects-style",
	dataSpaceAnimated = "ui-effects-animated",

	// Create a local jQuery because jQuery Color relies on it and the
	// global may not exist with AMD and a custom build (#10199)
	jQuery = $;

$.effects = {
	effect: {}
};

/*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */
( function( jQuery, undefined ) {

	var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor " +
		"borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

	// Plusequals test for += 100 -= 100
	rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,

	// A set of RE's that can match strings and generate color tuples.
	stringParsers = [ {
			re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ],
					execResult[ 3 ],
					execResult[ 4 ]
				];
			}
		}, {
			re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ] * 2.55,
					execResult[ 2 ] * 2.55,
					execResult[ 3 ] * 2.55,
					execResult[ 4 ]
				];
			}
		}, {

			// This regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ], 16 )
				];
			}
		}, {

			// This regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
				];
			}
		}, {
			re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			space: "hsla",
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ] / 100,
					execResult[ 3 ] / 100,
					execResult[ 4 ]
				];
			}
		} ],

	// JQuery.Color( )
	color = jQuery.Color = function( color, green, blue, alpha ) {
		return new jQuery.Color.fn.parse( color, green, blue, alpha );
	},
	spaces = {
		rgba: {
			props: {
				red: {
					idx: 0,
					type: "byte"
				},
				green: {
					idx: 1,
					type: "byte"
				},
				blue: {
					idx: 2,
					type: "byte"
				}
			}
		},

		hsla: {
			props: {
				hue: {
					idx: 0,
					type: "degrees"
				},
				saturation: {
					idx: 1,
					type: "percent"
				},
				lightness: {
					idx: 2,
					type: "percent"
				}
			}
		}
	},
	propTypes = {
		"byte": {
			floor: true,
			max: 255
		},
		"percent": {
			max: 1
		},
		"degrees": {
			mod: 360,
			floor: true
		}
	},
	support = color.support = {},

	// Element for support tests
	supportElem = jQuery( "<p>" )[ 0 ],

	// Colors = jQuery.Color.names
	colors,

	// Local aliases of functions called often
	each = jQuery.each;

// Determine rgba support immediately
supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

// Define cache name and alpha properties
// for rgba and hsla spaces
each( spaces, function( spaceName, space ) {
	space.cache = "_" + spaceName;
	space.props.alpha = {
		idx: 3,
		type: "percent",
		def: 1
	};
} );

function clamp( value, prop, allowEmpty ) {
	var type = propTypes[ prop.type ] || {};

	if ( value == null ) {
		return ( allowEmpty || !prop.def ) ? null : prop.def;
	}

	// ~~ is an short way of doing floor for positive numbers
	value = type.floor ? ~~value : parseFloat( value );

	// IE will pass in empty strings as value for alpha,
	// which will hit this case
	if ( isNaN( value ) ) {
		return prop.def;
	}

	if ( type.mod ) {

		// We add mod before modding to make sure that negatives values
		// get converted properly: -10 -> 350
		return ( value + type.mod ) % type.mod;
	}

	// For now all property types without mod have min and max
	return 0 > value ? 0 : type.max < value ? type.max : value;
}

function stringParse( string ) {
	var inst = color(),
		rgba = inst._rgba = [];

	string = string.toLowerCase();

	each( stringParsers, function( i, parser ) {
		var parsed,
			match = parser.re.exec( string ),
			values = match && parser.parse( match ),
			spaceName = parser.space || "rgba";

		if ( values ) {
			parsed = inst[ spaceName ]( values );

			// If this was an rgba parse the assignment might happen twice
			// oh well....
			inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
			rgba = inst._rgba = parsed._rgba;

			// Exit each( stringParsers ) here because we matched
			return false;
		}
	} );

	// Found a stringParser that handled it
	if ( rgba.length ) {

		// If this came from a parsed string, force "transparent" when alpha is 0
		// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
		if ( rgba.join() === "0,0,0,0" ) {
			jQuery.extend( rgba, colors.transparent );
		}
		return inst;
	}

	// Named colors
	return colors[ string ];
}

color.fn = jQuery.extend( color.prototype, {
	parse: function( red, green, blue, alpha ) {
		if ( red === undefined ) {
			this._rgba = [ null, null, null, null ];
			return this;
		}
		if ( red.jquery || red.nodeType ) {
			red = jQuery( red ).css( green );
			green = undefined;
		}

		var inst = this,
			type = jQuery.type( red ),
			rgba = this._rgba = [];

		// More than 1 argument specified - assume ( red, green, blue, alpha )
		if ( green !== undefined ) {
			red = [ red, green, blue, alpha ];
			type = "array";
		}

		if ( type === "string" ) {
			return this.parse( stringParse( red ) || colors._default );
		}

		if ( type === "array" ) {
			each( spaces.rgba.props, function( key, prop ) {
				rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
			} );
			return this;
		}

		if ( type === "object" ) {
			if ( red instanceof color ) {
				each( spaces, function( spaceName, space ) {
					if ( red[ space.cache ] ) {
						inst[ space.cache ] = red[ space.cache ].slice();
					}
				} );
			} else {
				each( spaces, function( spaceName, space ) {
					var cache = space.cache;
					each( space.props, function( key, prop ) {

						// If the cache doesn't exist, and we know how to convert
						if ( !inst[ cache ] && space.to ) {

							// If the value was null, we don't need to copy it
							// if the key was alpha, we don't need to copy it either
							if ( key === "alpha" || red[ key ] == null ) {
								return;
							}
							inst[ cache ] = space.to( inst._rgba );
						}

						// This is the only case where we allow nulls for ALL properties.
						// call clamp with alwaysAllowEmpty
						inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
					} );

					// Everything defined but alpha?
					if ( inst[ cache ] &&
							jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {

						// Use the default of 1
						inst[ cache ][ 3 ] = 1;
						if ( space.from ) {
							inst._rgba = space.from( inst[ cache ] );
						}
					}
				} );
			}
			return this;
		}
	},
	is: function( compare ) {
		var is = color( compare ),
			same = true,
			inst = this;

		each( spaces, function( _, space ) {
			var localCache,
				isCache = is[ space.cache ];
			if ( isCache ) {
				localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
				each( space.props, function( _, prop ) {
					if ( isCache[ prop.idx ] != null ) {
						same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
						return same;
					}
				} );
			}
			return same;
		} );
		return same;
	},
	_space: function() {
		var used = [],
			inst = this;
		each( spaces, function( spaceName, space ) {
			if ( inst[ space.cache ] ) {
				used.push( spaceName );
			}
		} );
		return used.pop();
	},
	transition: function( other, distance ) {
		var end = color( other ),
			spaceName = end._space(),
			space = spaces[ spaceName ],
			startColor = this.alpha() === 0 ? color( "transparent" ) : this,
			start = startColor[ space.cache ] || space.to( startColor._rgba ),
			result = start.slice();

		end = end[ space.cache ];
		each( space.props, function( key, prop ) {
			var index = prop.idx,
				startValue = start[ index ],
				endValue = end[ index ],
				type = propTypes[ prop.type ] || {};

			// If null, don't override start value
			if ( endValue === null ) {
				return;
			}

			// If null - use end
			if ( startValue === null ) {
				result[ index ] = endValue;
			} else {
				if ( type.mod ) {
					if ( endValue - startValue > type.mod / 2 ) {
						startValue += type.mod;
					} else if ( startValue - endValue > type.mod / 2 ) {
						startValue -= type.mod;
					}
				}
				result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
			}
		} );
		return this[ spaceName ]( result );
	},
	blend: function( opaque ) {

		// If we are already opaque - return ourself
		if ( this._rgba[ 3 ] === 1 ) {
			return this;
		}

		var rgb = this._rgba.slice(),
			a = rgb.pop(),
			blend = color( opaque )._rgba;

		return color( jQuery.map( rgb, function( v, i ) {
			return ( 1 - a ) * blend[ i ] + a * v;
		} ) );
	},
	toRgbaString: function() {
		var prefix = "rgba(",
			rgba = jQuery.map( this._rgba, function( v, i ) {
				return v == null ? ( i > 2 ? 1 : 0 ) : v;
			} );

		if ( rgba[ 3 ] === 1 ) {
			rgba.pop();
			prefix = "rgb(";
		}

		return prefix + rgba.join() + ")";
	},
	toHslaString: function() {
		var prefix = "hsla(",
			hsla = jQuery.map( this.hsla(), function( v, i ) {
				if ( v == null ) {
					v = i > 2 ? 1 : 0;
				}

				// Catch 1 and 2
				if ( i && i < 3 ) {
					v = Math.round( v * 100 ) + "%";
				}
				return v;
			} );

		if ( hsla[ 3 ] === 1 ) {
			hsla.pop();
			prefix = "hsl(";
		}
		return prefix + hsla.join() + ")";
	},
	toHexString: function( includeAlpha ) {
		var rgba = this._rgba.slice(),
			alpha = rgba.pop();

		if ( includeAlpha ) {
			rgba.push( ~~( alpha * 255 ) );
		}

		return "#" + jQuery.map( rgba, function( v ) {

			// Default to 0 when nulls exist
			v = ( v || 0 ).toString( 16 );
			return v.length === 1 ? "0" + v : v;
		} ).join( "" );
	},
	toString: function() {
		return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
	}
} );
color.fn.parse.prototype = color.fn;

// Hsla conversions adapted from:
// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

function hue2rgb( p, q, h ) {
	h = ( h + 1 ) % 1;
	if ( h * 6 < 1 ) {
		return p + ( q - p ) * h * 6;
	}
	if ( h * 2 < 1 ) {
		return q;
	}
	if ( h * 3 < 2 ) {
		return p + ( q - p ) * ( ( 2 / 3 ) - h ) * 6;
	}
	return p;
}

spaces.hsla.to = function( rgba ) {
	if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
		return [ null, null, null, rgba[ 3 ] ];
	}
	var r = rgba[ 0 ] / 255,
		g = rgba[ 1 ] / 255,
		b = rgba[ 2 ] / 255,
		a = rgba[ 3 ],
		max = Math.max( r, g, b ),
		min = Math.min( r, g, b ),
		diff = max - min,
		add = max + min,
		l = add * 0.5,
		h, s;

	if ( min === max ) {
		h = 0;
	} else if ( r === max ) {
		h = ( 60 * ( g - b ) / diff ) + 360;
	} else if ( g === max ) {
		h = ( 60 * ( b - r ) / diff ) + 120;
	} else {
		h = ( 60 * ( r - g ) / diff ) + 240;
	}

	// Chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
	// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
	if ( diff === 0 ) {
		s = 0;
	} else if ( l <= 0.5 ) {
		s = diff / add;
	} else {
		s = diff / ( 2 - add );
	}
	return [ Math.round( h ) % 360, s, l, a == null ? 1 : a ];
};

spaces.hsla.from = function( hsla ) {
	if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
		return [ null, null, null, hsla[ 3 ] ];
	}
	var h = hsla[ 0 ] / 360,
		s = hsla[ 1 ],
		l = hsla[ 2 ],
		a = hsla[ 3 ],
		q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
		p = 2 * l - q;

	return [
		Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
		Math.round( hue2rgb( p, q, h ) * 255 ),
		Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
		a
	];
};

each( spaces, function( spaceName, space ) {
	var props = space.props,
		cache = space.cache,
		to = space.to,
		from = space.from;

	// Makes rgba() and hsla()
	color.fn[ spaceName ] = function( value ) {

		// Generate a cache for this space if it doesn't exist
		if ( to && !this[ cache ] ) {
			this[ cache ] = to( this._rgba );
		}
		if ( value === undefined ) {
			return this[ cache ].slice();
		}

		var ret,
			type = jQuery.type( value ),
			arr = ( type === "array" || type === "object" ) ? value : arguments,
			local = this[ cache ].slice();

		each( props, function( key, prop ) {
			var val = arr[ type === "object" ? key : prop.idx ];
			if ( val == null ) {
				val = local[ prop.idx ];
			}
			local[ prop.idx ] = clamp( val, prop );
		} );

		if ( from ) {
			ret = color( from( local ) );
			ret[ cache ] = local;
			return ret;
		} else {
			return color( local );
		}
	};

	// Makes red() green() blue() alpha() hue() saturation() lightness()
	each( props, function( key, prop ) {

		// Alpha is included in more than one space
		if ( color.fn[ key ] ) {
			return;
		}
		color.fn[ key ] = function( value ) {
			var vtype = jQuery.type( value ),
				fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
				local = this[ fn ](),
				cur = local[ prop.idx ],
				match;

			if ( vtype === "undefined" ) {
				return cur;
			}

			if ( vtype === "function" ) {
				value = value.call( this, cur );
				vtype = jQuery.type( value );
			}
			if ( value == null && prop.empty ) {
				return this;
			}
			if ( vtype === "string" ) {
				match = rplusequals.exec( value );
				if ( match ) {
					value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
				}
			}
			local[ prop.idx ] = value;
			return this[ fn ]( local );
		};
	} );
} );

// Add cssHook and .fx.step function for each named hook.
// accept a space separated string of properties
color.hook = function( hook ) {
	var hooks = hook.split( " " );
	each( hooks, function( i, hook ) {
		jQuery.cssHooks[ hook ] = {
			set: function( elem, value ) {
				var parsed, curElem,
					backgroundColor = "";

				if ( value !== "transparent" && ( jQuery.type( value ) !== "string" ||
						( parsed = stringParse( value ) ) ) ) {
					value = color( parsed || value );
					if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
						curElem = hook === "backgroundColor" ? elem.parentNode : elem;
						while (
							( backgroundColor === "" || backgroundColor === "transparent" ) &&
							curElem && curElem.style
						) {
							try {
								backgroundColor = jQuery.css( curElem, "backgroundColor" );
								curElem = curElem.parentNode;
							} catch ( e ) {
							}
						}

						value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
							backgroundColor :
							"_default" );
					}

					value = value.toRgbaString();
				}
				try {
					elem.style[ hook ] = value;
				} catch ( e ) {

					// Wrapped to prevent IE from throwing errors on "invalid" values like
					// 'auto' or 'inherit'
				}
			}
		};
		jQuery.fx.step[ hook ] = function( fx ) {
			if ( !fx.colorInit ) {
				fx.start = color( fx.elem, hook );
				fx.end = color( fx.end );
				fx.colorInit = true;
			}
			jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
		};
	} );

};

color.hook( stepHooks );

jQuery.cssHooks.borderColor = {
	expand: function( value ) {
		var expanded = {};

		each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
			expanded[ "border" + part + "Color" ] = value;
		} );
		return expanded;
	}
};

// Basic color names only.
// Usage of any of the other color names requires adding yourself or including
// jquery.color.svg-names.js.
colors = jQuery.Color.names = {

	// 4.1. Basic color keywords
	aqua: "#00ffff",
	black: "#000000",
	blue: "#0000ff",
	fuchsia: "#ff00ff",
	gray: "#808080",
	green: "#008000",
	lime: "#00ff00",
	maroon: "#800000",
	navy: "#000080",
	olive: "#808000",
	purple: "#800080",
	red: "#ff0000",
	silver: "#c0c0c0",
	teal: "#008080",
	white: "#ffffff",
	yellow: "#ffff00",

	// 4.2.3. "transparent" color keyword
	transparent: [ null, null, null, 0 ],

	_default: "#ffffff"
};

} )( jQuery );

/******************************************************************************/
/****************************** CLASS ANIMATIONS ******************************/
/******************************************************************************/
( function() {

var classAnimationActions = [ "add", "remove", "toggle" ],
	shorthandStyles = {
		border: 1,
		borderBottom: 1,
		borderColor: 1,
		borderLeft: 1,
		borderRight: 1,
		borderTop: 1,
		borderWidth: 1,
		margin: 1,
		padding: 1
	};

$.each(
	[ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ],
	function( _, prop ) {
		$.fx.step[ prop ] = function( fx ) {
			if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
				jQuery.style( fx.elem, prop, fx.end );
				fx.setAttr = true;
			}
		};
	}
);

function getElementStyles( elem ) {
	var key, len,
		style = elem.ownerDocument.defaultView ?
			elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
			elem.currentStyle,
		styles = {};

	if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
		len = style.length;
		while ( len-- ) {
			key = style[ len ];
			if ( typeof style[ key ] === "string" ) {
				styles[ $.camelCase( key ) ] = style[ key ];
			}
		}

	// Support: Opera, IE <9
	} else {
		for ( key in style ) {
			if ( typeof style[ key ] === "string" ) {
				styles[ key ] = style[ key ];
			}
		}
	}

	return styles;
}

function styleDifference( oldStyle, newStyle ) {
	var diff = {},
		name, value;

	for ( name in newStyle ) {
		value = newStyle[ name ];
		if ( oldStyle[ name ] !== value ) {
			if ( !shorthandStyles[ name ] ) {
				if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
					diff[ name ] = value;
				}
			}
		}
	}

	return diff;
}

// Support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

$.effects.animateClass = function( value, duration, easing, callback ) {
	var o = $.speed( duration, easing, callback );

	return this.queue( function() {
		var animated = $( this ),
			baseClass = animated.attr( "class" ) || "",
			applyClassChange,
			allAnimations = o.children ? animated.find( "*" ).addBack() : animated;

		// Map the animated objects to store the original styles.
		allAnimations = allAnimations.map( function() {
			var el = $( this );
			return {
				el: el,
				start: getElementStyles( this )
			};
		} );

		// Apply class change
		applyClassChange = function() {
			$.each( classAnimationActions, function( i, action ) {
				if ( value[ action ] ) {
					animated[ action + "Class" ]( value[ action ] );
				}
			} );
		};
		applyClassChange();

		// Map all animated objects again - calculate new styles and diff
		allAnimations = allAnimations.map( function() {
			this.end = getElementStyles( this.el[ 0 ] );
			this.diff = styleDifference( this.start, this.end );
			return this;
		} );

		// Apply original class
		animated.attr( "class", baseClass );

		// Map all animated objects again - this time collecting a promise
		allAnimations = allAnimations.map( function() {
			var styleInfo = this,
				dfd = $.Deferred(),
				opts = $.extend( {}, o, {
					queue: false,
					complete: function() {
						dfd.resolve( styleInfo );
					}
				} );

			this.el.animate( this.diff, opts );
			return dfd.promise();
		} );

		// Once all animations have completed:
		$.when.apply( $, allAnimations.get() ).done( function() {

			// Set the final class
			applyClassChange();

			// For each animated element,
			// clear all css properties that were animated
			$.each( arguments, function() {
				var el = this.el;
				$.each( this.diff, function( key ) {
					el.css( key, "" );
				} );
			} );

			// This is guarnteed to be there if you use jQuery.speed()
			// it also handles dequeuing the next anim...
			o.complete.call( animated[ 0 ] );
		} );
	} );
};

$.fn.extend( {
	addClass: ( function( orig ) {
		return function( classNames, speed, easing, callback ) {
			return speed ?
				$.effects.animateClass.call( this,
					{ add: classNames }, speed, easing, callback ) :
				orig.apply( this, arguments );
		};
	} )( $.fn.addClass ),

	removeClass: ( function( orig ) {
		return function( classNames, speed, easing, callback ) {
			return arguments.length > 1 ?
				$.effects.animateClass.call( this,
					{ remove: classNames }, speed, easing, callback ) :
				orig.apply( this, arguments );
		};
	} )( $.fn.removeClass ),

	toggleClass: ( function( orig ) {
		return function( classNames, force, speed, easing, callback ) {
			if ( typeof force === "boolean" || force === undefined ) {
				if ( !speed ) {

					// Without speed parameter
					return orig.apply( this, arguments );
				} else {
					return $.effects.animateClass.call( this,
						( force ? { add: classNames } : { remove: classNames } ),
						speed, easing, callback );
				}
			} else {

				// Without force parameter
				return $.effects.animateClass.call( this,
					{ toggle: classNames }, force, speed, easing );
			}
		};
	} )( $.fn.toggleClass ),

	switchClass: function( remove, add, speed, easing, callback ) {
		return $.effects.animateClass.call( this, {
			add: add,
			remove: remove
		}, speed, easing, callback );
	}
} );

} )();

/******************************************************************************/
/*********************************** EFFECTS **********************************/
/******************************************************************************/

( function() {

if ( $.expr && $.expr.filters && $.expr.filters.animated ) {
	$.expr.filters.animated = ( function( orig ) {
		return function( elem ) {
			return !!$( elem ).data( dataSpaceAnimated ) || orig( elem );
		};
	} )( $.expr.filters.animated );
}

if ( $.uiBackCompat !== false ) {
	$.extend( $.effects, {

		// Saves a set of properties in a data storage
		save: function( element, set ) {
			var i = 0, length = set.length;
			for ( ; i < length; i++ ) {
				if ( set[ i ] !== null ) {
					element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
				}
			}
		},

		// Restores a set of previously saved properties from a data storage
		restore: function( element, set ) {
			var val, i = 0, length = set.length;
			for ( ; i < length; i++ ) {
				if ( set[ i ] !== null ) {
					val = element.data( dataSpace + set[ i ] );
					element.css( set[ i ], val );
				}
			}
		},

		setMode: function( el, mode ) {
			if ( mode === "toggle" ) {
				mode = el.is( ":hidden" ) ? "show" : "hide";
			}
			return mode;
		},

		// Wraps the element around a wrapper that copies position properties
		createWrapper: function( element ) {

			// If the element is already wrapped, return it
			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
				return element.parent();
			}

			// Wrap the element
			var props = {
					width: element.outerWidth( true ),
					height: element.outerHeight( true ),
					"float": element.css( "float" )
				},
				wrapper = $( "<div></div>" )
					.addClass( "ui-effects-wrapper" )
					.css( {
						fontSize: "100%",
						background: "transparent",
						border: "none",
						margin: 0,
						padding: 0
					} ),

				// Store the size in case width/height are defined in % - Fixes #5245
				size = {
					width: element.width(),
					height: element.height()
				},
				active = document.activeElement;

			// Support: Firefox
			// Firefox incorrectly exposes anonymous content
			// https://bugzilla.mozilla.org/show_bug.cgi?id=561664
			try {
				active.id;
			} catch ( e ) {
				active = document.body;
			}

			element.wrap( wrapper );

			// Fixes #7595 - Elements lose focus when wrapped.
			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
				$( active ).trigger( "focus" );
			}

			// Hotfix for jQuery 1.4 since some change in wrap() seems to actually
			// lose the reference to the wrapped element
			wrapper = element.parent();

			// Transfer positioning properties to the wrapper
			if ( element.css( "position" ) === "static" ) {
				wrapper.css( { position: "relative" } );
				element.css( { position: "relative" } );
			} else {
				$.extend( props, {
					position: element.css( "position" ),
					zIndex: element.css( "z-index" )
				} );
				$.each( [ "top", "left", "bottom", "right" ], function( i, pos ) {
					props[ pos ] = element.css( pos );
					if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
						props[ pos ] = "auto";
					}
				} );
				element.css( {
					position: "relative",
					top: 0,
					left: 0,
					right: "auto",
					bottom: "auto"
				} );
			}
			element.css( size );

			return wrapper.css( props ).show();
		},

		removeWrapper: function( element ) {
			var active = document.activeElement;

			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
				element.parent().replaceWith( element );

				// Fixes #7595 - Elements lose focus when wrapped.
				if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
					$( active ).trigger( "focus" );
				}
			}

			return element;
		}
	} );
}

$.extend( $.effects, {
	version: "1.12.1",

	define: function( name, mode, effect ) {
		if ( !effect ) {
			effect = mode;
			mode = "effect";
		}

		$.effects.effect[ name ] = effect;
		$.effects.effect[ name ].mode = mode;

		return effect;
	},

	scaledDimensions: function( element, percent, direction ) {
		if ( percent === 0 ) {
			return {
				height: 0,
				width: 0,
				outerHeight: 0,
				outerWidth: 0
			};
		}

		var x = direction !== "horizontal" ? ( ( percent || 100 ) / 100 ) : 1,
			y = direction !== "vertical" ? ( ( percent || 100 ) / 100 ) : 1;

		return {
			height: element.height() * y,
			width: element.width() * x,
			outerHeight: element.outerHeight() * y,
			outerWidth: element.outerWidth() * x
		};

	},

	clipToBox: function( animation ) {
		return {
			width: animation.clip.right - animation.clip.left,
			height: animation.clip.bottom - animation.clip.top,
			left: animation.clip.left,
			top: animation.clip.top
		};
	},

	// Injects recently queued functions to be first in line (after "inprogress")
	unshift: function( element, queueLength, count ) {
		var queue = element.queue();

		if ( queueLength > 1 ) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queueLength, count ) ) );
		}
		element.dequeue();
	},

	saveStyle: function( element ) {
		element.data( dataSpaceStyle, element[ 0 ].style.cssText );
	},

	restoreStyle: function( element ) {
		element[ 0 ].style.cssText = element.data( dataSpaceStyle ) || "";
		element.removeData( dataSpaceStyle );
	},

	mode: function( element, mode ) {
		var hidden = element.is( ":hidden" );

		if ( mode === "toggle" ) {
			mode = hidden ? "show" : "hide";
		}
		if ( hidden ? mode === "hide" : mode === "show" ) {
			mode = "none";
		}
		return mode;
	},

	// Translates a [top,left] array into a baseline value
	getBaseline: function( origin, original ) {
		var y, x;

		switch ( origin[ 0 ] ) {
		case "top":
			y = 0;
			break;
		case "middle":
			y = 0.5;
			break;
		case "bottom":
			y = 1;
			break;
		default:
			y = origin[ 0 ] / original.height;
		}

		switch ( origin[ 1 ] ) {
		case "left":
			x = 0;
			break;
		case "center":
			x = 0.5;
			break;
		case "right":
			x = 1;
			break;
		default:
			x = origin[ 1 ] / original.width;
		}

		return {
			x: x,
			y: y
		};
	},

	// Creates a placeholder element so that the original element can be made absolute
	createPlaceholder: function( element ) {
		var placeholder,
			cssPosition = element.css( "position" ),
			position = element.position();

		// Lock in margins first to account for form elements, which
		// will change margin if you explicitly set height
		// see: http://jsfiddle.net/JZSMt/3/ https://bugs.webkit.org/show_bug.cgi?id=107380
		// Support: Safari
		element.css( {
			marginTop: element.css( "marginTop" ),
			marginBottom: element.css( "marginBottom" ),
			marginLeft: element.css( "marginLeft" ),
			marginRight: element.css( "marginRight" )
		} )
		.outerWidth( element.outerWidth() )
		.outerHeight( element.outerHeight() );

		if ( /^(static|relative)/.test( cssPosition ) ) {
			cssPosition = "absolute";

			placeholder = $( "<" + element[ 0 ].nodeName + ">" ).insertAfter( element ).css( {

				// Convert inline to inline block to account for inline elements
				// that turn to inline block based on content (like img)
				display: /^(inline|ruby)/.test( element.css( "display" ) ) ?
					"inline-block" :
					"block",
				visibility: "hidden",

				// Margins need to be set to account for margin collapse
				marginTop: element.css( "marginTop" ),
				marginBottom: element.css( "marginBottom" ),
				marginLeft: element.css( "marginLeft" ),
				marginRight: element.css( "marginRight" ),
				"float": element.css( "float" )
			} )
			.outerWidth( element.outerWidth() )
			.outerHeight( element.outerHeight() )
			.addClass( "ui-effects-placeholder" );

			element.data( dataSpace + "placeholder", placeholder );
		}

		element.css( {
			position: cssPosition,
			left: position.left,
			top: position.top
		} );

		return placeholder;
	},

	removePlaceholder: function( element ) {
		var dataKey = dataSpace + "placeholder",
				placeholder = element.data( dataKey );

		if ( placeholder ) {
			placeholder.remove();
			element.removeData( dataKey );
		}
	},

	// Removes a placeholder if it exists and restores
	// properties that were modified during placeholder creation
	cleanUp: function( element ) {
		$.effects.restoreStyle( element );
		$.effects.removePlaceholder( element );
	},

	setTransition: function( element, list, factor, value ) {
		value = value || {};
		$.each( list, function( i, x ) {
			var unit = element.cssUnit( x );
			if ( unit[ 0 ] > 0 ) {
				value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
			}
		} );
		return value;
	}
} );

// Return an effect options object for the given parameters:
function _normalizeArguments( effect, options, speed, callback ) {

	// Allow passing all options as the first parameter
	if ( $.isPlainObject( effect ) ) {
		options = effect;
		effect = effect.effect;
	}

	// Convert to an object
	effect = { effect: effect };

	// Catch (effect, null, ...)
	if ( options == null ) {
		options = {};
	}

	// Catch (effect, callback)
	if ( $.isFunction( options ) ) {
		callback = options;
		speed = null;
		options = {};
	}

	// Catch (effect, speed, ?)
	if ( typeof options === "number" || $.fx.speeds[ options ] ) {
		callback = speed;
		speed = options;
		options = {};
	}

	// Catch (effect, options, callback)
	if ( $.isFunction( speed ) ) {
		callback = speed;
		speed = null;
	}

	// Add options to effect
	if ( options ) {
		$.extend( effect, options );
	}

	speed = speed || options.duration;
	effect.duration = $.fx.off ? 0 :
		typeof speed === "number" ? speed :
		speed in $.fx.speeds ? $.fx.speeds[ speed ] :
		$.fx.speeds._default;

	effect.complete = callback || options.complete;

	return effect;
}

function standardAnimationOption( option ) {

	// Valid standard speeds (nothing, number, named speed)
	if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
		return true;
	}

	// Invalid strings - treat as "normal" speed
	if ( typeof option === "string" && !$.effects.effect[ option ] ) {
		return true;
	}

	// Complete callback
	if ( $.isFunction( option ) ) {
		return true;
	}

	// Options hash (but not naming an effect)
	if ( typeof option === "object" && !option.effect ) {
		return true;
	}

	// Didn't match any standard API
	return false;
}

$.fn.extend( {
	effect: function( /* effect, options, speed, callback */ ) {
		var args = _normalizeArguments.apply( this, arguments ),
			effectMethod = $.effects.effect[ args.effect ],
			defaultMode = effectMethod.mode,
			queue = args.queue,
			queueName = queue || "fx",
			complete = args.complete,
			mode = args.mode,
			modes = [],
			prefilter = function( next ) {
				var el = $( this ),
					normalizedMode = $.effects.mode( el, mode ) || defaultMode;

				// Sentinel for duck-punching the :animated psuedo-selector
				el.data( dataSpaceAnimated, true );

				// Save effect mode for later use,
				// we can't just call $.effects.mode again later,
				// as the .show() below destroys the initial state
				modes.push( normalizedMode );

				// See $.uiBackCompat inside of run() for removal of defaultMode in 1.13
				if ( defaultMode && ( normalizedMode === "show" ||
						( normalizedMode === defaultMode && normalizedMode === "hide" ) ) ) {
					el.show();
				}

				if ( !defaultMode || normalizedMode !== "none" ) {
					$.effects.saveStyle( el );
				}

				if ( $.isFunction( next ) ) {
					next();
				}
			};

		if ( $.fx.off || !effectMethod ) {

			// Delegate to the original method (e.g., .show()) if possible
			if ( mode ) {
				return this[ mode ]( args.duration, complete );
			} else {
				return this.each( function() {
					if ( complete ) {
						complete.call( this );
					}
				} );
			}
		}

		function run( next ) {
			var elem = $( this );

			function cleanup() {
				elem.removeData( dataSpaceAnimated );

				$.effects.cleanUp( elem );

				if ( args.mode === "hide" ) {
					elem.hide();
				}

				done();
			}

			function done() {
				if ( $.isFunction( complete ) ) {
					complete.call( elem[ 0 ] );
				}

				if ( $.isFunction( next ) ) {
					next();
				}
			}

			// Override mode option on a per element basis,
			// as toggle can be either show or hide depending on element state
			args.mode = modes.shift();

			if ( $.uiBackCompat !== false && !defaultMode ) {
				if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {

					// Call the core method to track "olddisplay" properly
					elem[ mode ]();
					done();
				} else {
					effectMethod.call( elem[ 0 ], args, done );
				}
			} else {
				if ( args.mode === "none" ) {

					// Call the core method to track "olddisplay" properly
					elem[ mode ]();
					done();
				} else {
					effectMethod.call( elem[ 0 ], args, cleanup );
				}
			}
		}

		// Run prefilter on all elements first to ensure that
		// any showing or hiding happens before placeholder creation,
		// which ensures that any layout changes are correctly captured.
		return queue === false ?
			this.each( prefilter ).each( run ) :
			this.queue( queueName, prefilter ).queue( queueName, run );
	},

	show: ( function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "show";
				return this.effect.call( this, args );
			}
		};
	} )( $.fn.show ),

	hide: ( function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "hide";
				return this.effect.call( this, args );
			}
		};
	} )( $.fn.hide ),

	toggle: ( function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "toggle";
				return this.effect.call( this, args );
			}
		};
	} )( $.fn.toggle ),

	cssUnit: function( key ) {
		var style = this.css( key ),
			val = [];

		$.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
			if ( style.indexOf( unit ) > 0 ) {
				val = [ parseFloat( style ), unit ];
			}
		} );
		return val;
	},

	cssClip: function( clipObj ) {
		if ( clipObj ) {
			return this.css( "clip", "rect(" + clipObj.top + "px " + clipObj.right + "px " +
				clipObj.bottom + "px " + clipObj.left + "px)" );
		}
		return parseClip( this.css( "clip" ), this );
	},

	transfer: function( options, done ) {
		var element = $( this ),
			target = $( options.to ),
			targetFixed = target.css( "position" ) === "fixed",
			body = $( "body" ),
			fixTop = targetFixed ? body.scrollTop() : 0,
			fixLeft = targetFixed ? body.scrollLeft() : 0,
			endPosition = target.offset(),
			animation = {
				top: endPosition.top - fixTop,
				left: endPosition.left - fixLeft,
				height: target.innerHeight(),
				width: target.innerWidth()
			},
			startPosition = element.offset(),
			transfer = $( "<div class='ui-effects-transfer'></div>" )
				.appendTo( "body" )
				.addClass( options.className )
				.css( {
					top: startPosition.top - fixTop,
					left: startPosition.left - fixLeft,
					height: element.innerHeight(),
					width: element.innerWidth(),
					position: targetFixed ? "fixed" : "absolute"
				} )
				.animate( animation, options.duration, options.easing, function() {
					transfer.remove();
					if ( $.isFunction( done ) ) {
						done();
					}
				} );
	}
} );

function parseClip( str, element ) {
		var outerWidth = element.outerWidth(),
			outerHeight = element.outerHeight(),
			clipRegex = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/,
			values = clipRegex.exec( str ) || [ "", 0, outerWidth, outerHeight, 0 ];

		return {
			top: parseFloat( values[ 1 ] ) || 0,
			right: values[ 2 ] === "auto" ? outerWidth : parseFloat( values[ 2 ] ),
			bottom: values[ 3 ] === "auto" ? outerHeight : parseFloat( values[ 3 ] ),
			left: parseFloat( values[ 4 ] ) || 0
		};
}

$.fx.step.clip = function( fx ) {
	if ( !fx.clipInit ) {
		fx.start = $( fx.elem ).cssClip();
		if ( typeof fx.end === "string" ) {
			fx.end = parseClip( fx.end, fx.elem );
		}
		fx.clipInit = true;
	}

	$( fx.elem ).cssClip( {
		top: fx.pos * ( fx.end.top - fx.start.top ) + fx.start.top,
		right: fx.pos * ( fx.end.right - fx.start.right ) + fx.start.right,
		bottom: fx.pos * ( fx.end.bottom - fx.start.bottom ) + fx.start.bottom,
		left: fx.pos * ( fx.end.left - fx.start.left ) + fx.start.left
	} );
};

} )();

/******************************************************************************/
/*********************************** EASING ***********************************/
/******************************************************************************/

( function() {

// Based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

var baseEasings = {};

$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
	baseEasings[ name ] = function( p ) {
		return Math.pow( p, i + 2 );
	};
} );

$.extend( baseEasings, {
	Sine: function( p ) {
		return 1 - Math.cos( p * Math.PI / 2 );
	},
	Circ: function( p ) {
		return 1 - Math.sqrt( 1 - p * p );
	},
	Elastic: function( p ) {
		return p === 0 || p === 1 ? p :
			-Math.pow( 2, 8 * ( p - 1 ) ) * Math.sin( ( ( p - 1 ) * 80 - 7.5 ) * Math.PI / 15 );
	},
	Back: function( p ) {
		return p * p * ( 3 * p - 2 );
	},
	Bounce: function( p ) {
		var pow2,
			bounce = 4;

		while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
		return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
	}
} );

$.each( baseEasings, function( name, easeIn ) {
	$.easing[ "easeIn" + name ] = easeIn;
	$.easing[ "easeOut" + name ] = function( p ) {
		return 1 - easeIn( 1 - p );
	};
	$.easing[ "easeInOut" + name ] = function( p ) {
		return p < 0.5 ?
			easeIn( p * 2 ) / 2 :
			1 - easeIn( p * -2 + 2 ) / 2;
	};
} );

} )();

var effect = $.effects;


/*!
 * jQuery UI Effects Blind 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Blind Effect
//>>group: Effects
//>>description: Blinds the element.
//>>docs: http://api.jqueryui.com/blind-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectBlind = $.effects.define( "blind", "hide", function( options, done ) {
	var map = {
			up: [ "bottom", "top" ],
			vertical: [ "bottom", "top" ],
			down: [ "top", "bottom" ],
			left: [ "right", "left" ],
			horizontal: [ "right", "left" ],
			right: [ "left", "right" ]
		},
		element = $( this ),
		direction = options.direction || "up",
		start = element.cssClip(),
		animate = { clip: $.extend( {}, start ) },
		placeholder = $.effects.createPlaceholder( element );

	animate.clip[ map[ direction ][ 0 ] ] = animate.clip[ map[ direction ][ 1 ] ];

	if ( options.mode === "show" ) {
		element.cssClip( animate.clip );
		if ( placeholder ) {
			placeholder.css( $.effects.clipToBox( animate ) );
		}

		animate.clip = start;
	}

	if ( placeholder ) {
		placeholder.animate( $.effects.clipToBox( animate ), options.duration, options.easing );
	}

	element.animate( animate, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );
} );


/*!
 * jQuery UI Effects Bounce 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Bounce Effect
//>>group: Effects
//>>description: Bounces an element horizontally or vertically n times.
//>>docs: http://api.jqueryui.com/bounce-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectBounce = $.effects.define( "bounce", function( options, done ) {
	var upAnim, downAnim, refValue,
		element = $( this ),

		// Defaults:
		mode = options.mode,
		hide = mode === "hide",
		show = mode === "show",
		direction = options.direction || "up",
		distance = options.distance,
		times = options.times || 5,

		// Number of internal animations
		anims = times * 2 + ( show || hide ? 1 : 0 ),
		speed = options.duration / anims,
		easing = options.easing,

		// Utility:
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		motion = ( direction === "up" || direction === "left" ),
		i = 0,

		queuelen = element.queue().length;

	$.effects.createPlaceholder( element );

	refValue = element.css( ref );

	// Default distance for the BIGGEST bounce is the outer Distance / 3
	if ( !distance ) {
		distance = element[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
	}

	if ( show ) {
		downAnim = { opacity: 1 };
		downAnim[ ref ] = refValue;

		// If we are showing, force opacity 0 and set the initial position
		// then do the "first" animation
		element
			.css( "opacity", 0 )
			.css( ref, motion ? -distance * 2 : distance * 2 )
			.animate( downAnim, speed, easing );
	}

	// Start at the smallest distance if we are hiding
	if ( hide ) {
		distance = distance / Math.pow( 2, times - 1 );
	}

	downAnim = {};
	downAnim[ ref ] = refValue;

	// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
	for ( ; i < times; i++ ) {
		upAnim = {};
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

		element
			.animate( upAnim, speed, easing )
			.animate( downAnim, speed, easing );

		distance = hide ? distance * 2 : distance / 2;
	}

	// Last Bounce when Hiding
	if ( hide ) {
		upAnim = { opacity: 0 };
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

		element.animate( upAnim, speed, easing );
	}

	element.queue( done );

	$.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Clip 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Clip Effect
//>>group: Effects
//>>description: Clips the element on and off like an old TV.
//>>docs: http://api.jqueryui.com/clip-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectClip = $.effects.define( "clip", "hide", function( options, done ) {
	var start,
		animate = {},
		element = $( this ),
		direction = options.direction || "vertical",
		both = direction === "both",
		horizontal = both || direction === "horizontal",
		vertical = both || direction === "vertical";

	start = element.cssClip();
	animate.clip = {
		top: vertical ? ( start.bottom - start.top ) / 2 : start.top,
		right: horizontal ? ( start.right - start.left ) / 2 : start.right,
		bottom: vertical ? ( start.bottom - start.top ) / 2 : start.bottom,
		left: horizontal ? ( start.right - start.left ) / 2 : start.left
	};

	$.effects.createPlaceholder( element );

	if ( options.mode === "show" ) {
		element.cssClip( animate.clip );
		animate.clip = start;
	}

	element.animate( animate, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );

} );


/*!
 * jQuery UI Effects Drop 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Drop Effect
//>>group: Effects
//>>description: Moves an element in one direction and hides it at the same time.
//>>docs: http://api.jqueryui.com/drop-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectDrop = $.effects.define( "drop", "hide", function( options, done ) {

	var distance,
		element = $( this ),
		mode = options.mode,
		show = mode === "show",
		direction = options.direction || "left",
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		motion = ( direction === "up" || direction === "left" ) ? "-=" : "+=",
		oppositeMotion = ( motion === "+=" ) ? "-=" : "+=",
		animation = {
			opacity: 0
		};

	$.effects.createPlaceholder( element );

	distance = options.distance ||
		element[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ) / 2;

	animation[ ref ] = motion + distance;

	if ( show ) {
		element.css( animation );

		animation[ ref ] = oppositeMotion + distance;
		animation.opacity = 1;
	}

	// Animate
	element.animate( animation, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );
} );


/*!
 * jQuery UI Effects Explode 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Explode Effect
//>>group: Effects
// jscs:disable maximumLineLength
//>>description: Explodes an element in all directions into n pieces. Implodes an element to its original wholeness.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/explode-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectExplode = $.effects.define( "explode", "hide", function( options, done ) {

	var i, j, left, top, mx, my,
		rows = options.pieces ? Math.round( Math.sqrt( options.pieces ) ) : 3,
		cells = rows,
		element = $( this ),
		mode = options.mode,
		show = mode === "show",

		// Show and then visibility:hidden the element before calculating offset
		offset = element.show().css( "visibility", "hidden" ).offset(),

		// Width and height of a piece
		width = Math.ceil( element.outerWidth() / cells ),
		height = Math.ceil( element.outerHeight() / rows ),
		pieces = [];

	// Children animate complete:
	function childComplete() {
		pieces.push( this );
		if ( pieces.length === rows * cells ) {
			animComplete();
		}
	}

	// Clone the element for each row and cell.
	for ( i = 0; i < rows; i++ ) { // ===>
		top = offset.top + i * height;
		my = i - ( rows - 1 ) / 2;

		for ( j = 0; j < cells; j++ ) { // |||
			left = offset.left + j * width;
			mx = j - ( cells - 1 ) / 2;

			// Create a clone of the now hidden main element that will be absolute positioned
			// within a wrapper div off the -left and -top equal to size of our pieces
			element
				.clone()
				.appendTo( "body" )
				.wrap( "<div></div>" )
				.css( {
					position: "absolute",
					visibility: "visible",
					left: -j * width,
					top: -i * height
				} )

				// Select the wrapper - make it overflow: hidden and absolute positioned based on
				// where the original was located +left and +top equal to the size of pieces
				.parent()
					.addClass( "ui-effects-explode" )
					.css( {
						position: "absolute",
						overflow: "hidden",
						width: width,
						height: height,
						left: left + ( show ? mx * width : 0 ),
						top: top + ( show ? my * height : 0 ),
						opacity: show ? 0 : 1
					} )
					.animate( {
						left: left + ( show ? 0 : mx * width ),
						top: top + ( show ? 0 : my * height ),
						opacity: show ? 1 : 0
					}, options.duration || 500, options.easing, childComplete );
		}
	}

	function animComplete() {
		element.css( {
			visibility: "visible"
		} );
		$( pieces ).remove();
		done();
	}
} );


/*!
 * jQuery UI Effects Fade 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Fade Effect
//>>group: Effects
//>>description: Fades the element.
//>>docs: http://api.jqueryui.com/fade-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectFade = $.effects.define( "fade", "toggle", function( options, done ) {
	var show = options.mode === "show";

	$( this )
		.css( "opacity", show ? 0 : 1 )
		.animate( {
			opacity: show ? 1 : 0
		}, {
			queue: false,
			duration: options.duration,
			easing: options.easing,
			complete: done
		} );
} );


/*!
 * jQuery UI Effects Fold 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Fold Effect
//>>group: Effects
//>>description: Folds an element first horizontally and then vertically.
//>>docs: http://api.jqueryui.com/fold-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectFold = $.effects.define( "fold", "hide", function( options, done ) {

	// Create element
	var element = $( this ),
		mode = options.mode,
		show = mode === "show",
		hide = mode === "hide",
		size = options.size || 15,
		percent = /([0-9]+)%/.exec( size ),
		horizFirst = !!options.horizFirst,
		ref = horizFirst ? [ "right", "bottom" ] : [ "bottom", "right" ],
		duration = options.duration / 2,

		placeholder = $.effects.createPlaceholder( element ),

		start = element.cssClip(),
		animation1 = { clip: $.extend( {}, start ) },
		animation2 = { clip: $.extend( {}, start ) },

		distance = [ start[ ref[ 0 ] ], start[ ref[ 1 ] ] ],

		queuelen = element.queue().length;

	if ( percent ) {
		size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
	}
	animation1.clip[ ref[ 0 ] ] = size;
	animation2.clip[ ref[ 0 ] ] = size;
	animation2.clip[ ref[ 1 ] ] = 0;

	if ( show ) {
		element.cssClip( animation2.clip );
		if ( placeholder ) {
			placeholder.css( $.effects.clipToBox( animation2 ) );
		}

		animation2.clip = start;
	}

	// Animate
	element
		.queue( function( next ) {
			if ( placeholder ) {
				placeholder
					.animate( $.effects.clipToBox( animation1 ), duration, options.easing )
					.animate( $.effects.clipToBox( animation2 ), duration, options.easing );
			}

			next();
		} )
		.animate( animation1, duration, options.easing )
		.animate( animation2, duration, options.easing )
		.queue( done );

	$.effects.unshift( element, queuelen, 4 );
} );


/*!
 * jQuery UI Effects Highlight 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Highlight Effect
//>>group: Effects
//>>description: Highlights the background of an element in a defined color for a custom duration.
//>>docs: http://api.jqueryui.com/highlight-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectHighlight = $.effects.define( "highlight", "show", function( options, done ) {
	var element = $( this ),
		animation = {
			backgroundColor: element.css( "backgroundColor" )
		};

	if ( options.mode === "hide" ) {
		animation.opacity = 0;
	}

	$.effects.saveStyle( element );

	element
		.css( {
			backgroundImage: "none",
			backgroundColor: options.color || "#ffff99"
		} )
		.animate( animation, {
			queue: false,
			duration: options.duration,
			easing: options.easing,
			complete: done
		} );
} );


/*!
 * jQuery UI Effects Size 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Size Effect
//>>group: Effects
//>>description: Resize an element to a specified width and height.
//>>docs: http://api.jqueryui.com/size-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectSize = $.effects.define( "size", function( options, done ) {

	// Create element
	var baseline, factor, temp,
		element = $( this ),

		// Copy for children
		cProps = [ "fontSize" ],
		vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
		hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

		// Set options
		mode = options.mode,
		restore = mode !== "effect",
		scale = options.scale || "both",
		origin = options.origin || [ "middle", "center" ],
		position = element.css( "position" ),
		pos = element.position(),
		original = $.effects.scaledDimensions( element ),
		from = options.from || original,
		to = options.to || $.effects.scaledDimensions( element, 0 );

	$.effects.createPlaceholder( element );

	if ( mode === "show" ) {
		temp = from;
		from = to;
		to = temp;
	}

	// Set scaling factor
	factor = {
		from: {
			y: from.height / original.height,
			x: from.width / original.width
		},
		to: {
			y: to.height / original.height,
			x: to.width / original.width
		}
	};

	// Scale the css box
	if ( scale === "box" || scale === "both" ) {

		// Vertical props scaling
		if ( factor.from.y !== factor.to.y ) {
			from = $.effects.setTransition( element, vProps, factor.from.y, from );
			to = $.effects.setTransition( element, vProps, factor.to.y, to );
		}

		// Horizontal props scaling
		if ( factor.from.x !== factor.to.x ) {
			from = $.effects.setTransition( element, hProps, factor.from.x, from );
			to = $.effects.setTransition( element, hProps, factor.to.x, to );
		}
	}

	// Scale the content
	if ( scale === "content" || scale === "both" ) {

		// Vertical props scaling
		if ( factor.from.y !== factor.to.y ) {
			from = $.effects.setTransition( element, cProps, factor.from.y, from );
			to = $.effects.setTransition( element, cProps, factor.to.y, to );
		}
	}

	// Adjust the position properties based on the provided origin points
	if ( origin ) {
		baseline = $.effects.getBaseline( origin, original );
		from.top = ( original.outerHeight - from.outerHeight ) * baseline.y + pos.top;
		from.left = ( original.outerWidth - from.outerWidth ) * baseline.x + pos.left;
		to.top = ( original.outerHeight - to.outerHeight ) * baseline.y + pos.top;
		to.left = ( original.outerWidth - to.outerWidth ) * baseline.x + pos.left;
	}
	element.css( from );

	// Animate the children if desired
	if ( scale === "content" || scale === "both" ) {

		vProps = vProps.concat( [ "marginTop", "marginBottom" ] ).concat( cProps );
		hProps = hProps.concat( [ "marginLeft", "marginRight" ] );

		// Only animate children with width attributes specified
		// TODO: is this right? should we include anything with css width specified as well
		element.find( "*[width]" ).each( function() {
			var child = $( this ),
				childOriginal = $.effects.scaledDimensions( child ),
				childFrom = {
					height: childOriginal.height * factor.from.y,
					width: childOriginal.width * factor.from.x,
					outerHeight: childOriginal.outerHeight * factor.from.y,
					outerWidth: childOriginal.outerWidth * factor.from.x
				},
				childTo = {
					height: childOriginal.height * factor.to.y,
					width: childOriginal.width * factor.to.x,
					outerHeight: childOriginal.height * factor.to.y,
					outerWidth: childOriginal.width * factor.to.x
				};

			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				childFrom = $.effects.setTransition( child, vProps, factor.from.y, childFrom );
				childTo = $.effects.setTransition( child, vProps, factor.to.y, childTo );
			}

			// Horizontal props scaling
			if ( factor.from.x !== factor.to.x ) {
				childFrom = $.effects.setTransition( child, hProps, factor.from.x, childFrom );
				childTo = $.effects.setTransition( child, hProps, factor.to.x, childTo );
			}

			if ( restore ) {
				$.effects.saveStyle( child );
			}

			// Animate children
			child.css( childFrom );
			child.animate( childTo, options.duration, options.easing, function() {

				// Restore children
				if ( restore ) {
					$.effects.restoreStyle( child );
				}
			} );
		} );
	}

	// Animate
	element.animate( to, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: function() {

			var offset = element.offset();

			if ( to.opacity === 0 ) {
				element.css( "opacity", from.opacity );
			}

			if ( !restore ) {
				element
					.css( "position", position === "static" ? "relative" : position )
					.offset( offset );

				// Need to save style here so that automatic style restoration
				// doesn't restore to the original styles from before the animation.
				$.effects.saveStyle( element );
			}

			done();
		}
	} );

} );


/*!
 * jQuery UI Effects Scale 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Scale Effect
//>>group: Effects
//>>description: Grows or shrinks an element and its content.
//>>docs: http://api.jqueryui.com/scale-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectScale = $.effects.define( "scale", function( options, done ) {

	// Create element
	var el = $( this ),
		mode = options.mode,
		percent = parseInt( options.percent, 10 ) ||
			( parseInt( options.percent, 10 ) === 0 ? 0 : ( mode !== "effect" ? 0 : 100 ) ),

		newOptions = $.extend( true, {
			from: $.effects.scaledDimensions( el ),
			to: $.effects.scaledDimensions( el, percent, options.direction || "both" ),
			origin: options.origin || [ "middle", "center" ]
		}, options );

	// Fade option to support puff
	if ( options.fade ) {
		newOptions.from.opacity = 1;
		newOptions.to.opacity = 0;
	}

	$.effects.effect.size.call( this, newOptions, done );
} );


/*!
 * jQuery UI Effects Puff 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Puff Effect
//>>group: Effects
//>>description: Creates a puff effect by scaling the element up and hiding it at the same time.
//>>docs: http://api.jqueryui.com/puff-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectPuff = $.effects.define( "puff", "hide", function( options, done ) {
	var newOptions = $.extend( true, {}, options, {
		fade: true,
		percent: parseInt( options.percent, 10 ) || 150
	} );

	$.effects.effect.scale.call( this, newOptions, done );
} );


/*!
 * jQuery UI Effects Pulsate 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Pulsate Effect
//>>group: Effects
//>>description: Pulsates an element n times by changing the opacity to zero and back.
//>>docs: http://api.jqueryui.com/pulsate-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectPulsate = $.effects.define( "pulsate", "show", function( options, done ) {
	var element = $( this ),
		mode = options.mode,
		show = mode === "show",
		hide = mode === "hide",
		showhide = show || hide,

		// Showing or hiding leaves off the "last" animation
		anims = ( ( options.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
		duration = options.duration / anims,
		animateTo = 0,
		i = 1,
		queuelen = element.queue().length;

	if ( show || !element.is( ":visible" ) ) {
		element.css( "opacity", 0 ).show();
		animateTo = 1;
	}

	// Anims - 1 opacity "toggles"
	for ( ; i < anims; i++ ) {
		element.animate( { opacity: animateTo }, duration, options.easing );
		animateTo = 1 - animateTo;
	}

	element.animate( { opacity: animateTo }, duration, options.easing );

	element.queue( done );

	$.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Shake 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Shake Effect
//>>group: Effects
//>>description: Shakes an element horizontally or vertically n times.
//>>docs: http://api.jqueryui.com/shake-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectShake = $.effects.define( "shake", function( options, done ) {

	var i = 1,
		element = $( this ),
		direction = options.direction || "left",
		distance = options.distance || 20,
		times = options.times || 3,
		anims = times * 2 + 1,
		speed = Math.round( options.duration / anims ),
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		positiveMotion = ( direction === "up" || direction === "left" ),
		animation = {},
		animation1 = {},
		animation2 = {},

		queuelen = element.queue().length;

	$.effects.createPlaceholder( element );

	// Animation
	animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
	animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
	animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

	// Animate
	element.animate( animation, speed, options.easing );

	// Shakes
	for ( ; i < times; i++ ) {
		element
			.animate( animation1, speed, options.easing )
			.animate( animation2, speed, options.easing );
	}

	element
		.animate( animation1, speed, options.easing )
		.animate( animation, speed / 2, options.easing )
		.queue( done );

	$.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Slide 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Slide Effect
//>>group: Effects
//>>description: Slides an element in and out of the viewport.
//>>docs: http://api.jqueryui.com/slide-effect/
//>>demos: http://jqueryui.com/effect/



var effectsEffectSlide = $.effects.define( "slide", "show", function( options, done ) {
	var startClip, startRef,
		element = $( this ),
		map = {
			up: [ "bottom", "top" ],
			down: [ "top", "bottom" ],
			left: [ "right", "left" ],
			right: [ "left", "right" ]
		},
		mode = options.mode,
		direction = options.direction || "left",
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		positiveMotion = ( direction === "up" || direction === "left" ),
		distance = options.distance ||
			element[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ),
		animation = {};

	$.effects.createPlaceholder( element );

	startClip = element.cssClip();
	startRef = element.position()[ ref ];

	// Define hide animation
	animation[ ref ] = ( positiveMotion ? -1 : 1 ) * distance + startRef;
	animation.clip = element.cssClip();
	animation.clip[ map[ direction ][ 1 ] ] = animation.clip[ map[ direction ][ 0 ] ];

	// Reverse the animation if we're showing
	if ( mode === "show" ) {
		element.cssClip( animation.clip );
		element.css( ref, animation[ ref ] );
		animation.clip = startClip;
		animation[ ref ] = startRef;
	}

	// Actually animate
	element.animate( animation, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );
} );


/*!
 * jQuery UI Effects Transfer 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Transfer Effect
//>>group: Effects
//>>description: Displays a transfer effect from one element to another.
//>>docs: http://api.jqueryui.com/transfer-effect/
//>>demos: http://jqueryui.com/effect/



var effect;
if ( $.uiBackCompat !== false ) {
	effect = $.effects.define( "transfer", function( options, done ) {
		$( this ).transfer( options, done );
	} );
}
var effectsEffectTransfer = effect;


/*!
 * jQuery UI Focusable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :focusable Selector
//>>group: Core
//>>description: Selects elements which can be focused.
//>>docs: http://api.jqueryui.com/focusable-selector/



// Selectors
$.ui.focusable = function( element, hasTabindex ) {
	var map, mapName, img, focusableIfVisible, fieldset,
		nodeName = element.nodeName.toLowerCase();

	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap='#" + mapName + "']" );
		return img.length > 0 && img.is( ":visible" );
	}

	if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {
		focusableIfVisible = !element.disabled;

		if ( focusableIfVisible ) {

			// Form controls within a disabled fieldset are disabled.
			// However, controls within the fieldset's legend do not get disabled.
			// Since controls generally aren't placed inside legends, we skip
			// this portion of the check.
			fieldset = $( element ).closest( "fieldset" )[ 0 ];
			if ( fieldset ) {
				focusableIfVisible = !fieldset.disabled;
			}
		}
	} else if ( "a" === nodeName ) {
		focusableIfVisible = element.href || hasTabindex;
	} else {
		focusableIfVisible = hasTabindex;
	}

	return focusableIfVisible && $( element ).is( ":visible" ) && visible( $( element ) );
};

// Support: IE 8 only
// IE 8 doesn't resolve inherit to visible/hidden for computed values
function visible( element ) {
	var visibility = element.css( "visibility" );
	while ( visibility === "inherit" ) {
		element = element.parent();
		visibility = element.css( "visibility" );
	}
	return visibility !== "hidden";
}

$.extend( $.expr[ ":" ], {
	focusable: function( element ) {
		return $.ui.focusable( element, $.attr( element, "tabindex" ) != null );
	}
} );

var focusable = $.ui.focusable;




// Support: IE8 Only
// IE8 does not support the form attribute and when it is supplied. It overwrites the form prop
// with a string, so we need to find the proper form.
var form = $.fn.form = function() {
	return typeof this[ 0 ].form === "string" ? this.closest( "form" ) : $( this[ 0 ].form );
};


/*!
 * jQuery UI Form Reset Mixin 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Form Reset Mixin
//>>group: Core
//>>description: Refresh input widgets when their form is reset
//>>docs: http://api.jqueryui.com/form-reset-mixin/



var formResetMixin = $.ui.formResetMixin = {
	_formResetHandler: function() {
		var form = $( this );

		// Wait for the form reset to actually happen before refreshing
		setTimeout( function() {
			var instances = form.data( "ui-form-reset-instances" );
			$.each( instances, function() {
				this.refresh();
			} );
		} );
	},

	_bindFormResetHandler: function() {
		this.form = this.element.form();
		if ( !this.form.length ) {
			return;
		}

		var instances = this.form.data( "ui-form-reset-instances" ) || [];
		if ( !instances.length ) {

			// We don't use _on() here because we use a single event handler per form
			this.form.on( "reset.ui-form-reset", this._formResetHandler );
		}
		instances.push( this );
		this.form.data( "ui-form-reset-instances", instances );
	},

	_unbindFormResetHandler: function() {
		if ( !this.form.length ) {
			return;
		}

		var instances = this.form.data( "ui-form-reset-instances" );
		instances.splice( $.inArray( this, instances ), 1 );
		if ( instances.length ) {
			this.form.data( "ui-form-reset-instances", instances );
		} else {
			this.form
				.removeData( "ui-form-reset-instances" )
				.off( "reset.ui-form-reset" );
		}
	}
};


/*!
 * jQuery UI Support for jQuery core 1.7.x 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 */

//>>label: jQuery 1.7 Support
//>>group: Core
//>>description: Support version 1.7.x of jQuery core



// Support: jQuery 1.7 only
// Not a great way to check versions, but since we only support 1.7+ and only
// need to detect <1.8, this is a simple check that should suffice. Checking
// for "1.7." would be a bit safer, but the version string is 1.7, not 1.7.0
// and we'll never reach 1.70.0 (if we do, we certainly won't be supporting
// 1.7 anymore). See #11197 for why we're not using feature detection.
if ( $.fn.jquery.substring( 0, 3 ) === "1.7" ) {

	// Setters for .innerWidth(), .innerHeight(), .outerWidth(), .outerHeight()
	// Unlike jQuery Core 1.8+, these only support numeric values to set the
	// dimensions in pixels
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
				if ( border ) {
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
				}
			} );
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each( function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			} );
		};

		$.fn[ "outer" + name ] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each( function() {
				$( this ).css( type, reduce( this, size, true, margin ) + "px" );
			} );
		};
	} );

	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

;
/*!
 * jQuery UI Keycode 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Keycode
//>>group: Core
//>>description: Provide keycodes as keynames
//>>docs: http://api.jqueryui.com/jQuery.ui.keyCode/


var keycode = $.ui.keyCode = {
	BACKSPACE: 8,
	COMMA: 188,
	DELETE: 46,
	DOWN: 40,
	END: 35,
	ENTER: 13,
	ESCAPE: 27,
	HOME: 36,
	LEFT: 37,
	PAGE_DOWN: 34,
	PAGE_UP: 33,
	PERIOD: 190,
	RIGHT: 39,
	SPACE: 32,
	TAB: 9,
	UP: 38
};




// Internal use only
var escapeSelector = $.ui.escapeSelector = ( function() {
	var selectorEscape = /([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g;
	return function( selector ) {
		return selector.replace( selectorEscape, "\\$1" );
	};
} )();


/*!
 * jQuery UI Labels 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: labels
//>>group: Core
//>>description: Find all the labels associated with a given input
//>>docs: http://api.jqueryui.com/labels/



var labels = $.fn.labels = function() {
	var ancestor, selector, id, labels, ancestors;

	// Check control.labels first
	if ( this[ 0 ].labels && this[ 0 ].labels.length ) {
		return this.pushStack( this[ 0 ].labels );
	}

	// Support: IE <= 11, FF <= 37, Android <= 2.3 only
	// Above browsers do not support control.labels. Everything below is to support them
	// as well as document fragments. control.labels does not work on document fragments
	labels = this.eq( 0 ).parents( "label" );

	// Look for the label based on the id
	id = this.attr( "id" );
	if ( id ) {

		// We don't search against the document in case the element
		// is disconnected from the DOM
		ancestor = this.eq( 0 ).parents().last();

		// Get a full set of top level ancestors
		ancestors = ancestor.add( ancestor.length ? ancestor.siblings() : this.siblings() );

		// Create a selector for the label based on the id
		selector = "label[for='" + $.ui.escapeSelector( id ) + "']";

		labels = labels.add( ancestors.find( selector ).addBack( selector ) );

	}

	// Return whatever we have found for labels
	return this.pushStack( labels );
};


/*!
 * jQuery UI Scroll Parent 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: scrollParent
//>>group: Core
//>>description: Get the closest ancestor element that is scrollable.
//>>docs: http://api.jqueryui.com/scrollParent/



var scrollParent = $.fn.scrollParent = function( includeHidden ) {
	var position = this.css( "position" ),
		excludeStaticParent = position === "absolute",
		overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
		scrollParent = this.parents().filter( function() {
			var parent = $( this );
			if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
				return false;
			}
			return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) +
				parent.css( "overflow-x" ) );
		} ).eq( 0 );

	return position === "fixed" || !scrollParent.length ?
		$( this[ 0 ].ownerDocument || document ) :
		scrollParent;
};


/*!
 * jQuery UI Tabbable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :tabbable Selector
//>>group: Core
//>>description: Selects elements which can be tabbed to.
//>>docs: http://api.jqueryui.com/tabbable-selector/



var tabbable = $.extend( $.expr[ ":" ], {
	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			hasTabindex = tabIndex != null;
		return ( !hasTabindex || tabIndex >= 0 ) && $.ui.focusable( element, hasTabindex );
	}
} );


/*!
 * jQuery UI Unique ID 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: uniqueId
//>>group: Core
//>>description: Functions to generate and remove uniqueId's
//>>docs: http://api.jqueryui.com/uniqueId/



var uniqueId = $.fn.extend( {
	uniqueId: ( function() {
		var uuid = 0;

		return function() {
			return this.each( function() {
				if ( !this.id ) {
					this.id = "ui-id-" + ( ++uuid );
				}
			} );
		};
	} )(),

	removeUniqueId: function() {
		return this.each( function() {
			if ( /^ui-id-\d+$/.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		} );
	}
} );


/*!
 * jQuery UI Accordion 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Accordion
//>>group: Widgets
// jscs:disable maximumLineLength
//>>description: Displays collapsible content panels for presenting information in a limited amount of space.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/accordion/
//>>demos: http://jqueryui.com/accordion/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/accordion.css
//>>css.theme: ../../themes/base/theme.css



var widgetsAccordion = $.widget( "ui.accordion", {
	version: "1.12.1",
	options: {
		active: 0,
		animate: {},
		classes: {
			"ui-accordion-header": "ui-corner-top",
			"ui-accordion-header-collapsed": "ui-corner-all",
			"ui-accordion-content": "ui-corner-bottom"
		},
		collapsible: false,
		event: "click",
		header: "> li > :first-child, > :not(li):even",
		heightStyle: "auto",
		icons: {
			activeHeader: "ui-icon-triangle-1-s",
			header: "ui-icon-triangle-1-e"
		},

		// Callbacks
		activate: null,
		beforeActivate: null
	},

	hideProps: {
		borderTopWidth: "hide",
		borderBottomWidth: "hide",
		paddingTop: "hide",
		paddingBottom: "hide",
		height: "hide"
	},

	showProps: {
		borderTopWidth: "show",
		borderBottomWidth: "show",
		paddingTop: "show",
		paddingBottom: "show",
		height: "show"
	},

	_create: function() {
		var options = this.options;

		this.prevShow = this.prevHide = $();
		this._addClass( "ui-accordion", "ui-widget ui-helper-reset" );
		this.element.attr( "role", "tablist" );

		// Don't allow collapsible: false and active: false / null
		if ( !options.collapsible && ( options.active === false || options.active == null ) ) {
			options.active = 0;
		}

		this._processPanels();

		// handle negative values
		if ( options.active < 0 ) {
			options.active += this.headers.length;
		}
		this._refresh();
	},

	_getCreateEventData: function() {
		return {
			header: this.active,
			panel: !this.active.length ? $() : this.active.next()
		};
	},

	_createIcons: function() {
		var icon, children,
			icons = this.options.icons;

		if ( icons ) {
			icon = $( "<span>" );
			this._addClass( icon, "ui-accordion-header-icon", "ui-icon " + icons.header );
			icon.prependTo( this.headers );
			children = this.active.children( ".ui-accordion-header-icon" );
			this._removeClass( children, icons.header )
				._addClass( children, null, icons.activeHeader )
				._addClass( this.headers, "ui-accordion-icons" );
		}
	},

	_destroyIcons: function() {
		this._removeClass( this.headers, "ui-accordion-icons" );
		this.headers.children( ".ui-accordion-header-icon" ).remove();
	},

	_destroy: function() {
		var contents;

		// Clean up main element
		this.element.removeAttr( "role" );

		// Clean up headers
		this.headers
			.removeAttr( "role aria-expanded aria-selected aria-controls tabIndex" )
			.removeUniqueId();

		this._destroyIcons();

		// Clean up content panels
		contents = this.headers.next()
			.css( "display", "" )
			.removeAttr( "role aria-hidden aria-labelledby" )
			.removeUniqueId();

		if ( this.options.heightStyle !== "content" ) {
			contents.css( "height", "" );
		}
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {

			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		if ( key === "event" ) {
			if ( this.options.event ) {
				this._off( this.headers, this.options.event );
			}
			this._setupEvents( value );
		}

		this._super( key, value );

		// Setting collapsible: false while collapsed; open first panel
		if ( key === "collapsible" && !value && this.options.active === false ) {
			this._activate( 0 );
		}

		if ( key === "icons" ) {
			this._destroyIcons();
			if ( value ) {
				this._createIcons();
			}
		}
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", value );

		// Support: IE8 Only
		// #5332 / #6059 - opacity doesn't cascade to positioned elements in IE
		// so we need to add the disabled class to the headers and panels
		this._toggleClass( null, "ui-state-disabled", !!value );
		this._toggleClass( this.headers.add( this.headers.next() ), null, "ui-state-disabled",
			!!value );
	},

	_keydown: function( event ) {
		if ( event.altKey || event.ctrlKey ) {
			return;
		}

		var keyCode = $.ui.keyCode,
			length = this.headers.length,
			currentIndex = this.headers.index( event.target ),
			toFocus = false;

		switch ( event.keyCode ) {
		case keyCode.RIGHT:
		case keyCode.DOWN:
			toFocus = this.headers[ ( currentIndex + 1 ) % length ];
			break;
		case keyCode.LEFT:
		case keyCode.UP:
			toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
			break;
		case keyCode.SPACE:
		case keyCode.ENTER:
			this._eventHandler( event );
			break;
		case keyCode.HOME:
			toFocus = this.headers[ 0 ];
			break;
		case keyCode.END:
			toFocus = this.headers[ length - 1 ];
			break;
		}

		if ( toFocus ) {
			$( event.target ).attr( "tabIndex", -1 );
			$( toFocus ).attr( "tabIndex", 0 );
			$( toFocus ).trigger( "focus" );
			event.preventDefault();
		}
	},

	_panelKeyDown: function( event ) {
		if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
			$( event.currentTarget ).prev().trigger( "focus" );
		}
	},

	refresh: function() {
		var options = this.options;
		this._processPanels();

		// Was collapsed or no panel
		if ( ( options.active === false && options.collapsible === true ) ||
				!this.headers.length ) {
			options.active = false;
			this.active = $();

		// active false only when collapsible is true
		} else if ( options.active === false ) {
			this._activate( 0 );

		// was active, but active panel is gone
		} else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {

			// all remaining panel are disabled
			if ( this.headers.length === this.headers.find( ".ui-state-disabled" ).length ) {
				options.active = false;
				this.active = $();

			// activate previous panel
			} else {
				this._activate( Math.max( 0, options.active - 1 ) );
			}

		// was active, active panel still exists
		} else {

			// make sure active index is correct
			options.active = this.headers.index( this.active );
		}

		this._destroyIcons();

		this._refresh();
	},

	_processPanels: function() {
		var prevHeaders = this.headers,
			prevPanels = this.panels;

		this.headers = this.element.find( this.options.header );
		this._addClass( this.headers, "ui-accordion-header ui-accordion-header-collapsed",
			"ui-state-default" );

		this.panels = this.headers.next().filter( ":not(.ui-accordion-content-active)" ).hide();
		this._addClass( this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content" );

		// Avoid memory leaks (#10056)
		if ( prevPanels ) {
			this._off( prevHeaders.not( this.headers ) );
			this._off( prevPanels.not( this.panels ) );
		}
	},

	_refresh: function() {
		var maxHeight,
			options = this.options,
			heightStyle = options.heightStyle,
			parent = this.element.parent();

		this.active = this._findActive( options.active );
		this._addClass( this.active, "ui-accordion-header-active", "ui-state-active" )
			._removeClass( this.active, "ui-accordion-header-collapsed" );
		this._addClass( this.active.next(), "ui-accordion-content-active" );
		this.active.next().show();

		this.headers
			.attr( "role", "tab" )
			.each( function() {
				var header = $( this ),
					headerId = header.uniqueId().attr( "id" ),
					panel = header.next(),
					panelId = panel.uniqueId().attr( "id" );
				header.attr( "aria-controls", panelId );
				panel.attr( "aria-labelledby", headerId );
			} )
			.next()
				.attr( "role", "tabpanel" );

		this.headers
			.not( this.active )
				.attr( {
					"aria-selected": "false",
					"aria-expanded": "false",
					tabIndex: -1
				} )
				.next()
					.attr( {
						"aria-hidden": "true"
					} )
					.hide();

		// Make sure at least one header is in the tab order
		if ( !this.active.length ) {
			this.headers.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active.attr( {
				"aria-selected": "true",
				"aria-expanded": "true",
				tabIndex: 0
			} )
				.next()
					.attr( {
						"aria-hidden": "false"
					} );
		}

		this._createIcons();

		this._setupEvents( options.event );

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			this.element.siblings( ":visible" ).each( function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			} );

			this.headers.each( function() {
				maxHeight -= $( this ).outerHeight( true );
			} );

			this.headers.next()
				.each( function() {
					$( this ).height( Math.max( 0, maxHeight -
						$( this ).innerHeight() + $( this ).height() ) );
				} )
				.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.headers.next()
				.each( function() {
					var isVisible = $( this ).is( ":visible" );
					if ( !isVisible ) {
						$( this ).show();
					}
					maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
					if ( !isVisible ) {
						$( this ).hide();
					}
				} )
				.height( maxHeight );
		}
	},

	_activate: function( index ) {
		var active = this._findActive( index )[ 0 ];

		// Trying to activate the already active panel
		if ( active === this.active[ 0 ] ) {
			return;
		}

		// Trying to collapse, simulate a click on the currently active header
		active = active || this.active[ 0 ];

		this._eventHandler( {
			target: active,
			currentTarget: active,
			preventDefault: $.noop
		} );
	},

	_findActive: function( selector ) {
		return typeof selector === "number" ? this.headers.eq( selector ) : $();
	},

	_setupEvents: function( event ) {
		var events = {
			keydown: "_keydown"
		};
		if ( event ) {
			$.each( event.split( " " ), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			} );
		}

		this._off( this.headers.add( this.headers.next() ) );
		this._on( this.headers, events );
		this._on( this.headers.next(), { keydown: "_panelKeyDown" } );
		this._hoverable( this.headers );
		this._focusable( this.headers );
	},

	_eventHandler: function( event ) {
		var activeChildren, clickedChildren,
			options = this.options,
			active = this.active,
			clicked = $( event.currentTarget ),
			clickedIsActive = clicked[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : clicked.next(),
			toHide = active.next(),
			eventData = {
				oldHeader: active,
				oldPanel: toHide,
				newHeader: collapsing ? $() : clicked,
				newPanel: toShow
			};

		event.preventDefault();

		if (

				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||

				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.headers.index( clicked );

		// When the call to ._toggle() comes after the class changes
		// it causes a very odd bug in IE 8 (see #6720)
		this.active = clickedIsActive ? $() : clicked;
		this._toggle( eventData );

		// Switch classes
		// corner classes on the previously active header stay after the animation
		this._removeClass( active, "ui-accordion-header-active", "ui-state-active" );
		if ( options.icons ) {
			activeChildren = active.children( ".ui-accordion-header-icon" );
			this._removeClass( activeChildren, null, options.icons.activeHeader )
				._addClass( activeChildren, null, options.icons.header );
		}

		if ( !clickedIsActive ) {
			this._removeClass( clicked, "ui-accordion-header-collapsed" )
				._addClass( clicked, "ui-accordion-header-active", "ui-state-active" );
			if ( options.icons ) {
				clickedChildren = clicked.children( ".ui-accordion-header-icon" );
				this._removeClass( clickedChildren, null, options.icons.header )
					._addClass( clickedChildren, null, options.icons.activeHeader );
			}

			this._addClass( clicked.next(), "ui-accordion-content-active" );
		}
	},

	_toggle: function( data ) {
		var toShow = data.newPanel,
			toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

		// Handle activating a panel during the animation for another activation
		this.prevShow.add( this.prevHide ).stop( true, true );
		this.prevShow = toShow;
		this.prevHide = toHide;

		if ( this.options.animate ) {
			this._animate( toShow, toHide, data );
		} else {
			toHide.hide();
			toShow.show();
			this._toggleComplete( data );
		}

		toHide.attr( {
			"aria-hidden": "true"
		} );
		toHide.prev().attr( {
			"aria-selected": "false",
			"aria-expanded": "false"
		} );

		// if we're switching panels, remove the old header from the tab order
		// if we're opening from collapsed state, remove the previous header from the tab order
		// if we're collapsing, then keep the collapsing header in the tab order
		if ( toShow.length && toHide.length ) {
			toHide.prev().attr( {
				"tabIndex": -1,
				"aria-expanded": "false"
			} );
		} else if ( toShow.length ) {
			this.headers.filter( function() {
				return parseInt( $( this ).attr( "tabIndex" ), 10 ) === 0;
			} )
				.attr( "tabIndex", -1 );
		}

		toShow
			.attr( "aria-hidden", "false" )
			.prev()
				.attr( {
					"aria-selected": "true",
					"aria-expanded": "true",
					tabIndex: 0
				} );
	},

	_animate: function( toShow, toHide, data ) {
		var total, easing, duration,
			that = this,
			adjust = 0,
			boxSizing = toShow.css( "box-sizing" ),
			down = toShow.length &&
				( !toHide.length || ( toShow.index() < toHide.index() ) ),
			animate = this.options.animate || {},
			options = down && animate.down || animate,
			complete = function() {
				that._toggleComplete( data );
			};

		if ( typeof options === "number" ) {
			duration = options;
		}
		if ( typeof options === "string" ) {
			easing = options;
		}

		// fall back from options to animation in case of partial down settings
		easing = easing || options.easing || animate.easing;
		duration = duration || options.duration || animate.duration;

		if ( !toHide.length ) {
			return toShow.animate( this.showProps, duration, easing, complete );
		}
		if ( !toShow.length ) {
			return toHide.animate( this.hideProps, duration, easing, complete );
		}

		total = toShow.show().outerHeight();
		toHide.animate( this.hideProps, {
			duration: duration,
			easing: easing,
			step: function( now, fx ) {
				fx.now = Math.round( now );
			}
		} );
		toShow
			.hide()
			.animate( this.showProps, {
				duration: duration,
				easing: easing,
				complete: complete,
				step: function( now, fx ) {
					fx.now = Math.round( now );
					if ( fx.prop !== "height" ) {
						if ( boxSizing === "content-box" ) {
							adjust += fx.now;
						}
					} else if ( that.options.heightStyle !== "content" ) {
						fx.now = Math.round( total - toHide.outerHeight() - adjust );
						adjust = 0;
					}
				}
			} );
	},

	_toggleComplete: function( data ) {
		var toHide = data.oldPanel,
			prev = toHide.prev();

		this._removeClass( toHide, "ui-accordion-content-active" );
		this._removeClass( prev, "ui-accordion-header-active" )
			._addClass( prev, "ui-accordion-header-collapsed" );

		// Work around for rendering bug in IE (#5421)
		if ( toHide.length ) {
			toHide.parent()[ 0 ].className = toHide.parent()[ 0 ].className;
		}
		this._trigger( "activate", null, data );
	}
} );



var safeActiveElement = $.ui.safeActiveElement = function( document ) {
	var activeElement;

	// Support: IE 9 only
	// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
	try {
		activeElement = document.activeElement;
	} catch ( error ) {
		activeElement = document.body;
	}

	// Support: IE 9 - 11 only
	// IE may return null instead of an element
	// Interestingly, this only seems to occur when NOT in an iframe
	if ( !activeElement ) {
		activeElement = document.body;
	}

	// Support: IE 11 only
	// IE11 returns a seemingly empty object in some cases when accessing
	// document.activeElement from an <iframe>
	if ( !activeElement.nodeName ) {
		activeElement = document.body;
	}

	return activeElement;
};


/*!
 * jQuery UI Menu 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Menu
//>>group: Widgets
//>>description: Creates nestable menus.
//>>docs: http://api.jqueryui.com/menu/
//>>demos: http://jqueryui.com/menu/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/menu.css
//>>css.theme: ../../themes/base/theme.css



var widgetsMenu = $.widget( "ui.menu", {
	version: "1.12.1",
	defaultElement: "<ul>",
	delay: 300,
	options: {
		icons: {
			submenu: "ui-icon-caret-1-e"
		},
		items: "> *",
		menus: "ul",
		position: {
			my: "left top",
			at: "right top"
		},
		role: "menu",

		// Callbacks
		blur: null,
		focus: null,
		select: null
	},

	_create: function() {
		this.activeMenu = this.element;

		// Flag used to prevent firing of the click handler
		// as the event bubbles up through nested menus
		this.mouseHandled = false;
		this.element
			.uniqueId()
			.attr( {
				role: this.options.role,
				tabIndex: 0
			} );

		this._addClass( "ui-menu", "ui-widget ui-widget-content" );
		this._on( {

			// Prevent focus from sticking to links inside menu after clicking
			// them (focus should always stay on UL during navigation).
			"mousedown .ui-menu-item": function( event ) {
				event.preventDefault();
			},
			"click .ui-menu-item": function( event ) {
				var target = $( event.target );
				var active = $( $.ui.safeActiveElement( this.document[ 0 ] ) );
				if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
					this.select( event );

					// Only set the mouseHandled flag if the event will bubble, see #9469.
					if ( !event.isPropagationStopped() ) {
						this.mouseHandled = true;
					}

					// Open submenu on click
					if ( target.has( ".ui-menu" ).length ) {
						this.expand( event );
					} else if ( !this.element.is( ":focus" ) &&
							active.closest( ".ui-menu" ).length ) {

						// Redirect focus to the menu
						this.element.trigger( "focus", [ true ] );

						// If the active item is on the top level, let it stay active.
						// Otherwise, blur the active item since it is no longer visible.
						if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
							clearTimeout( this.timer );
						}
					}
				}
			},
			"mouseenter .ui-menu-item": function( event ) {

				// Ignore mouse events while typeahead is active, see #10458.
				// Prevents focusing the wrong item when typeahead causes a scroll while the mouse
				// is over an item in the menu
				if ( this.previousFilter ) {
					return;
				}

				var actualTarget = $( event.target ).closest( ".ui-menu-item" ),
					target = $( event.currentTarget );

				// Ignore bubbled events on parent items, see #11641
				if ( actualTarget[ 0 ] !== target[ 0 ] ) {
					return;
				}

				// Remove ui-state-active class from siblings of the newly focused menu item
				// to avoid a jump caused by adjacent elements both having a class with a border
				this._removeClass( target.siblings().children( ".ui-state-active" ),
					null, "ui-state-active" );
				this.focus( event, target );
			},
			mouseleave: "collapseAll",
			"mouseleave .ui-menu": "collapseAll",
			focus: function( event, keepActiveItem ) {

				// If there's already an active item, keep it active
				// If not, activate the first item
				var item = this.active || this.element.find( this.options.items ).eq( 0 );

				if ( !keepActiveItem ) {
					this.focus( event, item );
				}
			},
			blur: function( event ) {
				this._delay( function() {
					var notContained = !$.contains(
						this.element[ 0 ],
						$.ui.safeActiveElement( this.document[ 0 ] )
					);
					if ( notContained ) {
						this.collapseAll( event );
					}
				} );
			},
			keydown: "_keydown"
		} );

		this.refresh();

		// Clicks outside of a menu collapse any open menus
		this._on( this.document, {
			click: function( event ) {
				if ( this._closeOnDocumentClick( event ) ) {
					this.collapseAll( event );
				}

				// Reset the mouseHandled flag
				this.mouseHandled = false;
			}
		} );
	},

	_destroy: function() {
		var items = this.element.find( ".ui-menu-item" )
				.removeAttr( "role aria-disabled" ),
			submenus = items.children( ".ui-menu-item-wrapper" )
				.removeUniqueId()
				.removeAttr( "tabIndex role aria-haspopup" );

		// Destroy (sub)menus
		this.element
			.removeAttr( "aria-activedescendant" )
			.find( ".ui-menu" ).addBack()
				.removeAttr( "role aria-labelledby aria-expanded aria-hidden aria-disabled " +
					"tabIndex" )
				.removeUniqueId()
				.show();

		submenus.children().each( function() {
			var elem = $( this );
			if ( elem.data( "ui-menu-submenu-caret" ) ) {
				elem.remove();
			}
		} );
	},

	_keydown: function( event ) {
		var match, prev, character, skip,
			preventDefault = true;

		switch ( event.keyCode ) {
		case $.ui.keyCode.PAGE_UP:
			this.previousPage( event );
			break;
		case $.ui.keyCode.PAGE_DOWN:
			this.nextPage( event );
			break;
		case $.ui.keyCode.HOME:
			this._move( "first", "first", event );
			break;
		case $.ui.keyCode.END:
			this._move( "last", "last", event );
			break;
		case $.ui.keyCode.UP:
			this.previous( event );
			break;
		case $.ui.keyCode.DOWN:
			this.next( event );
			break;
		case $.ui.keyCode.LEFT:
			this.collapse( event );
			break;
		case $.ui.keyCode.RIGHT:
			if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
				this.expand( event );
			}
			break;
		case $.ui.keyCode.ENTER:
		case $.ui.keyCode.SPACE:
			this._activate( event );
			break;
		case $.ui.keyCode.ESCAPE:
			this.collapse( event );
			break;
		default:
			preventDefault = false;
			prev = this.previousFilter || "";
			skip = false;

			// Support number pad values
			character = event.keyCode >= 96 && event.keyCode <= 105 ?
				( event.keyCode - 96 ).toString() : String.fromCharCode( event.keyCode );

			clearTimeout( this.filterTimer );

			if ( character === prev ) {
				skip = true;
			} else {
				character = prev + character;
			}

			match = this._filterMenuItems( character );
			match = skip && match.index( this.active.next() ) !== -1 ?
				this.active.nextAll( ".ui-menu-item" ) :
				match;

			// If no matches on the current filter, reset to the last character pressed
			// to move down the menu to the first item that starts with that character
			if ( !match.length ) {
				character = String.fromCharCode( event.keyCode );
				match = this._filterMenuItems( character );
			}

			if ( match.length ) {
				this.focus( event, match );
				this.previousFilter = character;
				this.filterTimer = this._delay( function() {
					delete this.previousFilter;
				}, 1000 );
			} else {
				delete this.previousFilter;
			}
		}

		if ( preventDefault ) {
			event.preventDefault();
		}
	},

	_activate: function( event ) {
		if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
			if ( this.active.children( "[aria-haspopup='true']" ).length ) {
				this.expand( event );
			} else {
				this.select( event );
			}
		}
	},

	refresh: function() {
		var menus, items, newSubmenus, newItems, newWrappers,
			that = this,
			icon = this.options.icons.submenu,
			submenus = this.element.find( this.options.menus );

		this._toggleClass( "ui-menu-icons", null, !!this.element.find( ".ui-icon" ).length );

		// Initialize nested menus
		newSubmenus = submenus.filter( ":not(.ui-menu)" )
			.hide()
			.attr( {
				role: this.options.role,
				"aria-hidden": "true",
				"aria-expanded": "false"
			} )
			.each( function() {
				var menu = $( this ),
					item = menu.prev(),
					submenuCaret = $( "<span>" ).data( "ui-menu-submenu-caret", true );

				that._addClass( submenuCaret, "ui-menu-icon", "ui-icon " + icon );
				item
					.attr( "aria-haspopup", "true" )
					.prepend( submenuCaret );
				menu.attr( "aria-labelledby", item.attr( "id" ) );
			} );

		this._addClass( newSubmenus, "ui-menu", "ui-widget ui-widget-content ui-front" );

		menus = submenus.add( this.element );
		items = menus.find( this.options.items );

		// Initialize menu-items containing spaces and/or dashes only as dividers
		items.not( ".ui-menu-item" ).each( function() {
			var item = $( this );
			if ( that._isDivider( item ) ) {
				that._addClass( item, "ui-menu-divider", "ui-widget-content" );
			}
		} );

		// Don't refresh list items that are already adapted
		newItems = items.not( ".ui-menu-item, .ui-menu-divider" );
		newWrappers = newItems.children()
			.not( ".ui-menu" )
				.uniqueId()
				.attr( {
					tabIndex: -1,
					role: this._itemRole()
				} );
		this._addClass( newItems, "ui-menu-item" )
			._addClass( newWrappers, "ui-menu-item-wrapper" );

		// Add aria-disabled attribute to any disabled menu item
		items.filter( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

		// If the active item has been removed, blur the menu
		if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
			this.blur();
		}
	},

	_itemRole: function() {
		return {
			menu: "menuitem",
			listbox: "option"
		}[ this.options.role ];
	},

	_setOption: function( key, value ) {
		if ( key === "icons" ) {
			var icons = this.element.find( ".ui-menu-icon" );
			this._removeClass( icons, null, this.options.icons.submenu )
				._addClass( icons, null, value.submenu );
		}
		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", String( value ) );
		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	focus: function( event, item ) {
		var nested, focused, activeParent;
		this.blur( event, event && event.type === "focus" );

		this._scrollIntoView( item );

		this.active = item.first();

		focused = this.active.children( ".ui-menu-item-wrapper" );
		this._addClass( focused, null, "ui-state-active" );

		// Only update aria-activedescendant if there's a role
		// otherwise we assume focus is managed elsewhere
		if ( this.options.role ) {
			this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
		}

		// Highlight active parent menu item, if any
		activeParent = this.active
			.parent()
				.closest( ".ui-menu-item" )
					.children( ".ui-menu-item-wrapper" );
		this._addClass( activeParent, null, "ui-state-active" );

		if ( event && event.type === "keydown" ) {
			this._close();
		} else {
			this.timer = this._delay( function() {
				this._close();
			}, this.delay );
		}

		nested = item.children( ".ui-menu" );
		if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
			this._startOpening( nested );
		}
		this.activeMenu = item.parent();

		this._trigger( "focus", event, { item: item } );
	},

	_scrollIntoView: function( item ) {
		var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
		if ( this._hasScroll() ) {
			borderTop = parseFloat( $.css( this.activeMenu[ 0 ], "borderTopWidth" ) ) || 0;
			paddingTop = parseFloat( $.css( this.activeMenu[ 0 ], "paddingTop" ) ) || 0;
			offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
			scroll = this.activeMenu.scrollTop();
			elementHeight = this.activeMenu.height();
			itemHeight = item.outerHeight();

			if ( offset < 0 ) {
				this.activeMenu.scrollTop( scroll + offset );
			} else if ( offset + itemHeight > elementHeight ) {
				this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
			}
		}
	},

	blur: function( event, fromFocus ) {
		if ( !fromFocus ) {
			clearTimeout( this.timer );
		}

		if ( !this.active ) {
			return;
		}

		this._removeClass( this.active.children( ".ui-menu-item-wrapper" ),
			null, "ui-state-active" );

		this._trigger( "blur", event, { item: this.active } );
		this.active = null;
	},

	_startOpening: function( submenu ) {
		clearTimeout( this.timer );

		// Don't open if already open fixes a Firefox bug that caused a .5 pixel
		// shift in the submenu position when mousing over the caret icon
		if ( submenu.attr( "aria-hidden" ) !== "true" ) {
			return;
		}

		this.timer = this._delay( function() {
			this._close();
			this._open( submenu );
		}, this.delay );
	},

	_open: function( submenu ) {
		var position = $.extend( {
			of: this.active
		}, this.options.position );

		clearTimeout( this.timer );
		this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
			.hide()
			.attr( "aria-hidden", "true" );

		submenu
			.show()
			.removeAttr( "aria-hidden" )
			.attr( "aria-expanded", "true" )
			.position( position );
	},

	collapseAll: function( event, all ) {
		clearTimeout( this.timer );
		this.timer = this._delay( function() {

			// If we were passed an event, look for the submenu that contains the event
			var currentMenu = all ? this.element :
				$( event && event.target ).closest( this.element.find( ".ui-menu" ) );

			// If we found no valid submenu ancestor, use the main menu to close all
			// sub menus anyway
			if ( !currentMenu.length ) {
				currentMenu = this.element;
			}

			this._close( currentMenu );

			this.blur( event );

			// Work around active item staying active after menu is blurred
			this._removeClass( currentMenu.find( ".ui-state-active" ), null, "ui-state-active" );

			this.activeMenu = currentMenu;
		}, this.delay );
	},

	// With no arguments, closes the currently active menu - if nothing is active
	// it closes all menus.  If passed an argument, it will search for menus BELOW
	_close: function( startMenu ) {
		if ( !startMenu ) {
			startMenu = this.active ? this.active.parent() : this.element;
		}

		startMenu.find( ".ui-menu" )
			.hide()
			.attr( "aria-hidden", "true" )
			.attr( "aria-expanded", "false" );
	},

	_closeOnDocumentClick: function( event ) {
		return !$( event.target ).closest( ".ui-menu" ).length;
	},

	_isDivider: function( item ) {

		// Match hyphen, em dash, en dash
		return !/[^\-\u2014\u2013\s]/.test( item.text() );
	},

	collapse: function( event ) {
		var newItem = this.active &&
			this.active.parent().closest( ".ui-menu-item", this.element );
		if ( newItem && newItem.length ) {
			this._close();
			this.focus( event, newItem );
		}
	},

	expand: function( event ) {
		var newItem = this.active &&
			this.active
				.children( ".ui-menu " )
					.find( this.options.items )
						.first();

		if ( newItem && newItem.length ) {
			this._open( newItem.parent() );

			// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
			this._delay( function() {
				this.focus( event, newItem );
			} );
		}
	},

	next: function( event ) {
		this._move( "next", "first", event );
	},

	previous: function( event ) {
		this._move( "prev", "last", event );
	},

	isFirstItem: function() {
		return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
	},

	isLastItem: function() {
		return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
	},

	_move: function( direction, filter, event ) {
		var next;
		if ( this.active ) {
			if ( direction === "first" || direction === "last" ) {
				next = this.active
					[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
					.eq( -1 );
			} else {
				next = this.active
					[ direction + "All" ]( ".ui-menu-item" )
					.eq( 0 );
			}
		}
		if ( !next || !next.length || !this.active ) {
			next = this.activeMenu.find( this.options.items )[ filter ]();
		}

		this.focus( event, next );
	},

	nextPage: function( event ) {
		var item, base, height;

		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isLastItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.nextAll( ".ui-menu-item" ).each( function() {
				item = $( this );
				return item.offset().top - base - height < 0;
			} );

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.find( this.options.items )
				[ !this.active ? "first" : "last" ]() );
		}
	},

	previousPage: function( event ) {
		var item, base, height;
		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isFirstItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.height();
			this.active.prevAll( ".ui-menu-item" ).each( function() {
				item = $( this );
				return item.offset().top - base + height > 0;
			} );

			this.focus( event, item );
		} else {
			this.focus( event, this.activeMenu.find( this.options.items ).first() );
		}
	},

	_hasScroll: function() {
		return this.element.outerHeight() < this.element.prop( "scrollHeight" );
	},

	select: function( event ) {

		// TODO: It should never be possible to not have an active item at this
		// point, but the tests don't trigger mouseenter before click.
		this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
		var ui = { item: this.active };
		if ( !this.active.has( ".ui-menu" ).length ) {
			this.collapseAll( event, true );
		}
		this._trigger( "select", event, ui );
	},

	_filterMenuItems: function( character ) {
		var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
			regex = new RegExp( "^" + escapedCharacter, "i" );

		return this.activeMenu
			.find( this.options.items )

				// Only match on items, not dividers or other content (#10571)
				.filter( ".ui-menu-item" )
					.filter( function() {
						return regex.test(
							$.trim( $( this ).children( ".ui-menu-item-wrapper" ).text() ) );
					} );
	}
} );


/*!
 * jQuery UI Autocomplete 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Autocomplete
//>>group: Widgets
//>>description: Lists suggested words as the user is typing.
//>>docs: http://api.jqueryui.com/autocomplete/
//>>demos: http://jqueryui.com/autocomplete/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/autocomplete.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.autocomplete", {
	version: "1.12.1",
	defaultElement: "<input>",
	options: {
		appendTo: null,
		autoFocus: false,
		delay: 300,
		minLength: 1,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		source: null,

		// Callbacks
		change: null,
		close: null,
		focus: null,
		open: null,
		response: null,
		search: null,
		select: null
	},

	requestIndex: 0,
	pending: 0,

	_create: function() {

		// Some browsers only repeat keydown events, not keypress events,
		// so we use the suppressKeyPress flag to determine if we've already
		// handled the keydown event. #7269
		// Unfortunately the code for & in keypress is the same as the up arrow,
		// so we use the suppressKeyPressRepeat flag to avoid handling keypress
		// events when we know the keydown event was used to modify the
		// search term. #7799
		var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
			nodeName = this.element[ 0 ].nodeName.toLowerCase(),
			isTextarea = nodeName === "textarea",
			isInput = nodeName === "input";

		// Textareas are always multi-line
		// Inputs are always single-line, even if inside a contentEditable element
		// IE also treats inputs as contentEditable
		// All other element types are determined by whether or not they're contentEditable
		this.isMultiLine = isTextarea || !isInput && this._isContentEditable( this.element );

		this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
		this.isNewMenu = true;

		this._addClass( "ui-autocomplete-input" );
		this.element.attr( "autocomplete", "off" );

		this._on( this.element, {
			keydown: function( event ) {
				if ( this.element.prop( "readOnly" ) ) {
					suppressKeyPress = true;
					suppressInput = true;
					suppressKeyPressRepeat = true;
					return;
				}

				suppressKeyPress = false;
				suppressInput = false;
				suppressKeyPressRepeat = false;
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					suppressKeyPress = true;
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					suppressKeyPress = true;
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					suppressKeyPress = true;
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					suppressKeyPress = true;
					this._keyEvent( "next", event );
					break;
				case keyCode.ENTER:

					// when menu is open and has focus
					if ( this.menu.active ) {

						// #6055 - Opera still allows the keypress to occur
						// which causes forms to submit
						suppressKeyPress = true;
						event.preventDefault();
						this.menu.select( event );
					}
					break;
				case keyCode.TAB:
					if ( this.menu.active ) {
						this.menu.select( event );
					}
					break;
				case keyCode.ESCAPE:
					if ( this.menu.element.is( ":visible" ) ) {
						if ( !this.isMultiLine ) {
							this._value( this.term );
						}
						this.close( event );

						// Different browsers have different default behavior for escape
						// Single press can mean undo or clear
						// Double press in IE means clear the whole form
						event.preventDefault();
					}
					break;
				default:
					suppressKeyPressRepeat = true;

					// search timeout should be triggered before the input value is changed
					this._searchTimeout( event );
					break;
				}
			},
			keypress: function( event ) {
				if ( suppressKeyPress ) {
					suppressKeyPress = false;
					if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
						event.preventDefault();
					}
					return;
				}
				if ( suppressKeyPressRepeat ) {
					return;
				}

				// Replicate some key handlers to allow them to repeat in Firefox and Opera
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					this._keyEvent( "next", event );
					break;
				}
			},
			input: function( event ) {
				if ( suppressInput ) {
					suppressInput = false;
					event.preventDefault();
					return;
				}
				this._searchTimeout( event );
			},
			focus: function() {
				this.selectedItem = null;
				this.previous = this._value();
			},
			blur: function( event ) {
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}

				clearTimeout( this.searching );
				this.close( event );
				this._change( event );
			}
		} );

		this._initSource();
		this.menu = $( "<ul>" )
			.appendTo( this._appendTo() )
			.menu( {

				// disable ARIA support, the live region takes care of that
				role: null
			} )
			.hide()
			.menu( "instance" );

		this._addClass( this.menu.element, "ui-autocomplete", "ui-front" );
		this._on( this.menu.element, {
			mousedown: function( event ) {

				// prevent moving focus out of the text field
				event.preventDefault();

				// IE doesn't prevent moving focus even with event.preventDefault()
				// so we set a flag to know when we should ignore the blur event
				this.cancelBlur = true;
				this._delay( function() {
					delete this.cancelBlur;

					// Support: IE 8 only
					// Right clicking a menu item or selecting text from the menu items will
					// result in focus moving out of the input. However, we've already received
					// and ignored the blur event because of the cancelBlur flag set above. So
					// we restore focus to ensure that the menu closes properly based on the user's
					// next actions.
					if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {
						this.element.trigger( "focus" );
					}
				} );
			},
			menufocus: function( event, ui ) {
				var label, item;

				// support: Firefox
				// Prevent accidental activation of menu items in Firefox (#7024 #9118)
				if ( this.isNewMenu ) {
					this.isNewMenu = false;
					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
						this.menu.blur();

						this.document.one( "mousemove", function() {
							$( event.target ).trigger( event.originalEvent );
						} );

						return;
					}
				}

				item = ui.item.data( "ui-autocomplete-item" );
				if ( false !== this._trigger( "focus", event, { item: item } ) ) {

					// use value to match what will end up in the input, if it was a key event
					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
						this._value( item.value );
					}
				}

				// Announce the value in the liveRegion
				label = ui.item.attr( "aria-label" ) || item.value;
				if ( label && $.trim( label ).length ) {
					this.liveRegion.children().hide();
					$( "<div>" ).text( label ).appendTo( this.liveRegion );
				}
			},
			menuselect: function( event, ui ) {
				var item = ui.item.data( "ui-autocomplete-item" ),
					previous = this.previous;

				// Only trigger when focus was lost (click on menu)
				if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {
					this.element.trigger( "focus" );
					this.previous = previous;

					// #6109 - IE triggers two focus events and the second
					// is asynchronous, so we need to reset the previous
					// term synchronously and asynchronously :-(
					this._delay( function() {
						this.previous = previous;
						this.selectedItem = item;
					} );
				}

				if ( false !== this._trigger( "select", event, { item: item } ) ) {
					this._value( item.value );
				}

				// reset the term after the select event
				// this allows custom select handling to work properly
				this.term = this._value();

				this.close( event );
				this.selectedItem = item;
			}
		} );

		this.liveRegion = $( "<div>", {
			role: "status",
			"aria-live": "assertive",
			"aria-relevant": "additions"
		} )
			.appendTo( this.document[ 0 ].body );

		this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

		// Turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		} );
	},

	_destroy: function() {
		clearTimeout( this.searching );
		this.element.removeAttr( "autocomplete" );
		this.menu.element.remove();
		this.liveRegion.remove();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "source" ) {
			this._initSource();
		}
		if ( key === "appendTo" ) {
			this.menu.element.appendTo( this._appendTo() );
		}
		if ( key === "disabled" && value && this.xhr ) {
			this.xhr.abort();
		}
	},

	_isEventTargetInWidget: function( event ) {
		var menuElement = this.menu.element[ 0 ];

		return event.target === this.element[ 0 ] ||
			event.target === menuElement ||
			$.contains( menuElement, event.target );
	},

	_closeOnClickOutside: function( event ) {
		if ( !this._isEventTargetInWidget( event ) ) {
			this.close();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".ui-front, dialog" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_initSource: function() {
		var array, url,
			that = this;
		if ( $.isArray( this.options.source ) ) {
			array = this.options.source;
			this.source = function( request, response ) {
				response( $.ui.autocomplete.filter( array, request.term ) );
			};
		} else if ( typeof this.options.source === "string" ) {
			url = this.options.source;
			this.source = function( request, response ) {
				if ( that.xhr ) {
					that.xhr.abort();
				}
				that.xhr = $.ajax( {
					url: url,
					data: request,
					dataType: "json",
					success: function( data ) {
						response( data );
					},
					error: function() {
						response( [] );
					}
				} );
			};
		} else {
			this.source = this.options.source;
		}
	},

	_searchTimeout: function( event ) {
		clearTimeout( this.searching );
		this.searching = this._delay( function() {

			// Search if the value has changed, or if the user retypes the same value (see #7434)
			var equalValues = this.term === this._value(),
				menuVisible = this.menu.element.is( ":visible" ),
				modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

			if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
				this.selectedItem = null;
				this.search( null, event );
			}
		}, this.options.delay );
	},

	search: function( value, event ) {
		value = value != null ? value : this._value();

		// Always save the actual value, not the one passed as an argument
		this.term = this._value();

		if ( value.length < this.options.minLength ) {
			return this.close( event );
		}

		if ( this._trigger( "search", event ) === false ) {
			return;
		}

		return this._search( value );
	},

	_search: function( value ) {
		this.pending++;
		this._addClass( "ui-autocomplete-loading" );
		this.cancelSearch = false;

		this.source( { term: value }, this._response() );
	},

	_response: function() {
		var index = ++this.requestIndex;

		return $.proxy( function( content ) {
			if ( index === this.requestIndex ) {
				this.__response( content );
			}

			this.pending--;
			if ( !this.pending ) {
				this._removeClass( "ui-autocomplete-loading" );
			}
		}, this );
	},

	__response: function( content ) {
		if ( content ) {
			content = this._normalize( content );
		}
		this._trigger( "response", null, { content: content } );
		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
			this._suggest( content );
			this._trigger( "open" );
		} else {

			// use ._close() instead of .close() so we don't cancel future searches
			this._close();
		}
	},

	close: function( event ) {
		this.cancelSearch = true;
		this._close( event );
	},

	_close: function( event ) {

		// Remove the handler that closes the menu on outside clicks
		this._off( this.document, "mousedown" );

		if ( this.menu.element.is( ":visible" ) ) {
			this.menu.element.hide();
			this.menu.blur();
			this.isNewMenu = true;
			this._trigger( "close", event );
		}
	},

	_change: function( event ) {
		if ( this.previous !== this._value() ) {
			this._trigger( "change", event, { item: this.selectedItem } );
		}
	},

	_normalize: function( items ) {

		// assume all items have the right format when the first item is complete
		if ( items.length && items[ 0 ].label && items[ 0 ].value ) {
			return items;
		}
		return $.map( items, function( item ) {
			if ( typeof item === "string" ) {
				return {
					label: item,
					value: item
				};
			}
			return $.extend( {}, item, {
				label: item.label || item.value,
				value: item.value || item.label
			} );
		} );
	},

	_suggest: function( items ) {
		var ul = this.menu.element.empty();
		this._renderMenu( ul, items );
		this.isNewMenu = true;
		this.menu.refresh();

		// Size and position menu
		ul.show();
		this._resizeMenu();
		ul.position( $.extend( {
			of: this.element
		}, this.options.position ) );

		if ( this.options.autoFocus ) {
			this.menu.next();
		}

		// Listen for interactions outside of the widget (#6642)
		this._on( this.document, {
			mousedown: "_closeOnClickOutside"
		} );
	},

	_resizeMenu: function() {
		var ul = this.menu.element;
		ul.outerWidth( Math.max(

			// Firefox wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping (#7513)
			ul.width( "" ).outerWidth() + 1,
			this.element.outerWidth()
		) );
	},

	_renderMenu: function( ul, items ) {
		var that = this;
		$.each( items, function( index, item ) {
			that._renderItemData( ul, item );
		} );
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
	},

	_renderItem: function( ul, item ) {
		return $( "<li>" )
			.append( $( "<div>" ).text( item.label ) )
			.appendTo( ul );
	},

	_move: function( direction, event ) {
		if ( !this.menu.element.is( ":visible" ) ) {
			this.search( null, event );
			return;
		}
		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
				this.menu.isLastItem() && /^next/.test( direction ) ) {

			if ( !this.isMultiLine ) {
				this._value( this.term );
			}

			this.menu.blur();
			return;
		}
		this.menu[ direction ]( event );
	},

	widget: function() {
		return this.menu.element;
	},

	_value: function() {
		return this.valueMethod.apply( this.element, arguments );
	},

	_keyEvent: function( keyEvent, event ) {
		if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
			this._move( keyEvent, event );

			// Prevents moving cursor to beginning/end of the text field in some browsers
			event.preventDefault();
		}
	},

	// Support: Chrome <=50
	// We should be able to just use this.element.prop( "isContentEditable" )
	// but hidden elements always report false in Chrome.
	// https://code.google.com/p/chromium/issues/detail?id=313082
	_isContentEditable: function( element ) {
		if ( !element.length ) {
			return false;
		}

		var editable = element.prop( "contentEditable" );

		if ( editable === "inherit" ) {
		  return this._isContentEditable( element.parent() );
		}

		return editable === "true";
	}
} );

$.extend( $.ui.autocomplete, {
	escapeRegex: function( value ) {
		return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
	},
	filter: function( array, term ) {
		var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), "i" );
		return $.grep( array, function( value ) {
			return matcher.test( value.label || value.value || value );
		} );
	}
} );

// Live region extension, adding a `messages` option
// NOTE: This is an experimental API. We are still investigating
// a full solution for string manipulation and internationalization.
$.widget( "ui.autocomplete", $.ui.autocomplete, {
	options: {
		messages: {
			noResults: "No search results.",
			results: function( amount ) {
				return amount + ( amount > 1 ? " results are" : " result is" ) +
					" available, use up and down arrow keys to navigate.";
			}
		}
	},

	__response: function( content ) {
		var message;
		this._superApply( arguments );
		if ( this.options.disabled || this.cancelSearch ) {
			return;
		}
		if ( content && content.length ) {
			message = this.options.messages.results( content.length );
		} else {
			message = this.options.messages.noResults;
		}
		this.liveRegion.children().hide();
		$( "<div>" ).text( message ).appendTo( this.liveRegion );
	}
} );

var widgetsAutocomplete = $.ui.autocomplete;


/*!
 * jQuery UI Controlgroup 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Controlgroup
//>>group: Widgets
//>>description: Visually groups form control widgets
//>>docs: http://api.jqueryui.com/controlgroup/
//>>demos: http://jqueryui.com/controlgroup/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/controlgroup.css
//>>css.theme: ../../themes/base/theme.css


var controlgroupCornerRegex = /ui-corner-([a-z]){2,6}/g;

var widgetsControlgroup = $.widget( "ui.controlgroup", {
	version: "1.12.1",
	defaultElement: "<div>",
	options: {
		direction: "horizontal",
		disabled: null,
		onlyVisible: true,
		items: {
			"button": "input[type=button], input[type=submit], input[type=reset], button, a",
			"controlgroupLabel": ".ui-controlgroup-label",
			"checkboxradio": "input[type='checkbox'], input[type='radio']",
			"selectmenu": "select",
			"spinner": ".ui-spinner-input"
		}
	},

	_create: function() {
		this._enhance();
	},

	// To support the enhanced option in jQuery Mobile, we isolate DOM manipulation
	_enhance: function() {
		this.element.attr( "role", "toolbar" );
		this.refresh();
	},

	_destroy: function() {
		this._callChildMethod( "destroy" );
		this.childWidgets.removeData( "ui-controlgroup-data" );
		this.element.removeAttr( "role" );
		if ( this.options.items.controlgroupLabel ) {
			this.element
				.find( this.options.items.controlgroupLabel )
				.find( ".ui-controlgroup-label-contents" )
				.contents().unwrap();
		}
	},

	_initWidgets: function() {
		var that = this,
			childWidgets = [];

		// First we iterate over each of the items options
		$.each( this.options.items, function( widget, selector ) {
			var labels;
			var options = {};

			// Make sure the widget has a selector set
			if ( !selector ) {
				return;
			}

			if ( widget === "controlgroupLabel" ) {
				labels = that.element.find( selector );
				labels.each( function() {
					var element = $( this );

					if ( element.children( ".ui-controlgroup-label-contents" ).length ) {
						return;
					}
					element.contents()
						.wrapAll( "<span class='ui-controlgroup-label-contents'></span>" );
				} );
				that._addClass( labels, null, "ui-widget ui-widget-content ui-state-default" );
				childWidgets = childWidgets.concat( labels.get() );
				return;
			}

			// Make sure the widget actually exists
			if ( !$.fn[ widget ] ) {
				return;
			}

			// We assume everything is in the middle to start because we can't determine
			// first / last elements until all enhancments are done.
			if ( that[ "_" + widget + "Options" ] ) {
				options = that[ "_" + widget + "Options" ]( "middle" );
			} else {
				options = { classes: {} };
			}

			// Find instances of this widget inside controlgroup and init them
			that.element
				.find( selector )
				.each( function() {
					var element = $( this );
					var instance = element[ widget ]( "instance" );

					// We need to clone the default options for this type of widget to avoid
					// polluting the variable options which has a wider scope than a single widget.
					var instanceOptions = $.widget.extend( {}, options );

					// If the button is the child of a spinner ignore it
					// TODO: Find a more generic solution
					if ( widget === "button" && element.parent( ".ui-spinner" ).length ) {
						return;
					}

					// Create the widget if it doesn't exist
					if ( !instance ) {
						instance = element[ widget ]()[ widget ]( "instance" );
					}
					if ( instance ) {
						instanceOptions.classes =
							that._resolveClassesValues( instanceOptions.classes, instance );
					}
					element[ widget ]( instanceOptions );

					// Store an instance of the controlgroup to be able to reference
					// from the outermost element for changing options and refresh
					var widgetElement = element[ widget ]( "widget" );
					$.data( widgetElement[ 0 ], "ui-controlgroup-data",
						instance ? instance : element[ widget ]( "instance" ) );

					childWidgets.push( widgetElement[ 0 ] );
				} );
		} );

		this.childWidgets = $( $.unique( childWidgets ) );
		this._addClass( this.childWidgets, "ui-controlgroup-item" );
	},

	_callChildMethod: function( method ) {
		this.childWidgets.each( function() {
			var element = $( this ),
				data = element.data( "ui-controlgroup-data" );
			if ( data && data[ method ] ) {
				data[ method ]();
			}
		} );
	},

	_updateCornerClass: function( element, position ) {
		var remove = "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all";
		var add = this._buildSimpleOptions( position, "label" ).classes.label;

		this._removeClass( element, null, remove );
		this._addClass( element, null, add );
	},

	_buildSimpleOptions: function( position, key ) {
		var direction = this.options.direction === "vertical";
		var result = {
			classes: {}
		};
		result.classes[ key ] = {
			"middle": "",
			"first": "ui-corner-" + ( direction ? "top" : "left" ),
			"last": "ui-corner-" + ( direction ? "bottom" : "right" ),
			"only": "ui-corner-all"
		}[ position ];

		return result;
	},

	_spinnerOptions: function( position ) {
		var options = this._buildSimpleOptions( position, "ui-spinner" );

		options.classes[ "ui-spinner-up" ] = "";
		options.classes[ "ui-spinner-down" ] = "";

		return options;
	},

	_buttonOptions: function( position ) {
		return this._buildSimpleOptions( position, "ui-button" );
	},

	_checkboxradioOptions: function( position ) {
		return this._buildSimpleOptions( position, "ui-checkboxradio-label" );
	},

	_selectmenuOptions: function( position ) {
		var direction = this.options.direction === "vertical";
		return {
			width: direction ? "auto" : false,
			classes: {
				middle: {
					"ui-selectmenu-button-open": "",
					"ui-selectmenu-button-closed": ""
				},
				first: {
					"ui-selectmenu-button-open": "ui-corner-" + ( direction ? "top" : "tl" ),
					"ui-selectmenu-button-closed": "ui-corner-" + ( direction ? "top" : "left" )
				},
				last: {
					"ui-selectmenu-button-open": direction ? "" : "ui-corner-tr",
					"ui-selectmenu-button-closed": "ui-corner-" + ( direction ? "bottom" : "right" )
				},
				only: {
					"ui-selectmenu-button-open": "ui-corner-top",
					"ui-selectmenu-button-closed": "ui-corner-all"
				}

			}[ position ]
		};
	},

	_resolveClassesValues: function( classes, instance ) {
		var result = {};
		$.each( classes, function( key ) {
			var current = instance.options.classes[ key ] || "";
			current = $.trim( current.replace( controlgroupCornerRegex, "" ) );
			result[ key ] = ( current + " " + classes[ key ] ).replace( /\s+/g, " " );
		} );
		return result;
	},

	_setOption: function( key, value ) {
		if ( key === "direction" ) {
			this._removeClass( "ui-controlgroup-" + this.options.direction );
		}

		this._super( key, value );
		if ( key === "disabled" ) {
			this._callChildMethod( value ? "disable" : "enable" );
			return;
		}

		this.refresh();
	},

	refresh: function() {
		var children,
			that = this;

		this._addClass( "ui-controlgroup ui-controlgroup-" + this.options.direction );

		if ( this.options.direction === "horizontal" ) {
			this._addClass( null, "ui-helper-clearfix" );
		}
		this._initWidgets();

		children = this.childWidgets;

		// We filter here because we need to track all childWidgets not just the visible ones
		if ( this.options.onlyVisible ) {
			children = children.filter( ":visible" );
		}

		if ( children.length ) {

			// We do this last because we need to make sure all enhancment is done
			// before determining first and last
			$.each( [ "first", "last" ], function( index, value ) {
				var instance = children[ value ]().data( "ui-controlgroup-data" );

				if ( instance && that[ "_" + instance.widgetName + "Options" ] ) {
					var options = that[ "_" + instance.widgetName + "Options" ](
						children.length === 1 ? "only" : value
					);
					options.classes = that._resolveClassesValues( options.classes, instance );
					instance.element[ instance.widgetName ]( options );
				} else {
					that._updateCornerClass( children[ value ](), value );
				}
			} );

			// Finally call the refresh method on each of the child widgets.
			this._callChildMethod( "refresh" );
		}
	}
} );

/*!
 * jQuery UI Checkboxradio 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Checkboxradio
//>>group: Widgets
//>>description: Enhances a form with multiple themeable checkboxes or radio buttons.
//>>docs: http://api.jqueryui.com/checkboxradio/
//>>demos: http://jqueryui.com/checkboxradio/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/button.css
//>>css.structure: ../../themes/base/checkboxradio.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.checkboxradio", [ $.ui.formResetMixin, {
	version: "1.12.1",
	options: {
		disabled: null,
		label: null,
		icon: true,
		classes: {
			"ui-checkboxradio-label": "ui-corner-all",
			"ui-checkboxradio-icon": "ui-corner-all"
		}
	},

	_getCreateOptions: function() {
		var disabled, labels;
		var that = this;
		var options = this._super() || {};

		// We read the type here, because it makes more sense to throw a element type error first,
		// rather then the error for lack of a label. Often if its the wrong type, it
		// won't have a label (e.g. calling on a div, btn, etc)
		this._readType();

		labels = this.element.labels();

		// If there are multiple labels, use the last one
		this.label = $( labels[ labels.length - 1 ] );
		if ( !this.label.length ) {
			$.error( "No label found for checkboxradio widget" );
		}

		this.originalLabel = "";

		// We need to get the label text but this may also need to make sure it does not contain the
		// input itself.
		this.label.contents().not( this.element[ 0 ] ).each( function() {

			// The label contents could be text, html, or a mix. We concat each element to get a
			// string representation of the label, without the input as part of it.
			that.originalLabel += this.nodeType === 3 ? $( this ).text() : this.outerHTML;
		} );

		// Set the label option if we found label text
		if ( this.originalLabel ) {
			options.label = this.originalLabel;
		}

		disabled = this.element[ 0 ].disabled;
		if ( disabled != null ) {
			options.disabled = disabled;
		}
		return options;
	},

	_create: function() {
		var checked = this.element[ 0 ].checked;

		this._bindFormResetHandler();

		if ( this.options.disabled == null ) {
			this.options.disabled = this.element[ 0 ].disabled;
		}

		this._setOption( "disabled", this.options.disabled );
		this._addClass( "ui-checkboxradio", "ui-helper-hidden-accessible" );
		this._addClass( this.label, "ui-checkboxradio-label", "ui-button ui-widget" );

		if ( this.type === "radio" ) {
			this._addClass( this.label, "ui-checkboxradio-radio-label" );
		}

		if ( this.options.label && this.options.label !== this.originalLabel ) {
			this._updateLabel();
		} else if ( this.originalLabel ) {
			this.options.label = this.originalLabel;
		}

		this._enhance();

		if ( checked ) {
			this._addClass( this.label, "ui-checkboxradio-checked", "ui-state-active" );
			if ( this.icon ) {
				this._addClass( this.icon, null, "ui-state-hover" );
			}
		}

		this._on( {
			change: "_toggleClasses",
			focus: function() {
				this._addClass( this.label, null, "ui-state-focus ui-visual-focus" );
			},
			blur: function() {
				this._removeClass( this.label, null, "ui-state-focus ui-visual-focus" );
			}
		} );
	},

	_readType: function() {
		var nodeName = this.element[ 0 ].nodeName.toLowerCase();
		this.type = this.element[ 0 ].type;
		if ( nodeName !== "input" || !/radio|checkbox/.test( this.type ) ) {
			$.error( "Can't create checkboxradio on element.nodeName=" + nodeName +
				" and element.type=" + this.type );
		}
	},

	// Support jQuery Mobile enhanced option
	_enhance: function() {
		this._updateIcon( this.element[ 0 ].checked );
	},

	widget: function() {
		return this.label;
	},

	_getRadioGroup: function() {
		var group;
		var name = this.element[ 0 ].name;
		var nameSelector = "input[name='" + $.ui.escapeSelector( name ) + "']";

		if ( !name ) {
			return $( [] );
		}

		if ( this.form.length ) {
			group = $( this.form[ 0 ].elements ).filter( nameSelector );
		} else {

			// Not inside a form, check all inputs that also are not inside a form
			group = $( nameSelector ).filter( function() {
				return $( this ).form().length === 0;
			} );
		}

		return group.not( this.element );
	},

	_toggleClasses: function() {
		var checked = this.element[ 0 ].checked;
		this._toggleClass( this.label, "ui-checkboxradio-checked", "ui-state-active", checked );

		if ( this.options.icon && this.type === "checkbox" ) {
			this._toggleClass( this.icon, null, "ui-icon-check ui-state-checked", checked )
				._toggleClass( this.icon, null, "ui-icon-blank", !checked );
		}

		if ( this.type === "radio" ) {
			this._getRadioGroup()
				.each( function() {
					var instance = $( this ).checkboxradio( "instance" );

					if ( instance ) {
						instance._removeClass( instance.label,
							"ui-checkboxradio-checked", "ui-state-active" );
					}
				} );
		}
	},

	_destroy: function() {
		this._unbindFormResetHandler();

		if ( this.icon ) {
			this.icon.remove();
			this.iconSpace.remove();
		}
	},

	_setOption: function( key, value ) {

		// We don't allow the value to be set to nothing
		if ( key === "label" && !value ) {
			return;
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			this._toggleClass( this.label, null, "ui-state-disabled", value );
			this.element[ 0 ].disabled = value;

			// Don't refresh when setting disabled
			return;
		}
		this.refresh();
	},

	_updateIcon: function( checked ) {
		var toAdd = "ui-icon ui-icon-background ";

		if ( this.options.icon ) {
			if ( !this.icon ) {
				this.icon = $( "<span>" );
				this.iconSpace = $( "<span> </span>" );
				this._addClass( this.iconSpace, "ui-checkboxradio-icon-space" );
			}

			if ( this.type === "checkbox" ) {
				toAdd += checked ? "ui-icon-check ui-state-checked" : "ui-icon-blank";
				this._removeClass( this.icon, null, checked ? "ui-icon-blank" : "ui-icon-check" );
			} else {
				toAdd += "ui-icon-blank";
			}
			this._addClass( this.icon, "ui-checkboxradio-icon", toAdd );
			if ( !checked ) {
				this._removeClass( this.icon, null, "ui-icon-check ui-state-checked" );
			}
			this.icon.prependTo( this.label ).after( this.iconSpace );
		} else if ( this.icon !== undefined ) {
			this.icon.remove();
			this.iconSpace.remove();
			delete this.icon;
		}
	},

	_updateLabel: function() {

		// Remove the contents of the label ( minus the icon, icon space, and input )
		var contents = this.label.contents().not( this.element[ 0 ] );
		if ( this.icon ) {
			contents = contents.not( this.icon[ 0 ] );
		}
		if ( this.iconSpace ) {
			contents = contents.not( this.iconSpace[ 0 ] );
		}
		contents.remove();

		this.label.append( this.options.label );
	},

	refresh: function() {
		var checked = this.element[ 0 ].checked,
			isDisabled = this.element[ 0 ].disabled;

		this._updateIcon( checked );
		this._toggleClass( this.label, "ui-checkboxradio-checked", "ui-state-active", checked );
		if ( this.options.label !== null ) {
			this._updateLabel();
		}

		if ( isDisabled !== this.options.disabled ) {
			this._setOptions( { "disabled": isDisabled } );
		}
	}

} ] );

var widgetsCheckboxradio = $.ui.checkboxradio;


/*!
 * jQuery UI Button 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Button
//>>group: Widgets
//>>description: Enhances a form with themeable buttons.
//>>docs: http://api.jqueryui.com/button/
//>>demos: http://jqueryui.com/button/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/button.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.button", {
	version: "1.12.1",
	defaultElement: "<button>",
	options: {
		classes: {
			"ui-button": "ui-corner-all"
		},
		disabled: null,
		icon: null,
		iconPosition: "beginning",
		label: null,
		showLabel: true
	},

	_getCreateOptions: function() {
		var disabled,

			// This is to support cases like in jQuery Mobile where the base widget does have
			// an implementation of _getCreateOptions
			options = this._super() || {};

		this.isInput = this.element.is( "input" );

		disabled = this.element[ 0 ].disabled;
		if ( disabled != null ) {
			options.disabled = disabled;
		}

		this.originalLabel = this.isInput ? this.element.val() : this.element.html();
		if ( this.originalLabel ) {
			options.label = this.originalLabel;
		}

		return options;
	},

	_create: function() {
		if ( !this.option.showLabel & !this.options.icon ) {
			this.options.showLabel = true;
		}

		// We have to check the option again here even though we did in _getCreateOptions,
		// because null may have been passed on init which would override what was set in
		// _getCreateOptions
		if ( this.options.disabled == null ) {
			this.options.disabled = this.element[ 0 ].disabled || false;
		}

		this.hasTitle = !!this.element.attr( "title" );

		// Check to see if the label needs to be set or if its already correct
		if ( this.options.label && this.options.label !== this.originalLabel ) {
			if ( this.isInput ) {
				this.element.val( this.options.label );
			} else {
				this.element.html( this.options.label );
			}
		}
		this._addClass( "ui-button", "ui-widget" );
		this._setOption( "disabled", this.options.disabled );
		this._enhance();

		if ( this.element.is( "a" ) ) {
			this._on( {
				"keyup": function( event ) {
					if ( event.keyCode === $.ui.keyCode.SPACE ) {
						event.preventDefault();

						// Support: PhantomJS <= 1.9, IE 8 Only
						// If a native click is available use it so we actually cause navigation
						// otherwise just trigger a click event
						if ( this.element[ 0 ].click ) {
							this.element[ 0 ].click();
						} else {
							this.element.trigger( "click" );
						}
					}
				}
			} );
		}
	},

	_enhance: function() {
		if ( !this.element.is( "button" ) ) {
			this.element.attr( "role", "button" );
		}

		if ( this.options.icon ) {
			this._updateIcon( "icon", this.options.icon );
			this._updateTooltip();
		}
	},

	_updateTooltip: function() {
		this.title = this.element.attr( "title" );

		if ( !this.options.showLabel && !this.title ) {
			this.element.attr( "title", this.options.label );
		}
	},

	_updateIcon: function( option, value ) {
		var icon = option !== "iconPosition",
			position = icon ? this.options.iconPosition : value,
			displayBlock = position === "top" || position === "bottom";

		// Create icon
		if ( !this.icon ) {
			this.icon = $( "<span>" );

			this._addClass( this.icon, "ui-button-icon", "ui-icon" );

			if ( !this.options.showLabel ) {
				this._addClass( "ui-button-icon-only" );
			}
		} else if ( icon ) {

			// If we are updating the icon remove the old icon class
			this._removeClass( this.icon, null, this.options.icon );
		}

		// If we are updating the icon add the new icon class
		if ( icon ) {
			this._addClass( this.icon, null, value );
		}

		this._attachIcon( position );

		// If the icon is on top or bottom we need to add the ui-widget-icon-block class and remove
		// the iconSpace if there is one.
		if ( displayBlock ) {
			this._addClass( this.icon, null, "ui-widget-icon-block" );
			if ( this.iconSpace ) {
				this.iconSpace.remove();
			}
		} else {

			// Position is beginning or end so remove the ui-widget-icon-block class and add the
			// space if it does not exist
			if ( !this.iconSpace ) {
				this.iconSpace = $( "<span> </span>" );
				this._addClass( this.iconSpace, "ui-button-icon-space" );
			}
			this._removeClass( this.icon, null, "ui-wiget-icon-block" );
			this._attachIconSpace( position );
		}
	},

	_destroy: function() {
		this.element.removeAttr( "role" );

		if ( this.icon ) {
			this.icon.remove();
		}
		if ( this.iconSpace ) {
			this.iconSpace.remove();
		}
		if ( !this.hasTitle ) {
			this.element.removeAttr( "title" );
		}
	},

	_attachIconSpace: function( iconPosition ) {
		this.icon[ /^(?:end|bottom)/.test( iconPosition ) ? "before" : "after" ]( this.iconSpace );
	},

	_attachIcon: function( iconPosition ) {
		this.element[ /^(?:end|bottom)/.test( iconPosition ) ? "append" : "prepend" ]( this.icon );
	},

	_setOptions: function( options ) {
		var newShowLabel = options.showLabel === undefined ?
				this.options.showLabel :
				options.showLabel,
			newIcon = options.icon === undefined ? this.options.icon : options.icon;

		if ( !newShowLabel && !newIcon ) {
			options.showLabel = true;
		}
		this._super( options );
	},

	_setOption: function( key, value ) {
		if ( key === "icon" ) {
			if ( value ) {
				this._updateIcon( key, value );
			} else if ( this.icon ) {
				this.icon.remove();
				if ( this.iconSpace ) {
					this.iconSpace.remove();
				}
			}
		}

		if ( key === "iconPosition" ) {
			this._updateIcon( key, value );
		}

		// Make sure we can't end up with a button that has neither text nor icon
		if ( key === "showLabel" ) {
				this._toggleClass( "ui-button-icon-only", null, !value );
				this._updateTooltip();
		}

		if ( key === "label" ) {
			if ( this.isInput ) {
				this.element.val( value );
			} else {

				// If there is an icon, append it, else nothing then append the value
				// this avoids removal of the icon when setting label text
				this.element.html( value );
				if ( this.icon ) {
					this._attachIcon( this.options.iconPosition );
					this._attachIconSpace( this.options.iconPosition );
				}
			}
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			this._toggleClass( null, "ui-state-disabled", value );
			this.element[ 0 ].disabled = value;
			if ( value ) {
				this.element.blur();
			}
		}
	},

	refresh: function() {

		// Make sure to only check disabled if its an element that supports this otherwise
		// check for the disabled class to determine state
		var isDisabled = this.element.is( "input, button" ) ?
			this.element[ 0 ].disabled : this.element.hasClass( "ui-button-disabled" );

		if ( isDisabled !== this.options.disabled ) {
			this._setOptions( { disabled: isDisabled } );
		}

		this._updateTooltip();
	}
} );

// DEPRECATED
if ( $.uiBackCompat !== false ) {

	// Text and Icons options
	$.widget( "ui.button", $.ui.button, {
		options: {
			text: true,
			icons: {
				primary: null,
				secondary: null
			}
		},

		_create: function() {
			if ( this.options.showLabel && !this.options.text ) {
				this.options.showLabel = this.options.text;
			}
			if ( !this.options.showLabel && this.options.text ) {
				this.options.text = this.options.showLabel;
			}
			if ( !this.options.icon && ( this.options.icons.primary ||
					this.options.icons.secondary ) ) {
				if ( this.options.icons.primary ) {
					this.options.icon = this.options.icons.primary;
				} else {
					this.options.icon = this.options.icons.secondary;
					this.options.iconPosition = "end";
				}
			} else if ( this.options.icon ) {
				this.options.icons.primary = this.options.icon;
			}
			this._super();
		},

		_setOption: function( key, value ) {
			if ( key === "text" ) {
				this._super( "showLabel", value );
				return;
			}
			if ( key === "showLabel" ) {
				this.options.text = value;
			}
			if ( key === "icon" ) {
				this.options.icons.primary = value;
			}
			if ( key === "icons" ) {
				if ( value.primary ) {
					this._super( "icon", value.primary );
					this._super( "iconPosition", "beginning" );
				} else if ( value.secondary ) {
					this._super( "icon", value.secondary );
					this._super( "iconPosition", "end" );
				}
			}
			this._superApply( arguments );
		}
	} );

	$.fn.button = ( function( orig ) {
		return function() {
			if ( !this.length || ( this.length && this[ 0 ].tagName !== "INPUT" ) ||
					( this.length && this[ 0 ].tagName === "INPUT" && (
						this.attr( "type" ) !== "checkbox" && this.attr( "type" ) !== "radio"
					) ) ) {
				return orig.apply( this, arguments );
			}
			if ( !$.ui.checkboxradio ) {
				$.error( "Checkboxradio widget missing" );
			}
			if ( arguments.length === 0 ) {
				return this.checkboxradio( {
					"icon": false
				} );
			}
			return this.checkboxradio.apply( this, arguments );
		};
	} )( $.fn.button );

	$.fn.buttonset = function() {
		if ( !$.ui.controlgroup ) {
			$.error( "Controlgroup widget missing" );
		}
		if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" && arguments[ 2 ] ) {
			return this.controlgroup.apply( this,
				[ arguments[ 0 ], "items.button", arguments[ 2 ] ] );
		}
		if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" ) {
			return this.controlgroup.apply( this, [ arguments[ 0 ], "items.button" ] );
		}
		if ( typeof arguments[ 0 ] === "object" && arguments[ 0 ].items ) {
			arguments[ 0 ].items = {
				button: arguments[ 0 ].items
			};
		}
		return this.controlgroup.apply( this, arguments );
	};
}

var widgetsButton = $.ui.button;


// jscs:disable maximumLineLength
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
/*!
 * jQuery UI Datepicker 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Datepicker
//>>group: Widgets
//>>description: Displays a calendar from an input or inline for selecting dates.
//>>docs: http://api.jqueryui.com/datepicker/
//>>demos: http://jqueryui.com/datepicker/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/datepicker.css
//>>css.theme: ../../themes/base/theme.css



$.extend( $.ui, { datepicker: { version: "1.12.1" } } );

var datepicker_instActive;

function datepicker_getZindex( elem ) {
	var position, value;
	while ( elem.length && elem[ 0 ] !== document ) {

		// Ignore z-index if position is set to a value where z-index is ignored by the browser
		// This makes behavior of this function consistent across browsers
		// WebKit always returns auto if the element is positioned
		position = elem.css( "position" );
		if ( position === "absolute" || position === "relative" || position === "fixed" ) {

			// IE returns 0 when zIndex is not specified
			// other browsers return a string
			// we ignore the case of nested elements with an explicit value of 0
			// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
			value = parseInt( elem.css( "zIndex" ), 10 );
			if ( !isNaN( value ) && value !== 0 ) {
				return value;
			}
		}
		elem = elem.parent();
	}

	return 0;
}
/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
	this._curInst = null; // The current instance in use
	this._keyEvent = false; // If the last event was a key event
	this._disabledInputs = []; // List of date picker inputs that have been disabled
	this._datepickerShowing = false; // True if the popup picker is showing , false if not
	this._inDialog = false; // True if showing within a "dialog", false if not
	this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
	this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
	this._appendClass = "ui-datepicker-append"; // The name of the append marker class
	this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
	this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
	this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
	this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
	this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
	this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[ "" ] = { // Default regional settings
		closeText: "Done", // Display text for close link
		prevText: "Prev", // Display text for previous month link
		nextText: "Next", // Display text for next month link
		currentText: "Today", // Display text for current month link
		monthNames: [ "January","February","March","April","May","June",
			"July","August","September","October","November","December" ], // Names of months for drop-down and formatting
		monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ], // For formatting
		dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ], // For formatting
		dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ], // For formatting
		dayNamesMin: [ "Su","Mo","Tu","We","Th","Fr","Sa" ], // Column headings for days starting at Sunday
		weekHeader: "Wk", // Column header for week of the year
		dateFormat: "mm/dd/yy", // See format options on parseDate
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
		isRTL: false, // True if right-to-left language, false if left-to-right
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
		yearSuffix: "" // Additional text to append to the year in the month headers
	};
	this._defaults = { // Global defaults for all the date picker instances
		showOn: "focus", // "focus" for popup on focus,
			// "button" for trigger button, or "both" for either
		showAnim: "fadeIn", // Name of jQuery animation for popup
		showOptions: {}, // Options for enhanced animations
		defaultDate: null, // Used when field is blank: actual date,
			// +/-number for offset from today, null for today
		appendText: "", // Display text following the input box, e.g. showing the format
		buttonText: "...", // Text for trigger button
		buttonImage: "", // URL for trigger button image
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
		hideIfNoPrevNext: false, // True to hide next/previous month links
			// if not applicable, false to just disable them
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
		gotoCurrent: false, // True if today link goes back to current selection instead
		changeMonth: false, // True if month can be selected directly, false if only prev/next
		changeYear: false, // True if year can be selected directly, false if only prev/next
		yearRange: "c-10:c+10", // Range of years to display in drop-down,
			// either relative to today's year (-nn:+nn), relative to currently displayed year
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
		showOtherMonths: false, // True to show dates in other months, false to leave blank
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
		showWeek: false, // True to show week of the year, false to not show it
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
			// takes a Date and returns the number of the week for it
		shortYearCutoff: "+10", // Short year values < this are in the current century,
			// > this are in the previous century,
			// string value starting with "+" for current year + value
		minDate: null, // The earliest selectable date, or null for no limit
		maxDate: null, // The latest selectable date, or null for no limit
		duration: "fast", // Duration of display/closure
		beforeShowDay: null, // Function that takes a date and returns an array with
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the date picker
		onSelect: null, // Define a callback function when a date is selected
		onChangeMonthYear: null, // Define a callback function when the month or year is changed
		onClose: null, // Define a callback function when the datepicker is closed
		numberOfMonths: 1, // Number of months to show at a time
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
		stepMonths: 1, // Number of months to step back/forward
		stepBigMonths: 12, // Number of months to step back/forward for the big links
		altField: "", // Selector for an alternate field to store selected dates into
		altFormat: "", // The date format to use for the alternate field
		constrainInput: true, // The input is constrained by the current date format
		showButtonPanel: false, // True to show button panel, false to not show it
		autoSize: false, // True to size the input for the date format, false to leave as is
		disabled: false // The initial disabled state
	};
	$.extend( this._defaults, this.regional[ "" ] );
	this.regional.en = $.extend( true, {}, this.regional[ "" ] );
	this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );
	this.dpDiv = datepicker_bindHover( $( "<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) );
}

$.extend( Datepicker.prototype, {
	/* Class name added to elements to indicate already configured with a date picker. */
	markerClassName: "hasDatepicker",

	//Keep track of the maximum number of rows displayed (see #7043)
	maxRows: 4,

	// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/* Override the default settings for all instances of the date picker.
	 * @param  settings  object - the new settings to use as defaults (anonymous object)
	 * @return the manager object
	 */
	setDefaults: function( settings ) {
		datepicker_extendRemove( this._defaults, settings || {} );
		return this;
	},

	/* Attach the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
	 */
	_attachDatepicker: function( target, settings ) {
		var nodeName, inline, inst;
		nodeName = target.nodeName.toLowerCase();
		inline = ( nodeName === "div" || nodeName === "span" );
		if ( !target.id ) {
			this.uuid += 1;
			target.id = "dp" + this.uuid;
		}
		inst = this._newInst( $( target ), inline );
		inst.settings = $.extend( {}, settings || {} );
		if ( nodeName === "input" ) {
			this._connectDatepicker( target, inst );
		} else if ( inline ) {
			this._inlineDatepicker( target, inst );
		}
	},

	/* Create a new instance object. */
	_newInst: function( target, inline ) {
		var id = target[ 0 ].id.replace( /([^A-Za-z0-9_\-])/g, "\\\\$1" ); // escape jQuery meta chars
		return { id: id, input: target, // associated target
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
			drawMonth: 0, drawYear: 0, // month being drawn
			inline: inline, // is datepicker inline or not
			dpDiv: ( !inline ? this.dpDiv : // presentation div
			datepicker_bindHover( $( "<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) ) ) };
	},

	/* Attach the date picker to an input field. */
	_connectDatepicker: function( target, inst ) {
		var input = $( target );
		inst.append = $( [] );
		inst.trigger = $( [] );
		if ( input.hasClass( this.markerClassName ) ) {
			return;
		}
		this._attachments( input, inst );
		input.addClass( this.markerClassName ).on( "keydown", this._doKeyDown ).
			on( "keypress", this._doKeyPress ).on( "keyup", this._doKeyUp );
		this._autoSize( inst );
		$.data( target, "datepicker", inst );

		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
		if ( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
	},

	/* Make attachments based on settings. */
	_attachments: function( input, inst ) {
		var showOn, buttonText, buttonImage,
			appendText = this._get( inst, "appendText" ),
			isRTL = this._get( inst, "isRTL" );

		if ( inst.append ) {
			inst.append.remove();
		}
		if ( appendText ) {
			inst.append = $( "<span class='" + this._appendClass + "'>" + appendText + "</span>" );
			input[ isRTL ? "before" : "after" ]( inst.append );
		}

		input.off( "focus", this._showDatepicker );

		if ( inst.trigger ) {
			inst.trigger.remove();
		}

		showOn = this._get( inst, "showOn" );
		if ( showOn === "focus" || showOn === "both" ) { // pop-up date picker when in the marked field
			input.on( "focus", this._showDatepicker );
		}
		if ( showOn === "button" || showOn === "both" ) { // pop-up date picker when button clicked
			buttonText = this._get( inst, "buttonText" );
			buttonImage = this._get( inst, "buttonImage" );
			inst.trigger = $( this._get( inst, "buttonImageOnly" ) ?
				$( "<img/>" ).addClass( this._triggerClass ).
					attr( { src: buttonImage, alt: buttonText, title: buttonText } ) :
				$( "<button type='button'></button>" ).addClass( this._triggerClass ).
					html( !buttonImage ? buttonText : $( "<img/>" ).attr(
					{ src:buttonImage, alt:buttonText, title:buttonText } ) ) );
			input[ isRTL ? "before" : "after" ]( inst.trigger );
			inst.trigger.on( "click", function() {
				if ( $.datepicker._datepickerShowing && $.datepicker._lastInput === input[ 0 ] ) {
					$.datepicker._hideDatepicker();
				} else if ( $.datepicker._datepickerShowing && $.datepicker._lastInput !== input[ 0 ] ) {
					$.datepicker._hideDatepicker();
					$.datepicker._showDatepicker( input[ 0 ] );
				} else {
					$.datepicker._showDatepicker( input[ 0 ] );
				}
				return false;
			} );
		}
	},

	/* Apply the maximum length for the date format. */
	_autoSize: function( inst ) {
		if ( this._get( inst, "autoSize" ) && !inst.inline ) {
			var findMax, max, maxI, i,
				date = new Date( 2009, 12 - 1, 20 ), // Ensure double digits
				dateFormat = this._get( inst, "dateFormat" );

			if ( dateFormat.match( /[DM]/ ) ) {
				findMax = function( names ) {
					max = 0;
					maxI = 0;
					for ( i = 0; i < names.length; i++ ) {
						if ( names[ i ].length > max ) {
							max = names[ i ].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth( findMax( this._get( inst, ( dateFormat.match( /MM/ ) ?
					"monthNames" : "monthNamesShort" ) ) ) );
				date.setDate( findMax( this._get( inst, ( dateFormat.match( /DD/ ) ?
					"dayNames" : "dayNamesShort" ) ) ) + 20 - date.getDay() );
			}
			inst.input.attr( "size", this._formatDate( inst, date ).length );
		}
	},

	/* Attach an inline date picker to a div. */
	_inlineDatepicker: function( target, inst ) {
		var divSpan = $( target );
		if ( divSpan.hasClass( this.markerClassName ) ) {
			return;
		}
		divSpan.addClass( this.markerClassName ).append( inst.dpDiv );
		$.data( target, "datepicker", inst );
		this._setDate( inst, this._getDefaultDate( inst ), true );
		this._updateDatepicker( inst );
		this._updateAlternate( inst );

		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
		if ( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}

		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
		// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
		inst.dpDiv.css( "display", "block" );
	},

	/* Pop-up the date picker in a "dialog" box.
	 * @param  input element - ignored
	 * @param  date	string or Date - the initial date to display
	 * @param  onSelect  function - the function to call when a date is selected
	 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	 * @param  pos int[2] - coordinates for the dialog's position within the screen or
	 *					event - with x/y coordinates or
	 *					leave empty for default (screen centre)
	 * @return the manager object
	 */
	_dialogDatepicker: function( input, date, onSelect, settings, pos ) {
		var id, browserWidth, browserHeight, scrollX, scrollY,
			inst = this._dialogInst; // internal instance

		if ( !inst ) {
			this.uuid += 1;
			id = "dp" + this.uuid;
			this._dialogInput = $( "<input type='text' id='" + id +
				"' style='position: absolute; top: -100px; width: 0px;'/>" );
			this._dialogInput.on( "keydown", this._doKeyDown );
			$( "body" ).append( this._dialogInput );
			inst = this._dialogInst = this._newInst( this._dialogInput, false );
			inst.settings = {};
			$.data( this._dialogInput[ 0 ], "datepicker", inst );
		}
		datepicker_extendRemove( inst.settings, settings || {} );
		date = ( date && date.constructor === Date ? this._formatDate( inst, date ) : date );
		this._dialogInput.val( date );

		this._pos = ( pos ? ( pos.length ? pos : [ pos.pageX, pos.pageY ] ) : null );
		if ( !this._pos ) {
			browserWidth = document.documentElement.clientWidth;
			browserHeight = document.documentElement.clientHeight;
			scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = // should use actual width/height below
				[ ( browserWidth / 2 ) - 100 + scrollX, ( browserHeight / 2 ) - 150 + scrollY ];
		}

		// Move input on screen for focus, but hidden behind dialog
		this._dialogInput.css( "left", ( this._pos[ 0 ] + 20 ) + "px" ).css( "top", this._pos[ 1 ] + "px" );
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass( this._dialogClass );
		this._showDatepicker( this._dialogInput[ 0 ] );
		if ( $.blockUI ) {
			$.blockUI( this.dpDiv );
		}
		$.data( this._dialogInput[ 0 ], "datepicker", inst );
		return this;
	},

	/* Detach a datepicker from its control.
	 * @param  target	element - the target input field or division or span
	 */
	_destroyDatepicker: function( target ) {
		var nodeName,
			$target = $( target ),
			inst = $.data( target, "datepicker" );

		if ( !$target.hasClass( this.markerClassName ) ) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		$.removeData( target, "datepicker" );
		if ( nodeName === "input" ) {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass( this.markerClassName ).
				off( "focus", this._showDatepicker ).
				off( "keydown", this._doKeyDown ).
				off( "keypress", this._doKeyPress ).
				off( "keyup", this._doKeyUp );
		} else if ( nodeName === "div" || nodeName === "span" ) {
			$target.removeClass( this.markerClassName ).empty();
		}

		if ( datepicker_instActive === inst ) {
			datepicker_instActive = null;
		}
	},

	/* Enable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_enableDatepicker: function( target ) {
		var nodeName, inline,
			$target = $( target ),
			inst = $.data( target, "datepicker" );

		if ( !$target.hasClass( this.markerClassName ) ) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if ( nodeName === "input" ) {
			target.disabled = false;
			inst.trigger.filter( "button" ).
				each( function() { this.disabled = false; } ).end().
				filter( "img" ).css( { opacity: "1.0", cursor: "" } );
		} else if ( nodeName === "div" || nodeName === "span" ) {
			inline = $target.children( "." + this._inlineClass );
			inline.children().removeClass( "ui-state-disabled" );
			inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
				prop( "disabled", false );
		}
		this._disabledInputs = $.map( this._disabledInputs,
			function( value ) { return ( value === target ? null : value ); } ); // delete entry
	},

	/* Disable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_disableDatepicker: function( target ) {
		var nodeName, inline,
			$target = $( target ),
			inst = $.data( target, "datepicker" );

		if ( !$target.hasClass( this.markerClassName ) ) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if ( nodeName === "input" ) {
			target.disabled = true;
			inst.trigger.filter( "button" ).
				each( function() { this.disabled = true; } ).end().
				filter( "img" ).css( { opacity: "0.5", cursor: "default" } );
		} else if ( nodeName === "div" || nodeName === "span" ) {
			inline = $target.children( "." + this._inlineClass );
			inline.children().addClass( "ui-state-disabled" );
			inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
				prop( "disabled", true );
		}
		this._disabledInputs = $.map( this._disabledInputs,
			function( value ) { return ( value === target ? null : value ); } ); // delete entry
		this._disabledInputs[ this._disabledInputs.length ] = target;
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	 * @param  target	element - the target input field or division or span
	 * @return boolean - true if disabled, false if enabled
	 */
	_isDisabledDatepicker: function( target ) {
		if ( !target ) {
			return false;
		}
		for ( var i = 0; i < this._disabledInputs.length; i++ ) {
			if ( this._disabledInputs[ i ] === target ) {
				return true;
			}
		}
		return false;
	},

	/* Retrieve the instance data for the target control.
	 * @param  target  element - the target input field or division or span
	 * @return  object - the associated instance data
	 * @throws  error if a jQuery problem getting data
	 */
	_getInst: function( target ) {
		try {
			return $.data( target, "datepicker" );
		}
		catch ( err ) {
			throw "Missing instance data for this datepicker";
		}
	},

	/* Update or retrieve the settings for a date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 * @param  name	object - the new settings to update or
	 *				string - the name of the setting to change or retrieve,
	 *				when retrieving also "all" for all instance settings or
	 *				"defaults" for all global defaults
	 * @param  value   any - the new value for the setting
	 *				(omit if above is an object or to retrieve a value)
	 */
	_optionDatepicker: function( target, name, value ) {
		var settings, date, minDate, maxDate,
			inst = this._getInst( target );

		if ( arguments.length === 2 && typeof name === "string" ) {
			return ( name === "defaults" ? $.extend( {}, $.datepicker._defaults ) :
				( inst ? ( name === "all" ? $.extend( {}, inst.settings ) :
				this._get( inst, name ) ) : null ) );
		}

		settings = name || {};
		if ( typeof name === "string" ) {
			settings = {};
			settings[ name ] = value;
		}

		if ( inst ) {
			if ( this._curInst === inst ) {
				this._hideDatepicker();
			}

			date = this._getDateDatepicker( target, true );
			minDate = this._getMinMaxDate( inst, "min" );
			maxDate = this._getMinMaxDate( inst, "max" );
			datepicker_extendRemove( inst.settings, settings );

			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
			if ( minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined ) {
				inst.settings.minDate = this._formatDate( inst, minDate );
			}
			if ( maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined ) {
				inst.settings.maxDate = this._formatDate( inst, maxDate );
			}
			if ( "disabled" in settings ) {
				if ( settings.disabled ) {
					this._disableDatepicker( target );
				} else {
					this._enableDatepicker( target );
				}
			}
			this._attachments( $( target ), inst );
			this._autoSize( inst );
			this._setDate( inst, date );
			this._updateAlternate( inst );
			this._updateDatepicker( inst );
		}
	},

	// Change method deprecated
	_changeDatepicker: function( target, name, value ) {
		this._optionDatepicker( target, name, value );
	},

	/* Redraw the date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 */
	_refreshDatepicker: function( target ) {
		var inst = this._getInst( target );
		if ( inst ) {
			this._updateDatepicker( inst );
		}
	},

	/* Set the dates for a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  date	Date - the new date
	 */
	_setDateDatepicker: function( target, date ) {
		var inst = this._getInst( target );
		if ( inst ) {
			this._setDate( inst, date );
			this._updateDatepicker( inst );
			this._updateAlternate( inst );
		}
	},

	/* Get the date(s) for the first entry in a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  noDefault boolean - true if no default date is to be used
	 * @return Date - the current date
	 */
	_getDateDatepicker: function( target, noDefault ) {
		var inst = this._getInst( target );
		if ( inst && !inst.inline ) {
			this._setDateFromField( inst, noDefault );
		}
		return ( inst ? this._getDate( inst ) : null );
	},

	/* Handle keystrokes. */
	_doKeyDown: function( event ) {
		var onSelect, dateStr, sel,
			inst = $.datepicker._getInst( event.target ),
			handled = true,
			isRTL = inst.dpDiv.is( ".ui-datepicker-rtl" );

		inst._keyEvent = true;
		if ( $.datepicker._datepickerShowing ) {
			switch ( event.keyCode ) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; // hide on tab out
				case 13: sel = $( "td." + $.datepicker._dayOverClass + ":not(." +
									$.datepicker._currentClass + ")", inst.dpDiv );
						if ( sel[ 0 ] ) {
							$.datepicker._selectDay( event.target, inst.selectedMonth, inst.selectedYear, sel[ 0 ] );
						}

						onSelect = $.datepicker._get( inst, "onSelect" );
						if ( onSelect ) {
							dateStr = $.datepicker._formatDate( inst );

							// Trigger custom callback
							onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );
						} else {
							$.datepicker._hideDatepicker();
						}

						return false; // don't submit the form
				case 27: $.datepicker._hideDatepicker();
						break; // hide on escape
				case 33: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
							-$.datepicker._get( inst, "stepBigMonths" ) :
							-$.datepicker._get( inst, "stepMonths" ) ), "M" );
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
							+$.datepicker._get( inst, "stepBigMonths" ) :
							+$.datepicker._get( inst, "stepMonths" ) ), "M" );
						break; // next month/year on page down/+ ctrl
				case 35: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._clearDate( event.target );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._gotoToday( event.target );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, ( isRTL ? +1 : -1 ), "D" );
						}
						handled = event.ctrlKey || event.metaKey;

						// -1 day on ctrl or command +left
						if ( event.originalEvent.altKey ) {
							$.datepicker._adjustDate( event.target, ( event.ctrlKey ?
								-$.datepicker._get( inst, "stepBigMonths" ) :
								-$.datepicker._get( inst, "stepMonths" ) ), "M" );
						}

						// next month/year on alt +left on Mac
						break;
				case 38: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, -7, "D" );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, ( isRTL ? -1 : +1 ), "D" );
						}
						handled = event.ctrlKey || event.metaKey;

						// +1 day on ctrl or command +right
						if ( event.originalEvent.altKey ) {
							$.datepicker._adjustDate( event.target, ( event.ctrlKey ?
								+$.datepicker._get( inst, "stepBigMonths" ) :
								+$.datepicker._get( inst, "stepMonths" ) ), "M" );
						}

						// next month/year on alt +right
						break;
				case 40: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, +7, "D" );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		} else if ( event.keyCode === 36 && event.ctrlKey ) { // display the date picker on ctrl+home
			$.datepicker._showDatepicker( this );
		} else {
			handled = false;
		}

		if ( handled ) {
			event.preventDefault();
			event.stopPropagation();
		}
	},

	/* Filter entered characters - based on date format. */
	_doKeyPress: function( event ) {
		var chars, chr,
			inst = $.datepicker._getInst( event.target );

		if ( $.datepicker._get( inst, "constrainInput" ) ) {
			chars = $.datepicker._possibleChars( $.datepicker._get( inst, "dateFormat" ) );
			chr = String.fromCharCode( event.charCode == null ? event.keyCode : event.charCode );
			return event.ctrlKey || event.metaKey || ( chr < " " || !chars || chars.indexOf( chr ) > -1 );
		}
	},

	/* Synchronise manual entry and field/alternate field. */
	_doKeyUp: function( event ) {
		var date,
			inst = $.datepicker._getInst( event.target );

		if ( inst.input.val() !== inst.lastVal ) {
			try {
				date = $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
					( inst.input ? inst.input.val() : null ),
					$.datepicker._getFormatConfig( inst ) );

				if ( date ) { // only if valid
					$.datepicker._setDateFromField( inst );
					$.datepicker._updateAlternate( inst );
					$.datepicker._updateDatepicker( inst );
				}
			}
			catch ( err ) {
			}
		}
		return true;
	},

	/* Pop-up the date picker for a given input field.
	 * If false returned from beforeShow event handler do not show.
	 * @param  input  element - the input field attached to the date picker or
	 *					event - if triggered by focus
	 */
	_showDatepicker: function( input ) {
		input = input.target || input;
		if ( input.nodeName.toLowerCase() !== "input" ) { // find from button/image trigger
			input = $( "input", input.parentNode )[ 0 ];
		}

		if ( $.datepicker._isDisabledDatepicker( input ) || $.datepicker._lastInput === input ) { // already here
			return;
		}

		var inst, beforeShow, beforeShowSettings, isFixed,
			offset, showAnim, duration;

		inst = $.datepicker._getInst( input );
		if ( $.datepicker._curInst && $.datepicker._curInst !== inst ) {
			$.datepicker._curInst.dpDiv.stop( true, true );
			if ( inst && $.datepicker._datepickerShowing ) {
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[ 0 ] );
			}
		}

		beforeShow = $.datepicker._get( inst, "beforeShow" );
		beforeShowSettings = beforeShow ? beforeShow.apply( input, [ input, inst ] ) : {};
		if ( beforeShowSettings === false ) {
			return;
		}
		datepicker_extendRemove( inst.settings, beforeShowSettings );

		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField( inst );

		if ( $.datepicker._inDialog ) { // hide cursor
			input.value = "";
		}
		if ( !$.datepicker._pos ) { // position below input
			$.datepicker._pos = $.datepicker._findPos( input );
			$.datepicker._pos[ 1 ] += input.offsetHeight; // add the height
		}

		isFixed = false;
		$( input ).parents().each( function() {
			isFixed |= $( this ).css( "position" ) === "fixed";
			return !isFixed;
		} );

		offset = { left: $.datepicker._pos[ 0 ], top: $.datepicker._pos[ 1 ] };
		$.datepicker._pos = null;

		//to avoid flashes on Firefox
		inst.dpDiv.empty();

		// determine sizing offscreen
		inst.dpDiv.css( { position: "absolute", display: "block", top: "-1000px" } );
		$.datepicker._updateDatepicker( inst );

		// fix width for dynamic number of date pickers
		// and adjust position before showing
		offset = $.datepicker._checkOffset( inst, offset, isFixed );
		inst.dpDiv.css( { position: ( $.datepicker._inDialog && $.blockUI ?
			"static" : ( isFixed ? "fixed" : "absolute" ) ), display: "none",
			left: offset.left + "px", top: offset.top + "px" } );

		if ( !inst.inline ) {
			showAnim = $.datepicker._get( inst, "showAnim" );
			duration = $.datepicker._get( inst, "duration" );
			inst.dpDiv.css( "z-index", datepicker_getZindex( $( input ) ) + 1 );
			$.datepicker._datepickerShowing = true;

			if ( $.effects && $.effects.effect[ showAnim ] ) {
				inst.dpDiv.show( showAnim, $.datepicker._get( inst, "showOptions" ), duration );
			} else {
				inst.dpDiv[ showAnim || "show" ]( showAnim ? duration : null );
			}

			if ( $.datepicker._shouldFocusInput( inst ) ) {
				inst.input.trigger( "focus" );
			}

			$.datepicker._curInst = inst;
		}
	},

	/* Generate the date picker content. */
	_updateDatepicker: function( inst ) {
		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		datepicker_instActive = inst; // for delegate hover events
		inst.dpDiv.empty().append( this._generateHTML( inst ) );
		this._attachHandlers( inst );

		var origyearshtml,
			numMonths = this._getNumberOfMonths( inst ),
			cols = numMonths[ 1 ],
			width = 17,
			activeCell = inst.dpDiv.find( "." + this._dayOverClass + " a" );

		if ( activeCell.length > 0 ) {
			datepicker_handleMouseover.apply( activeCell.get( 0 ) );
		}

		inst.dpDiv.removeClass( "ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4" ).width( "" );
		if ( cols > 1 ) {
			inst.dpDiv.addClass( "ui-datepicker-multi-" + cols ).css( "width", ( width * cols ) + "em" );
		}
		inst.dpDiv[ ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ? "add" : "remove" ) +
			"Class" ]( "ui-datepicker-multi" );
		inst.dpDiv[ ( this._get( inst, "isRTL" ) ? "add" : "remove" ) +
			"Class" ]( "ui-datepicker-rtl" );

		if ( inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
			inst.input.trigger( "focus" );
		}

		// Deffered render of the years select (to avoid flashes on Firefox)
		if ( inst.yearshtml ) {
			origyearshtml = inst.yearshtml;
			setTimeout( function() {

				//assure that inst.yearshtml didn't change.
				if ( origyearshtml === inst.yearshtml && inst.yearshtml ) {
					inst.dpDiv.find( "select.ui-datepicker-year:first" ).replaceWith( inst.yearshtml );
				}
				origyearshtml = inst.yearshtml = null;
			}, 0 );
		}
	},

	// #6694 - don't focus the input if it's already focused
	// this breaks the change event in IE
	// Support: IE and jQuery <1.9
	_shouldFocusInput: function( inst ) {
		return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
	},

	/* Check positioning to remain on screen. */
	_checkOffset: function( inst, offset, isFixed ) {
		var dpWidth = inst.dpDiv.outerWidth(),
			dpHeight = inst.dpDiv.outerHeight(),
			inputWidth = inst.input ? inst.input.outerWidth() : 0,
			inputHeight = inst.input ? inst.input.outerHeight() : 0,
			viewWidth = document.documentElement.clientWidth + ( isFixed ? 0 : $( document ).scrollLeft() ),
			viewHeight = document.documentElement.clientHeight + ( isFixed ? 0 : $( document ).scrollTop() );

		offset.left -= ( this._get( inst, "isRTL" ) ? ( dpWidth - inputWidth ) : 0 );
		offset.left -= ( isFixed && offset.left === inst.input.offset().left ) ? $( document ).scrollLeft() : 0;
		offset.top -= ( isFixed && offset.top === ( inst.input.offset().top + inputHeight ) ) ? $( document ).scrollTop() : 0;

		// Now check if datepicker is showing outside window viewport - move to a better place if so.
		offset.left -= Math.min( offset.left, ( offset.left + dpWidth > viewWidth && viewWidth > dpWidth ) ?
			Math.abs( offset.left + dpWidth - viewWidth ) : 0 );
		offset.top -= Math.min( offset.top, ( offset.top + dpHeight > viewHeight && viewHeight > dpHeight ) ?
			Math.abs( dpHeight + inputHeight ) : 0 );

		return offset;
	},

	/* Find an object's position on the screen. */
	_findPos: function( obj ) {
		var position,
			inst = this._getInst( obj ),
			isRTL = this._get( inst, "isRTL" );

		while ( obj && ( obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden( obj ) ) ) {
			obj = obj[ isRTL ? "previousSibling" : "nextSibling" ];
		}

		position = $( obj ).offset();
		return [ position.left, position.top ];
	},

	/* Hide the date picker from view.
	 * @param  input  element - the input field attached to the date picker
	 */
	_hideDatepicker: function( input ) {
		var showAnim, duration, postProcess, onClose,
			inst = this._curInst;

		if ( !inst || ( input && inst !== $.data( input, "datepicker" ) ) ) {
			return;
		}

		if ( this._datepickerShowing ) {
			showAnim = this._get( inst, "showAnim" );
			duration = this._get( inst, "duration" );
			postProcess = function() {
				$.datepicker._tidyDialog( inst );
			};

			// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
				inst.dpDiv.hide( showAnim, $.datepicker._get( inst, "showOptions" ), duration, postProcess );
			} else {
				inst.dpDiv[ ( showAnim === "slideDown" ? "slideUp" :
					( showAnim === "fadeIn" ? "fadeOut" : "hide" ) ) ]( ( showAnim ? duration : null ), postProcess );
			}

			if ( !showAnim ) {
				postProcess();
			}
			this._datepickerShowing = false;

			onClose = this._get( inst, "onClose" );
			if ( onClose ) {
				onClose.apply( ( inst.input ? inst.input[ 0 ] : null ), [ ( inst.input ? inst.input.val() : "" ), inst ] );
			}

			this._lastInput = null;
			if ( this._inDialog ) {
				this._dialogInput.css( { position: "absolute", left: "0", top: "-100px" } );
				if ( $.blockUI ) {
					$.unblockUI();
					$( "body" ).append( this.dpDiv );
				}
			}
			this._inDialog = false;
		}
	},

	/* Tidy up after a dialog display. */
	_tidyDialog: function( inst ) {
		inst.dpDiv.removeClass( this._dialogClass ).off( ".ui-datepicker-calendar" );
	},

	/* Close date picker if clicked elsewhere. */
	_checkExternalClick: function( event ) {
		if ( !$.datepicker._curInst ) {
			return;
		}

		var $target = $( event.target ),
			inst = $.datepicker._getInst( $target[ 0 ] );

		if ( ( ( $target[ 0 ].id !== $.datepicker._mainDivId &&
				$target.parents( "#" + $.datepicker._mainDivId ).length === 0 &&
				!$target.hasClass( $.datepicker.markerClassName ) &&
				!$target.closest( "." + $.datepicker._triggerClass ).length &&
				$.datepicker._datepickerShowing && !( $.datepicker._inDialog && $.blockUI ) ) ) ||
			( $target.hasClass( $.datepicker.markerClassName ) && $.datepicker._curInst !== inst ) ) {
				$.datepicker._hideDatepicker();
		}
	},

	/* Adjust one of the date sub-fields. */
	_adjustDate: function( id, offset, period ) {
		var target = $( id ),
			inst = this._getInst( target[ 0 ] );

		if ( this._isDisabledDatepicker( target[ 0 ] ) ) {
			return;
		}
		this._adjustInstDate( inst, offset +
			( period === "M" ? this._get( inst, "showCurrentAtPos" ) : 0 ), // undo positioning
			period );
		this._updateDatepicker( inst );
	},

	/* Action for current link. */
	_gotoToday: function( id ) {
		var date,
			target = $( id ),
			inst = this._getInst( target[ 0 ] );

		if ( this._get( inst, "gotoCurrent" ) && inst.currentDay ) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		} else {
			date = new Date();
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
		}
		this._notifyChange( inst );
		this._adjustDate( target );
	},

	/* Action for selecting a new month/year. */
	_selectMonthYear: function( id, select, period ) {
		var target = $( id ),
			inst = this._getInst( target[ 0 ] );

		inst[ "selected" + ( period === "M" ? "Month" : "Year" ) ] =
		inst[ "draw" + ( period === "M" ? "Month" : "Year" ) ] =
			parseInt( select.options[ select.selectedIndex ].value, 10 );

		this._notifyChange( inst );
		this._adjustDate( target );
	},

	/* Action for selecting a day. */
	_selectDay: function( id, month, year, td ) {
		var inst,
			target = $( id );

		if ( $( td ).hasClass( this._unselectableClass ) || this._isDisabledDatepicker( target[ 0 ] ) ) {
			return;
		}

		inst = this._getInst( target[ 0 ] );
		inst.selectedDay = inst.currentDay = $( "a", td ).html();
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;
		this._selectDate( id, this._formatDate( inst,
			inst.currentDay, inst.currentMonth, inst.currentYear ) );
	},

	/* Erase the input field and hide the date picker. */
	_clearDate: function( id ) {
		var target = $( id );
		this._selectDate( target, "" );
	},

	/* Update the input field with the selected date. */
	_selectDate: function( id, dateStr ) {
		var onSelect,
			target = $( id ),
			inst = this._getInst( target[ 0 ] );

		dateStr = ( dateStr != null ? dateStr : this._formatDate( inst ) );
		if ( inst.input ) {
			inst.input.val( dateStr );
		}
		this._updateAlternate( inst );

		onSelect = this._get( inst, "onSelect" );
		if ( onSelect ) {
			onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );  // trigger custom callback
		} else if ( inst.input ) {
			inst.input.trigger( "change" ); // fire the change event
		}

		if ( inst.inline ) {
			this._updateDatepicker( inst );
		} else {
			this._hideDatepicker();
			this._lastInput = inst.input[ 0 ];
			if ( typeof( inst.input[ 0 ] ) !== "object" ) {
				inst.input.trigger( "focus" ); // restore focus
			}
			this._lastInput = null;
		}
	},

	/* Update any alternate field to synchronise with the main field. */
	_updateAlternate: function( inst ) {
		var altFormat, date, dateStr,
			altField = this._get( inst, "altField" );

		if ( altField ) { // update alternate field too
			altFormat = this._get( inst, "altFormat" ) || this._get( inst, "dateFormat" );
			date = this._getDate( inst );
			dateStr = this.formatDate( altFormat, date, this._getFormatConfig( inst ) );
			$( altField ).val( dateStr );
		}
	},

	/* Set as beforeShowDay function to prevent selection of weekends.
	 * @param  date  Date - the date to customise
	 * @return [boolean, string] - is this date selectable?, what is its CSS class?
	 */
	noWeekends: function( date ) {
		var day = date.getDay();
		return [ ( day > 0 && day < 6 ), "" ];
	},

	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	 * @param  date  Date - the date to get the week for
	 * @return  number - the number of the week within the year that contains this date
	 */
	iso8601Week: function( date ) {
		var time,
			checkDate = new Date( date.getTime() );

		// Find Thursday of this week starting on Monday
		checkDate.setDate( checkDate.getDate() + 4 - ( checkDate.getDay() || 7 ) );

		time = checkDate.getTime();
		checkDate.setMonth( 0 ); // Compare with Jan 1
		checkDate.setDate( 1 );
		return Math.floor( Math.round( ( time - checkDate ) / 86400000 ) / 7 ) + 1;
	},

	/* Parse a string value into a date object.
	 * See formatDate below for the possible formats.
	 *
	 * @param  format string - the expected format of the date
	 * @param  value string - the date in the above format
	 * @param  settings Object - attributes include:
	 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  Date - the extracted date value or null if value is blank
	 */
	parseDate: function( format, value, settings ) {
		if ( format == null || value == null ) {
			throw "Invalid arguments";
		}

		value = ( typeof value === "object" ? value.toString() : value + "" );
		if ( value === "" ) {
			return null;
		}

		var iFormat, dim, extra,
			iValue = 0,
			shortYearCutoffTemp = ( settings ? settings.shortYearCutoff : null ) || this._defaults.shortYearCutoff,
			shortYearCutoff = ( typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
				new Date().getFullYear() % 100 + parseInt( shortYearCutoffTemp, 10 ) ),
			dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
			dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
			monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
			monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,
			year = -1,
			month = -1,
			day = -1,
			doy = -1,
			literal = false,
			date,

			// Check whether a format character is doubled
			lookAhead = function( match ) {
				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
				if ( matches ) {
					iFormat++;
				}
				return matches;
			},

			// Extract a number from the string value
			getNumber = function( match ) {
				var isDoubled = lookAhead( match ),
					size = ( match === "@" ? 14 : ( match === "!" ? 20 :
					( match === "y" && isDoubled ? 4 : ( match === "o" ? 3 : 2 ) ) ) ),
					minSize = ( match === "y" ? size : 1 ),
					digits = new RegExp( "^\\d{" + minSize + "," + size + "}" ),
					num = value.substring( iValue ).match( digits );
				if ( !num ) {
					throw "Missing number at position " + iValue;
				}
				iValue += num[ 0 ].length;
				return parseInt( num[ 0 ], 10 );
			},

			// Extract a name from the string value and convert to an index
			getName = function( match, shortNames, longNames ) {
				var index = -1,
					names = $.map( lookAhead( match ) ? longNames : shortNames, function( v, k ) {
						return [ [ k, v ] ];
					} ).sort( function( a, b ) {
						return -( a[ 1 ].length - b[ 1 ].length );
					} );

				$.each( names, function( i, pair ) {
					var name = pair[ 1 ];
					if ( value.substr( iValue, name.length ).toLowerCase() === name.toLowerCase() ) {
						index = pair[ 0 ];
						iValue += name.length;
						return false;
					}
				} );
				if ( index !== -1 ) {
					return index + 1;
				} else {
					throw "Unknown name at position " + iValue;
				}
			},

			// Confirm that a literal character matches the string value
			checkLiteral = function() {
				if ( value.charAt( iValue ) !== format.charAt( iFormat ) ) {
					throw "Unexpected literal at position " + iValue;
				}
				iValue++;
			};

		for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
			if ( literal ) {
				if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
					literal = false;
				} else {
					checkLiteral();
				}
			} else {
				switch ( format.charAt( iFormat ) ) {
					case "d":
						day = getNumber( "d" );
						break;
					case "D":
						getName( "D", dayNamesShort, dayNames );
						break;
					case "o":
						doy = getNumber( "o" );
						break;
					case "m":
						month = getNumber( "m" );
						break;
					case "M":
						month = getName( "M", monthNamesShort, monthNames );
						break;
					case "y":
						year = getNumber( "y" );
						break;
					case "@":
						date = new Date( getNumber( "@" ) );
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "!":
						date = new Date( ( getNumber( "!" ) - this._ticksTo1970 ) / 10000 );
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if ( lookAhead( "'" ) ) {
							checkLiteral();
						} else {
							literal = true;
						}
						break;
					default:
						checkLiteral();
				}
			}
		}

		if ( iValue < value.length ) {
			extra = value.substr( iValue );
			if ( !/^\s+/.test( extra ) ) {
				throw "Extra/unparsed characters found in date: " + extra;
			}
		}

		if ( year === -1 ) {
			year = new Date().getFullYear();
		} else if ( year < 100 ) {
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				( year <= shortYearCutoff ? 0 : -100 );
		}

		if ( doy > -1 ) {
			month = 1;
			day = doy;
			do {
				dim = this._getDaysInMonth( year, month - 1 );
				if ( day <= dim ) {
					break;
				}
				month++;
				day -= dim;
			} while ( true );
		}

		date = this._daylightSavingAdjust( new Date( year, month - 1, day ) );
		if ( date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day ) {
			throw "Invalid date"; // E.g. 31/02/00
		}
		return date;
	},

	/* Standard date formats. */
	ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
	COOKIE: "D, dd M yy",
	ISO_8601: "yy-mm-dd",
	RFC_822: "D, d M y",
	RFC_850: "DD, dd-M-y",
	RFC_1036: "D, d M y",
	RFC_1123: "D, d M yy",
	RFC_2822: "D, d M yy",
	RSS: "D, d M y", // RFC 822
	TICKS: "!",
	TIMESTAMP: "@",
	W3C: "yy-mm-dd", // ISO 8601

	_ticksTo1970: ( ( ( 1970 - 1 ) * 365 + Math.floor( 1970 / 4 ) - Math.floor( 1970 / 100 ) +
		Math.floor( 1970 / 400 ) ) * 24 * 60 * 60 * 10000000 ),

	/* Format a date object into a string value.
	 * The format can be combinations of the following:
	 * d  - day of month (no leading zero)
	 * dd - day of month (two digit)
	 * o  - day of year (no leading zeros)
	 * oo - day of year (three digit)
	 * D  - day name short
	 * DD - day name long
	 * m  - month of year (no leading zero)
	 * mm - month of year (two digit)
	 * M  - month name short
	 * MM - month name long
	 * y  - year (two digit)
	 * yy - year (four digit)
	 * @ - Unix timestamp (ms since 01/01/1970)
	 * ! - Windows ticks (100ns since 01/01/0001)
	 * "..." - literal text
	 * '' - single quote
	 *
	 * @param  format string - the desired format of the date
	 * @param  date Date - the date value to format
	 * @param  settings Object - attributes include:
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  string - the date in the above format
	 */
	formatDate: function( format, date, settings ) {
		if ( !date ) {
			return "";
		}

		var iFormat,
			dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
			dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
			monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
			monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,

			// Check whether a format character is doubled
			lookAhead = function( match ) {
				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
				if ( matches ) {
					iFormat++;
				}
				return matches;
			},

			// Format a number, with leading zero if necessary
			formatNumber = function( match, value, len ) {
				var num = "" + value;
				if ( lookAhead( match ) ) {
					while ( num.length < len ) {
						num = "0" + num;
					}
				}
				return num;
			},

			// Format a name, short or long as requested
			formatName = function( match, value, shortNames, longNames ) {
				return ( lookAhead( match ) ? longNames[ value ] : shortNames[ value ] );
			},
			output = "",
			literal = false;

		if ( date ) {
			for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
				if ( literal ) {
					if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
						literal = false;
					} else {
						output += format.charAt( iFormat );
					}
				} else {
					switch ( format.charAt( iFormat ) ) {
						case "d":
							output += formatNumber( "d", date.getDate(), 2 );
							break;
						case "D":
							output += formatName( "D", date.getDay(), dayNamesShort, dayNames );
							break;
						case "o":
							output += formatNumber( "o",
								Math.round( ( new Date( date.getFullYear(), date.getMonth(), date.getDate() ).getTime() - new Date( date.getFullYear(), 0, 0 ).getTime() ) / 86400000 ), 3 );
							break;
						case "m":
							output += formatNumber( "m", date.getMonth() + 1, 2 );
							break;
						case "M":
							output += formatName( "M", date.getMonth(), monthNamesShort, monthNames );
							break;
						case "y":
							output += ( lookAhead( "y" ) ? date.getFullYear() :
								( date.getFullYear() % 100 < 10 ? "0" : "" ) + date.getFullYear() % 100 );
							break;
						case "@":
							output += date.getTime();
							break;
						case "!":
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if ( lookAhead( "'" ) ) {
								output += "'";
							} else {
								literal = true;
							}
							break;
						default:
							output += format.charAt( iFormat );
					}
				}
			}
		}
		return output;
	},

	/* Extract all possible characters from the date format. */
	_possibleChars: function( format ) {
		var iFormat,
			chars = "",
			literal = false,

			// Check whether a format character is doubled
			lookAhead = function( match ) {
				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
				if ( matches ) {
					iFormat++;
				}
				return matches;
			};

		for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
			if ( literal ) {
				if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
					literal = false;
				} else {
					chars += format.charAt( iFormat );
				}
			} else {
				switch ( format.charAt( iFormat ) ) {
					case "d": case "m": case "y": case "@":
						chars += "0123456789";
						break;
					case "D": case "M":
						return null; // Accept anything
					case "'":
						if ( lookAhead( "'" ) ) {
							chars += "'";
						} else {
							literal = true;
						}
						break;
					default:
						chars += format.charAt( iFormat );
				}
			}
		}
		return chars;
	},

	/* Get a setting value, defaulting if necessary. */
	_get: function( inst, name ) {
		return inst.settings[ name ] !== undefined ?
			inst.settings[ name ] : this._defaults[ name ];
	},

	/* Parse existing date and initialise date picker. */
	_setDateFromField: function( inst, noDefault ) {
		if ( inst.input.val() === inst.lastVal ) {
			return;
		}

		var dateFormat = this._get( inst, "dateFormat" ),
			dates = inst.lastVal = inst.input ? inst.input.val() : null,
			defaultDate = this._getDefaultDate( inst ),
			date = defaultDate,
			settings = this._getFormatConfig( inst );

		try {
			date = this.parseDate( dateFormat, dates, settings ) || defaultDate;
		} catch ( event ) {
			dates = ( noDefault ? "" : dates );
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = ( dates ? date.getDate() : 0 );
		inst.currentMonth = ( dates ? date.getMonth() : 0 );
		inst.currentYear = ( dates ? date.getFullYear() : 0 );
		this._adjustInstDate( inst );
	},

	/* Retrieve the default date shown on opening. */
	_getDefaultDate: function( inst ) {
		return this._restrictMinMax( inst,
			this._determineDate( inst, this._get( inst, "defaultDate" ), new Date() ) );
	},

	/* A date may be specified as an exact value or a relative one. */
	_determineDate: function( inst, date, defaultDate ) {
		var offsetNumeric = function( offset ) {
				var date = new Date();
				date.setDate( date.getDate() + offset );
				return date;
			},
			offsetString = function( offset ) {
				try {
					return $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
						offset, $.datepicker._getFormatConfig( inst ) );
				}
				catch ( e ) {

					// Ignore
				}

				var date = ( offset.toLowerCase().match( /^c/ ) ?
					$.datepicker._getDate( inst ) : null ) || new Date(),
					year = date.getFullYear(),
					month = date.getMonth(),
					day = date.getDate(),
					pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
					matches = pattern.exec( offset );

				while ( matches ) {
					switch ( matches[ 2 ] || "d" ) {
						case "d" : case "D" :
							day += parseInt( matches[ 1 ], 10 ); break;
						case "w" : case "W" :
							day += parseInt( matches[ 1 ], 10 ) * 7; break;
						case "m" : case "M" :
							month += parseInt( matches[ 1 ], 10 );
							day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
							break;
						case "y": case "Y" :
							year += parseInt( matches[ 1 ], 10 );
							day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
							break;
					}
					matches = pattern.exec( offset );
				}
				return new Date( year, month, day );
			},
			newDate = ( date == null || date === "" ? defaultDate : ( typeof date === "string" ? offsetString( date ) :
				( typeof date === "number" ? ( isNaN( date ) ? defaultDate : offsetNumeric( date ) ) : new Date( date.getTime() ) ) ) );

		newDate = ( newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate );
		if ( newDate ) {
			newDate.setHours( 0 );
			newDate.setMinutes( 0 );
			newDate.setSeconds( 0 );
			newDate.setMilliseconds( 0 );
		}
		return this._daylightSavingAdjust( newDate );
	},

	/* Handle switch to/from daylight saving.
	 * Hours may be non-zero on daylight saving cut-over:
	 * > 12 when midnight changeover, but then cannot generate
	 * midnight datetime, so jump to 1AM, otherwise reset.
	 * @param  date  (Date) the date to check
	 * @return  (Date) the corrected date
	 */
	_daylightSavingAdjust: function( date ) {
		if ( !date ) {
			return null;
		}
		date.setHours( date.getHours() > 12 ? date.getHours() + 2 : 0 );
		return date;
	},

	/* Set the date(s) directly. */
	_setDate: function( inst, date, noChange ) {
		var clear = !date,
			origMonth = inst.selectedMonth,
			origYear = inst.selectedYear,
			newDate = this._restrictMinMax( inst, this._determineDate( inst, date, new Date() ) );

		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		if ( ( origMonth !== inst.selectedMonth || origYear !== inst.selectedYear ) && !noChange ) {
			this._notifyChange( inst );
		}
		this._adjustInstDate( inst );
		if ( inst.input ) {
			inst.input.val( clear ? "" : this._formatDate( inst ) );
		}
	},

	/* Retrieve the date(s) directly. */
	_getDate: function( inst ) {
		var startDate = ( !inst.currentYear || ( inst.input && inst.input.val() === "" ) ? null :
			this._daylightSavingAdjust( new Date(
			inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
			return startDate;
	},

	/* Attach the onxxx handlers.  These are declared statically so
	 * they work with static code transformers like Caja.
	 */
	_attachHandlers: function( inst ) {
		var stepMonths = this._get( inst, "stepMonths" ),
			id = "#" + inst.id.replace( /\\\\/g, "\\" );
		inst.dpDiv.find( "[data-handler]" ).map( function() {
			var handler = {
				prev: function() {
					$.datepicker._adjustDate( id, -stepMonths, "M" );
				},
				next: function() {
					$.datepicker._adjustDate( id, +stepMonths, "M" );
				},
				hide: function() {
					$.datepicker._hideDatepicker();
				},
				today: function() {
					$.datepicker._gotoToday( id );
				},
				selectDay: function() {
					$.datepicker._selectDay( id, +this.getAttribute( "data-month" ), +this.getAttribute( "data-year" ), this );
					return false;
				},
				selectMonth: function() {
					$.datepicker._selectMonthYear( id, this, "M" );
					return false;
				},
				selectYear: function() {
					$.datepicker._selectMonthYear( id, this, "Y" );
					return false;
				}
			};
			$( this ).on( this.getAttribute( "data-event" ), handler[ this.getAttribute( "data-handler" ) ] );
		} );
	},

	/* Generate the HTML for the current state of the date picker. */
	_generateHTML: function( inst ) {
		var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
			controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
			monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
			selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
			cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
			printDate, dRow, tbody, daySettings, otherMonth, unselectable,
			tempDate = new Date(),
			today = this._daylightSavingAdjust(
				new Date( tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate() ) ), // clear time
			isRTL = this._get( inst, "isRTL" ),
			showButtonPanel = this._get( inst, "showButtonPanel" ),
			hideIfNoPrevNext = this._get( inst, "hideIfNoPrevNext" ),
			navigationAsDateFormat = this._get( inst, "navigationAsDateFormat" ),
			numMonths = this._getNumberOfMonths( inst ),
			showCurrentAtPos = this._get( inst, "showCurrentAtPos" ),
			stepMonths = this._get( inst, "stepMonths" ),
			isMultiMonth = ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ),
			currentDate = this._daylightSavingAdjust( ( !inst.currentDay ? new Date( 9999, 9, 9 ) :
				new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) ),
			minDate = this._getMinMaxDate( inst, "min" ),
			maxDate = this._getMinMaxDate( inst, "max" ),
			drawMonth = inst.drawMonth - showCurrentAtPos,
			drawYear = inst.drawYear;

		if ( drawMonth < 0 ) {
			drawMonth += 12;
			drawYear--;
		}
		if ( maxDate ) {
			maxDraw = this._daylightSavingAdjust( new Date( maxDate.getFullYear(),
				maxDate.getMonth() - ( numMonths[ 0 ] * numMonths[ 1 ] ) + 1, maxDate.getDate() ) );
			maxDraw = ( minDate && maxDraw < minDate ? minDate : maxDraw );
			while ( this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 ) ) > maxDraw ) {
				drawMonth--;
				if ( drawMonth < 0 ) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;

		prevText = this._get( inst, "prevText" );
		prevText = ( !navigationAsDateFormat ? prevText : this.formatDate( prevText,
			this._daylightSavingAdjust( new Date( drawYear, drawMonth - stepMonths, 1 ) ),
			this._getFormatConfig( inst ) ) );

		prev = ( this._canAdjustMonth( inst, -1, drawYear, drawMonth ) ?
			"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
			" title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w" ) + "'>" + prevText + "</span></a>" :
			( hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w" ) + "'>" + prevText + "</span></a>" ) );

		nextText = this._get( inst, "nextText" );
		nextText = ( !navigationAsDateFormat ? nextText : this.formatDate( nextText,
			this._daylightSavingAdjust( new Date( drawYear, drawMonth + stepMonths, 1 ) ),
			this._getFormatConfig( inst ) ) );

		next = ( this._canAdjustMonth( inst, +1, drawYear, drawMonth ) ?
			"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
			" title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e" ) + "'>" + nextText + "</span></a>" :
			( hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e" ) + "'>" + nextText + "</span></a>" ) );

		currentText = this._get( inst, "currentText" );
		gotoDate = ( this._get( inst, "gotoCurrent" ) && inst.currentDay ? currentDate : today );
		currentText = ( !navigationAsDateFormat ? currentText :
			this.formatDate( currentText, gotoDate, this._getFormatConfig( inst ) ) );

		controls = ( !inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
			this._get( inst, "closeText" ) + "</button>" : "" );

		buttonPanel = ( showButtonPanel ) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + ( isRTL ? controls : "" ) +
			( this._isInRange( inst, gotoDate ) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
			">" + currentText + "</button>" : "" ) + ( isRTL ? "" : controls ) + "</div>" : "";

		firstDay = parseInt( this._get( inst, "firstDay" ), 10 );
		firstDay = ( isNaN( firstDay ) ? 0 : firstDay );

		showWeek = this._get( inst, "showWeek" );
		dayNames = this._get( inst, "dayNames" );
		dayNamesMin = this._get( inst, "dayNamesMin" );
		monthNames = this._get( inst, "monthNames" );
		monthNamesShort = this._get( inst, "monthNamesShort" );
		beforeShowDay = this._get( inst, "beforeShowDay" );
		showOtherMonths = this._get( inst, "showOtherMonths" );
		selectOtherMonths = this._get( inst, "selectOtherMonths" );
		defaultDate = this._getDefaultDate( inst );
		html = "";

		for ( row = 0; row < numMonths[ 0 ]; row++ ) {
			group = "";
			this.maxRows = 4;
			for ( col = 0; col < numMonths[ 1 ]; col++ ) {
				selectedDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, inst.selectedDay ) );
				cornerClass = " ui-corner-all";
				calender = "";
				if ( isMultiMonth ) {
					calender += "<div class='ui-datepicker-group";
					if ( numMonths[ 1 ] > 1 ) {
						switch ( col ) {
							case 0: calender += " ui-datepicker-group-first";
								cornerClass = " ui-corner-" + ( isRTL ? "right" : "left" ); break;
							case numMonths[ 1 ] - 1: calender += " ui-datepicker-group-last";
								cornerClass = " ui-corner-" + ( isRTL ? "left" : "right" ); break;
							default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
						}
					}
					calender += "'>";
				}
				calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
					( /all|left/.test( cornerClass ) && row === 0 ? ( isRTL ? next : prev ) : "" ) +
					( /all|right/.test( cornerClass ) && row === 0 ? ( isRTL ? prev : next ) : "" ) +
					this._generateMonthYearHeader( inst, drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort ) + // draw month headers
					"</div><table class='ui-datepicker-calendar'><thead>" +
					"<tr>";
				thead = ( showWeek ? "<th class='ui-datepicker-week-col'>" + this._get( inst, "weekHeader" ) + "</th>" : "" );
				for ( dow = 0; dow < 7; dow++ ) { // days of the week
					day = ( dow + firstDay ) % 7;
					thead += "<th scope='col'" + ( ( dow + firstDay + 6 ) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "" ) + ">" +
						"<span title='" + dayNames[ day ] + "'>" + dayNamesMin[ day ] + "</span></th>";
				}
				calender += thead + "</tr></thead><tbody>";
				daysInMonth = this._getDaysInMonth( drawYear, drawMonth );
				if ( drawYear === inst.selectedYear && drawMonth === inst.selectedMonth ) {
					inst.selectedDay = Math.min( inst.selectedDay, daysInMonth );
				}
				leadDays = ( this._getFirstDayOfMonth( drawYear, drawMonth ) - firstDay + 7 ) % 7;
				curRows = Math.ceil( ( leadDays + daysInMonth ) / 7 ); // calculate the number of rows to generate
				numRows = ( isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows ); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				printDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 - leadDays ) );
				for ( dRow = 0; dRow < numRows; dRow++ ) { // create date picker rows
					calender += "<tr>";
					tbody = ( !showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
						this._get( inst, "calculateWeek" )( printDate ) + "</td>" );
					for ( dow = 0; dow < 7; dow++ ) { // create date picker days
						daySettings = ( beforeShowDay ?
							beforeShowDay.apply( ( inst.input ? inst.input[ 0 ] : null ), [ printDate ] ) : [ true, "" ] );
						otherMonth = ( printDate.getMonth() !== drawMonth );
						unselectable = ( otherMonth && !selectOtherMonths ) || !daySettings[ 0 ] ||
							( minDate && printDate < minDate ) || ( maxDate && printDate > maxDate );
						tbody += "<td class='" +
							( ( dow + firstDay + 6 ) % 7 >= 5 ? " ui-datepicker-week-end" : "" ) + // highlight weekends
							( otherMonth ? " ui-datepicker-other-month" : "" ) + // highlight days from other months
							( ( printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent ) || // user pressed key
							( defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ) ?

							// or defaultDate is current printedDate and defaultDate is selectedDate
							" " + this._dayOverClass : "" ) + // highlight selected day
							( unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "" ) +  // highlight unselectable days
							( otherMonth && !showOtherMonths ? "" : " " + daySettings[ 1 ] + // highlight custom dates
							( printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "" ) + // highlight selected day
							( printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "" ) ) + "'" + // highlight today (if different)
							( ( !otherMonth || showOtherMonths ) && daySettings[ 2 ] ? " title='" + daySettings[ 2 ].replace( /'/g, "&#39;" ) + "'" : "" ) + // cell title
							( unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'" ) + ">" + // actions
							( otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
							( unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
							( printDate.getTime() === today.getTime() ? " ui-state-highlight" : "" ) +
							( printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "" ) + // highlight selected day
							( otherMonth ? " ui-priority-secondary" : "" ) + // distinguish dates from other months
							"' href='#'>" + printDate.getDate() + "</a>" ) ) + "</td>"; // display selectable date
						printDate.setDate( printDate.getDate() + 1 );
						printDate = this._daylightSavingAdjust( printDate );
					}
					calender += tbody + "</tr>";
				}
				drawMonth++;
				if ( drawMonth > 11 ) {
					drawMonth = 0;
					drawYear++;
				}
				calender += "</tbody></table>" + ( isMultiMonth ? "</div>" +
							( ( numMonths[ 0 ] > 0 && col === numMonths[ 1 ] - 1 ) ? "<div class='ui-datepicker-row-break'></div>" : "" ) : "" );
				group += calender;
			}
			html += group;
		}
		html += buttonPanel;
		inst._keyEvent = false;
		return html;
	},

	/* Generate the month and year header. */
	_generateMonthYearHeader: function( inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort ) {

		var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
			changeMonth = this._get( inst, "changeMonth" ),
			changeYear = this._get( inst, "changeYear" ),
			showMonthAfterYear = this._get( inst, "showMonthAfterYear" ),
			html = "<div class='ui-datepicker-title'>",
			monthHtml = "";

		// Month selection
		if ( secondary || !changeMonth ) {
			monthHtml += "<span class='ui-datepicker-month'>" + monthNames[ drawMonth ] + "</span>";
		} else {
			inMinYear = ( minDate && minDate.getFullYear() === drawYear );
			inMaxYear = ( maxDate && maxDate.getFullYear() === drawYear );
			monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
			for ( month = 0; month < 12; month++ ) {
				if ( ( !inMinYear || month >= minDate.getMonth() ) && ( !inMaxYear || month <= maxDate.getMonth() ) ) {
					monthHtml += "<option value='" + month + "'" +
						( month === drawMonth ? " selected='selected'" : "" ) +
						">" + monthNamesShort[ month ] + "</option>";
				}
			}
			monthHtml += "</select>";
		}

		if ( !showMonthAfterYear ) {
			html += monthHtml + ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" );
		}

		// Year selection
		if ( !inst.yearshtml ) {
			inst.yearshtml = "";
			if ( secondary || !changeYear ) {
				html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
			} else {

				// determine range of years to display
				years = this._get( inst, "yearRange" ).split( ":" );
				thisYear = new Date().getFullYear();
				determineYear = function( value ) {
					var year = ( value.match( /c[+\-].*/ ) ? drawYear + parseInt( value.substring( 1 ), 10 ) :
						( value.match( /[+\-].*/ ) ? thisYear + parseInt( value, 10 ) :
						parseInt( value, 10 ) ) );
					return ( isNaN( year ) ? thisYear : year );
				};
				year = determineYear( years[ 0 ] );
				endYear = Math.max( year, determineYear( years[ 1 ] || "" ) );
				year = ( minDate ? Math.max( year, minDate.getFullYear() ) : year );
				endYear = ( maxDate ? Math.min( endYear, maxDate.getFullYear() ) : endYear );
				inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
				for ( ; year <= endYear; year++ ) {
					inst.yearshtml += "<option value='" + year + "'" +
						( year === drawYear ? " selected='selected'" : "" ) +
						">" + year + "</option>";
				}
				inst.yearshtml += "</select>";

				html += inst.yearshtml;
				inst.yearshtml = null;
			}
		}

		html += this._get( inst, "yearSuffix" );
		if ( showMonthAfterYear ) {
			html += ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" ) + monthHtml;
		}
		html += "</div>"; // Close datepicker_header
		return html;
	},

	/* Adjust one of the date sub-fields. */
	_adjustInstDate: function( inst, offset, period ) {
		var year = inst.selectedYear + ( period === "Y" ? offset : 0 ),
			month = inst.selectedMonth + ( period === "M" ? offset : 0 ),
			day = Math.min( inst.selectedDay, this._getDaysInMonth( year, month ) ) + ( period === "D" ? offset : 0 ),
			date = this._restrictMinMax( inst, this._daylightSavingAdjust( new Date( year, month, day ) ) );

		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if ( period === "M" || period === "Y" ) {
			this._notifyChange( inst );
		}
	},

	/* Ensure a date is within any min/max bounds. */
	_restrictMinMax: function( inst, date ) {
		var minDate = this._getMinMaxDate( inst, "min" ),
			maxDate = this._getMinMaxDate( inst, "max" ),
			newDate = ( minDate && date < minDate ? minDate : date );
		return ( maxDate && newDate > maxDate ? maxDate : newDate );
	},

	/* Notify change of month/year. */
	_notifyChange: function( inst ) {
		var onChange = this._get( inst, "onChangeMonthYear" );
		if ( onChange ) {
			onChange.apply( ( inst.input ? inst.input[ 0 ] : null ),
				[ inst.selectedYear, inst.selectedMonth + 1, inst ] );
		}
	},

	/* Determine the number of months to show. */
	_getNumberOfMonths: function( inst ) {
		var numMonths = this._get( inst, "numberOfMonths" );
		return ( numMonths == null ? [ 1, 1 ] : ( typeof numMonths === "number" ? [ 1, numMonths ] : numMonths ) );
	},

	/* Determine the current maximum date - ensure no time components are set. */
	_getMinMaxDate: function( inst, minMax ) {
		return this._determineDate( inst, this._get( inst, minMax + "Date" ), null );
	},

	/* Find the number of days in a given month. */
	_getDaysInMonth: function( year, month ) {
		return 32 - this._daylightSavingAdjust( new Date( year, month, 32 ) ).getDate();
	},

	/* Find the day of the week of the first of a month. */
	_getFirstDayOfMonth: function( year, month ) {
		return new Date( year, month, 1 ).getDay();
	},

	/* Determines if we should allow a "next/prev" month display change. */
	_canAdjustMonth: function( inst, offset, curYear, curMonth ) {
		var numMonths = this._getNumberOfMonths( inst ),
			date = this._daylightSavingAdjust( new Date( curYear,
			curMonth + ( offset < 0 ? offset : numMonths[ 0 ] * numMonths[ 1 ] ), 1 ) );

		if ( offset < 0 ) {
			date.setDate( this._getDaysInMonth( date.getFullYear(), date.getMonth() ) );
		}
		return this._isInRange( inst, date );
	},

	/* Is the given date in the accepted range? */
	_isInRange: function( inst, date ) {
		var yearSplit, currentYear,
			minDate = this._getMinMaxDate( inst, "min" ),
			maxDate = this._getMinMaxDate( inst, "max" ),
			minYear = null,
			maxYear = null,
			years = this._get( inst, "yearRange" );
			if ( years ) {
				yearSplit = years.split( ":" );
				currentYear = new Date().getFullYear();
				minYear = parseInt( yearSplit[ 0 ], 10 );
				maxYear = parseInt( yearSplit[ 1 ], 10 );
				if ( yearSplit[ 0 ].match( /[+\-].*/ ) ) {
					minYear += currentYear;
				}
				if ( yearSplit[ 1 ].match( /[+\-].*/ ) ) {
					maxYear += currentYear;
				}
			}

		return ( ( !minDate || date.getTime() >= minDate.getTime() ) &&
			( !maxDate || date.getTime() <= maxDate.getTime() ) &&
			( !minYear || date.getFullYear() >= minYear ) &&
			( !maxYear || date.getFullYear() <= maxYear ) );
	},

	/* Provide the configuration settings for formatting/parsing. */
	_getFormatConfig: function( inst ) {
		var shortYearCutoff = this._get( inst, "shortYearCutoff" );
		shortYearCutoff = ( typeof shortYearCutoff !== "string" ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt( shortYearCutoff, 10 ) );
		return { shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get( inst, "dayNamesShort" ), dayNames: this._get( inst, "dayNames" ),
			monthNamesShort: this._get( inst, "monthNamesShort" ), monthNames: this._get( inst, "monthNames" ) };
	},

	/* Format the given date for display. */
	_formatDate: function( inst, day, month, year ) {
		if ( !day ) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = ( day ? ( typeof day === "object" ? day :
			this._daylightSavingAdjust( new Date( year, month, day ) ) ) :
			this._daylightSavingAdjust( new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
		return this.formatDate( this._get( inst, "dateFormat" ), date, this._getFormatConfig( inst ) );
	}
} );

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
function datepicker_bindHover( dpDiv ) {
	var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
	return dpDiv.on( "mouseout", selector, function() {
			$( this ).removeClass( "ui-state-hover" );
			if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
				$( this ).removeClass( "ui-datepicker-prev-hover" );
			}
			if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
				$( this ).removeClass( "ui-datepicker-next-hover" );
			}
		} )
		.on( "mouseover", selector, datepicker_handleMouseover );
}

function datepicker_handleMouseover() {
	if ( !$.datepicker._isDisabledDatepicker( datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[ 0 ] : datepicker_instActive.input[ 0 ] ) ) {
		$( this ).parents( ".ui-datepicker-calendar" ).find( "a" ).removeClass( "ui-state-hover" );
		$( this ).addClass( "ui-state-hover" );
		if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
			$( this ).addClass( "ui-datepicker-prev-hover" );
		}
		if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
			$( this ).addClass( "ui-datepicker-next-hover" );
		}
	}
}

/* jQuery extend now ignores nulls! */
function datepicker_extendRemove( target, props ) {
	$.extend( target, props );
	for ( var name in props ) {
		if ( props[ name ] == null ) {
			target[ name ] = props[ name ];
		}
	}
	return target;
}

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
					Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function( options ) {

	/* Verify an empty collection wasn't passed - Fixes #6976 */
	if ( !this.length ) {
		return this;
	}

	/* Initialise the date picker. */
	if ( !$.datepicker.initialized ) {
		$( document ).on( "mousedown", $.datepicker._checkExternalClick );
		$.datepicker.initialized = true;
	}

	/* Append datepicker main container to body if not exist. */
	if ( $( "#" + $.datepicker._mainDivId ).length === 0 ) {
		$( "body" ).append( $.datepicker.dpDiv );
	}

	var otherArgs = Array.prototype.slice.call( arguments, 1 );
	if ( typeof options === "string" && ( options === "isDisabled" || options === "getDate" || options === "widget" ) ) {
		return $.datepicker[ "_" + options + "Datepicker" ].
			apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
	}
	if ( options === "option" && arguments.length === 2 && typeof arguments[ 1 ] === "string" ) {
		return $.datepicker[ "_" + options + "Datepicker" ].
			apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
	}
	return this.each( function() {
		typeof options === "string" ?
			$.datepicker[ "_" + options + "Datepicker" ].
				apply( $.datepicker, [ this ].concat( otherArgs ) ) :
			$.datepicker._attachDatepicker( this, options );
	} );
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.12.1";

var widgetsDatepicker = $.datepicker;




// This file is deprecated
var ie = $.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

/*!
 * jQuery UI Mouse 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Mouse
//>>group: Widgets
//>>description: Abstracts mouse-based interactions to assist in creating certain widgets.
//>>docs: http://api.jqueryui.com/mouse/



var mouseHandled = false;
$( document ).on( "mouseup", function() {
	mouseHandled = false;
} );

var widgetsMouse = $.widget( "ui.mouse", {
	version: "1.12.1",
	options: {
		cancel: "input, textarea, button, select, option",
		distance: 1,
		delay: 0
	},
	_mouseInit: function() {
		var that = this;

		this.element
			.on( "mousedown." + this.widgetName, function( event ) {
				return that._mouseDown( event );
			} )
			.on( "click." + this.widgetName, function( event ) {
				if ( true === $.data( event.target, that.widgetName + ".preventClickEvent" ) ) {
					$.removeData( event.target, that.widgetName + ".preventClickEvent" );
					event.stopImmediatePropagation();
					return false;
				}
			} );

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.off( "." + this.widgetName );
		if ( this._mouseMoveDelegate ) {
			this.document
				.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
				.off( "mouseup." + this.widgetName, this._mouseUpDelegate );
		}
	},

	_mouseDown: function( event ) {

		// don't let more than one widget handle mouseStart
		if ( mouseHandled ) {
			return;
		}

		this._mouseMoved = false;

		// We may have missed mouseup (out of window)
		( this._mouseStarted && this._mouseUp( event ) );

		this._mouseDownEvent = event;

		var that = this,
			btnIsLeft = ( event.which === 1 ),

			// event.target.nodeName works around a bug in IE 8 with
			// disabled inputs (#7620)
			elIsCancel = ( typeof this.options.cancel === "string" && event.target.nodeName ?
				$( event.target ).closest( this.options.cancel ).length : false );
		if ( !btnIsLeft || elIsCancel || !this._mouseCapture( event ) ) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if ( !this.mouseDelayMet ) {
			this._mouseDelayTimer = setTimeout( function() {
				that.mouseDelayMet = true;
			}, this.options.delay );
		}

		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
			this._mouseStarted = ( this._mouseStart( event ) !== false );
			if ( !this._mouseStarted ) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko & Opera)
		if ( true === $.data( event.target, this.widgetName + ".preventClickEvent" ) ) {
			$.removeData( event.target, this.widgetName + ".preventClickEvent" );
		}

		// These delegates are required to keep context
		this._mouseMoveDelegate = function( event ) {
			return that._mouseMove( event );
		};
		this._mouseUpDelegate = function( event ) {
			return that._mouseUp( event );
		};

		this.document
			.on( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.on( "mouseup." + this.widgetName, this._mouseUpDelegate );

		event.preventDefault();

		mouseHandled = true;
		return true;
	},

	_mouseMove: function( event ) {

		// Only check for mouseups outside the document if you've moved inside the document
		// at least once. This prevents the firing of mouseup in the case of IE<9, which will
		// fire a mousemove event if content is placed under the cursor. See #7778
		// Support: IE <9
		if ( this._mouseMoved ) {

			// IE mouseup check - mouseup happened when mouse was out of window
			if ( $.ui.ie && ( !document.documentMode || document.documentMode < 9 ) &&
					!event.button ) {
				return this._mouseUp( event );

			// Iframe mouseup check - mouseup occurred in another document
			} else if ( !event.which ) {

				// Support: Safari <=8 - 9
				// Safari sets which to 0 if you press any of the following keys
				// during a drag (#14461)
				if ( event.originalEvent.altKey || event.originalEvent.ctrlKey ||
						event.originalEvent.metaKey || event.originalEvent.shiftKey ) {
					this.ignoreMissingWhich = true;
				} else if ( !this.ignoreMissingWhich ) {
					return this._mouseUp( event );
				}
			}
		}

		if ( event.which || event.button ) {
			this._mouseMoved = true;
		}

		if ( this._mouseStarted ) {
			this._mouseDrag( event );
			return event.preventDefault();
		}

		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
			this._mouseStarted =
				( this._mouseStart( this._mouseDownEvent, event ) !== false );
			( this._mouseStarted ? this._mouseDrag( event ) : this._mouseUp( event ) );
		}

		return !this._mouseStarted;
	},

	_mouseUp: function( event ) {
		this.document
			.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.off( "mouseup." + this.widgetName, this._mouseUpDelegate );

		if ( this._mouseStarted ) {
			this._mouseStarted = false;

			if ( event.target === this._mouseDownEvent.target ) {
				$.data( event.target, this.widgetName + ".preventClickEvent", true );
			}

			this._mouseStop( event );
		}

		if ( this._mouseDelayTimer ) {
			clearTimeout( this._mouseDelayTimer );
			delete this._mouseDelayTimer;
		}

		this.ignoreMissingWhich = false;
		mouseHandled = false;
		event.preventDefault();
	},

	_mouseDistanceMet: function( event ) {
		return ( Math.max(
				Math.abs( this._mouseDownEvent.pageX - event.pageX ),
				Math.abs( this._mouseDownEvent.pageY - event.pageY )
			) >= this.options.distance
		);
	},

	_mouseDelayMet: function( /* event */ ) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	_mouseStart: function( /* event */ ) {},
	_mouseDrag: function( /* event */ ) {},
	_mouseStop: function( /* event */ ) {},
	_mouseCapture: function( /* event */ ) { return true; }
} );




// $.ui.plugin is deprecated. Use $.widget() extensions instead.
var plugin = $.ui.plugin = {
	add: function( module, option, set ) {
		var i,
			proto = $.ui[ module ].prototype;
		for ( i in set ) {
			proto.plugins[ i ] = proto.plugins[ i ] || [];
			proto.plugins[ i ].push( [ option, set[ i ] ] );
		}
	},
	call: function( instance, name, args, allowDisconnected ) {
		var i,
			set = instance.plugins[ name ];

		if ( !set ) {
			return;
		}

		if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode ||
				instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
			return;
		}

		for ( i = 0; i < set.length; i++ ) {
			if ( instance.options[ set[ i ][ 0 ] ] ) {
				set[ i ][ 1 ].apply( instance.element, args );
			}
		}
	}
};



var safeBlur = $.ui.safeBlur = function( element ) {

	// Support: IE9 - 10 only
	// If the <body> is blurred, IE will switch windows, see #9420
	if ( element && element.nodeName.toLowerCase() !== "body" ) {
		$( element ).trigger( "blur" );
	}
};


/*!
 * jQuery UI Draggable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Draggable
//>>group: Interactions
//>>description: Enables dragging functionality for any element.
//>>docs: http://api.jqueryui.com/draggable/
//>>demos: http://jqueryui.com/draggable/
//>>css.structure: ../../themes/base/draggable.css



$.widget( "ui.draggable", $.ui.mouse, {
	version: "1.12.1",
	widgetEventPrefix: "drag",
	options: {
		addClasses: true,
		appendTo: "parent",
		axis: false,
		connectToSortable: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		grid: false,
		handle: false,
		helper: "original",
		iframeFix: false,
		opacity: false,
		refreshPositions: false,
		revert: false,
		revertDuration: 500,
		scope: "default",
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		snap: false,
		snapMode: "both",
		snapTolerance: 20,
		stack: false,
		zIndex: false,

		// Callbacks
		drag: null,
		start: null,
		stop: null
	},
	_create: function() {

		if ( this.options.helper === "original" ) {
			this._setPositionRelative();
		}
		if ( this.options.addClasses ) {
			this._addClass( "ui-draggable" );
		}
		this._setHandleClassName();

		this._mouseInit();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "handle" ) {
			this._removeHandleClassName();
			this._setHandleClassName();
		}
	},

	_destroy: function() {
		if ( ( this.helper || this.element ).is( ".ui-draggable-dragging" ) ) {
			this.destroyOnClear = true;
			return;
		}
		this._removeHandleClassName();
		this._mouseDestroy();
	},

	_mouseCapture: function( event ) {
		var o = this.options;

		// Among others, prevent a drag on a resizable-handle
		if ( this.helper || o.disabled ||
				$( event.target ).closest( ".ui-resizable-handle" ).length > 0 ) {
			return false;
		}

		//Quit if we're not on a valid handle
		this.handle = this._getHandle( event );
		if ( !this.handle ) {
			return false;
		}

		this._blurActiveElement( event );

		this._blockFrames( o.iframeFix === true ? "iframe" : o.iframeFix );

		return true;

	},

	_blockFrames: function( selector ) {
		this.iframeBlocks = this.document.find( selector ).map( function() {
			var iframe = $( this );

			return $( "<div>" )
				.css( "position", "absolute" )
				.appendTo( iframe.parent() )
				.outerWidth( iframe.outerWidth() )
				.outerHeight( iframe.outerHeight() )
				.offset( iframe.offset() )[ 0 ];
		} );
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_blurActiveElement: function( event ) {
		var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),
			target = $( event.target );

		// Don't blur if the event occurred on an element that is within
		// the currently focused element
		// See #10527, #12472
		if ( target.closest( activeElement ).length ) {
			return;
		}

		// Blur any element that currently has focus, see #4261
		$.ui.safeBlur( activeElement );
	},

	_mouseStart: function( event ) {

		var o = this.options;

		//Create and append the visible helper
		this.helper = this._createHelper( event );

		this._addClass( this.helper, "ui-draggable-dragging" );

		//Cache the helper size
		this._cacheHelperProportions();

		//If ddmanager is used for droppables, set the global draggable
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.current = this;
		}

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Store the helper's css position
		this.cssPosition = this.helper.css( "position" );
		this.scrollParent = this.helper.scrollParent( true );
		this.offsetParent = this.helper.offsetParent();
		this.hasFixedAncestor = this.helper.parents().filter( function() {
				return $( this ).css( "position" ) === "fixed";
			} ).length > 0;

		//The element's absolute position on the page minus margins
		this.positionAbs = this.element.offset();
		this._refreshOffsets( event );

		//Generate the original position
		this.originalPosition = this.position = this._generatePosition( event, false );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		( o.cursorAt && this._adjustOffsetFromHelper( o.cursorAt ) );

		//Set a containment if given in the options
		this._setContainment();

		//Trigger event + callbacks
		if ( this._trigger( "start", event ) === false ) {
			this._clear();
			return false;
		}

		//Recache the helper size
		this._cacheHelperProportions();

		//Prepare the droppable offsets
		if ( $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( this, event );
		}

		// Execute the drag once - this causes the helper not to be visible before getting its
		// correct position
		this._mouseDrag( event, true );

		// If the ddmanager is used for droppables, inform the manager that dragging has started
		// (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStart( this, event );
		}

		return true;
	},

	_refreshOffsets: function( event ) {
		this.offset = {
			top: this.positionAbs.top - this.margins.top,
			left: this.positionAbs.left - this.margins.left,
			scroll: false,
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset()
		};

		this.offset.click = {
			left: event.pageX - this.offset.left,
			top: event.pageY - this.offset.top
		};
	},

	_mouseDrag: function( event, noPropagation ) {

		// reset any necessary cached properties (see #5009)
		if ( this.hasFixedAncestor ) {
			this.offset.parent = this._getParentOffset();
		}

		//Compute the helpers position
		this.position = this._generatePosition( event, true );
		this.positionAbs = this._convertPositionTo( "absolute" );

		//Call plugins and callbacks and use the resulting position if something is returned
		if ( !noPropagation ) {
			var ui = this._uiHash();
			if ( this._trigger( "drag", event, ui ) === false ) {
				this._mouseUp( new $.Event( "mouseup", event ) );
				return false;
			}
			this.position = ui.position;
		}

		this.helper[ 0 ].style.left = this.position.left + "px";
		this.helper[ 0 ].style.top = this.position.top + "px";

		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.drag( this, event );
		}

		return false;
	},

	_mouseStop: function( event ) {

		//If we are using droppables, inform the manager about the drop
		var that = this,
			dropped = false;
		if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
			dropped = $.ui.ddmanager.drop( this, event );
		}

		//if a drop comes from outside (a sortable)
		if ( this.dropped ) {
			dropped = this.dropped;
			this.dropped = false;
		}

		if ( ( this.options.revert === "invalid" && !dropped ) ||
				( this.options.revert === "valid" && dropped ) ||
				this.options.revert === true || ( $.isFunction( this.options.revert ) &&
				this.options.revert.call( this.element, dropped ) )
		) {
			$( this.helper ).animate(
				this.originalPosition,
				parseInt( this.options.revertDuration, 10 ),
				function() {
					if ( that._trigger( "stop", event ) !== false ) {
						that._clear();
					}
				}
			);
		} else {
			if ( this._trigger( "stop", event ) !== false ) {
				this._clear();
			}
		}

		return false;
	},

	_mouseUp: function( event ) {
		this._unblockFrames();

		// If the ddmanager is used for droppables, inform the manager that dragging has stopped
		// (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStop( this, event );
		}

		// Only need to focus if the event occurred on the draggable itself, see #10527
		if ( this.handleElement.is( event.target ) ) {

			// The interaction is over; whether or not the click resulted in a drag,
			// focus the element
			this.element.trigger( "focus" );
		}

		return $.ui.mouse.prototype._mouseUp.call( this, event );
	},

	cancel: function() {

		if ( this.helper.is( ".ui-draggable-dragging" ) ) {
			this._mouseUp( new $.Event( "mouseup", { target: this.element[ 0 ] } ) );
		} else {
			this._clear();
		}

		return this;

	},

	_getHandle: function( event ) {
		return this.options.handle ?
			!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
			true;
	},

	_setHandleClassName: function() {
		this.handleElement = this.options.handle ?
			this.element.find( this.options.handle ) : this.element;
		this._addClass( this.handleElement, "ui-draggable-handle" );
	},

	_removeHandleClassName: function() {
		this._removeClass( this.handleElement, "ui-draggable-handle" );
	},

	_createHelper: function( event ) {

		var o = this.options,
			helperIsFunction = $.isFunction( o.helper ),
			helper = helperIsFunction ?
				$( o.helper.apply( this.element[ 0 ], [ event ] ) ) :
				( o.helper === "clone" ?
					this.element.clone().removeAttr( "id" ) :
					this.element );

		if ( !helper.parents( "body" ).length ) {
			helper.appendTo( ( o.appendTo === "parent" ?
				this.element[ 0 ].parentNode :
				o.appendTo ) );
		}

		// Http://bugs.jqueryui.com/ticket/9446
		// a helper function can return the original element
		// which wouldn't have been set to relative in _create
		if ( helperIsFunction && helper[ 0 ] === this.element[ 0 ] ) {
			this._setPositionRelative();
		}

		if ( helper[ 0 ] !== this.element[ 0 ] &&
				!( /(fixed|absolute)/ ).test( helper.css( "position" ) ) ) {
			helper.css( "position", "absolute" );
		}

		return helper;

	},

	_setPositionRelative: function() {
		if ( !( /^(?:r|a|f)/ ).test( this.element.css( "position" ) ) ) {
			this.element[ 0 ].style.position = "relative";
		}
	},

	_adjustOffsetFromHelper: function( obj ) {
		if ( typeof obj === "string" ) {
			obj = obj.split( " " );
		}
		if ( $.isArray( obj ) ) {
			obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
		}
		if ( "left" in obj ) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ( "right" in obj ) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ( "top" in obj ) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ( "bottom" in obj ) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_isRootNode: function( element ) {
		return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		var po = this.offsetParent.offset(),
			document = this.document[ 0 ];

		// This is a special case where we need to modify a offset calculated on start, since the
		// following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the
		// next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
		// the document, which means that the scroll is included in the initial calculation of the
		// offset of the parent, and never recalculated upon drag
		if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== document &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
			left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
		};

	},

	_getRelativeOffset: function() {
		if ( this.cssPosition !== "relative" ) {
			return { top: 0, left: 0 };
		}

		var p = this.element.position(),
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
				( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),
			left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
				( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )
		};

	},

	_cacheMargins: function() {
		this.margins = {
			left: ( parseInt( this.element.css( "marginLeft" ), 10 ) || 0 ),
			top: ( parseInt( this.element.css( "marginTop" ), 10 ) || 0 ),
			right: ( parseInt( this.element.css( "marginRight" ), 10 ) || 0 ),
			bottom: ( parseInt( this.element.css( "marginBottom" ), 10 ) || 0 )
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var isUserScrollable, c, ce,
			o = this.options,
			document = this.document[ 0 ];

		this.relativeContainer = null;

		if ( !o.containment ) {
			this.containment = null;
			return;
		}

		if ( o.containment === "window" ) {
			this.containment = [
				$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
				$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
				$( window ).scrollLeft() + $( window ).width() -
					this.helperProportions.width - this.margins.left,
				$( window ).scrollTop() +
					( $( window ).height() || document.body.parentNode.scrollHeight ) -
					this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment === "document" ) {
			this.containment = [
				0,
				0,
				$( document ).width() - this.helperProportions.width - this.margins.left,
				( $( document ).height() || document.body.parentNode.scrollHeight ) -
					this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment.constructor === Array ) {
			this.containment = o.containment;
			return;
		}

		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}

		c = $( o.containment );
		ce = c[ 0 ];

		if ( !ce ) {
			return;
		}

		isUserScrollable = /(scroll|auto)/.test( c.css( "overflow" ) );

		this.containment = [
			( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) +
				( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
			( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) +
				( parseInt( c.css( "paddingTop" ), 10 ) || 0 ),
			( isUserScrollable ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
				( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) -
				this.helperProportions.width -
				this.margins.left -
				this.margins.right,
			( isUserScrollable ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
				( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) -
				this.helperProportions.height -
				this.margins.top -
				this.margins.bottom
		];
		this.relativeContainer = c;
	},

	_convertPositionTo: function( d, pos ) {

		if ( !pos ) {
			pos = this.position;
		}

		var mod = d === "absolute" ? 1 : -1,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: (

				// The absolute mouse position
				pos.top	+

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top * mod -
				( ( this.cssPosition === "fixed" ?
					-this.offset.scroll.top :
					( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod )
			),
			left: (

				// The absolute mouse position
				pos.left +

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left * mod	-
				( ( this.cssPosition === "fixed" ?
					-this.offset.scroll.left :
					( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod )
			)
		};

	},

	_generatePosition: function( event, constrainPosition ) {

		var containment, co, top, left,
			o = this.options,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),
			pageX = event.pageX,
			pageY = event.pageY;

		// Cache the scroll
		if ( !scrollIsRootNode || !this.offset.scroll ) {
			this.offset.scroll = {
				top: this.scrollParent.scrollTop(),
				left: this.scrollParent.scrollLeft()
			};
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		// If we are not dragging yet, we won't check for options
		if ( constrainPosition ) {
			if ( this.containment ) {
				if ( this.relativeContainer ) {
					co = this.relativeContainer.offset();
					containment = [
						this.containment[ 0 ] + co.left,
						this.containment[ 1 ] + co.top,
						this.containment[ 2 ] + co.left,
						this.containment[ 3 ] + co.top
					];
				} else {
					containment = this.containment;
				}

				if ( event.pageX - this.offset.click.left < containment[ 0 ] ) {
					pageX = containment[ 0 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top < containment[ 1 ] ) {
					pageY = containment[ 1 ] + this.offset.click.top;
				}
				if ( event.pageX - this.offset.click.left > containment[ 2 ] ) {
					pageX = containment[ 2 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top > containment[ 3 ] ) {
					pageY = containment[ 3 ] + this.offset.click.top;
				}
			}

			if ( o.grid ) {

				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid
				// argument errors in IE (see ticket #6950)
				top = o.grid[ 1 ] ? this.originalPageY + Math.round( ( pageY -
					this.originalPageY ) / o.grid[ 1 ] ) * o.grid[ 1 ] : this.originalPageY;
				pageY = containment ? ( ( top - this.offset.click.top >= containment[ 1 ] ||
					top - this.offset.click.top > containment[ 3 ] ) ?
						top :
						( ( top - this.offset.click.top >= containment[ 1 ] ) ?
							top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) : top;

				left = o.grid[ 0 ] ? this.originalPageX +
					Math.round( ( pageX - this.originalPageX ) / o.grid[ 0 ] ) * o.grid[ 0 ] :
					this.originalPageX;
				pageX = containment ? ( ( left - this.offset.click.left >= containment[ 0 ] ||
					left - this.offset.click.left > containment[ 2 ] ) ?
						left :
						( ( left - this.offset.click.left >= containment[ 0 ] ) ?
							left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) : left;
			}

			if ( o.axis === "y" ) {
				pageX = this.originalPageX;
			}

			if ( o.axis === "x" ) {
				pageY = this.originalPageY;
			}
		}

		return {
			top: (

				// The absolute mouse position
				pageY -

				// Click offset (relative to the element)
				this.offset.click.top -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top +
				( this.cssPosition === "fixed" ?
					-this.offset.scroll.top :
					( scrollIsRootNode ? 0 : this.offset.scroll.top ) )
			),
			left: (

				// The absolute mouse position
				pageX -

				// Click offset (relative to the element)
				this.offset.click.left -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left +
				( this.cssPosition === "fixed" ?
					-this.offset.scroll.left :
					( scrollIsRootNode ? 0 : this.offset.scroll.left ) )
			)
		};

	},

	_clear: function() {
		this._removeClass( this.helper, "ui-draggable-dragging" );
		if ( this.helper[ 0 ] !== this.element[ 0 ] && !this.cancelHelperRemoval ) {
			this.helper.remove();
		}
		this.helper = null;
		this.cancelHelperRemoval = false;
		if ( this.destroyOnClear ) {
			this.destroy();
		}
	},

	// From now on bulk stuff - mainly helpers

	_trigger: function( type, event, ui ) {
		ui = ui || this._uiHash();
		$.ui.plugin.call( this, type, [ event, ui, this ], true );

		// Absolute position and offset (see #6884 ) have to be recalculated after plugins
		if ( /^(drag|start|stop)/.test( type ) ) {
			this.positionAbs = this._convertPositionTo( "absolute" );
			ui.offset = this.positionAbs;
		}
		return $.Widget.prototype._trigger.call( this, type, event, ui );
	},

	plugins: {},

	_uiHash: function() {
		return {
			helper: this.helper,
			position: this.position,
			originalPosition: this.originalPosition,
			offset: this.positionAbs
		};
	}

} );

$.ui.plugin.add( "draggable", "connectToSortable", {
	start: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		} );

		draggable.sortables = [];
		$( draggable.options.connectToSortable ).each( function() {
			var sortable = $( this ).sortable( "instance" );

			if ( sortable && !sortable.options.disabled ) {
				draggable.sortables.push( sortable );

				// RefreshPositions is called at drag start to refresh the containerCache
				// which is used in drag. This ensures it's initialized and synchronized
				// with any changes that might have happened on the page since initialization.
				sortable.refreshPositions();
				sortable._trigger( "activate", event, uiSortable );
			}
		} );
	},
	stop: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		} );

		draggable.cancelHelperRemoval = false;

		$.each( draggable.sortables, function() {
			var sortable = this;

			if ( sortable.isOver ) {
				sortable.isOver = 0;

				// Allow this sortable to handle removing the helper
				draggable.cancelHelperRemoval = true;
				sortable.cancelHelperRemoval = false;

				// Use _storedCSS To restore properties in the sortable,
				// as this also handles revert (#9675) since the draggable
				// may have modified them in unexpected ways (#8809)
				sortable._storedCSS = {
					position: sortable.placeholder.css( "position" ),
					top: sortable.placeholder.css( "top" ),
					left: sortable.placeholder.css( "left" )
				};

				sortable._mouseStop( event );

				// Once drag has ended, the sortable should return to using
				// its original helper, not the shared helper from draggable
				sortable.options.helper = sortable.options._helper;
			} else {

				// Prevent this Sortable from removing the helper.
				// However, don't set the draggable to remove the helper
				// either as another connected Sortable may yet handle the removal.
				sortable.cancelHelperRemoval = true;

				sortable._trigger( "deactivate", event, uiSortable );
			}
		} );
	},
	drag: function( event, ui, draggable ) {
		$.each( draggable.sortables, function() {
			var innermostIntersecting = false,
				sortable = this;

			// Copy over variables that sortable's _intersectsWith uses
			sortable.positionAbs = draggable.positionAbs;
			sortable.helperProportions = draggable.helperProportions;
			sortable.offset.click = draggable.offset.click;

			if ( sortable._intersectsWith( sortable.containerCache ) ) {
				innermostIntersecting = true;

				$.each( draggable.sortables, function() {

					// Copy over variables that sortable's _intersectsWith uses
					this.positionAbs = draggable.positionAbs;
					this.helperProportions = draggable.helperProportions;
					this.offset.click = draggable.offset.click;

					if ( this !== sortable &&
							this._intersectsWith( this.containerCache ) &&
							$.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {
						innermostIntersecting = false;
					}

					return innermostIntersecting;
				} );
			}

			if ( innermostIntersecting ) {

				// If it intersects, we use a little isOver variable and set it once,
				// so that the move-in stuff gets fired only once.
				if ( !sortable.isOver ) {
					sortable.isOver = 1;

					// Store draggable's parent in case we need to reappend to it later.
					draggable._parent = ui.helper.parent();

					sortable.currentItem = ui.helper
						.appendTo( sortable.element )
						.data( "ui-sortable-item", true );

					// Store helper option to later restore it
					sortable.options._helper = sortable.options.helper;

					sortable.options.helper = function() {
						return ui.helper[ 0 ];
					};

					// Fire the start events of the sortable with our passed browser event,
					// and our own helper (so it doesn't create a new one)
					event.target = sortable.currentItem[ 0 ];
					sortable._mouseCapture( event, true );
					sortable._mouseStart( event, true, true );

					// Because the browser event is way off the new appended portlet,
					// modify necessary variables to reflect the changes
					sortable.offset.click.top = draggable.offset.click.top;
					sortable.offset.click.left = draggable.offset.click.left;
					sortable.offset.parent.left -= draggable.offset.parent.left -
						sortable.offset.parent.left;
					sortable.offset.parent.top -= draggable.offset.parent.top -
						sortable.offset.parent.top;

					draggable._trigger( "toSortable", event );

					// Inform draggable that the helper is in a valid drop zone,
					// used solely in the revert option to handle "valid/invalid".
					draggable.dropped = sortable.element;

					// Need to refreshPositions of all sortables in the case that
					// adding to one sortable changes the location of the other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					} );

					// Hack so receive/update callbacks work (mostly)
					draggable.currentItem = draggable.element;
					sortable.fromOutside = draggable;
				}

				if ( sortable.currentItem ) {
					sortable._mouseDrag( event );

					// Copy the sortable's position because the draggable's can potentially reflect
					// a relative position, while sortable is always absolute, which the dragged
					// element has now become. (#8809)
					ui.position = sortable.position;
				}
			} else {

				// If it doesn't intersect with the sortable, and it intersected before,
				// we fake the drag stop of the sortable, but make sure it doesn't remove
				// the helper by using cancelHelperRemoval.
				if ( sortable.isOver ) {

					sortable.isOver = 0;
					sortable.cancelHelperRemoval = true;

					// Calling sortable's mouseStop would trigger a revert,
					// so revert must be temporarily false until after mouseStop is called.
					sortable.options._revert = sortable.options.revert;
					sortable.options.revert = false;

					sortable._trigger( "out", event, sortable._uiHash( sortable ) );
					sortable._mouseStop( event, true );

					// Restore sortable behaviors that were modfied
					// when the draggable entered the sortable area (#9481)
					sortable.options.revert = sortable.options._revert;
					sortable.options.helper = sortable.options._helper;

					if ( sortable.placeholder ) {
						sortable.placeholder.remove();
					}

					// Restore and recalculate the draggable's offset considering the sortable
					// may have modified them in unexpected ways. (#8809, #10669)
					ui.helper.appendTo( draggable._parent );
					draggable._refreshOffsets( event );
					ui.position = draggable._generatePosition( event, true );

					draggable._trigger( "fromSortable", event );

					// Inform draggable that the helper is no longer in a valid drop zone
					draggable.dropped = false;

					// Need to refreshPositions of all sortables just in case removing
					// from one sortable changes the location of other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					} );
				}
			}
		} );
	}
} );

$.ui.plugin.add( "draggable", "cursor", {
	start: function( event, ui, instance ) {
		var t = $( "body" ),
			o = instance.options;

		if ( t.css( "cursor" ) ) {
			o._cursor = t.css( "cursor" );
		}
		t.css( "cursor", o.cursor );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if ( o._cursor ) {
			$( "body" ).css( "cursor", o._cursor );
		}
	}
} );

$.ui.plugin.add( "draggable", "opacity", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;
		if ( t.css( "opacity" ) ) {
			o._opacity = t.css( "opacity" );
		}
		t.css( "opacity", o.opacity );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if ( o._opacity ) {
			$( ui.helper ).css( "opacity", o._opacity );
		}
	}
} );

$.ui.plugin.add( "draggable", "scroll", {
	start: function( event, ui, i ) {
		if ( !i.scrollParentNotHidden ) {
			i.scrollParentNotHidden = i.helper.scrollParent( false );
		}

		if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] &&
				i.scrollParentNotHidden[ 0 ].tagName !== "HTML" ) {
			i.overflowOffset = i.scrollParentNotHidden.offset();
		}
	},
	drag: function( event, ui, i  ) {

		var o = i.options,
			scrolled = false,
			scrollParent = i.scrollParentNotHidden[ 0 ],
			document = i.document[ 0 ];

		if ( scrollParent !== document && scrollParent.tagName !== "HTML" ) {
			if ( !o.axis || o.axis !== "x" ) {
				if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY <
						o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
				} else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX <
						o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
				} else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
				}
			}

		} else {

			if ( !o.axis || o.axis !== "x" ) {
				if ( event.pageY - $( document ).scrollTop() < o.scrollSensitivity ) {
					scrolled = $( document ).scrollTop( $( document ).scrollTop() - o.scrollSpeed );
				} else if ( $( window ).height() - ( event.pageY - $( document ).scrollTop() ) <
						o.scrollSensitivity ) {
					scrolled = $( document ).scrollTop( $( document ).scrollTop() + o.scrollSpeed );
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( event.pageX - $( document ).scrollLeft() < o.scrollSensitivity ) {
					scrolled = $( document ).scrollLeft(
						$( document ).scrollLeft() - o.scrollSpeed
					);
				} else if ( $( window ).width() - ( event.pageX - $( document ).scrollLeft() ) <
						o.scrollSensitivity ) {
					scrolled = $( document ).scrollLeft(
						$( document ).scrollLeft() + o.scrollSpeed
					);
				}
			}

		}

		if ( scrolled !== false && $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( i, event );
		}

	}
} );

$.ui.plugin.add( "draggable", "snap", {
	start: function( event, ui, i ) {

		var o = i.options;

		i.snapElements = [];

		$( o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap )
			.each( function() {
				var $t = $( this ),
					$o = $t.offset();
				if ( this !== i.element[ 0 ] ) {
					i.snapElements.push( {
						item: this,
						width: $t.outerWidth(), height: $t.outerHeight(),
						top: $o.top, left: $o.left
					} );
				}
			} );

	},
	drag: function( event, ui, inst ) {

		var ts, bs, ls, rs, l, r, t, b, i, first,
			o = inst.options,
			d = o.snapTolerance,
			x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

		for ( i = inst.snapElements.length - 1; i >= 0; i-- ) {

			l = inst.snapElements[ i ].left - inst.margins.left;
			r = l + inst.snapElements[ i ].width;
			t = inst.snapElements[ i ].top - inst.margins.top;
			b = t + inst.snapElements[ i ].height;

			if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d ||
					!$.contains( inst.snapElements[ i ].item.ownerDocument,
					inst.snapElements[ i ].item ) ) {
				if ( inst.snapElements[ i ].snapping ) {
					( inst.options.snap.release &&
						inst.options.snap.release.call(
							inst.element,
							event,
							$.extend( inst._uiHash(), { snapItem: inst.snapElements[ i ].item } )
						) );
				}
				inst.snapElements[ i ].snapping = false;
				continue;
			}

			if ( o.snapMode !== "inner" ) {
				ts = Math.abs( t - y2 ) <= d;
				bs = Math.abs( b - y1 ) <= d;
				ls = Math.abs( l - x2 ) <= d;
				rs = Math.abs( r - x1 ) <= d;
				if ( ts ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: t - inst.helperProportions.height,
						left: 0
					} ).top;
				}
				if ( bs ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: b,
						left: 0
					} ).top;
				}
				if ( ls ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: l - inst.helperProportions.width
					} ).left;
				}
				if ( rs ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: r
					} ).left;
				}
			}

			first = ( ts || bs || ls || rs );

			if ( o.snapMode !== "outer" ) {
				ts = Math.abs( t - y1 ) <= d;
				bs = Math.abs( b - y2 ) <= d;
				ls = Math.abs( l - x1 ) <= d;
				rs = Math.abs( r - x2 ) <= d;
				if ( ts ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: t,
						left: 0
					} ).top;
				}
				if ( bs ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: b - inst.helperProportions.height,
						left: 0
					} ).top;
				}
				if ( ls ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: l
					} ).left;
				}
				if ( rs ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: r - inst.helperProportions.width
					} ).left;
				}
			}

			if ( !inst.snapElements[ i ].snapping && ( ts || bs || ls || rs || first ) ) {
				( inst.options.snap.snap &&
					inst.options.snap.snap.call(
						inst.element,
						event,
						$.extend( inst._uiHash(), {
							snapItem: inst.snapElements[ i ].item
						} ) ) );
			}
			inst.snapElements[ i ].snapping = ( ts || bs || ls || rs || first );

		}

	}
} );

$.ui.plugin.add( "draggable", "stack", {
	start: function( event, ui, instance ) {
		var min,
			o = instance.options,
			group = $.makeArray( $( o.stack ) ).sort( function( a, b ) {
				return ( parseInt( $( a ).css( "zIndex" ), 10 ) || 0 ) -
					( parseInt( $( b ).css( "zIndex" ), 10 ) || 0 );
			} );

		if ( !group.length ) { return; }

		min = parseInt( $( group[ 0 ] ).css( "zIndex" ), 10 ) || 0;
		$( group ).each( function( i ) {
			$( this ).css( "zIndex", min + i );
		} );
		this.css( "zIndex", ( min + group.length ) );
	}
} );

$.ui.plugin.add( "draggable", "zIndex", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;

		if ( t.css( "zIndex" ) ) {
			o._zIndex = t.css( "zIndex" );
		}
		t.css( "zIndex", o.zIndex );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;

		if ( o._zIndex ) {
			$( ui.helper ).css( "zIndex", o._zIndex );
		}
	}
} );

var widgetsDraggable = $.ui.draggable;


/*!
 * jQuery UI Resizable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Resizable
//>>group: Interactions
//>>description: Enables resize functionality for any element.
//>>docs: http://api.jqueryui.com/resizable/
//>>demos: http://jqueryui.com/resizable/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/resizable.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.resizable", $.ui.mouse, {
	version: "1.12.1",
	widgetEventPrefix: "resize",
	options: {
		alsoResize: false,
		animate: false,
		animateDuration: "slow",
		animateEasing: "swing",
		aspectRatio: false,
		autoHide: false,
		classes: {
			"ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se"
		},
		containment: false,
		ghost: false,
		grid: false,
		handles: "e,s,se",
		helper: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 10,
		minWidth: 10,

		// See #7960
		zIndex: 90,

		// Callbacks
		resize: null,
		start: null,
		stop: null
	},

	_num: function( value ) {
		return parseFloat( value ) || 0;
	},

	_isNumber: function( value ) {
		return !isNaN( parseFloat( value ) );
	},

	_hasScroll: function( el, a ) {

		if ( $( el ).css( "overflow" ) === "hidden" ) {
			return false;
		}

		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;

		if ( el[ scroll ] > 0 ) {
			return true;
		}

		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	},

	_create: function() {

		var margins,
			o = this.options,
			that = this;
		this._addClass( "ui-resizable" );

		$.extend( this, {
			_aspectRatio: !!( o.aspectRatio ),
			aspectRatio: o.aspectRatio,
			originalElement: this.element,
			_proportionallyResizeElements: [],
			_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
		} );

		// Wrap the element if it cannot hold child nodes
		if ( this.element[ 0 ].nodeName.match( /^(canvas|textarea|input|select|button|img)$/i ) ) {

			this.element.wrap(
				$( "<div class='ui-wrapper' style='overflow: hidden;'></div>" ).css( {
					position: this.element.css( "position" ),
					width: this.element.outerWidth(),
					height: this.element.outerHeight(),
					top: this.element.css( "top" ),
					left: this.element.css( "left" )
				} )
			);

			this.element = this.element.parent().data(
				"ui-resizable", this.element.resizable( "instance" )
			);

			this.elementIsWrapper = true;

			margins = {
				marginTop: this.originalElement.css( "marginTop" ),
				marginRight: this.originalElement.css( "marginRight" ),
				marginBottom: this.originalElement.css( "marginBottom" ),
				marginLeft: this.originalElement.css( "marginLeft" )
			};

			this.element.css( margins );
			this.originalElement.css( "margin", 0 );

			// support: Safari
			// Prevent Safari textarea resize
			this.originalResizeStyle = this.originalElement.css( "resize" );
			this.originalElement.css( "resize", "none" );

			this._proportionallyResizeElements.push( this.originalElement.css( {
				position: "static",
				zoom: 1,
				display: "block"
			} ) );

			// Support: IE9
			// avoid IE jump (hard set the margin)
			this.originalElement.css( margins );

			this._proportionallyResize();
		}

		this._setupHandles();

		if ( o.autoHide ) {
			$( this.element )
				.on( "mouseenter", function() {
					if ( o.disabled ) {
						return;
					}
					that._removeClass( "ui-resizable-autohide" );
					that._handles.show();
				} )
				.on( "mouseleave", function() {
					if ( o.disabled ) {
						return;
					}
					if ( !that.resizing ) {
						that._addClass( "ui-resizable-autohide" );
						that._handles.hide();
					}
				} );
		}

		this._mouseInit();
	},

	_destroy: function() {

		this._mouseDestroy();

		var wrapper,
			_destroy = function( exp ) {
				$( exp )
					.removeData( "resizable" )
					.removeData( "ui-resizable" )
					.off( ".resizable" )
					.find( ".ui-resizable-handle" )
						.remove();
			};

		// TODO: Unwrap at same DOM position
		if ( this.elementIsWrapper ) {
			_destroy( this.element );
			wrapper = this.element;
			this.originalElement.css( {
				position: wrapper.css( "position" ),
				width: wrapper.outerWidth(),
				height: wrapper.outerHeight(),
				top: wrapper.css( "top" ),
				left: wrapper.css( "left" )
			} ).insertAfter( wrapper );
			wrapper.remove();
		}

		this.originalElement.css( "resize", this.originalResizeStyle );
		_destroy( this.originalElement );

		return this;
	},

	_setOption: function( key, value ) {
		this._super( key, value );

		switch ( key ) {
		case "handles":
			this._removeHandles();
			this._setupHandles();
			break;
		default:
			break;
		}
	},

	_setupHandles: function() {
		var o = this.options, handle, i, n, hname, axis, that = this;
		this.handles = o.handles ||
			( !$( ".ui-resizable-handle", this.element ).length ?
				"e,s,se" : {
					n: ".ui-resizable-n",
					e: ".ui-resizable-e",
					s: ".ui-resizable-s",
					w: ".ui-resizable-w",
					se: ".ui-resizable-se",
					sw: ".ui-resizable-sw",
					ne: ".ui-resizable-ne",
					nw: ".ui-resizable-nw"
				} );

		this._handles = $();
		if ( this.handles.constructor === String ) {

			if ( this.handles === "all" ) {
				this.handles = "n,e,s,w,se,sw,ne,nw";
			}

			n = this.handles.split( "," );
			this.handles = {};

			for ( i = 0; i < n.length; i++ ) {

				handle = $.trim( n[ i ] );
				hname = "ui-resizable-" + handle;
				axis = $( "<div>" );
				this._addClass( axis, "ui-resizable-handle " + hname );

				axis.css( { zIndex: o.zIndex } );

				this.handles[ handle ] = ".ui-resizable-" + handle;
				this.element.append( axis );
			}

		}

		this._renderAxis = function( target ) {

			var i, axis, padPos, padWrapper;

			target = target || this.element;

			for ( i in this.handles ) {

				if ( this.handles[ i ].constructor === String ) {
					this.handles[ i ] = this.element.children( this.handles[ i ] ).first().show();
				} else if ( this.handles[ i ].jquery || this.handles[ i ].nodeType ) {
					this.handles[ i ] = $( this.handles[ i ] );
					this._on( this.handles[ i ], { "mousedown": that._mouseDown } );
				}

				if ( this.elementIsWrapper &&
						this.originalElement[ 0 ]
							.nodeName
							.match( /^(textarea|input|select|button)$/i ) ) {
					axis = $( this.handles[ i ], this.element );

					padWrapper = /sw|ne|nw|se|n|s/.test( i ) ?
						axis.outerHeight() :
						axis.outerWidth();

					padPos = [ "padding",
						/ne|nw|n/.test( i ) ? "Top" :
						/se|sw|s/.test( i ) ? "Bottom" :
						/^e$/.test( i ) ? "Right" : "Left" ].join( "" );

					target.css( padPos, padWrapper );

					this._proportionallyResize();
				}

				this._handles = this._handles.add( this.handles[ i ] );
			}
		};

		// TODO: make renderAxis a prototype function
		this._renderAxis( this.element );

		this._handles = this._handles.add( this.element.find( ".ui-resizable-handle" ) );
		this._handles.disableSelection();

		this._handles.on( "mouseover", function() {
			if ( !that.resizing ) {
				if ( this.className ) {
					axis = this.className.match( /ui-resizable-(se|sw|ne|nw|n|e|s|w)/i );
				}
				that.axis = axis && axis[ 1 ] ? axis[ 1 ] : "se";
			}
		} );

		if ( o.autoHide ) {
			this._handles.hide();
			this._addClass( "ui-resizable-autohide" );
		}
	},

	_removeHandles: function() {
		this._handles.remove();
	},

	_mouseCapture: function( event ) {
		var i, handle,
			capture = false;

		for ( i in this.handles ) {
			handle = $( this.handles[ i ] )[ 0 ];
			if ( handle === event.target || $.contains( handle, event.target ) ) {
				capture = true;
			}
		}

		return !this.options.disabled && capture;
	},

	_mouseStart: function( event ) {

		var curleft, curtop, cursor,
			o = this.options,
			el = this.element;

		this.resizing = true;

		this._renderProxy();

		curleft = this._num( this.helper.css( "left" ) );
		curtop = this._num( this.helper.css( "top" ) );

		if ( o.containment ) {
			curleft += $( o.containment ).scrollLeft() || 0;
			curtop += $( o.containment ).scrollTop() || 0;
		}

		this.offset = this.helper.offset();
		this.position = { left: curleft, top: curtop };

		this.size = this._helper ? {
				width: this.helper.width(),
				height: this.helper.height()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.originalSize = this._helper ? {
				width: el.outerWidth(),
				height: el.outerHeight()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.sizeDiff = {
			width: el.outerWidth() - el.width(),
			height: el.outerHeight() - el.height()
		};

		this.originalPosition = { left: curleft, top: curtop };
		this.originalMousePosition = { left: event.pageX, top: event.pageY };

		this.aspectRatio = ( typeof o.aspectRatio === "number" ) ?
			o.aspectRatio :
			( ( this.originalSize.width / this.originalSize.height ) || 1 );

		cursor = $( ".ui-resizable-" + this.axis ).css( "cursor" );
		$( "body" ).css( "cursor", cursor === "auto" ? this.axis + "-resize" : cursor );

		this._addClass( "ui-resizable-resizing" );
		this._propagate( "start", event );
		return true;
	},

	_mouseDrag: function( event ) {

		var data, props,
			smp = this.originalMousePosition,
			a = this.axis,
			dx = ( event.pageX - smp.left ) || 0,
			dy = ( event.pageY - smp.top ) || 0,
			trigger = this._change[ a ];

		this._updatePrevProperties();

		if ( !trigger ) {
			return false;
		}

		data = trigger.apply( this, [ event, dx, dy ] );

		this._updateVirtualBoundaries( event.shiftKey );
		if ( this._aspectRatio || event.shiftKey ) {
			data = this._updateRatio( data, event );
		}

		data = this._respectSize( data, event );

		this._updateCache( data );

		this._propagate( "resize", event );

		props = this._applyChanges();

		if ( !this._helper && this._proportionallyResizeElements.length ) {
			this._proportionallyResize();
		}

		if ( !$.isEmptyObject( props ) ) {
			this._updatePrevProperties();
			this._trigger( "resize", event, this.ui() );
			this._applyChanges();
		}

		return false;
	},

	_mouseStop: function( event ) {

		this.resizing = false;
		var pr, ista, soffseth, soffsetw, s, left, top,
			o = this.options, that = this;

		if ( this._helper ) {

			pr = this._proportionallyResizeElements;
			ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName );
			soffseth = ista && this._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height;
			soffsetw = ista ? 0 : that.sizeDiff.width;

			s = {
				width: ( that.helper.width()  - soffsetw ),
				height: ( that.helper.height() - soffseth )
			};
			left = ( parseFloat( that.element.css( "left" ) ) +
				( that.position.left - that.originalPosition.left ) ) || null;
			top = ( parseFloat( that.element.css( "top" ) ) +
				( that.position.top - that.originalPosition.top ) ) || null;

			if ( !o.animate ) {
				this.element.css( $.extend( s, { top: top, left: left } ) );
			}

			that.helper.height( that.size.height );
			that.helper.width( that.size.width );

			if ( this._helper && !o.animate ) {
				this._proportionallyResize();
			}
		}

		$( "body" ).css( "cursor", "auto" );

		this._removeClass( "ui-resizable-resizing" );

		this._propagate( "stop", event );

		if ( this._helper ) {
			this.helper.remove();
		}

		return false;

	},

	_updatePrevProperties: function() {
		this.prevPosition = {
			top: this.position.top,
			left: this.position.left
		};
		this.prevSize = {
			width: this.size.width,
			height: this.size.height
		};
	},

	_applyChanges: function() {
		var props = {};

		if ( this.position.top !== this.prevPosition.top ) {
			props.top = this.position.top + "px";
		}
		if ( this.position.left !== this.prevPosition.left ) {
			props.left = this.position.left + "px";
		}
		if ( this.size.width !== this.prevSize.width ) {
			props.width = this.size.width + "px";
		}
		if ( this.size.height !== this.prevSize.height ) {
			props.height = this.size.height + "px";
		}

		this.helper.css( props );

		return props;
	},

	_updateVirtualBoundaries: function( forceAspectRatio ) {
		var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
			o = this.options;

		b = {
			minWidth: this._isNumber( o.minWidth ) ? o.minWidth : 0,
			maxWidth: this._isNumber( o.maxWidth ) ? o.maxWidth : Infinity,
			minHeight: this._isNumber( o.minHeight ) ? o.minHeight : 0,
			maxHeight: this._isNumber( o.maxHeight ) ? o.maxHeight : Infinity
		};

		if ( this._aspectRatio || forceAspectRatio ) {
			pMinWidth = b.minHeight * this.aspectRatio;
			pMinHeight = b.minWidth / this.aspectRatio;
			pMaxWidth = b.maxHeight * this.aspectRatio;
			pMaxHeight = b.maxWidth / this.aspectRatio;

			if ( pMinWidth > b.minWidth ) {
				b.minWidth = pMinWidth;
			}
			if ( pMinHeight > b.minHeight ) {
				b.minHeight = pMinHeight;
			}
			if ( pMaxWidth < b.maxWidth ) {
				b.maxWidth = pMaxWidth;
			}
			if ( pMaxHeight < b.maxHeight ) {
				b.maxHeight = pMaxHeight;
			}
		}
		this._vBoundaries = b;
	},

	_updateCache: function( data ) {
		this.offset = this.helper.offset();
		if ( this._isNumber( data.left ) ) {
			this.position.left = data.left;
		}
		if ( this._isNumber( data.top ) ) {
			this.position.top = data.top;
		}
		if ( this._isNumber( data.height ) ) {
			this.size.height = data.height;
		}
		if ( this._isNumber( data.width ) ) {
			this.size.width = data.width;
		}
	},

	_updateRatio: function( data ) {

		var cpos = this.position,
			csize = this.size,
			a = this.axis;

		if ( this._isNumber( data.height ) ) {
			data.width = ( data.height * this.aspectRatio );
		} else if ( this._isNumber( data.width ) ) {
			data.height = ( data.width / this.aspectRatio );
		}

		if ( a === "sw" ) {
			data.left = cpos.left + ( csize.width - data.width );
			data.top = null;
		}
		if ( a === "nw" ) {
			data.top = cpos.top + ( csize.height - data.height );
			data.left = cpos.left + ( csize.width - data.width );
		}

		return data;
	},

	_respectSize: function( data ) {

		var o = this._vBoundaries,
			a = this.axis,
			ismaxw = this._isNumber( data.width ) && o.maxWidth && ( o.maxWidth < data.width ),
			ismaxh = this._isNumber( data.height ) && o.maxHeight && ( o.maxHeight < data.height ),
			isminw = this._isNumber( data.width ) && o.minWidth && ( o.minWidth > data.width ),
			isminh = this._isNumber( data.height ) && o.minHeight && ( o.minHeight > data.height ),
			dw = this.originalPosition.left + this.originalSize.width,
			dh = this.originalPosition.top + this.originalSize.height,
			cw = /sw|nw|w/.test( a ), ch = /nw|ne|n/.test( a );
		if ( isminw ) {
			data.width = o.minWidth;
		}
		if ( isminh ) {
			data.height = o.minHeight;
		}
		if ( ismaxw ) {
			data.width = o.maxWidth;
		}
		if ( ismaxh ) {
			data.height = o.maxHeight;
		}

		if ( isminw && cw ) {
			data.left = dw - o.minWidth;
		}
		if ( ismaxw && cw ) {
			data.left = dw - o.maxWidth;
		}
		if ( isminh && ch ) {
			data.top = dh - o.minHeight;
		}
		if ( ismaxh && ch ) {
			data.top = dh - o.maxHeight;
		}

		// Fixing jump error on top/left - bug #2330
		if ( !data.width && !data.height && !data.left && data.top ) {
			data.top = null;
		} else if ( !data.width && !data.height && !data.top && data.left ) {
			data.left = null;
		}

		return data;
	},

	_getPaddingPlusBorderDimensions: function( element ) {
		var i = 0,
			widths = [],
			borders = [
				element.css( "borderTopWidth" ),
				element.css( "borderRightWidth" ),
				element.css( "borderBottomWidth" ),
				element.css( "borderLeftWidth" )
			],
			paddings = [
				element.css( "paddingTop" ),
				element.css( "paddingRight" ),
				element.css( "paddingBottom" ),
				element.css( "paddingLeft" )
			];

		for ( ; i < 4; i++ ) {
			widths[ i ] = ( parseFloat( borders[ i ] ) || 0 );
			widths[ i ] += ( parseFloat( paddings[ i ] ) || 0 );
		}

		return {
			height: widths[ 0 ] + widths[ 2 ],
			width: widths[ 1 ] + widths[ 3 ]
		};
	},

	_proportionallyResize: function() {

		if ( !this._proportionallyResizeElements.length ) {
			return;
		}

		var prel,
			i = 0,
			element = this.helper || this.element;

		for ( ; i < this._proportionallyResizeElements.length; i++ ) {

			prel = this._proportionallyResizeElements[ i ];

			// TODO: Seems like a bug to cache this.outerDimensions
			// considering that we are in a loop.
			if ( !this.outerDimensions ) {
				this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );
			}

			prel.css( {
				height: ( element.height() - this.outerDimensions.height ) || 0,
				width: ( element.width() - this.outerDimensions.width ) || 0
			} );

		}

	},

	_renderProxy: function() {

		var el = this.element, o = this.options;
		this.elementOffset = el.offset();

		if ( this._helper ) {

			this.helper = this.helper || $( "<div style='overflow:hidden;'></div>" );

			this._addClass( this.helper, this._helper );
			this.helper.css( {
				width: this.element.outerWidth(),
				height: this.element.outerHeight(),
				position: "absolute",
				left: this.elementOffset.left + "px",
				top: this.elementOffset.top + "px",
				zIndex: ++o.zIndex //TODO: Don't modify option
			} );

			this.helper
				.appendTo( "body" )
				.disableSelection();

		} else {
			this.helper = this.element;
		}

	},

	_change: {
		e: function( event, dx ) {
			return { width: this.originalSize.width + dx };
		},
		w: function( event, dx ) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { left: sp.left + dx, width: cs.width - dx };
		},
		n: function( event, dx, dy ) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { top: sp.top + dy, height: cs.height - dy };
		},
		s: function( event, dx, dy ) {
			return { height: this.originalSize.height + dy };
		},
		se: function( event, dx, dy ) {
			return $.extend( this._change.s.apply( this, arguments ),
				this._change.e.apply( this, [ event, dx, dy ] ) );
		},
		sw: function( event, dx, dy ) {
			return $.extend( this._change.s.apply( this, arguments ),
				this._change.w.apply( this, [ event, dx, dy ] ) );
		},
		ne: function( event, dx, dy ) {
			return $.extend( this._change.n.apply( this, arguments ),
				this._change.e.apply( this, [ event, dx, dy ] ) );
		},
		nw: function( event, dx, dy ) {
			return $.extend( this._change.n.apply( this, arguments ),
				this._change.w.apply( this, [ event, dx, dy ] ) );
		}
	},

	_propagate: function( n, event ) {
		$.ui.plugin.call( this, n, [ event, this.ui() ] );
		( n !== "resize" && this._trigger( n, event, this.ui() ) );
	},

	plugins: {},

	ui: function() {
		return {
			originalElement: this.originalElement,
			element: this.element,
			helper: this.helper,
			position: this.position,
			size: this.size,
			originalSize: this.originalSize,
			originalPosition: this.originalPosition
		};
	}

} );

/*
 * Resizable Extensions
 */

$.ui.plugin.add( "resizable", "animate", {

	stop: function( event ) {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			pr = that._proportionallyResizeElements,
			ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName ),
			soffseth = ista && that._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height,
			soffsetw = ista ? 0 : that.sizeDiff.width,
			style = {
				width: ( that.size.width - soffsetw ),
				height: ( that.size.height - soffseth )
			},
			left = ( parseFloat( that.element.css( "left" ) ) +
				( that.position.left - that.originalPosition.left ) ) || null,
			top = ( parseFloat( that.element.css( "top" ) ) +
				( that.position.top - that.originalPosition.top ) ) || null;

		that.element.animate(
			$.extend( style, top && left ? { top: top, left: left } : {} ), {
				duration: o.animateDuration,
				easing: o.animateEasing,
				step: function() {

					var data = {
						width: parseFloat( that.element.css( "width" ) ),
						height: parseFloat( that.element.css( "height" ) ),
						top: parseFloat( that.element.css( "top" ) ),
						left: parseFloat( that.element.css( "left" ) )
					};

					if ( pr && pr.length ) {
						$( pr[ 0 ] ).css( { width: data.width, height: data.height } );
					}

					// Propagating resize, and updating values for each animation step
					that._updateCache( data );
					that._propagate( "resize", event );

				}
			}
		);
	}

} );

$.ui.plugin.add( "resizable", "containment", {

	start: function() {
		var element, p, co, ch, cw, width, height,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			el = that.element,
			oc = o.containment,
			ce = ( oc instanceof $ ) ?
				oc.get( 0 ) :
				( /parent/.test( oc ) ) ? el.parent().get( 0 ) : oc;

		if ( !ce ) {
			return;
		}

		that.containerElement = $( ce );

		if ( /document/.test( oc ) || oc === document ) {
			that.containerOffset = {
				left: 0,
				top: 0
			};
			that.containerPosition = {
				left: 0,
				top: 0
			};

			that.parentData = {
				element: $( document ),
				left: 0,
				top: 0,
				width: $( document ).width(),
				height: $( document ).height() || document.body.parentNode.scrollHeight
			};
		} else {
			element = $( ce );
			p = [];
			$( [ "Top", "Right", "Left", "Bottom" ] ).each( function( i, name ) {
				p[ i ] = that._num( element.css( "padding" + name ) );
			} );

			that.containerOffset = element.offset();
			that.containerPosition = element.position();
			that.containerSize = {
				height: ( element.innerHeight() - p[ 3 ] ),
				width: ( element.innerWidth() - p[ 1 ] )
			};

			co = that.containerOffset;
			ch = that.containerSize.height;
			cw = that.containerSize.width;
			width = ( that._hasScroll ( ce, "left" ) ? ce.scrollWidth : cw );
			height = ( that._hasScroll ( ce ) ? ce.scrollHeight : ch ) ;

			that.parentData = {
				element: ce,
				left: co.left,
				top: co.top,
				width: width,
				height: height
			};
		}
	},

	resize: function( event ) {
		var woset, hoset, isParent, isOffsetRelative,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cp = that.position,
			pRatio = that._aspectRatio || event.shiftKey,
			cop = {
				top: 0,
				left: 0
			},
			ce = that.containerElement,
			continueResize = true;

		if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( "position" ) ) ) {
			cop = co;
		}

		if ( cp.left < ( that._helper ? co.left : 0 ) ) {
			that.size.width = that.size.width +
				( that._helper ?
					( that.position.left - co.left ) :
					( that.position.left - cop.left ) );

			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
			that.position.left = o.helper ? co.left : 0;
		}

		if ( cp.top < ( that._helper ? co.top : 0 ) ) {
			that.size.height = that.size.height +
				( that._helper ?
					( that.position.top - co.top ) :
					that.position.top );

			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
			that.position.top = that._helper ? co.top : 0;
		}

		isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );
		isOffsetRelative = /relative|absolute/.test( that.containerElement.css( "position" ) );

		if ( isParent && isOffsetRelative ) {
			that.offset.left = that.parentData.left + that.position.left;
			that.offset.top = that.parentData.top + that.position.top;
		} else {
			that.offset.left = that.element.offset().left;
			that.offset.top = that.element.offset().top;
		}

		woset = Math.abs( that.sizeDiff.width +
			( that._helper ?
				that.offset.left - cop.left :
				( that.offset.left - co.left ) ) );

		hoset = Math.abs( that.sizeDiff.height +
			( that._helper ?
				that.offset.top - cop.top :
				( that.offset.top - co.top ) ) );

		if ( woset + that.size.width >= that.parentData.width ) {
			that.size.width = that.parentData.width - woset;
			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
		}

		if ( hoset + that.size.height >= that.parentData.height ) {
			that.size.height = that.parentData.height - hoset;
			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
		}

		if ( !continueResize ) {
			that.position.left = that.prevPosition.left;
			that.position.top = that.prevPosition.top;
			that.size.width = that.prevSize.width;
			that.size.height = that.prevSize.height;
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cop = that.containerPosition,
			ce = that.containerElement,
			helper = $( that.helper ),
			ho = helper.offset(),
			w = helper.outerWidth() - that.sizeDiff.width,
			h = helper.outerHeight() - that.sizeDiff.height;

		if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( "position" ) ) ) {
			$( this ).css( {
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			} );
		}

		if ( that._helper && !o.animate && ( /static/ ).test( ce.css( "position" ) ) ) {
			$( this ).css( {
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			} );
		}
	}
} );

$.ui.plugin.add( "resizable", "alsoResize", {

	start: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options;

		$( o.alsoResize ).each( function() {
			var el = $( this );
			el.data( "ui-resizable-alsoresize", {
				width: parseFloat( el.width() ), height: parseFloat( el.height() ),
				left: parseFloat( el.css( "left" ) ), top: parseFloat( el.css( "top" ) )
			} );
		} );
	},

	resize: function( event, ui ) {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			os = that.originalSize,
			op = that.originalPosition,
			delta = {
				height: ( that.size.height - os.height ) || 0,
				width: ( that.size.width - os.width ) || 0,
				top: ( that.position.top - op.top ) || 0,
				left: ( that.position.left - op.left ) || 0
			};

			$( o.alsoResize ).each( function() {
				var el = $( this ), start = $( this ).data( "ui-resizable-alsoresize" ), style = {},
					css = el.parents( ui.originalElement[ 0 ] ).length ?
							[ "width", "height" ] :
							[ "width", "height", "top", "left" ];

				$.each( css, function( i, prop ) {
					var sum = ( start[ prop ] || 0 ) + ( delta[ prop ] || 0 );
					if ( sum && sum >= 0 ) {
						style[ prop ] = sum || null;
					}
				} );

				el.css( style );
			} );
	},

	stop: function() {
		$( this ).removeData( "ui-resizable-alsoresize" );
	}
} );

$.ui.plugin.add( "resizable", "ghost", {

	start: function() {

		var that = $( this ).resizable( "instance" ), cs = that.size;

		that.ghost = that.originalElement.clone();
		that.ghost.css( {
			opacity: 0.25,
			display: "block",
			position: "relative",
			height: cs.height,
			width: cs.width,
			margin: 0,
			left: 0,
			top: 0
		} );

		that._addClass( that.ghost, "ui-resizable-ghost" );

		// DEPRECATED
		// TODO: remove after 1.12
		if ( $.uiBackCompat !== false && typeof that.options.ghost === "string" ) {

			// Ghost option
			that.ghost.addClass( this.options.ghost );
		}

		that.ghost.appendTo( that.helper );

	},

	resize: function() {
		var that = $( this ).resizable( "instance" );
		if ( that.ghost ) {
			that.ghost.css( {
				position: "relative",
				height: that.size.height,
				width: that.size.width
			} );
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" );
		if ( that.ghost && that.helper ) {
			that.helper.get( 0 ).removeChild( that.ghost.get( 0 ) );
		}
	}

} );

$.ui.plugin.add( "resizable", "grid", {

	resize: function() {
		var outerDimensions,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			cs = that.size,
			os = that.originalSize,
			op = that.originalPosition,
			a = that.axis,
			grid = typeof o.grid === "number" ? [ o.grid, o.grid ] : o.grid,
			gridX = ( grid[ 0 ] || 1 ),
			gridY = ( grid[ 1 ] || 1 ),
			ox = Math.round( ( cs.width - os.width ) / gridX ) * gridX,
			oy = Math.round( ( cs.height - os.height ) / gridY ) * gridY,
			newWidth = os.width + ox,
			newHeight = os.height + oy,
			isMaxWidth = o.maxWidth && ( o.maxWidth < newWidth ),
			isMaxHeight = o.maxHeight && ( o.maxHeight < newHeight ),
			isMinWidth = o.minWidth && ( o.minWidth > newWidth ),
			isMinHeight = o.minHeight && ( o.minHeight > newHeight );

		o.grid = grid;

		if ( isMinWidth ) {
			newWidth += gridX;
		}
		if ( isMinHeight ) {
			newHeight += gridY;
		}
		if ( isMaxWidth ) {
			newWidth -= gridX;
		}
		if ( isMaxHeight ) {
			newHeight -= gridY;
		}

		if ( /^(se|s|e)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
		} else if ( /^(ne)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.top = op.top - oy;
		} else if ( /^(sw)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.left = op.left - ox;
		} else {
			if ( newHeight - gridY <= 0 || newWidth - gridX <= 0 ) {
				outerDimensions = that._getPaddingPlusBorderDimensions( this );
			}

			if ( newHeight - gridY > 0 ) {
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else {
				newHeight = gridY - outerDimensions.height;
				that.size.height = newHeight;
				that.position.top = op.top + os.height - newHeight;
			}
			if ( newWidth - gridX > 0 ) {
				that.size.width = newWidth;
				that.position.left = op.left - ox;
			} else {
				newWidth = gridX - outerDimensions.width;
				that.size.width = newWidth;
				that.position.left = op.left + os.width - newWidth;
			}
		}
	}

} );

var widgetsResizable = $.ui.resizable;


/*!
 * jQuery UI Dialog 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Dialog
//>>group: Widgets
//>>description: Displays customizable dialog windows.
//>>docs: http://api.jqueryui.com/dialog/
//>>demos: http://jqueryui.com/dialog/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/dialog.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.dialog", {
	version: "1.12.1",
	options: {
		appendTo: "body",
		autoOpen: true,
		buttons: [],
		classes: {
			"ui-dialog": "ui-corner-all",
			"ui-dialog-titlebar": "ui-corner-all"
		},
		closeOnEscape: true,
		closeText: "Close",
		draggable: true,
		hide: null,
		height: "auto",
		maxHeight: null,
		maxWidth: null,
		minHeight: 150,
		minWidth: 150,
		modal: false,
		position: {
			my: "center",
			at: "center",
			of: window,
			collision: "fit",

			// Ensure the titlebar is always visible
			using: function( pos ) {
				var topOffset = $( this ).css( pos ).offset().top;
				if ( topOffset < 0 ) {
					$( this ).css( "top", pos.top - topOffset );
				}
			}
		},
		resizable: true,
		show: null,
		title: null,
		width: 300,

		// Callbacks
		beforeClose: null,
		close: null,
		drag: null,
		dragStart: null,
		dragStop: null,
		focus: null,
		open: null,
		resize: null,
		resizeStart: null,
		resizeStop: null
	},

	sizeRelatedOptions: {
		buttons: true,
		height: true,
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true,
		width: true
	},

	resizableRelatedOptions: {
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true
	},

	_create: function() {
		this.originalCss = {
			display: this.element[ 0 ].style.display,
			width: this.element[ 0 ].style.width,
			minHeight: this.element[ 0 ].style.minHeight,
			maxHeight: this.element[ 0 ].style.maxHeight,
			height: this.element[ 0 ].style.height
		};
		this.originalPosition = {
			parent: this.element.parent(),
			index: this.element.parent().children().index( this.element )
		};
		this.originalTitle = this.element.attr( "title" );
		if ( this.options.title == null && this.originalTitle != null ) {
			this.options.title = this.originalTitle;
		}

		// Dialogs can't be disabled
		if ( this.options.disabled ) {
			this.options.disabled = false;
		}

		this._createWrapper();

		this.element
			.show()
			.removeAttr( "title" )
			.appendTo( this.uiDialog );

		this._addClass( "ui-dialog-content", "ui-widget-content" );

		this._createTitlebar();
		this._createButtonPane();

		if ( this.options.draggable && $.fn.draggable ) {
			this._makeDraggable();
		}
		if ( this.options.resizable && $.fn.resizable ) {
			this._makeResizable();
		}

		this._isOpen = false;

		this._trackFocus();
	},

	_init: function() {
		if ( this.options.autoOpen ) {
			this.open();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;
		if ( element && ( element.jquery || element.nodeType ) ) {
			return $( element );
		}
		return this.document.find( element || "body" ).eq( 0 );
	},

	_destroy: function() {
		var next,
			originalPosition = this.originalPosition;

		this._untrackInstance();
		this._destroyOverlay();

		this.element
			.removeUniqueId()
			.css( this.originalCss )

			// Without detaching first, the following becomes really slow
			.detach();

		this.uiDialog.remove();

		if ( this.originalTitle ) {
			this.element.attr( "title", this.originalTitle );
		}

		next = originalPosition.parent.children().eq( originalPosition.index );

		// Don't try to place the dialog next to itself (#8613)
		if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {
			next.before( this.element );
		} else {
			originalPosition.parent.append( this.element );
		}
	},

	widget: function() {
		return this.uiDialog;
	},

	disable: $.noop,
	enable: $.noop,

	close: function( event ) {
		var that = this;

		if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
			return;
		}

		this._isOpen = false;
		this._focusedElement = null;
		this._destroyOverlay();
		this._untrackInstance();

		if ( !this.opener.filter( ":focusable" ).trigger( "focus" ).length ) {

			// Hiding a focused element doesn't trigger blur in WebKit
			// so in case we have nothing to focus on, explicitly blur the active element
			// https://bugs.webkit.org/show_bug.cgi?id=47182
			$.ui.safeBlur( $.ui.safeActiveElement( this.document[ 0 ] ) );
		}

		this._hide( this.uiDialog, this.options.hide, function() {
			that._trigger( "close", event );
		} );
	},

	isOpen: function() {
		return this._isOpen;
	},

	moveToTop: function() {
		this._moveToTop();
	},

	_moveToTop: function( event, silent ) {
		var moved = false,
			zIndices = this.uiDialog.siblings( ".ui-front:visible" ).map( function() {
				return +$( this ).css( "z-index" );
			} ).get(),
			zIndexMax = Math.max.apply( null, zIndices );

		if ( zIndexMax >= +this.uiDialog.css( "z-index" ) ) {
			this.uiDialog.css( "z-index", zIndexMax + 1 );
			moved = true;
		}

		if ( moved && !silent ) {
			this._trigger( "focus", event );
		}
		return moved;
	},

	open: function() {
		var that = this;
		if ( this._isOpen ) {
			if ( this._moveToTop() ) {
				this._focusTabbable();
			}
			return;
		}

		this._isOpen = true;
		this.opener = $( $.ui.safeActiveElement( this.document[ 0 ] ) );

		this._size();
		this._position();
		this._createOverlay();
		this._moveToTop( null, true );

		// Ensure the overlay is moved to the top with the dialog, but only when
		// opening. The overlay shouldn't move after the dialog is open so that
		// modeless dialogs opened after the modal dialog stack properly.
		if ( this.overlay ) {
			this.overlay.css( "z-index", this.uiDialog.css( "z-index" ) - 1 );
		}

		this._show( this.uiDialog, this.options.show, function() {
			that._focusTabbable();
			that._trigger( "focus" );
		} );

		// Track the dialog immediately upon openening in case a focus event
		// somehow occurs outside of the dialog before an element inside the
		// dialog is focused (#10152)
		this._makeFocusTarget();

		this._trigger( "open" );
	},

	_focusTabbable: function() {

		// Set focus to the first match:
		// 1. An element that was focused previously
		// 2. First element inside the dialog matching [autofocus]
		// 3. Tabbable element inside the content element
		// 4. Tabbable element inside the buttonpane
		// 5. The close button
		// 6. The dialog itself
		var hasFocus = this._focusedElement;
		if ( !hasFocus ) {
			hasFocus = this.element.find( "[autofocus]" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.element.find( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogButtonPane.find( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogTitlebarClose.filter( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialog;
		}
		hasFocus.eq( 0 ).trigger( "focus" );
	},

	_keepFocus: function( event ) {
		function checkFocus() {
			var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),
				isActive = this.uiDialog[ 0 ] === activeElement ||
					$.contains( this.uiDialog[ 0 ], activeElement );
			if ( !isActive ) {
				this._focusTabbable();
			}
		}
		event.preventDefault();
		checkFocus.call( this );

		// support: IE
		// IE <= 8 doesn't prevent moving focus even with event.preventDefault()
		// so we check again later
		this._delay( checkFocus );
	},

	_createWrapper: function() {
		this.uiDialog = $( "<div>" )
			.hide()
			.attr( {

				// Setting tabIndex makes the div focusable
				tabIndex: -1,
				role: "dialog"
			} )
			.appendTo( this._appendTo() );

		this._addClass( this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front" );
		this._on( this.uiDialog, {
			keydown: function( event ) {
				if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
						event.keyCode === $.ui.keyCode.ESCAPE ) {
					event.preventDefault();
					this.close( event );
					return;
				}

				// Prevent tabbing out of dialogs
				if ( event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented() ) {
					return;
				}
				var tabbables = this.uiDialog.find( ":tabbable" ),
					first = tabbables.filter( ":first" ),
					last = tabbables.filter( ":last" );

				if ( ( event.target === last[ 0 ] || event.target === this.uiDialog[ 0 ] ) &&
						!event.shiftKey ) {
					this._delay( function() {
						first.trigger( "focus" );
					} );
					event.preventDefault();
				} else if ( ( event.target === first[ 0 ] ||
						event.target === this.uiDialog[ 0 ] ) && event.shiftKey ) {
					this._delay( function() {
						last.trigger( "focus" );
					} );
					event.preventDefault();
				}
			},
			mousedown: function( event ) {
				if ( this._moveToTop( event ) ) {
					this._focusTabbable();
				}
			}
		} );

		// We assume that any existing aria-describedby attribute means
		// that the dialog content is marked up properly
		// otherwise we brute force the content as the description
		if ( !this.element.find( "[aria-describedby]" ).length ) {
			this.uiDialog.attr( {
				"aria-describedby": this.element.uniqueId().attr( "id" )
			} );
		}
	},

	_createTitlebar: function() {
		var uiDialogTitle;

		this.uiDialogTitlebar = $( "<div>" );
		this._addClass( this.uiDialogTitlebar,
			"ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix" );
		this._on( this.uiDialogTitlebar, {
			mousedown: function( event ) {

				// Don't prevent click on close button (#8838)
				// Focusing a dialog that is partially scrolled out of view
				// causes the browser to scroll it into view, preventing the click event
				if ( !$( event.target ).closest( ".ui-dialog-titlebar-close" ) ) {

					// Dialog isn't getting focus when dragging (#8063)
					this.uiDialog.trigger( "focus" );
				}
			}
		} );

		// Support: IE
		// Use type="button" to prevent enter keypresses in textboxes from closing the
		// dialog in IE (#9312)
		this.uiDialogTitlebarClose = $( "<button type='button'></button>" )
			.button( {
				label: $( "<a>" ).text( this.options.closeText ).html(),
				icon: "ui-icon-closethick",
				showLabel: false
			} )
			.appendTo( this.uiDialogTitlebar );

		this._addClass( this.uiDialogTitlebarClose, "ui-dialog-titlebar-close" );
		this._on( this.uiDialogTitlebarClose, {
			click: function( event ) {
				event.preventDefault();
				this.close( event );
			}
		} );

		uiDialogTitle = $( "<span>" ).uniqueId().prependTo( this.uiDialogTitlebar );
		this._addClass( uiDialogTitle, "ui-dialog-title" );
		this._title( uiDialogTitle );

		this.uiDialogTitlebar.prependTo( this.uiDialog );

		this.uiDialog.attr( {
			"aria-labelledby": uiDialogTitle.attr( "id" )
		} );
	},

	_title: function( title ) {
		if ( this.options.title ) {
			title.text( this.options.title );
		} else {
			title.html( "&#160;" );
		}
	},

	_createButtonPane: function() {
		this.uiDialogButtonPane = $( "<div>" );
		this._addClass( this.uiDialogButtonPane, "ui-dialog-buttonpane",
			"ui-widget-content ui-helper-clearfix" );

		this.uiButtonSet = $( "<div>" )
			.appendTo( this.uiDialogButtonPane );
		this._addClass( this.uiButtonSet, "ui-dialog-buttonset" );

		this._createButtons();
	},

	_createButtons: function() {
		var that = this,
			buttons = this.options.buttons;

		// If we already have a button pane, remove it
		this.uiDialogButtonPane.remove();
		this.uiButtonSet.empty();

		if ( $.isEmptyObject( buttons ) || ( $.isArray( buttons ) && !buttons.length ) ) {
			this._removeClass( this.uiDialog, "ui-dialog-buttons" );
			return;
		}

		$.each( buttons, function( name, props ) {
			var click, buttonOptions;
			props = $.isFunction( props ) ?
				{ click: props, text: name } :
				props;

			// Default to a non-submitting button
			props = $.extend( { type: "button" }, props );

			// Change the context for the click callback to be the main element
			click = props.click;
			buttonOptions = {
				icon: props.icon,
				iconPosition: props.iconPosition,
				showLabel: props.showLabel,

				// Deprecated options
				icons: props.icons,
				text: props.text
			};

			delete props.click;
			delete props.icon;
			delete props.iconPosition;
			delete props.showLabel;

			// Deprecated options
			delete props.icons;
			if ( typeof props.text === "boolean" ) {
				delete props.text;
			}

			$( "<button></button>", props )
				.button( buttonOptions )
				.appendTo( that.uiButtonSet )
				.on( "click", function() {
					click.apply( that.element[ 0 ], arguments );
				} );
		} );
		this._addClass( this.uiDialog, "ui-dialog-buttons" );
		this.uiDialogButtonPane.appendTo( this.uiDialog );
	},

	_makeDraggable: function() {
		var that = this,
			options = this.options;

		function filteredUi( ui ) {
			return {
				position: ui.position,
				offset: ui.offset
			};
		}

		this.uiDialog.draggable( {
			cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
			handle: ".ui-dialog-titlebar",
			containment: "document",
			start: function( event, ui ) {
				that._addClass( $( this ), "ui-dialog-dragging" );
				that._blockFrames();
				that._trigger( "dragStart", event, filteredUi( ui ) );
			},
			drag: function( event, ui ) {
				that._trigger( "drag", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var left = ui.offset.left - that.document.scrollLeft(),
					top = ui.offset.top - that.document.scrollTop();

				options.position = {
					my: "left top",
					at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
						"top" + ( top >= 0 ? "+" : "" ) + top,
					of: that.window
				};
				that._removeClass( $( this ), "ui-dialog-dragging" );
				that._unblockFrames();
				that._trigger( "dragStop", event, filteredUi( ui ) );
			}
		} );
	},

	_makeResizable: function() {
		var that = this,
			options = this.options,
			handles = options.resizable,

			// .ui-resizable has position: relative defined in the stylesheet
			// but dialogs have to use absolute or fixed positioning
			position = this.uiDialog.css( "position" ),
			resizeHandles = typeof handles === "string" ?
				handles :
				"n,e,s,w,se,sw,ne,nw";

		function filteredUi( ui ) {
			return {
				originalPosition: ui.originalPosition,
				originalSize: ui.originalSize,
				position: ui.position,
				size: ui.size
			};
		}

		this.uiDialog.resizable( {
			cancel: ".ui-dialog-content",
			containment: "document",
			alsoResize: this.element,
			maxWidth: options.maxWidth,
			maxHeight: options.maxHeight,
			minWidth: options.minWidth,
			minHeight: this._minHeight(),
			handles: resizeHandles,
			start: function( event, ui ) {
				that._addClass( $( this ), "ui-dialog-resizing" );
				that._blockFrames();
				that._trigger( "resizeStart", event, filteredUi( ui ) );
			},
			resize: function( event, ui ) {
				that._trigger( "resize", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var offset = that.uiDialog.offset(),
					left = offset.left - that.document.scrollLeft(),
					top = offset.top - that.document.scrollTop();

				options.height = that.uiDialog.height();
				options.width = that.uiDialog.width();
				options.position = {
					my: "left top",
					at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
						"top" + ( top >= 0 ? "+" : "" ) + top,
					of: that.window
				};
				that._removeClass( $( this ), "ui-dialog-resizing" );
				that._unblockFrames();
				that._trigger( "resizeStop", event, filteredUi( ui ) );
			}
		} )
			.css( "position", position );
	},

	_trackFocus: function() {
		this._on( this.widget(), {
			focusin: function( event ) {
				this._makeFocusTarget();
				this._focusedElement = $( event.target );
			}
		} );
	},

	_makeFocusTarget: function() {
		this._untrackInstance();
		this._trackingInstances().unshift( this );
	},

	_untrackInstance: function() {
		var instances = this._trackingInstances(),
			exists = $.inArray( this, instances );
		if ( exists !== -1 ) {
			instances.splice( exists, 1 );
		}
	},

	_trackingInstances: function() {
		var instances = this.document.data( "ui-dialog-instances" );
		if ( !instances ) {
			instances = [];
			this.document.data( "ui-dialog-instances", instances );
		}
		return instances;
	},

	_minHeight: function() {
		var options = this.options;

		return options.height === "auto" ?
			options.minHeight :
			Math.min( options.minHeight, options.height );
	},

	_position: function() {

		// Need to show the dialog to get the actual offset in the position plugin
		var isVisible = this.uiDialog.is( ":visible" );
		if ( !isVisible ) {
			this.uiDialog.show();
		}
		this.uiDialog.position( this.options.position );
		if ( !isVisible ) {
			this.uiDialog.hide();
		}
	},

	_setOptions: function( options ) {
		var that = this,
			resize = false,
			resizableOptions = {};

		$.each( options, function( key, value ) {
			that._setOption( key, value );

			if ( key in that.sizeRelatedOptions ) {
				resize = true;
			}
			if ( key in that.resizableRelatedOptions ) {
				resizableOptions[ key ] = value;
			}
		} );

		if ( resize ) {
			this._size();
			this._position();
		}
		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
			this.uiDialog.resizable( "option", resizableOptions );
		}
	},

	_setOption: function( key, value ) {
		var isDraggable, isResizable,
			uiDialog = this.uiDialog;

		if ( key === "disabled" ) {
			return;
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.uiDialog.appendTo( this._appendTo() );
		}

		if ( key === "buttons" ) {
			this._createButtons();
		}

		if ( key === "closeText" ) {
			this.uiDialogTitlebarClose.button( {

				// Ensure that we always pass a string
				label: $( "<a>" ).text( "" + this.options.closeText ).html()
			} );
		}

		if ( key === "draggable" ) {
			isDraggable = uiDialog.is( ":data(ui-draggable)" );
			if ( isDraggable && !value ) {
				uiDialog.draggable( "destroy" );
			}

			if ( !isDraggable && value ) {
				this._makeDraggable();
			}
		}

		if ( key === "position" ) {
			this._position();
		}

		if ( key === "resizable" ) {

			// currently resizable, becoming non-resizable
			isResizable = uiDialog.is( ":data(ui-resizable)" );
			if ( isResizable && !value ) {
				uiDialog.resizable( "destroy" );
			}

			// Currently resizable, changing handles
			if ( isResizable && typeof value === "string" ) {
				uiDialog.resizable( "option", "handles", value );
			}

			// Currently non-resizable, becoming resizable
			if ( !isResizable && value !== false ) {
				this._makeResizable();
			}
		}

		if ( key === "title" ) {
			this._title( this.uiDialogTitlebar.find( ".ui-dialog-title" ) );
		}
	},

	_size: function() {

		// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
		// divs will both have width and height set, so we need to reset them
		var nonContentHeight, minContentHeight, maxContentHeight,
			options = this.options;

		// Reset content sizing
		this.element.show().css( {
			width: "auto",
			minHeight: 0,
			maxHeight: "none",
			height: 0
		} );

		if ( options.minWidth > options.width ) {
			options.width = options.minWidth;
		}

		// Reset wrapper sizing
		// determine the height of all the non-content elements
		nonContentHeight = this.uiDialog.css( {
			height: "auto",
			width: options.width
		} )
			.outerHeight();
		minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
		maxContentHeight = typeof options.maxHeight === "number" ?
			Math.max( 0, options.maxHeight - nonContentHeight ) :
			"none";

		if ( options.height === "auto" ) {
			this.element.css( {
				minHeight: minContentHeight,
				maxHeight: maxContentHeight,
				height: "auto"
			} );
		} else {
			this.element.height( Math.max( 0, options.height - nonContentHeight ) );
		}

		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
			this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
		}
	},

	_blockFrames: function() {
		this.iframeBlocks = this.document.find( "iframe" ).map( function() {
			var iframe = $( this );

			return $( "<div>" )
				.css( {
					position: "absolute",
					width: iframe.outerWidth(),
					height: iframe.outerHeight()
				} )
				.appendTo( iframe.parent() )
				.offset( iframe.offset() )[ 0 ];
		} );
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_allowInteraction: function( event ) {
		if ( $( event.target ).closest( ".ui-dialog" ).length ) {
			return true;
		}

		// TODO: Remove hack when datepicker implements
		// the .ui-front logic (#8989)
		return !!$( event.target ).closest( ".ui-datepicker" ).length;
	},

	_createOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		// We use a delay in case the overlay is created from an
		// event that we're going to be cancelling (#2804)
		var isOpening = true;
		this._delay( function() {
			isOpening = false;
		} );

		if ( !this.document.data( "ui-dialog-overlays" ) ) {

			// Prevent use of anchors and inputs
			// Using _on() for an event handler shared across many instances is
			// safe because the dialogs stack and must be closed in reverse order
			this._on( this.document, {
				focusin: function( event ) {
					if ( isOpening ) {
						return;
					}

					if ( !this._allowInteraction( event ) ) {
						event.preventDefault();
						this._trackingInstances()[ 0 ]._focusTabbable();
					}
				}
			} );
		}

		this.overlay = $( "<div>" )
			.appendTo( this._appendTo() );

		this._addClass( this.overlay, null, "ui-widget-overlay ui-front" );
		this._on( this.overlay, {
			mousedown: "_keepFocus"
		} );
		this.document.data( "ui-dialog-overlays",
			( this.document.data( "ui-dialog-overlays" ) || 0 ) + 1 );
	},

	_destroyOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		if ( this.overlay ) {
			var overlays = this.document.data( "ui-dialog-overlays" ) - 1;

			if ( !overlays ) {
				this._off( this.document, "focusin" );
				this.document.removeData( "ui-dialog-overlays" );
			} else {
				this.document.data( "ui-dialog-overlays", overlays );
			}

			this.overlay.remove();
			this.overlay = null;
		}
	}
} );

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for dialogClass option
	$.widget( "ui.dialog", $.ui.dialog, {
		options: {
			dialogClass: ""
		},
		_createWrapper: function() {
			this._super();
			this.uiDialog.addClass( this.options.dialogClass );
		},
		_setOption: function( key, value ) {
			if ( key === "dialogClass" ) {
				this.uiDialog
					.removeClass( this.options.dialogClass )
					.addClass( value );
			}
			this._superApply( arguments );
		}
	} );
}

var widgetsDialog = $.ui.dialog;


/*!
 * jQuery UI Droppable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Droppable
//>>group: Interactions
//>>description: Enables drop targets for draggable elements.
//>>docs: http://api.jqueryui.com/droppable/
//>>demos: http://jqueryui.com/droppable/



$.widget( "ui.droppable", {
	version: "1.12.1",
	widgetEventPrefix: "drop",
	options: {
		accept: "*",
		addClasses: true,
		greedy: false,
		scope: "default",
		tolerance: "intersect",

		// Callbacks
		activate: null,
		deactivate: null,
		drop: null,
		out: null,
		over: null
	},
	_create: function() {

		var proportions,
			o = this.options,
			accept = o.accept;

		this.isover = false;
		this.isout = true;

		this.accept = $.isFunction( accept ) ? accept : function( d ) {
			return d.is( accept );
		};

		this.proportions = function( /* valueToWrite */ ) {
			if ( arguments.length ) {

				// Store the droppable's proportions
				proportions = arguments[ 0 ];
			} else {

				// Retrieve or derive the droppable's proportions
				return proportions ?
					proportions :
					proportions = {
						width: this.element[ 0 ].offsetWidth,
						height: this.element[ 0 ].offsetHeight
					};
			}
		};

		this._addToManager( o.scope );

		o.addClasses && this._addClass( "ui-droppable" );

	},

	_addToManager: function( scope ) {

		// Add the reference and positions to the manager
		$.ui.ddmanager.droppables[ scope ] = $.ui.ddmanager.droppables[ scope ] || [];
		$.ui.ddmanager.droppables[ scope ].push( this );
	},

	_splice: function( drop ) {
		var i = 0;
		for ( ; i < drop.length; i++ ) {
			if ( drop[ i ] === this ) {
				drop.splice( i, 1 );
			}
		}
	},

	_destroy: function() {
		var drop = $.ui.ddmanager.droppables[ this.options.scope ];

		this._splice( drop );
	},

	_setOption: function( key, value ) {

		if ( key === "accept" ) {
			this.accept = $.isFunction( value ) ? value : function( d ) {
				return d.is( value );
			};
		} else if ( key === "scope" ) {
			var drop = $.ui.ddmanager.droppables[ this.options.scope ];

			this._splice( drop );
			this._addToManager( value );
		}

		this._super( key, value );
	},

	_activate: function( event ) {
		var draggable = $.ui.ddmanager.current;

		this._addActiveClass();
		if ( draggable ) {
			this._trigger( "activate", event, this.ui( draggable ) );
		}
	},

	_deactivate: function( event ) {
		var draggable = $.ui.ddmanager.current;

		this._removeActiveClass();
		if ( draggable ) {
			this._trigger( "deactivate", event, this.ui( draggable ) );
		}
	},

	_over: function( event ) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem ||
				draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||
				draggable.element ) ) ) {
			this._addHoverClass();
			this._trigger( "over", event, this.ui( draggable ) );
		}

	},

	_out: function( event ) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem ||
				draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||
				draggable.element ) ) ) {
			this._removeHoverClass();
			this._trigger( "out", event, this.ui( draggable ) );
		}

	},

	_drop: function( event, custom ) {

		var draggable = custom || $.ui.ddmanager.current,
			childrenIntersection = false;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem ||
				draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return false;
		}

		this.element
			.find( ":data(ui-droppable)" )
			.not( ".ui-draggable-dragging" )
			.each( function() {
				var inst = $( this ).droppable( "instance" );
				if (
					inst.options.greedy &&
					!inst.options.disabled &&
					inst.options.scope === draggable.options.scope &&
					inst.accept.call(
						inst.element[ 0 ], ( draggable.currentItem || draggable.element )
					) &&
					intersect(
						draggable,
						$.extend( inst, { offset: inst.element.offset() } ),
						inst.options.tolerance, event
					)
				) {
					childrenIntersection = true;
					return false; }
			} );
		if ( childrenIntersection ) {
			return false;
		}

		if ( this.accept.call( this.element[ 0 ],
				( draggable.currentItem || draggable.element ) ) ) {
			this._removeActiveClass();
			this._removeHoverClass();

			this._trigger( "drop", event, this.ui( draggable ) );
			return this.element;
		}

		return false;

	},

	ui: function( c ) {
		return {
			draggable: ( c.currentItem || c.element ),
			helper: c.helper,
			position: c.position,
			offset: c.positionAbs
		};
	},

	// Extension points just to make backcompat sane and avoid duplicating logic
	// TODO: Remove in 1.13 along with call to it below
	_addHoverClass: function() {
		this._addClass( "ui-droppable-hover" );
	},

	_removeHoverClass: function() {
		this._removeClass( "ui-droppable-hover" );
	},

	_addActiveClass: function() {
		this._addClass( "ui-droppable-active" );
	},

	_removeActiveClass: function() {
		this._removeClass( "ui-droppable-active" );
	}
} );

var intersect = $.ui.intersect = ( function() {
	function isOverAxis( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	}

	return function( draggable, droppable, toleranceMode, event ) {

		if ( !droppable.offset ) {
			return false;
		}

		var x1 = ( draggable.positionAbs ||
				draggable.position.absolute ).left + draggable.margins.left,
			y1 = ( draggable.positionAbs ||
				draggable.position.absolute ).top + draggable.margins.top,
			x2 = x1 + draggable.helperProportions.width,
			y2 = y1 + draggable.helperProportions.height,
			l = droppable.offset.left,
			t = droppable.offset.top,
			r = l + droppable.proportions().width,
			b = t + droppable.proportions().height;

		switch ( toleranceMode ) {
		case "fit":
			return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );
		case "intersect":
			return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half
				x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half
				t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half
				y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half
		case "pointer":
			return isOverAxis( event.pageY, t, droppable.proportions().height ) &&
				isOverAxis( event.pageX, l, droppable.proportions().width );
		case "touch":
			return (
				( y1 >= t && y1 <= b ) || // Top edge touching
				( y2 >= t && y2 <= b ) || // Bottom edge touching
				( y1 < t && y2 > b ) // Surrounded vertically
			) && (
				( x1 >= l && x1 <= r ) || // Left edge touching
				( x2 >= l && x2 <= r ) || // Right edge touching
				( x1 < l && x2 > r ) // Surrounded horizontally
			);
		default:
			return false;
		}
	};
} )();

/*
	This manager tracks offsets of draggables and droppables
*/
$.ui.ddmanager = {
	current: null,
	droppables: { "default": [] },
	prepareOffsets: function( t, event ) {

		var i, j,
			m = $.ui.ddmanager.droppables[ t.options.scope ] || [],
			type = event ? event.type : null, // workaround for #2317
			list = ( t.currentItem || t.element ).find( ":data(ui-droppable)" ).addBack();

		droppablesLoop: for ( i = 0; i < m.length; i++ ) {

			// No disabled and non-accepted
			if ( m[ i ].options.disabled || ( t && !m[ i ].accept.call( m[ i ].element[ 0 ],
					( t.currentItem || t.element ) ) ) ) {
				continue;
			}

			// Filter out elements in the current dragged item
			for ( j = 0; j < list.length; j++ ) {
				if ( list[ j ] === m[ i ].element[ 0 ] ) {
					m[ i ].proportions().height = 0;
					continue droppablesLoop;
				}
			}

			m[ i ].visible = m[ i ].element.css( "display" ) !== "none";
			if ( !m[ i ].visible ) {
				continue;
			}

			// Activate the droppable if used directly from draggables
			if ( type === "mousedown" ) {
				m[ i ]._activate.call( m[ i ], event );
			}

			m[ i ].offset = m[ i ].element.offset();
			m[ i ].proportions( {
				width: m[ i ].element[ 0 ].offsetWidth,
				height: m[ i ].element[ 0 ].offsetHeight
			} );

		}

	},
	drop: function( draggable, event ) {

		var dropped = false;

		// Create a copy of the droppables in case the list changes during the drop (#9116)
		$.each( ( $.ui.ddmanager.droppables[ draggable.options.scope ] || [] ).slice(), function() {

			if ( !this.options ) {
				return;
			}
			if ( !this.options.disabled && this.visible &&
					intersect( draggable, this, this.options.tolerance, event ) ) {
				dropped = this._drop.call( this, event ) || dropped;
			}

			if ( !this.options.disabled && this.visible && this.accept.call( this.element[ 0 ],
					( draggable.currentItem || draggable.element ) ) ) {
				this.isout = true;
				this.isover = false;
				this._deactivate.call( this, event );
			}

		} );
		return dropped;

	},
	dragStart: function( draggable, event ) {

		// Listen for scrolling so that if the dragging causes scrolling the position of the
		// droppables can be recalculated (see #5003)
		draggable.element.parentsUntil( "body" ).on( "scroll.droppable", function() {
			if ( !draggable.options.refreshPositions ) {
				$.ui.ddmanager.prepareOffsets( draggable, event );
			}
		} );
	},
	drag: function( draggable, event ) {

		// If you have a highly dynamic page, you might try this option. It renders positions
		// every time you move the mouse.
		if ( draggable.options.refreshPositions ) {
			$.ui.ddmanager.prepareOffsets( draggable, event );
		}

		// Run through all droppables and check their positions based on specific tolerance options
		$.each( $.ui.ddmanager.droppables[ draggable.options.scope ] || [], function() {

			if ( this.options.disabled || this.greedyChild || !this.visible ) {
				return;
			}

			var parentInstance, scope, parent,
				intersects = intersect( draggable, this, this.options.tolerance, event ),
				c = !intersects && this.isover ?
					"isout" :
					( intersects && !this.isover ? "isover" : null );
			if ( !c ) {
				return;
			}

			if ( this.options.greedy ) {

				// find droppable parents with same scope
				scope = this.options.scope;
				parent = this.element.parents( ":data(ui-droppable)" ).filter( function() {
					return $( this ).droppable( "instance" ).options.scope === scope;
				} );

				if ( parent.length ) {
					parentInstance = $( parent[ 0 ] ).droppable( "instance" );
					parentInstance.greedyChild = ( c === "isover" );
				}
			}

			// We just moved into a greedy child
			if ( parentInstance && c === "isover" ) {
				parentInstance.isover = false;
				parentInstance.isout = true;
				parentInstance._out.call( parentInstance, event );
			}

			this[ c ] = true;
			this[ c === "isout" ? "isover" : "isout" ] = false;
			this[ c === "isover" ? "_over" : "_out" ].call( this, event );

			// We just moved out of a greedy child
			if ( parentInstance && c === "isout" ) {
				parentInstance.isout = false;
				parentInstance.isover = true;
				parentInstance._over.call( parentInstance, event );
			}
		} );

	},
	dragStop: function( draggable, event ) {
		draggable.element.parentsUntil( "body" ).off( "scroll.droppable" );

		// Call prepareOffsets one final time since IE does not fire return scroll events when
		// overflow was caused by drag (see #5003)
		if ( !draggable.options.refreshPositions ) {
			$.ui.ddmanager.prepareOffsets( draggable, event );
		}
	}
};

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for activeClass and hoverClass options
	$.widget( "ui.droppable", $.ui.droppable, {
		options: {
			hoverClass: false,
			activeClass: false
		},
		_addActiveClass: function() {
			this._super();
			if ( this.options.activeClass ) {
				this.element.addClass( this.options.activeClass );
			}
		},
		_removeActiveClass: function() {
			this._super();
			if ( this.options.activeClass ) {
				this.element.removeClass( this.options.activeClass );
			}
		},
		_addHoverClass: function() {
			this._super();
			if ( this.options.hoverClass ) {
				this.element.addClass( this.options.hoverClass );
			}
		},
		_removeHoverClass: function() {
			this._super();
			if ( this.options.hoverClass ) {
				this.element.removeClass( this.options.hoverClass );
			}
		}
	} );
}

var widgetsDroppable = $.ui.droppable;


/*!
 * jQuery UI Progressbar 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Progressbar
//>>group: Widgets
// jscs:disable maximumLineLength
//>>description: Displays a status indicator for loading state, standard percentage, and other progress indicators.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/progressbar/
//>>demos: http://jqueryui.com/progressbar/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/progressbar.css
//>>css.theme: ../../themes/base/theme.css



var widgetsProgressbar = $.widget( "ui.progressbar", {
	version: "1.12.1",
	options: {
		classes: {
			"ui-progressbar": "ui-corner-all",
			"ui-progressbar-value": "ui-corner-left",
			"ui-progressbar-complete": "ui-corner-right"
		},
		max: 100,
		value: 0,

		change: null,
		complete: null
	},

	min: 0,

	_create: function() {

		// Constrain initial value
		this.oldValue = this.options.value = this._constrainedValue();

		this.element.attr( {

			// Only set static values; aria-valuenow and aria-valuemax are
			// set inside _refreshValue()
			role: "progressbar",
			"aria-valuemin": this.min
		} );
		this._addClass( "ui-progressbar", "ui-widget ui-widget-content" );

		this.valueDiv = $( "<div>" ).appendTo( this.element );
		this._addClass( this.valueDiv, "ui-progressbar-value", "ui-widget-header" );
		this._refreshValue();
	},

	_destroy: function() {
		this.element.removeAttr( "role aria-valuemin aria-valuemax aria-valuenow" );

		this.valueDiv.remove();
	},

	value: function( newValue ) {
		if ( newValue === undefined ) {
			return this.options.value;
		}

		this.options.value = this._constrainedValue( newValue );
		this._refreshValue();
	},

	_constrainedValue: function( newValue ) {
		if ( newValue === undefined ) {
			newValue = this.options.value;
		}

		this.indeterminate = newValue === false;

		// Sanitize value
		if ( typeof newValue !== "number" ) {
			newValue = 0;
		}

		return this.indeterminate ? false :
			Math.min( this.options.max, Math.max( this.min, newValue ) );
	},

	_setOptions: function( options ) {

		// Ensure "value" option is set after other values (like max)
		var value = options.value;
		delete options.value;

		this._super( options );

		this.options.value = this._constrainedValue( value );
		this._refreshValue();
	},

	_setOption: function( key, value ) {
		if ( key === "max" ) {

			// Don't allow a max less than min
			value = Math.max( this.min, value );
		}
		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", value );
		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	_percentage: function() {
		return this.indeterminate ?
			100 :
			100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
	},

	_refreshValue: function() {
		var value = this.options.value,
			percentage = this._percentage();

		this.valueDiv
			.toggle( this.indeterminate || value > this.min )
			.width( percentage.toFixed( 0 ) + "%" );

		this
			._toggleClass( this.valueDiv, "ui-progressbar-complete", null,
				value === this.options.max )
			._toggleClass( "ui-progressbar-indeterminate", null, this.indeterminate );

		if ( this.indeterminate ) {
			this.element.removeAttr( "aria-valuenow" );
			if ( !this.overlayDiv ) {
				this.overlayDiv = $( "<div>" ).appendTo( this.valueDiv );
				this._addClass( this.overlayDiv, "ui-progressbar-overlay" );
			}
		} else {
			this.element.attr( {
				"aria-valuemax": this.options.max,
				"aria-valuenow": value
			} );
			if ( this.overlayDiv ) {
				this.overlayDiv.remove();
				this.overlayDiv = null;
			}
		}

		if ( this.oldValue !== value ) {
			this.oldValue = value;
			this._trigger( "change" );
		}
		if ( value === this.options.max ) {
			this._trigger( "complete" );
		}
	}
} );


/*!
 * jQuery UI Selectable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Selectable
//>>group: Interactions
//>>description: Allows groups of elements to be selected with the mouse.
//>>docs: http://api.jqueryui.com/selectable/
//>>demos: http://jqueryui.com/selectable/
//>>css.structure: ../../themes/base/selectable.css



var widgetsSelectable = $.widget( "ui.selectable", $.ui.mouse, {
	version: "1.12.1",
	options: {
		appendTo: "body",
		autoRefresh: true,
		distance: 0,
		filter: "*",
		tolerance: "touch",

		// Callbacks
		selected: null,
		selecting: null,
		start: null,
		stop: null,
		unselected: null,
		unselecting: null
	},
	_create: function() {
		var that = this;

		this._addClass( "ui-selectable" );

		this.dragged = false;

		// Cache selectee children based on filter
		this.refresh = function() {
			that.elementPos = $( that.element[ 0 ] ).offset();
			that.selectees = $( that.options.filter, that.element[ 0 ] );
			that._addClass( that.selectees, "ui-selectee" );
			that.selectees.each( function() {
				var $this = $( this ),
					selecteeOffset = $this.offset(),
					pos = {
						left: selecteeOffset.left - that.elementPos.left,
						top: selecteeOffset.top - that.elementPos.top
					};
				$.data( this, "selectable-item", {
					element: this,
					$element: $this,
					left: pos.left,
					top: pos.top,
					right: pos.left + $this.outerWidth(),
					bottom: pos.top + $this.outerHeight(),
					startselected: false,
					selected: $this.hasClass( "ui-selected" ),
					selecting: $this.hasClass( "ui-selecting" ),
					unselecting: $this.hasClass( "ui-unselecting" )
				} );
			} );
		};
		this.refresh();

		this._mouseInit();

		this.helper = $( "<div>" );
		this._addClass( this.helper, "ui-selectable-helper" );
	},

	_destroy: function() {
		this.selectees.removeData( "selectable-item" );
		this._mouseDestroy();
	},

	_mouseStart: function( event ) {
		var that = this,
			options = this.options;

		this.opos = [ event.pageX, event.pageY ];
		this.elementPos = $( this.element[ 0 ] ).offset();

		if ( this.options.disabled ) {
			return;
		}

		this.selectees = $( options.filter, this.element[ 0 ] );

		this._trigger( "start", event );

		$( options.appendTo ).append( this.helper );

		// position helper (lasso)
		this.helper.css( {
			"left": event.pageX,
			"top": event.pageY,
			"width": 0,
			"height": 0
		} );

		if ( options.autoRefresh ) {
			this.refresh();
		}

		this.selectees.filter( ".ui-selected" ).each( function() {
			var selectee = $.data( this, "selectable-item" );
			selectee.startselected = true;
			if ( !event.metaKey && !event.ctrlKey ) {
				that._removeClass( selectee.$element, "ui-selected" );
				selectee.selected = false;
				that._addClass( selectee.$element, "ui-unselecting" );
				selectee.unselecting = true;

				// selectable UNSELECTING callback
				that._trigger( "unselecting", event, {
					unselecting: selectee.element
				} );
			}
		} );

		$( event.target ).parents().addBack().each( function() {
			var doSelect,
				selectee = $.data( this, "selectable-item" );
			if ( selectee ) {
				doSelect = ( !event.metaKey && !event.ctrlKey ) ||
					!selectee.$element.hasClass( "ui-selected" );
				that._removeClass( selectee.$element, doSelect ? "ui-unselecting" : "ui-selected" )
					._addClass( selectee.$element, doSelect ? "ui-selecting" : "ui-unselecting" );
				selectee.unselecting = !doSelect;
				selectee.selecting = doSelect;
				selectee.selected = doSelect;

				// selectable (UN)SELECTING callback
				if ( doSelect ) {
					that._trigger( "selecting", event, {
						selecting: selectee.element
					} );
				} else {
					that._trigger( "unselecting", event, {
						unselecting: selectee.element
					} );
				}
				return false;
			}
		} );

	},

	_mouseDrag: function( event ) {

		this.dragged = true;

		if ( this.options.disabled ) {
			return;
		}

		var tmp,
			that = this,
			options = this.options,
			x1 = this.opos[ 0 ],
			y1 = this.opos[ 1 ],
			x2 = event.pageX,
			y2 = event.pageY;

		if ( x1 > x2 ) { tmp = x2; x2 = x1; x1 = tmp; }
		if ( y1 > y2 ) { tmp = y2; y2 = y1; y1 = tmp; }
		this.helper.css( { left: x1, top: y1, width: x2 - x1, height: y2 - y1 } );

		this.selectees.each( function() {
			var selectee = $.data( this, "selectable-item" ),
				hit = false,
				offset = {};

			//prevent helper from being selected if appendTo: selectable
			if ( !selectee || selectee.element === that.element[ 0 ] ) {
				return;
			}

			offset.left   = selectee.left   + that.elementPos.left;
			offset.right  = selectee.right  + that.elementPos.left;
			offset.top    = selectee.top    + that.elementPos.top;
			offset.bottom = selectee.bottom + that.elementPos.top;

			if ( options.tolerance === "touch" ) {
				hit = ( !( offset.left > x2 || offset.right < x1 || offset.top > y2 ||
                    offset.bottom < y1 ) );
			} else if ( options.tolerance === "fit" ) {
				hit = ( offset.left > x1 && offset.right < x2 && offset.top > y1 &&
                    offset.bottom < y2 );
			}

			if ( hit ) {

				// SELECT
				if ( selectee.selected ) {
					that._removeClass( selectee.$element, "ui-selected" );
					selectee.selected = false;
				}
				if ( selectee.unselecting ) {
					that._removeClass( selectee.$element, "ui-unselecting" );
					selectee.unselecting = false;
				}
				if ( !selectee.selecting ) {
					that._addClass( selectee.$element, "ui-selecting" );
					selectee.selecting = true;

					// selectable SELECTING callback
					that._trigger( "selecting", event, {
						selecting: selectee.element
					} );
				}
			} else {

				// UNSELECT
				if ( selectee.selecting ) {
					if ( ( event.metaKey || event.ctrlKey ) && selectee.startselected ) {
						that._removeClass( selectee.$element, "ui-selecting" );
						selectee.selecting = false;
						that._addClass( selectee.$element, "ui-selected" );
						selectee.selected = true;
					} else {
						that._removeClass( selectee.$element, "ui-selecting" );
						selectee.selecting = false;
						if ( selectee.startselected ) {
							that._addClass( selectee.$element, "ui-unselecting" );
							selectee.unselecting = true;
						}

						// selectable UNSELECTING callback
						that._trigger( "unselecting", event, {
							unselecting: selectee.element
						} );
					}
				}
				if ( selectee.selected ) {
					if ( !event.metaKey && !event.ctrlKey && !selectee.startselected ) {
						that._removeClass( selectee.$element, "ui-selected" );
						selectee.selected = false;

						that._addClass( selectee.$element, "ui-unselecting" );
						selectee.unselecting = true;

						// selectable UNSELECTING callback
						that._trigger( "unselecting", event, {
							unselecting: selectee.element
						} );
					}
				}
			}
		} );

		return false;
	},

	_mouseStop: function( event ) {
		var that = this;

		this.dragged = false;

		$( ".ui-unselecting", this.element[ 0 ] ).each( function() {
			var selectee = $.data( this, "selectable-item" );
			that._removeClass( selectee.$element, "ui-unselecting" );
			selectee.unselecting = false;
			selectee.startselected = false;
			that._trigger( "unselected", event, {
				unselected: selectee.element
			} );
		} );
		$( ".ui-selecting", this.element[ 0 ] ).each( function() {
			var selectee = $.data( this, "selectable-item" );
			that._removeClass( selectee.$element, "ui-selecting" )
				._addClass( selectee.$element, "ui-selected" );
			selectee.selecting = false;
			selectee.selected = true;
			selectee.startselected = true;
			that._trigger( "selected", event, {
				selected: selectee.element
			} );
		} );
		this._trigger( "stop", event );

		this.helper.remove();

		return false;
	}

} );


/*!
 * jQuery UI Selectmenu 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Selectmenu
//>>group: Widgets
// jscs:disable maximumLineLength
//>>description: Duplicates and extends the functionality of a native HTML select element, allowing it to be customizable in behavior and appearance far beyond the limitations of a native select.
// jscs:enable maximumLineLength
//>>docs: http://api.jqueryui.com/selectmenu/
//>>demos: http://jqueryui.com/selectmenu/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/selectmenu.css, ../../themes/base/button.css
//>>css.theme: ../../themes/base/theme.css



var widgetsSelectmenu = $.widget( "ui.selectmenu", [ $.ui.formResetMixin, {
	version: "1.12.1",
	defaultElement: "<select>",
	options: {
		appendTo: null,
		classes: {
			"ui-selectmenu-button-open": "ui-corner-top",
			"ui-selectmenu-button-closed": "ui-corner-all"
		},
		disabled: null,
		icons: {
			button: "ui-icon-triangle-1-s"
		},
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		width: false,

		// Callbacks
		change: null,
		close: null,
		focus: null,
		open: null,
		select: null
	},

	_create: function() {
		var selectmenuId = this.element.uniqueId().attr( "id" );
		this.ids = {
			element: selectmenuId,
			button: selectmenuId + "-button",
			menu: selectmenuId + "-menu"
		};

		this._drawButton();
		this._drawMenu();
		this._bindFormResetHandler();

		this._rendered = false;
		this.menuItems = $();
	},

	_drawButton: function() {
		var icon,
			that = this,
			item = this._parseOption(
				this.element.find( "option:selected" ),
				this.element[ 0 ].selectedIndex
			);

		// Associate existing label with the new button
		this.labels = this.element.labels().attr( "for", this.ids.button );
		this._on( this.labels, {
			click: function( event ) {
				this.button.focus();
				event.preventDefault();
			}
		} );

		// Hide original select element
		this.element.hide();

		// Create button
		this.button = $( "<span>", {
			tabindex: this.options.disabled ? -1 : 0,
			id: this.ids.button,
			role: "combobox",
			"aria-expanded": "false",
			"aria-autocomplete": "list",
			"aria-owns": this.ids.menu,
			"aria-haspopup": "true",
			title: this.element.attr( "title" )
		} )
			.insertAfter( this.element );

		this._addClass( this.button, "ui-selectmenu-button ui-selectmenu-button-closed",
			"ui-button ui-widget" );

		icon = $( "<span>" ).appendTo( this.button );
		this._addClass( icon, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button );
		this.buttonItem = this._renderButtonItem( item )
			.appendTo( this.button );

		if ( this.options.width !== false ) {
			this._resizeButton();
		}

		this._on( this.button, this._buttonEvents );
		this.button.one( "focusin", function() {

			// Delay rendering the menu items until the button receives focus.
			// The menu may have already been rendered via a programmatic open.
			if ( !that._rendered ) {
				that._refreshMenu();
			}
		} );
	},

	_drawMenu: function() {
		var that = this;

		// Create menu
		this.menu = $( "<ul>", {
			"aria-hidden": "true",
			"aria-labelledby": this.ids.button,
			id: this.ids.menu
		} );

		// Wrap menu
		this.menuWrap = $( "<div>" ).append( this.menu );
		this._addClass( this.menuWrap, "ui-selectmenu-menu", "ui-front" );
		this.menuWrap.appendTo( this._appendTo() );

		// Initialize menu widget
		this.menuInstance = this.menu
			.menu( {
				classes: {
					"ui-menu": "ui-corner-bottom"
				},
				role: "listbox",
				select: function( event, ui ) {
					event.preventDefault();

					// Support: IE8
					// If the item was selected via a click, the text selection
					// will be destroyed in IE
					that._setSelection();

					that._select( ui.item.data( "ui-selectmenu-item" ), event );
				},
				focus: function( event, ui ) {
					var item = ui.item.data( "ui-selectmenu-item" );

					// Prevent inital focus from firing and check if its a newly focused item
					if ( that.focusIndex != null && item.index !== that.focusIndex ) {
						that._trigger( "focus", event, { item: item } );
						if ( !that.isOpen ) {
							that._select( item, event );
						}
					}
					that.focusIndex = item.index;

					that.button.attr( "aria-activedescendant",
						that.menuItems.eq( item.index ).attr( "id" ) );
				}
			} )
			.menu( "instance" );

		// Don't close the menu on mouseleave
		this.menuInstance._off( this.menu, "mouseleave" );

		// Cancel the menu's collapseAll on document click
		this.menuInstance._closeOnDocumentClick = function() {
			return false;
		};

		// Selects often contain empty items, but never contain dividers
		this.menuInstance._isDivider = function() {
			return false;
		};
	},

	refresh: function() {
		this._refreshMenu();
		this.buttonItem.replaceWith(
			this.buttonItem = this._renderButtonItem(

				// Fall back to an empty object in case there are no options
				this._getSelectedItem().data( "ui-selectmenu-item" ) || {}
			)
		);
		if ( this.options.width === null ) {
			this._resizeButton();
		}
	},

	_refreshMenu: function() {
		var item,
			options = this.element.find( "option" );

		this.menu.empty();

		this._parseOptions( options );
		this._renderMenu( this.menu, this.items );

		this.menuInstance.refresh();
		this.menuItems = this.menu.find( "li" )
			.not( ".ui-selectmenu-optgroup" )
				.find( ".ui-menu-item-wrapper" );

		this._rendered = true;

		if ( !options.length ) {
			return;
		}

		item = this._getSelectedItem();

		// Update the menu to have the correct item focused
		this.menuInstance.focus( null, item );
		this._setAria( item.data( "ui-selectmenu-item" ) );

		// Set disabled state
		this._setOption( "disabled", this.element.prop( "disabled" ) );
	},

	open: function( event ) {
		if ( this.options.disabled ) {
			return;
		}

		// If this is the first time the menu is being opened, render the items
		if ( !this._rendered ) {
			this._refreshMenu();
		} else {

			// Menu clears focus on close, reset focus to selected item
			this._removeClass( this.menu.find( ".ui-state-active" ), null, "ui-state-active" );
			this.menuInstance.focus( null, this._getSelectedItem() );
		}

		// If there are no options, don't open the menu
		if ( !this.menuItems.length ) {
			return;
		}

		this.isOpen = true;
		this._toggleAttr();
		this._resizeMenu();
		this._position();

		this._on( this.document, this._documentClick );

		this._trigger( "open", event );
	},

	_position: function() {
		this.menuWrap.position( $.extend( { of: this.button }, this.options.position ) );
	},

	close: function( event ) {
		if ( !this.isOpen ) {
			return;
		}

		this.isOpen = false;
		this._toggleAttr();

		this.range = null;
		this._off( this.document );

		this._trigger( "close", event );
	},

	widget: function() {
		return this.button;
	},

	menuWidget: function() {
		return this.menu;
	},

	_renderButtonItem: function( item ) {
		var buttonItem = $( "<span>" );

		this._setText( buttonItem, item.label );
		this._addClass( buttonItem, "ui-selectmenu-text" );

		return buttonItem;
	},

	_renderMenu: function( ul, items ) {
		var that = this,
			currentOptgroup = "";

		$.each( items, function( index, item ) {
			var li;

			if ( item.optgroup !== currentOptgroup ) {
				li = $( "<li>", {
					text: item.optgroup
				} );
				that._addClass( li, "ui-selectmenu-optgroup", "ui-menu-divider" +
					( item.element.parent( "optgroup" ).prop( "disabled" ) ?
						" ui-state-disabled" :
						"" ) );

				li.appendTo( ul );

				currentOptgroup = item.optgroup;
			}

			that._renderItemData( ul, item );
		} );
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "ui-selectmenu-item", item );
	},

	_renderItem: function( ul, item ) {
		var li = $( "<li>" ),
			wrapper = $( "<div>", {
				title: item.element.attr( "title" )
			} );

		if ( item.disabled ) {
			this._addClass( li, null, "ui-state-disabled" );
		}
		this._setText( wrapper, item.label );

		return li.append( wrapper ).appendTo( ul );
	},

	_setText: function( element, value ) {
		if ( value ) {
			element.text( value );
		} else {
			element.html( "&#160;" );
		}
	},

	_move: function( direction, event ) {
		var item, next,
			filter = ".ui-menu-item";

		if ( this.isOpen ) {
			item = this.menuItems.eq( this.focusIndex ).parent( "li" );
		} else {
			item = this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( "li" );
			filter += ":not(.ui-state-disabled)";
		}

		if ( direction === "first" || direction === "last" ) {
			next = item[ direction === "first" ? "prevAll" : "nextAll" ]( filter ).eq( -1 );
		} else {
			next = item[ direction + "All" ]( filter ).eq( 0 );
		}

		if ( next.length ) {
			this.menuInstance.focus( event, next );
		}
	},

	_getSelectedItem: function() {
		return this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( "li" );
	},

	_toggle: function( event ) {
		this[ this.isOpen ? "close" : "open" ]( event );
	},

	_setSelection: function() {
		var selection;

		if ( !this.range ) {
			return;
		}

		if ( window.getSelection ) {
			selection = window.getSelection();
			selection.removeAllRanges();
			selection.addRange( this.range );

		// Support: IE8
		} else {
			this.range.select();
		}

		// Support: IE
		// Setting the text selection kills the button focus in IE, but
		// restoring the focus doesn't kill the selection.
		this.button.focus();
	},

	_documentClick: {
		mousedown: function( event ) {
			if ( !this.isOpen ) {
				return;
			}

			if ( !$( event.target ).closest( ".ui-selectmenu-menu, #" +
					$.ui.escapeSelector( this.ids.button ) ).length ) {
				this.close( event );
			}
		}
	},

	_buttonEvents: {

		// Prevent text selection from being reset when interacting with the selectmenu (#10144)
		mousedown: function() {
			var selection;

			if ( window.getSelection ) {
				selection = window.getSelection();
				if ( selection.rangeCount ) {
					this.range = selection.getRangeAt( 0 );
				}

			// Support: IE8
			} else {
				this.range = document.selection.createRange();
			}
		},

		click: function( event ) {
			this._setSelection();
			this._toggle( event );
		},

		keydown: function( event ) {
			var preventDefault = true;
			switch ( event.keyCode ) {
			case $.ui.keyCode.TAB:
			case $.ui.keyCode.ESCAPE:
				this.close( event );
				preventDefault = false;
				break;
			case $.ui.keyCode.ENTER:
				if ( this.isOpen ) {
					this._selectFocusedItem( event );
				}
				break;
			case $.ui.keyCode.UP:
				if ( event.altKey ) {
					this._toggle( event );
				} else {
					this._move( "prev", event );
				}
				break;
			case $.ui.keyCode.DOWN:
				if ( event.altKey ) {
					this._toggle( event );
				} else {
					this._move( "next", event );
				}
				break;
			case $.ui.keyCode.SPACE:
				if ( this.isOpen ) {
					this._selectFocusedItem( event );
				} else {
					this._toggle( event );
				}
				break;
			case $.ui.keyCode.LEFT:
				this._move( "prev", event );
				break;
			case $.ui.keyCode.RIGHT:
				this._move( "next", event );
				break;
			case $.ui.keyCode.HOME:
			case $.ui.keyCode.PAGE_UP:
				this._move( "first", event );
				break;
			case $.ui.keyCode.END:
			case $.ui.keyCode.PAGE_DOWN:
				this._move( "last", event );
				break;
			default:
				this.menu.trigger( event );
				preventDefault = false;
			}

			if ( preventDefault ) {
				event.preventDefault();
			}
		}
	},

	_selectFocusedItem: function( event ) {
		var item = this.menuItems.eq( this.focusIndex ).parent( "li" );
		if ( !item.hasClass( "ui-state-disabled" ) ) {
			this._select( item.data( "ui-selectmenu-item" ), event );
		}
	},

	_select: function( item, event ) {
		var oldIndex = this.element[ 0 ].selectedIndex;

		// Change native select element
		this.element[ 0 ].selectedIndex = item.index;
		this.buttonItem.replaceWith( this.buttonItem = this._renderButtonItem( item ) );
		this._setAria( item );
		this._trigger( "select", event, { item: item } );

		if ( item.index !== oldIndex ) {
			this._trigger( "change", event, { item: item } );
		}

		this.close( event );
	},

	_setAria: function( item ) {
		var id = this.menuItems.eq( item.index ).attr( "id" );

		this.button.attr( {
			"aria-labelledby": id,
			"aria-activedescendant": id
		} );
		this.menu.attr( "aria-activedescendant", id );
	},

	_setOption: function( key, value ) {
		if ( key === "icons" ) {
			var icon = this.button.find( "span.ui-icon" );
			this._removeClass( icon, null, this.options.icons.button )
				._addClass( icon, null, value.button );
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.menuWrap.appendTo( this._appendTo() );
		}

		if ( key === "width" ) {
			this._resizeButton();
		}
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.menuInstance.option( "disabled", value );
		this.button.attr( "aria-disabled", value );
		this._toggleClass( this.button, null, "ui-state-disabled", value );

		this.element.prop( "disabled", value );
		if ( value ) {
			this.button.attr( "tabindex", -1 );
			this.close();
		} else {
			this.button.attr( "tabindex", 0 );
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".ui-front, dialog" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_toggleAttr: function() {
		this.button.attr( "aria-expanded", this.isOpen );

		// We can't use two _toggleClass() calls here, because we need to make sure
		// we always remove classes first and add them second, otherwise if both classes have the
		// same theme class, it will be removed after we add it.
		this._removeClass( this.button, "ui-selectmenu-button-" +
			( this.isOpen ? "closed" : "open" ) )
			._addClass( this.button, "ui-selectmenu-button-" +
				( this.isOpen ? "open" : "closed" ) )
			._toggleClass( this.menuWrap, "ui-selectmenu-open", null, this.isOpen );

		this.menu.attr( "aria-hidden", !this.isOpen );
	},

	_resizeButton: function() {
		var width = this.options.width;

		// For `width: false`, just remove inline style and stop
		if ( width === false ) {
			this.button.css( "width", "" );
			return;
		}

		// For `width: null`, match the width of the original element
		if ( width === null ) {
			width = this.element.show().outerWidth();
			this.element.hide();
		}

		this.button.outerWidth( width );
	},

	_resizeMenu: function() {
		this.menu.outerWidth( Math.max(
			this.button.outerWidth(),

			// Support: IE10
			// IE10 wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping
			this.menu.width( "" ).outerWidth() + 1
		) );
	},

	_getCreateOptions: function() {
		var options = this._super();

		options.disabled = this.element.prop( "disabled" );

		return options;
	},

	_parseOptions: function( options ) {
		var that = this,
			data = [];
		options.each( function( index, item ) {
			data.push( that._parseOption( $( item ), index ) );
		} );
		this.items = data;
	},

	_parseOption: function( option, index ) {
		var optgroup = option.parent( "optgroup" );

		return {
			element: option,
			index: index,
			value: option.val(),
			label: option.text(),
			optgroup: optgroup.attr( "label" ) || "",
			disabled: optgroup.prop( "disabled" ) || option.prop( "disabled" )
		};
	},

	_destroy: function() {
		this._unbindFormResetHandler();
		this.menuWrap.remove();
		this.button.remove();
		this.element.show();
		this.element.removeUniqueId();
		this.labels.attr( "for", this.ids.element );
	}
} ] );


/*!
 * jQuery UI Slider 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Slider
//>>group: Widgets
//>>description: Displays a flexible slider with ranges and accessibility via keyboard.
//>>docs: http://api.jqueryui.com/slider/
//>>demos: http://jqueryui.com/slider/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/slider.css
//>>css.theme: ../../themes/base/theme.css



var widgetsSlider = $.widget( "ui.slider", $.ui.mouse, {
	version: "1.12.1",
	widgetEventPrefix: "slide",

	options: {
		animate: false,
		classes: {
			"ui-slider": "ui-corner-all",
			"ui-slider-handle": "ui-corner-all",

			// Note: ui-widget-header isn't the most fittingly semantic framework class for this
			// element, but worked best visually with a variety of themes
			"ui-slider-range": "ui-corner-all ui-widget-header"
		},
		distance: 0,
		max: 100,
		min: 0,
		orientation: "horizontal",
		range: false,
		step: 1,
		value: 0,
		values: null,

		// Callbacks
		change: null,
		slide: null,
		start: null,
		stop: null
	},

	// Number of pages in a slider
	// (how many times can you page up/down to go through the whole range)
	numPages: 5,

	_create: function() {
		this._keySliding = false;
		this._mouseSliding = false;
		this._animateOff = true;
		this._handleIndex = null;
		this._detectOrientation();
		this._mouseInit();
		this._calculateNewMax();

		this._addClass( "ui-slider ui-slider-" + this.orientation,
			"ui-widget ui-widget-content" );

		this._refresh();

		this._animateOff = false;
	},

	_refresh: function() {
		this._createRange();
		this._createHandles();
		this._setupEvents();
		this._refreshValue();
	},

	_createHandles: function() {
		var i, handleCount,
			options = this.options,
			existingHandles = this.element.find( ".ui-slider-handle" ),
			handle = "<span tabindex='0'></span>",
			handles = [];

		handleCount = ( options.values && options.values.length ) || 1;

		if ( existingHandles.length > handleCount ) {
			existingHandles.slice( handleCount ).remove();
			existingHandles = existingHandles.slice( 0, handleCount );
		}

		for ( i = existingHandles.length; i < handleCount; i++ ) {
			handles.push( handle );
		}

		this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

		this._addClass( this.handles, "ui-slider-handle", "ui-state-default" );

		this.handle = this.handles.eq( 0 );

		this.handles.each( function( i ) {
			$( this )
				.data( "ui-slider-handle-index", i )
				.attr( "tabIndex", 0 );
		} );
	},

	_createRange: function() {
		var options = this.options;

		if ( options.range ) {
			if ( options.range === true ) {
				if ( !options.values ) {
					options.values = [ this._valueMin(), this._valueMin() ];
				} else if ( options.values.length && options.values.length !== 2 ) {
					options.values = [ options.values[ 0 ], options.values[ 0 ] ];
				} else if ( $.isArray( options.values ) ) {
					options.values = options.values.slice( 0 );
				}
			}

			if ( !this.range || !this.range.length ) {
				this.range = $( "<div>" )
					.appendTo( this.element );

				this._addClass( this.range, "ui-slider-range" );
			} else {
				this._removeClass( this.range, "ui-slider-range-min ui-slider-range-max" );

				// Handle range switching from true to min/max
				this.range.css( {
					"left": "",
					"bottom": ""
				} );
			}
			if ( options.range === "min" || options.range === "max" ) {
				this._addClass( this.range, "ui-slider-range-" + options.range );
			}
		} else {
			if ( this.range ) {
				this.range.remove();
			}
			this.range = null;
		}
	},

	_setupEvents: function() {
		this._off( this.handles );
		this._on( this.handles, this._handleEvents );
		this._hoverable( this.handles );
		this._focusable( this.handles );
	},

	_destroy: function() {
		this.handles.remove();
		if ( this.range ) {
			this.range.remove();
		}

		this._mouseDestroy();
	},

	_mouseCapture: function( event ) {
		var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
			that = this,
			o = this.options;

		if ( o.disabled ) {
			return false;
		}

		this.elementSize = {
			width: this.element.outerWidth(),
			height: this.element.outerHeight()
		};
		this.elementOffset = this.element.offset();

		position = { x: event.pageX, y: event.pageY };
		normValue = this._normValueFromMouse( position );
		distance = this._valueMax() - this._valueMin() + 1;
		this.handles.each( function( i ) {
			var thisDistance = Math.abs( normValue - that.values( i ) );
			if ( ( distance > thisDistance ) ||
				( distance === thisDistance &&
					( i === that._lastChangedValue || that.values( i ) === o.min ) ) ) {
				distance = thisDistance;
				closestHandle = $( this );
				index = i;
			}
		} );

		allowed = this._start( event, index );
		if ( allowed === false ) {
			return false;
		}
		this._mouseSliding = true;

		this._handleIndex = index;

		this._addClass( closestHandle, null, "ui-state-active" );
		closestHandle.trigger( "focus" );

		offset = closestHandle.offset();
		mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
		this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
			left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
			top: event.pageY - offset.top -
				( closestHandle.height() / 2 ) -
				( parseInt( closestHandle.css( "borderTopWidth" ), 10 ) || 0 ) -
				( parseInt( closestHandle.css( "borderBottomWidth" ), 10 ) || 0 ) +
				( parseInt( closestHandle.css( "marginTop" ), 10 ) || 0 )
		};

		if ( !this.handles.hasClass( "ui-state-hover" ) ) {
			this._slide( event, index, normValue );
		}
		this._animateOff = true;
		return true;
	},

	_mouseStart: function() {
		return true;
	},

	_mouseDrag: function( event ) {
		var position = { x: event.pageX, y: event.pageY },
			normValue = this._normValueFromMouse( position );

		this._slide( event, this._handleIndex, normValue );

		return false;
	},

	_mouseStop: function( event ) {
		this._removeClass( this.handles, null, "ui-state-active" );
		this._mouseSliding = false;

		this._stop( event, this._handleIndex );
		this._change( event, this._handleIndex );

		this._handleIndex = null;
		this._clickOffset = null;
		this._animateOff = false;

		return false;
	},

	_detectOrientation: function() {
		this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
	},

	_normValueFromMouse: function( position ) {
		var pixelTotal,
			pixelMouse,
			percentMouse,
			valueTotal,
			valueMouse;

		if ( this.orientation === "horizontal" ) {
			pixelTotal = this.elementSize.width;
			pixelMouse = position.x - this.elementOffset.left -
				( this._clickOffset ? this._clickOffset.left : 0 );
		} else {
			pixelTotal = this.elementSize.height;
			pixelMouse = position.y - this.elementOffset.top -
				( this._clickOffset ? this._clickOffset.top : 0 );
		}

		percentMouse = ( pixelMouse / pixelTotal );
		if ( percentMouse > 1 ) {
			percentMouse = 1;
		}
		if ( percentMouse < 0 ) {
			percentMouse = 0;
		}
		if ( this.orientation === "vertical" ) {
			percentMouse = 1 - percentMouse;
		}

		valueTotal = this._valueMax() - this._valueMin();
		valueMouse = this._valueMin() + percentMouse * valueTotal;

		return this._trimAlignValue( valueMouse );
	},

	_uiHash: function( index, value, values ) {
		var uiHash = {
			handle: this.handles[ index ],
			handleIndex: index,
			value: value !== undefined ? value : this.value()
		};

		if ( this._hasMultipleValues() ) {
			uiHash.value = value !== undefined ? value : this.values( index );
			uiHash.values = values || this.values();
		}

		return uiHash;
	},

	_hasMultipleValues: function() {
		return this.options.values && this.options.values.length;
	},

	_start: function( event, index ) {
		return this._trigger( "start", event, this._uiHash( index ) );
	},

	_slide: function( event, index, newVal ) {
		var allowed, otherVal,
			currentValue = this.value(),
			newValues = this.values();

		if ( this._hasMultipleValues() ) {
			otherVal = this.values( index ? 0 : 1 );
			currentValue = this.values( index );

			if ( this.options.values.length === 2 && this.options.range === true ) {
				newVal =  index === 0 ? Math.min( otherVal, newVal ) : Math.max( otherVal, newVal );
			}

			newValues[ index ] = newVal;
		}

		if ( newVal === currentValue ) {
			return;
		}

		allowed = this._trigger( "slide", event, this._uiHash( index, newVal, newValues ) );

		// A slide can be canceled by returning false from the slide callback
		if ( allowed === false ) {
			return;
		}

		if ( this._hasMultipleValues() ) {
			this.values( index, newVal );
		} else {
			this.value( newVal );
		}
	},

	_stop: function( event, index ) {
		this._trigger( "stop", event, this._uiHash( index ) );
	},

	_change: function( event, index ) {
		if ( !this._keySliding && !this._mouseSliding ) {

			//store the last changed value index for reference when handles overlap
			this._lastChangedValue = index;
			this._trigger( "change", event, this._uiHash( index ) );
		}
	},

	value: function( newValue ) {
		if ( arguments.length ) {
			this.options.value = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, 0 );
			return;
		}

		return this._value();
	},

	values: function( index, newValue ) {
		var vals,
			newValues,
			i;

		if ( arguments.length > 1 ) {
			this.options.values[ index ] = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, index );
			return;
		}

		if ( arguments.length ) {
			if ( $.isArray( arguments[ 0 ] ) ) {
				vals = this.options.values;
				newValues = arguments[ 0 ];
				for ( i = 0; i < vals.length; i += 1 ) {
					vals[ i ] = this._trimAlignValue( newValues[ i ] );
					this._change( null, i );
				}
				this._refreshValue();
			} else {
				if ( this._hasMultipleValues() ) {
					return this._values( index );
				} else {
					return this.value();
				}
			}
		} else {
			return this._values();
		}
	},

	_setOption: function( key, value ) {
		var i,
			valsLength = 0;

		if ( key === "range" && this.options.range === true ) {
			if ( value === "min" ) {
				this.options.value = this._values( 0 );
				this.options.values = null;
			} else if ( value === "max" ) {
				this.options.value = this._values( this.options.values.length - 1 );
				this.options.values = null;
			}
		}

		if ( $.isArray( this.options.values ) ) {
			valsLength = this.options.values.length;
		}

		this._super( key, value );

		switch ( key ) {
			case "orientation":
				this._detectOrientation();
				this._removeClass( "ui-slider-horizontal ui-slider-vertical" )
					._addClass( "ui-slider-" + this.orientation );
				this._refreshValue();
				if ( this.options.range ) {
					this._refreshRange( value );
				}

				// Reset positioning from previous orientation
				this.handles.css( value === "horizontal" ? "bottom" : "left", "" );
				break;
			case "value":
				this._animateOff = true;
				this._refreshValue();
				this._change( null, 0 );
				this._animateOff = false;
				break;
			case "values":
				this._animateOff = true;
				this._refreshValue();

				// Start from the last handle to prevent unreachable handles (#9046)
				for ( i = valsLength - 1; i >= 0; i-- ) {
					this._change( null, i );
				}
				this._animateOff = false;
				break;
			case "step":
			case "min":
			case "max":
				this._animateOff = true;
				this._calculateNewMax();
				this._refreshValue();
				this._animateOff = false;
				break;
			case "range":
				this._animateOff = true;
				this._refresh();
				this._animateOff = false;
				break;
		}
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	//internal value getter
	// _value() returns value trimmed by min and max, aligned by step
	_value: function() {
		var val = this.options.value;
		val = this._trimAlignValue( val );

		return val;
	},

	//internal values getter
	// _values() returns array of values trimmed by min and max, aligned by step
	// _values( index ) returns single value trimmed by min and max, aligned by step
	_values: function( index ) {
		var val,
			vals,
			i;

		if ( arguments.length ) {
			val = this.options.values[ index ];
			val = this._trimAlignValue( val );

			return val;
		} else if ( this._hasMultipleValues() ) {

			// .slice() creates a copy of the array
			// this copy gets trimmed by min and max and then returned
			vals = this.options.values.slice();
			for ( i = 0; i < vals.length; i += 1 ) {
				vals[ i ] = this._trimAlignValue( vals[ i ] );
			}

			return vals;
		} else {
			return [];
		}
	},

	// Returns the step-aligned value that val is closest to, between (inclusive) min and max
	_trimAlignValue: function( val ) {
		if ( val <= this._valueMin() ) {
			return this._valueMin();
		}
		if ( val >= this._valueMax() ) {
			return this._valueMax();
		}
		var step = ( this.options.step > 0 ) ? this.options.step : 1,
			valModStep = ( val - this._valueMin() ) % step,
			alignValue = val - valModStep;

		if ( Math.abs( valModStep ) * 2 >= step ) {
			alignValue += ( valModStep > 0 ) ? step : ( -step );
		}

		// Since JavaScript has problems with large floats, round
		// the final value to 5 digits after the decimal point (see #4124)
		return parseFloat( alignValue.toFixed( 5 ) );
	},

	_calculateNewMax: function() {
		var max = this.options.max,
			min = this._valueMin(),
			step = this.options.step,
			aboveMin = Math.round( ( max - min ) / step ) * step;
		max = aboveMin + min;
		if ( max > this.options.max ) {

			//If max is not divisible by step, rounding off may increase its value
			max -= step;
		}
		this.max = parseFloat( max.toFixed( this._precision() ) );
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_valueMin: function() {
		return this.options.min;
	},

	_valueMax: function() {
		return this.max;
	},

	_refreshRange: function( orientation ) {
		if ( orientation === "vertical" ) {
			this.range.css( { "width": "", "left": "" } );
		}
		if ( orientation === "horizontal" ) {
			this.range.css( { "height": "", "bottom": "" } );
		}
	},

	_refreshValue: function() {
		var lastValPercent, valPercent, value, valueMin, valueMax,
			oRange = this.options.range,
			o = this.options,
			that = this,
			animate = ( !this._animateOff ) ? o.animate : false,
			_set = {};

		if ( this._hasMultipleValues() ) {
			this.handles.each( function( i ) {
				valPercent = ( that.values( i ) - that._valueMin() ) / ( that._valueMax() -
					that._valueMin() ) * 100;
				_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
				$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
				if ( that.options.range === true ) {
					if ( that.orientation === "horizontal" ) {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
								left: valPercent + "%"
							}, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( {
								width: ( valPercent - lastValPercent ) + "%"
							}, {
								queue: false,
								duration: o.animate
							} );
						}
					} else {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
								bottom: ( valPercent ) + "%"
							}, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( {
								height: ( valPercent - lastValPercent ) + "%"
							}, {
								queue: false,
								duration: o.animate
							} );
						}
					}
				}
				lastValPercent = valPercent;
			} );
		} else {
			value = this.value();
			valueMin = this._valueMin();
			valueMax = this._valueMax();
			valPercent = ( valueMax !== valueMin ) ?
					( value - valueMin ) / ( valueMax - valueMin ) * 100 :
					0;
			_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
			this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

			if ( oRange === "min" && this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					width: valPercent + "%"
				}, o.animate );
			}
			if ( oRange === "max" && this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					width: ( 100 - valPercent ) + "%"
				}, o.animate );
			}
			if ( oRange === "min" && this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					height: valPercent + "%"
				}, o.animate );
			}
			if ( oRange === "max" && this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					height: ( 100 - valPercent ) + "%"
				}, o.animate );
			}
		}
	},

	_handleEvents: {
		keydown: function( event ) {
			var allowed, curVal, newVal, step,
				index = $( event.target ).data( "ui-slider-handle-index" );

			switch ( event.keyCode ) {
				case $.ui.keyCode.HOME:
				case $.ui.keyCode.END:
				case $.ui.keyCode.PAGE_UP:
				case $.ui.keyCode.PAGE_DOWN:
				case $.ui.keyCode.UP:
				case $.ui.keyCode.RIGHT:
				case $.ui.keyCode.DOWN:
				case $.ui.keyCode.LEFT:
					event.preventDefault();
					if ( !this._keySliding ) {
						this._keySliding = true;
						this._addClass( $( event.target ), null, "ui-state-active" );
						allowed = this._start( event, index );
						if ( allowed === false ) {
							return;
						}
					}
					break;
			}

			step = this.options.step;
			if ( this._hasMultipleValues() ) {
				curVal = newVal = this.values( index );
			} else {
				curVal = newVal = this.value();
			}

			switch ( event.keyCode ) {
				case $.ui.keyCode.HOME:
					newVal = this._valueMin();
					break;
				case $.ui.keyCode.END:
					newVal = this._valueMax();
					break;
				case $.ui.keyCode.PAGE_UP:
					newVal = this._trimAlignValue(
						curVal + ( ( this._valueMax() - this._valueMin() ) / this.numPages )
					);
					break;
				case $.ui.keyCode.PAGE_DOWN:
					newVal = this._trimAlignValue(
						curVal - ( ( this._valueMax() - this._valueMin() ) / this.numPages ) );
					break;
				case $.ui.keyCode.UP:
				case $.ui.keyCode.RIGHT:
					if ( curVal === this._valueMax() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal + step );
					break;
				case $.ui.keyCode.DOWN:
				case $.ui.keyCode.LEFT:
					if ( curVal === this._valueMin() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal - step );
					break;
			}

			this._slide( event, index, newVal );
		},
		keyup: function( event ) {
			var index = $( event.target ).data( "ui-slider-handle-index" );

			if ( this._keySliding ) {
				this._keySliding = false;
				this._stop( event, index );
				this._change( event, index );
				this._removeClass( $( event.target ), null, "ui-state-active" );
			}
		}
	}
} );


/*!
 * jQuery UI Sortable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Sortable
//>>group: Interactions
//>>description: Enables items in a list to be sorted using the mouse.
//>>docs: http://api.jqueryui.com/sortable/
//>>demos: http://jqueryui.com/sortable/
//>>css.structure: ../../themes/base/sortable.css



var widgetsSortable = $.widget( "ui.sortable", $.ui.mouse, {
	version: "1.12.1",
	widgetEventPrefix: "sort",
	ready: false,
	options: {
		appendTo: "parent",
		axis: false,
		connectWith: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		dropOnEmpty: true,
		forcePlaceholderSize: false,
		forceHelperSize: false,
		grid: false,
		handle: false,
		helper: "original",
		items: "> *",
		opacity: false,
		placeholder: false,
		revert: false,
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		scope: "default",
		tolerance: "intersect",
		zIndex: 1000,

		// Callbacks
		activate: null,
		beforeStop: null,
		change: null,
		deactivate: null,
		out: null,
		over: null,
		receive: null,
		remove: null,
		sort: null,
		start: null,
		stop: null,
		update: null
	},

	_isOverAxis: function( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	},

	_isFloating: function( item ) {
		return ( /left|right/ ).test( item.css( "float" ) ) ||
			( /inline|table-cell/ ).test( item.css( "display" ) );
	},

	_create: function() {
		this.containerCache = {};
		this._addClass( "ui-sortable" );

		//Get the items
		this.refresh();

		//Let's determine the parent's offset
		this.offset = this.element.offset();

		//Initialize mouse events for interaction
		this._mouseInit();

		this._setHandleClassName();

		//We're ready to go
		this.ready = true;

	},

	_setOption: function( key, value ) {
		this._super( key, value );

		if ( key === "handle" ) {
			this._setHandleClassName();
		}
	},

	_setHandleClassName: function() {
		var that = this;
		this._removeClass( this.element.find( ".ui-sortable-handle" ), "ui-sortable-handle" );
		$.each( this.items, function() {
			that._addClass(
				this.instance.options.handle ?
					this.item.find( this.instance.options.handle ) :
					this.item,
				"ui-sortable-handle"
			);
		} );
	},

	_destroy: function() {
		this._mouseDestroy();

		for ( var i = this.items.length - 1; i >= 0; i-- ) {
			this.items[ i ].item.removeData( this.widgetName + "-item" );
		}

		return this;
	},

	_mouseCapture: function( event, overrideHandle ) {
		var currentItem = null,
			validHandle = false,
			that = this;

		if ( this.reverting ) {
			return false;
		}

		if ( this.options.disabled || this.options.type === "static" ) {
			return false;
		}

		//We have to refresh the items data once first
		this._refreshItems( event );

		//Find out if the clicked node (or one of its parents) is a actual item in this.items
		$( event.target ).parents().each( function() {
			if ( $.data( this, that.widgetName + "-item" ) === that ) {
				currentItem = $( this );
				return false;
			}
		} );
		if ( $.data( event.target, that.widgetName + "-item" ) === that ) {
			currentItem = $( event.target );
		}

		if ( !currentItem ) {
			return false;
		}
		if ( this.options.handle && !overrideHandle ) {
			$( this.options.handle, currentItem ).find( "*" ).addBack().each( function() {
				if ( this === event.target ) {
					validHandle = true;
				}
			} );
			if ( !validHandle ) {
				return false;
			}
		}

		this.currentItem = currentItem;
		this._removeCurrentsFromItems();
		return true;

	},

	_mouseStart: function( event, overrideHandle, noActivation ) {

		var i, body,
			o = this.options;

		this.currentContainer = this;

		//We only need to call refreshPositions, because the refreshItems call has been moved to
		// mouseCapture
		this.refreshPositions();

		//Create and append the visible helper
		this.helper = this._createHelper( event );

		//Cache the helper size
		this._cacheHelperProportions();

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Get the next scrolling parent
		this.scrollParent = this.helper.scrollParent();

		//The element's absolute position on the page minus margins
		this.offset = this.currentItem.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		$.extend( this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),

			// This is a relative to absolute position minus the actual position calculation -
			// only used for relative positioned helper
			relative: this._getRelativeOffset()
		} );

		// Only after we got the offset, we can change the helper's position to absolute
		// TODO: Still need to figure out a way to make relative sorting possible
		this.helper.css( "position", "absolute" );
		this.cssPosition = this.helper.css( "position" );

		//Generate the original position
		this.originalPosition = this._generatePosition( event );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		( o.cursorAt && this._adjustOffsetFromHelper( o.cursorAt ) );

		//Cache the former DOM position
		this.domPosition = {
			prev: this.currentItem.prev()[ 0 ],
			parent: this.currentItem.parent()[ 0 ]
		};

		// If the helper is not the original, hide the original so it's not playing any role during
		// the drag, won't cause anything bad this way
		if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
			this.currentItem.hide();
		}

		//Create the placeholder
		this._createPlaceholder();

		//Set a containment if given in the options
		if ( o.containment ) {
			this._setContainment();
		}

		if ( o.cursor && o.cursor !== "auto" ) { // cursor option
			body = this.document.find( "body" );

			// Support: IE
			this.storedCursor = body.css( "cursor" );
			body.css( "cursor", o.cursor );

			this.storedStylesheet =
				$( "<style>*{ cursor: " + o.cursor + " !important; }</style>" ).appendTo( body );
		}

		if ( o.opacity ) { // opacity option
			if ( this.helper.css( "opacity" ) ) {
				this._storedOpacity = this.helper.css( "opacity" );
			}
			this.helper.css( "opacity", o.opacity );
		}

		if ( o.zIndex ) { // zIndex option
			if ( this.helper.css( "zIndex" ) ) {
				this._storedZIndex = this.helper.css( "zIndex" );
			}
			this.helper.css( "zIndex", o.zIndex );
		}

		//Prepare scrolling
		if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				this.scrollParent[ 0 ].tagName !== "HTML" ) {
			this.overflowOffset = this.scrollParent.offset();
		}

		//Call callbacks
		this._trigger( "start", event, this._uiHash() );

		//Recache the helper size
		if ( !this._preserveHelperProportions ) {
			this._cacheHelperProportions();
		}

		//Post "activate" events to possible containers
		if ( !noActivation ) {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
			}
		}

		//Prepare possible droppables
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.current = this;
		}

		if ( $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( this, event );
		}

		this.dragging = true;

		this._addClass( this.helper, "ui-sortable-helper" );

		// Execute the drag once - this causes the helper not to be visiblebefore getting its
		// correct position
		this._mouseDrag( event );
		return true;

	},

	_mouseDrag: function( event ) {
		var i, item, itemElement, intersection,
			o = this.options,
			scrolled = false;

		//Compute the helpers position
		this.position = this._generatePosition( event );
		this.positionAbs = this._convertPositionTo( "absolute" );

		if ( !this.lastPositionAbs ) {
			this.lastPositionAbs = this.positionAbs;
		}

		//Do scrolling
		if ( this.options.scroll ) {
			if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
					this.scrollParent[ 0 ].tagName !== "HTML" ) {

				if ( ( this.overflowOffset.top + this.scrollParent[ 0 ].offsetHeight ) -
						event.pageY < o.scrollSensitivity ) {
					this.scrollParent[ 0 ].scrollTop =
						scrolled = this.scrollParent[ 0 ].scrollTop + o.scrollSpeed;
				} else if ( event.pageY - this.overflowOffset.top < o.scrollSensitivity ) {
					this.scrollParent[ 0 ].scrollTop =
						scrolled = this.scrollParent[ 0 ].scrollTop - o.scrollSpeed;
				}

				if ( ( this.overflowOffset.left + this.scrollParent[ 0 ].offsetWidth ) -
						event.pageX < o.scrollSensitivity ) {
					this.scrollParent[ 0 ].scrollLeft = scrolled =
						this.scrollParent[ 0 ].scrollLeft + o.scrollSpeed;
				} else if ( event.pageX - this.overflowOffset.left < o.scrollSensitivity ) {
					this.scrollParent[ 0 ].scrollLeft = scrolled =
						this.scrollParent[ 0 ].scrollLeft - o.scrollSpeed;
				}

			} else {

				if ( event.pageY - this.document.scrollTop() < o.scrollSensitivity ) {
					scrolled = this.document.scrollTop( this.document.scrollTop() - o.scrollSpeed );
				} else if ( this.window.height() - ( event.pageY - this.document.scrollTop() ) <
						o.scrollSensitivity ) {
					scrolled = this.document.scrollTop( this.document.scrollTop() + o.scrollSpeed );
				}

				if ( event.pageX - this.document.scrollLeft() < o.scrollSensitivity ) {
					scrolled = this.document.scrollLeft(
						this.document.scrollLeft() - o.scrollSpeed
					);
				} else if ( this.window.width() - ( event.pageX - this.document.scrollLeft() ) <
						o.scrollSensitivity ) {
					scrolled = this.document.scrollLeft(
						this.document.scrollLeft() + o.scrollSpeed
					);
				}

			}

			if ( scrolled !== false && $.ui.ddmanager && !o.dropBehaviour ) {
				$.ui.ddmanager.prepareOffsets( this, event );
			}
		}

		//Regenerate the absolute position used for position checks
		this.positionAbs = this._convertPositionTo( "absolute" );

		//Set the helper position
		if ( !this.options.axis || this.options.axis !== "y" ) {
			this.helper[ 0 ].style.left = this.position.left + "px";
		}
		if ( !this.options.axis || this.options.axis !== "x" ) {
			this.helper[ 0 ].style.top = this.position.top + "px";
		}

		//Rearrange
		for ( i = this.items.length - 1; i >= 0; i-- ) {

			//Cache variables and intersection, continue if no intersection
			item = this.items[ i ];
			itemElement = item.item[ 0 ];
			intersection = this._intersectsWithPointer( item );
			if ( !intersection ) {
				continue;
			}

			// Only put the placeholder inside the current Container, skip all
			// items from other containers. This works because when moving
			// an item from one container to another the
			// currentContainer is switched before the placeholder is moved.
			//
			// Without this, moving items in "sub-sortables" can cause
			// the placeholder to jitter between the outer and inner container.
			if ( item.instance !== this.currentContainer ) {
				continue;
			}

			// Cannot intersect with itself
			// no useless actions that have been done before
			// no action if the item moved is the parent of the item checked
			if ( itemElement !== this.currentItem[ 0 ] &&
				this.placeholder[ intersection === 1 ? "next" : "prev" ]()[ 0 ] !== itemElement &&
				!$.contains( this.placeholder[ 0 ], itemElement ) &&
				( this.options.type === "semi-dynamic" ?
					!$.contains( this.element[ 0 ], itemElement ) :
					true
				)
			) {

				this.direction = intersection === 1 ? "down" : "up";

				if ( this.options.tolerance === "pointer" || this._intersectsWithSides( item ) ) {
					this._rearrange( event, item );
				} else {
					break;
				}

				this._trigger( "change", event, this._uiHash() );
				break;
			}
		}

		//Post events to containers
		this._contactContainers( event );

		//Interconnect with droppables
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.drag( this, event );
		}

		//Call callbacks
		this._trigger( "sort", event, this._uiHash() );

		this.lastPositionAbs = this.positionAbs;
		return false;

	},

	_mouseStop: function( event, noPropagation ) {

		if ( !event ) {
			return;
		}

		//If we are using droppables, inform the manager about the drop
		if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
			$.ui.ddmanager.drop( this, event );
		}

		if ( this.options.revert ) {
			var that = this,
				cur = this.placeholder.offset(),
				axis = this.options.axis,
				animation = {};

			if ( !axis || axis === "x" ) {
				animation.left = cur.left - this.offset.parent.left - this.margins.left +
					( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
						0 :
						this.offsetParent[ 0 ].scrollLeft
					);
			}
			if ( !axis || axis === "y" ) {
				animation.top = cur.top - this.offset.parent.top - this.margins.top +
					( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
						0 :
						this.offsetParent[ 0 ].scrollTop
					);
			}
			this.reverting = true;
			$( this.helper ).animate(
				animation,
				parseInt( this.options.revert, 10 ) || 500,
				function() {
					that._clear( event );
				}
			);
		} else {
			this._clear( event, noPropagation );
		}

		return false;

	},

	cancel: function() {

		if ( this.dragging ) {

			this._mouseUp( new $.Event( "mouseup", { target: null } ) );

			if ( this.options.helper === "original" ) {
				this.currentItem.css( this._storedCSS );
				this._removeClass( this.currentItem, "ui-sortable-helper" );
			} else {
				this.currentItem.show();
			}

			//Post deactivating events to containers
			for ( var i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "deactivate", null, this._uiHash( this ) );
				if ( this.containers[ i ].containerCache.over ) {
					this.containers[ i ]._trigger( "out", null, this._uiHash( this ) );
					this.containers[ i ].containerCache.over = 0;
				}
			}

		}

		if ( this.placeholder ) {

			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
			// it unbinds ALL events from the original node!
			if ( this.placeholder[ 0 ].parentNode ) {
				this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );
			}
			if ( this.options.helper !== "original" && this.helper &&
					this.helper[ 0 ].parentNode ) {
				this.helper.remove();
			}

			$.extend( this, {
				helper: null,
				dragging: false,
				reverting: false,
				_noFinalSort: null
			} );

			if ( this.domPosition.prev ) {
				$( this.domPosition.prev ).after( this.currentItem );
			} else {
				$( this.domPosition.parent ).prepend( this.currentItem );
			}
		}

		return this;

	},

	serialize: function( o ) {

		var items = this._getItemsAsjQuery( o && o.connected ),
			str = [];
		o = o || {};

		$( items ).each( function() {
			var res = ( $( o.item || this ).attr( o.attribute || "id" ) || "" )
				.match( o.expression || ( /(.+)[\-=_](.+)/ ) );
			if ( res ) {
				str.push(
					( o.key || res[ 1 ] + "[]" ) +
					"=" + ( o.key && o.expression ? res[ 1 ] : res[ 2 ] ) );
			}
		} );

		if ( !str.length && o.key ) {
			str.push( o.key + "=" );
		}

		return str.join( "&" );

	},

	toArray: function( o ) {

		var items = this._getItemsAsjQuery( o && o.connected ),
			ret = [];

		o = o || {};

		items.each( function() {
			ret.push( $( o.item || this ).attr( o.attribute || "id" ) || "" );
		} );
		return ret;

	},

	/* Be careful with the following core functions */
	_intersectsWith: function( item ) {

		var x1 = this.positionAbs.left,
			x2 = x1 + this.helperProportions.width,
			y1 = this.positionAbs.top,
			y2 = y1 + this.helperProportions.height,
			l = item.left,
			r = l + item.width,
			t = item.top,
			b = t + item.height,
			dyClick = this.offset.click.top,
			dxClick = this.offset.click.left,
			isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t &&
				( y1 + dyClick ) < b ),
			isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l &&
				( x1 + dxClick ) < r ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( this.options.tolerance === "pointer" ||
			this.options.forcePointerForContainers ||
			( this.options.tolerance !== "pointer" &&
				this.helperProportions[ this.floating ? "width" : "height" ] >
				item[ this.floating ? "width" : "height" ] )
		) {
			return isOverElement;
		} else {

			return ( l < x1 + ( this.helperProportions.width / 2 ) && // Right Half
				x2 - ( this.helperProportions.width / 2 ) < r && // Left Half
				t < y1 + ( this.helperProportions.height / 2 ) && // Bottom Half
				y2 - ( this.helperProportions.height / 2 ) < b ); // Top Half

		}
	},

	_intersectsWithPointer: function( item ) {
		var verticalDirection, horizontalDirection,
			isOverElementHeight = ( this.options.axis === "x" ) ||
				this._isOverAxis(
					this.positionAbs.top + this.offset.click.top, item.top, item.height ),
			isOverElementWidth = ( this.options.axis === "y" ) ||
				this._isOverAxis(
					this.positionAbs.left + this.offset.click.left, item.left, item.width ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( !isOverElement ) {
			return false;
		}

		verticalDirection = this._getDragVerticalDirection();
		horizontalDirection = this._getDragHorizontalDirection();

		return this.floating ?
			( ( horizontalDirection === "right" || verticalDirection === "down" ) ? 2 : 1 )
			: ( verticalDirection && ( verticalDirection === "down" ? 2 : 1 ) );

	},

	_intersectsWithSides: function( item ) {

		var isOverBottomHalf = this._isOverAxis( this.positionAbs.top +
				this.offset.click.top, item.top + ( item.height / 2 ), item.height ),
			isOverRightHalf = this._isOverAxis( this.positionAbs.left +
				this.offset.click.left, item.left + ( item.width / 2 ), item.width ),
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if ( this.floating && horizontalDirection ) {
			return ( ( horizontalDirection === "right" && isOverRightHalf ) ||
				( horizontalDirection === "left" && !isOverRightHalf ) );
		} else {
			return verticalDirection && ( ( verticalDirection === "down" && isOverBottomHalf ) ||
				( verticalDirection === "up" && !isOverBottomHalf ) );
		}

	},

	_getDragVerticalDirection: function() {
		var delta = this.positionAbs.top - this.lastPositionAbs.top;
		return delta !== 0 && ( delta > 0 ? "down" : "up" );
	},

	_getDragHorizontalDirection: function() {
		var delta = this.positionAbs.left - this.lastPositionAbs.left;
		return delta !== 0 && ( delta > 0 ? "right" : "left" );
	},

	refresh: function( event ) {
		this._refreshItems( event );
		this._setHandleClassName();
		this.refreshPositions();
		return this;
	},

	_connectWith: function() {
		var options = this.options;
		return options.connectWith.constructor === String ?
			[ options.connectWith ] :
			options.connectWith;
	},

	_getItemsAsjQuery: function( connected ) {

		var i, j, cur, inst,
			items = [],
			queries = [],
			connectWith = this._connectWith();

		if ( connectWith && connected ) {
			for ( i = connectWith.length - 1; i >= 0; i-- ) {
				cur = $( connectWith[ i ], this.document[ 0 ] );
				for ( j = cur.length - 1; j >= 0; j-- ) {
					inst = $.data( cur[ j ], this.widgetFullName );
					if ( inst && inst !== this && !inst.options.disabled ) {
						queries.push( [ $.isFunction( inst.options.items ) ?
							inst.options.items.call( inst.element ) :
							$( inst.options.items, inst.element )
								.not( ".ui-sortable-helper" )
								.not( ".ui-sortable-placeholder" ), inst ] );
					}
				}
			}
		}

		queries.push( [ $.isFunction( this.options.items ) ?
			this.options.items
				.call( this.element, null, { options: this.options, item: this.currentItem } ) :
			$( this.options.items, this.element )
				.not( ".ui-sortable-helper" )
				.not( ".ui-sortable-placeholder" ), this ] );

		function addItems() {
			items.push( this );
		}
		for ( i = queries.length - 1; i >= 0; i-- ) {
			queries[ i ][ 0 ].each( addItems );
		}

		return $( items );

	},

	_removeCurrentsFromItems: function() {

		var list = this.currentItem.find( ":data(" + this.widgetName + "-item)" );

		this.items = $.grep( this.items, function( item ) {
			for ( var j = 0; j < list.length; j++ ) {
				if ( list[ j ] === item.item[ 0 ] ) {
					return false;
				}
			}
			return true;
		} );

	},

	_refreshItems: function( event ) {

		this.items = [];
		this.containers = [ this ];

		var i, j, cur, inst, targetData, _queries, item, queriesLength,
			items = this.items,
			queries = [ [ $.isFunction( this.options.items ) ?
				this.options.items.call( this.element[ 0 ], event, { item: this.currentItem } ) :
				$( this.options.items, this.element ), this ] ],
			connectWith = this._connectWith();

		//Shouldn't be run the first time through due to massive slow-down
		if ( connectWith && this.ready ) {
			for ( i = connectWith.length - 1; i >= 0; i-- ) {
				cur = $( connectWith[ i ], this.document[ 0 ] );
				for ( j = cur.length - 1; j >= 0; j-- ) {
					inst = $.data( cur[ j ], this.widgetFullName );
					if ( inst && inst !== this && !inst.options.disabled ) {
						queries.push( [ $.isFunction( inst.options.items ) ?
							inst.options.items
								.call( inst.element[ 0 ], event, { item: this.currentItem } ) :
							$( inst.options.items, inst.element ), inst ] );
						this.containers.push( inst );
					}
				}
			}
		}

		for ( i = queries.length - 1; i >= 0; i-- ) {
			targetData = queries[ i ][ 1 ];
			_queries = queries[ i ][ 0 ];

			for ( j = 0, queriesLength = _queries.length; j < queriesLength; j++ ) {
				item = $( _queries[ j ] );

				// Data for target checking (mouse manager)
				item.data( this.widgetName + "-item", targetData );

				items.push( {
					item: item,
					instance: targetData,
					width: 0, height: 0,
					left: 0, top: 0
				} );
			}
		}

	},

	refreshPositions: function( fast ) {

		// Determine whether items are being displayed horizontally
		this.floating = this.items.length ?
			this.options.axis === "x" || this._isFloating( this.items[ 0 ].item ) :
			false;

		//This has to be redone because due to the item being moved out/into the offsetParent,
		// the offsetParent's position will change
		if ( this.offsetParent && this.helper ) {
			this.offset.parent = this._getParentOffset();
		}

		var i, item, t, p;

		for ( i = this.items.length - 1; i >= 0; i-- ) {
			item = this.items[ i ];

			//We ignore calculating positions of all connected containers when we're not over them
			if ( item.instance !== this.currentContainer && this.currentContainer &&
					item.item[ 0 ] !== this.currentItem[ 0 ] ) {
				continue;
			}

			t = this.options.toleranceElement ?
				$( this.options.toleranceElement, item.item ) :
				item.item;

			if ( !fast ) {
				item.width = t.outerWidth();
				item.height = t.outerHeight();
			}

			p = t.offset();
			item.left = p.left;
			item.top = p.top;
		}

		if ( this.options.custom && this.options.custom.refreshContainers ) {
			this.options.custom.refreshContainers.call( this );
		} else {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				p = this.containers[ i ].element.offset();
				this.containers[ i ].containerCache.left = p.left;
				this.containers[ i ].containerCache.top = p.top;
				this.containers[ i ].containerCache.width =
					this.containers[ i ].element.outerWidth();
				this.containers[ i ].containerCache.height =
					this.containers[ i ].element.outerHeight();
			}
		}

		return this;
	},

	_createPlaceholder: function( that ) {
		that = that || this;
		var className,
			o = that.options;

		if ( !o.placeholder || o.placeholder.constructor === String ) {
			className = o.placeholder;
			o.placeholder = {
				element: function() {

					var nodeName = that.currentItem[ 0 ].nodeName.toLowerCase(),
						element = $( "<" + nodeName + ">", that.document[ 0 ] );

						that._addClass( element, "ui-sortable-placeholder",
								className || that.currentItem[ 0 ].className )
							._removeClass( element, "ui-sortable-helper" );

					if ( nodeName === "tbody" ) {
						that._createTrPlaceholder(
							that.currentItem.find( "tr" ).eq( 0 ),
							$( "<tr>", that.document[ 0 ] ).appendTo( element )
						);
					} else if ( nodeName === "tr" ) {
						that._createTrPlaceholder( that.currentItem, element );
					} else if ( nodeName === "img" ) {
						element.attr( "src", that.currentItem.attr( "src" ) );
					}

					if ( !className ) {
						element.css( "visibility", "hidden" );
					}

					return element;
				},
				update: function( container, p ) {

					// 1. If a className is set as 'placeholder option, we don't force sizes -
					// the class is responsible for that
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a
					// class name is specified
					if ( className && !o.forcePlaceholderSize ) {
						return;
					}

					//If the element doesn't have a actual height by itself (without styles coming
					// from a stylesheet), it receives the inline height from the dragged item
					if ( !p.height() ) {
						p.height(
							that.currentItem.innerHeight() -
							parseInt( that.currentItem.css( "paddingTop" ) || 0, 10 ) -
							parseInt( that.currentItem.css( "paddingBottom" ) || 0, 10 ) );
					}
					if ( !p.width() ) {
						p.width(
							that.currentItem.innerWidth() -
							parseInt( that.currentItem.css( "paddingLeft" ) || 0, 10 ) -
							parseInt( that.currentItem.css( "paddingRight" ) || 0, 10 ) );
					}
				}
			};
		}

		//Create the placeholder
		that.placeholder = $( o.placeholder.element.call( that.element, that.currentItem ) );

		//Append it after the actual current item
		that.currentItem.after( that.placeholder );

		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
		o.placeholder.update( that, that.placeholder );

	},

	_createTrPlaceholder: function( sourceTr, targetTr ) {
		var that = this;

		sourceTr.children().each( function() {
			$( "<td>&#160;</td>", that.document[ 0 ] )
				.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
				.appendTo( targetTr );
		} );
	},

	_contactContainers: function( event ) {
		var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom,
			floating, axis,
			innermostContainer = null,
			innermostIndex = null;

		// Get innermost container that intersects with item
		for ( i = this.containers.length - 1; i >= 0; i-- ) {

			// Never consider a container that's located within the item itself
			if ( $.contains( this.currentItem[ 0 ], this.containers[ i ].element[ 0 ] ) ) {
				continue;
			}

			if ( this._intersectsWith( this.containers[ i ].containerCache ) ) {

				// If we've already found a container and it's more "inner" than this, then continue
				if ( innermostContainer &&
						$.contains(
							this.containers[ i ].element[ 0 ],
							innermostContainer.element[ 0 ] ) ) {
					continue;
				}

				innermostContainer = this.containers[ i ];
				innermostIndex = i;

			} else {

				// container doesn't intersect. trigger "out" event if necessary
				if ( this.containers[ i ].containerCache.over ) {
					this.containers[ i ]._trigger( "out", event, this._uiHash( this ) );
					this.containers[ i ].containerCache.over = 0;
				}
			}

		}

		// If no intersecting containers found, return
		if ( !innermostContainer ) {
			return;
		}

		// Move the item into the container if it's not there already
		if ( this.containers.length === 1 ) {
			if ( !this.containers[ innermostIndex ].containerCache.over ) {
				this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
				this.containers[ innermostIndex ].containerCache.over = 1;
			}
		} else {

			// When entering a new container, we will find the item with the least distance and
			// append our item near it
			dist = 10000;
			itemWithLeastDistance = null;
			floating = innermostContainer.floating || this._isFloating( this.currentItem );
			posProperty = floating ? "left" : "top";
			sizeProperty = floating ? "width" : "height";
			axis = floating ? "pageX" : "pageY";

			for ( j = this.items.length - 1; j >= 0; j-- ) {
				if ( !$.contains(
						this.containers[ innermostIndex ].element[ 0 ], this.items[ j ].item[ 0 ] )
				) {
					continue;
				}
				if ( this.items[ j ].item[ 0 ] === this.currentItem[ 0 ] ) {
					continue;
				}

				cur = this.items[ j ].item.offset()[ posProperty ];
				nearBottom = false;
				if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
					nearBottom = true;
				}

				if ( Math.abs( event[ axis ] - cur ) < dist ) {
					dist = Math.abs( event[ axis ] - cur );
					itemWithLeastDistance = this.items[ j ];
					this.direction = nearBottom ? "up" : "down";
				}
			}

			//Check if dropOnEmpty is enabled
			if ( !itemWithLeastDistance && !this.options.dropOnEmpty ) {
				return;
			}

			if ( this.currentContainer === this.containers[ innermostIndex ] ) {
				if ( !this.currentContainer.containerCache.over ) {
					this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash() );
					this.currentContainer.containerCache.over = 1;
				}
				return;
			}

			itemWithLeastDistance ?
				this._rearrange( event, itemWithLeastDistance, null, true ) :
				this._rearrange( event, null, this.containers[ innermostIndex ].element, true );
			this._trigger( "change", event, this._uiHash() );
			this.containers[ innermostIndex ]._trigger( "change", event, this._uiHash( this ) );
			this.currentContainer = this.containers[ innermostIndex ];

			//Update the placeholder
			this.options.placeholder.update( this.currentContainer, this.placeholder );

			this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
			this.containers[ innermostIndex ].containerCache.over = 1;
		}

	},

	_createHelper: function( event ) {

		var o = this.options,
			helper = $.isFunction( o.helper ) ?
				$( o.helper.apply( this.element[ 0 ], [ event, this.currentItem ] ) ) :
				( o.helper === "clone" ? this.currentItem.clone() : this.currentItem );

		//Add the helper to the DOM if that didn't happen already
		if ( !helper.parents( "body" ).length ) {
			$( o.appendTo !== "parent" ?
				o.appendTo :
				this.currentItem[ 0 ].parentNode )[ 0 ].appendChild( helper[ 0 ] );
		}

		if ( helper[ 0 ] === this.currentItem[ 0 ] ) {
			this._storedCSS = {
				width: this.currentItem[ 0 ].style.width,
				height: this.currentItem[ 0 ].style.height,
				position: this.currentItem.css( "position" ),
				top: this.currentItem.css( "top" ),
				left: this.currentItem.css( "left" )
			};
		}

		if ( !helper[ 0 ].style.width || o.forceHelperSize ) {
			helper.width( this.currentItem.width() );
		}
		if ( !helper[ 0 ].style.height || o.forceHelperSize ) {
			helper.height( this.currentItem.height() );
		}

		return helper;

	},

	_adjustOffsetFromHelper: function( obj ) {
		if ( typeof obj === "string" ) {
			obj = obj.split( " " );
		}
		if ( $.isArray( obj ) ) {
			obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
		}
		if ( "left" in obj ) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ( "right" in obj ) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ( "top" in obj ) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ( "bottom" in obj ) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		this.offsetParent = this.helper.offsetParent();
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the
		// following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the
		// next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
		// the document, which means that the scroll is included in the initial calculation of the
		// offset of the parent, and never recalculated upon drag
		if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		// This needs to be actually done for all browsers, since pageX/pageY includes this
		// information with an ugly IE fix
		if ( this.offsetParent[ 0 ] === this.document[ 0 ].body ||
				( this.offsetParent[ 0 ].tagName &&
				this.offsetParent[ 0 ].tagName.toLowerCase() === "html" && $.ui.ie ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
			left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
		};

	},

	_getRelativeOffset: function() {

		if ( this.cssPosition === "relative" ) {
			var p = this.currentItem.position();
			return {
				top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
					this.scrollParent.scrollTop(),
				left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
					this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: ( parseInt( this.currentItem.css( "marginLeft" ), 10 ) || 0 ),
			top: ( parseInt( this.currentItem.css( "marginTop" ), 10 ) || 0 )
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var ce, co, over,
			o = this.options;
		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}
		if ( o.containment === "document" || o.containment === "window" ) {
			this.containment = [
				0 - this.offset.relative.left - this.offset.parent.left,
				0 - this.offset.relative.top - this.offset.parent.top,
				o.containment === "document" ?
					this.document.width() :
					this.window.width() - this.helperProportions.width - this.margins.left,
				( o.containment === "document" ?
					( this.document.height() || document.body.parentNode.scrollHeight ) :
					this.window.height() || this.document[ 0 ].body.parentNode.scrollHeight
				) - this.helperProportions.height - this.margins.top
			];
		}

		if ( !( /^(document|window|parent)$/ ).test( o.containment ) ) {
			ce = $( o.containment )[ 0 ];
			co = $( o.containment ).offset();
			over = ( $( ce ).css( "overflow" ) !== "hidden" );

			this.containment = [
				co.left + ( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) +
					( parseInt( $( ce ).css( "paddingLeft" ), 10 ) || 0 ) - this.margins.left,
				co.top + ( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) +
					( parseInt( $( ce ).css( "paddingTop" ), 10 ) || 0 ) - this.margins.top,
				co.left + ( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
					( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) -
					( parseInt( $( ce ).css( "paddingRight" ), 10 ) || 0 ) -
					this.helperProportions.width - this.margins.left,
				co.top + ( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
					( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) -
					( parseInt( $( ce ).css( "paddingBottom" ), 10 ) || 0 ) -
					this.helperProportions.height - this.margins.top
			];
		}

	},

	_convertPositionTo: function( d, pos ) {

		if ( !pos ) {
			pos = this.position;
		}
		var mod = d === "absolute" ? 1 : -1,
			scroll = this.cssPosition === "absolute" &&
				!( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
					this.offsetParent :
					this.scrollParent,
			scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

		return {
			top: (

				// The absolute mouse position
				pos.top	+

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top * mod -
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollTop() :
					( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod )
			),
			left: (

				// The absolute mouse position
				pos.left +

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left * mod	-
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 :
					scroll.scrollLeft() ) * mod )
			)
		};

	},

	_generatePosition: function( event ) {

		var top, left,
			o = this.options,
			pageX = event.pageX,
			pageY = event.pageY,
			scroll = this.cssPosition === "absolute" &&
				!( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
					this.offsetParent :
					this.scrollParent,
				scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

		// This is another very weird special case that only happens for relative elements:
		// 1. If the css position is relative
		// 2. and the scroll parent is the document or similar to the offset parent
		// we have to refresh the relative offset during the scroll so there are no jumps
		if ( this.cssPosition === "relative" && !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				this.scrollParent[ 0 ] !== this.offsetParent[ 0 ] ) ) {
			this.offset.relative = this._getRelativeOffset();
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		if ( this.originalPosition ) { //If we are not dragging yet, we won't check for options

			if ( this.containment ) {
				if ( event.pageX - this.offset.click.left < this.containment[ 0 ] ) {
					pageX = this.containment[ 0 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top < this.containment[ 1 ] ) {
					pageY = this.containment[ 1 ] + this.offset.click.top;
				}
				if ( event.pageX - this.offset.click.left > this.containment[ 2 ] ) {
					pageX = this.containment[ 2 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top > this.containment[ 3 ] ) {
					pageY = this.containment[ 3 ] + this.offset.click.top;
				}
			}

			if ( o.grid ) {
				top = this.originalPageY + Math.round( ( pageY - this.originalPageY ) /
					o.grid[ 1 ] ) * o.grid[ 1 ];
				pageY = this.containment ?
					( ( top - this.offset.click.top >= this.containment[ 1 ] &&
						top - this.offset.click.top <= this.containment[ 3 ] ) ?
							top :
							( ( top - this.offset.click.top >= this.containment[ 1 ] ) ?
								top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) :
								top;

				left = this.originalPageX + Math.round( ( pageX - this.originalPageX ) /
					o.grid[ 0 ] ) * o.grid[ 0 ];
				pageX = this.containment ?
					( ( left - this.offset.click.left >= this.containment[ 0 ] &&
						left - this.offset.click.left <= this.containment[ 2 ] ) ?
							left :
							( ( left - this.offset.click.left >= this.containment[ 0 ] ) ?
								left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) :
								left;
			}

		}

		return {
			top: (

				// The absolute mouse position
				pageY -

				// Click offset (relative to the element)
				this.offset.click.top -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top +
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollTop() :
					( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) )
			),
			left: (

				// The absolute mouse position
				pageX -

				// Click offset (relative to the element)
				this.offset.click.left -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left +
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollLeft() :
					scrollIsRootNode ? 0 : scroll.scrollLeft() ) )
			)
		};

	},

	_rearrange: function( event, i, a, hardRefresh ) {

		a ? a[ 0 ].appendChild( this.placeholder[ 0 ] ) :
			i.item[ 0 ].parentNode.insertBefore( this.placeholder[ 0 ],
				( this.direction === "down" ? i.item[ 0 ] : i.item[ 0 ].nextSibling ) );

		//Various things done here to improve the performance:
		// 1. we create a setTimeout, that calls refreshPositions
		// 2. on the instance, we have a counter variable, that get's higher after every append
		// 3. on the local scope, we copy the counter variable, and check in the timeout,
		// if it's still the same
		// 4. this lets only the last addition to the timeout stack through
		this.counter = this.counter ? ++this.counter : 1;
		var counter = this.counter;

		this._delay( function() {
			if ( counter === this.counter ) {

				//Precompute after each DOM insertion, NOT on mousemove
				this.refreshPositions( !hardRefresh );
			}
		} );

	},

	_clear: function( event, noPropagation ) {

		this.reverting = false;

		// We delay all events that have to be triggered to after the point where the placeholder
		// has been removed and everything else normalized again
		var i,
			delayedTriggers = [];

		// We first have to update the dom position of the actual currentItem
		// Note: don't do it if the current item is already removed (by a user), or it gets
		// reappended (see #4088)
		if ( !this._noFinalSort && this.currentItem.parent().length ) {
			this.placeholder.before( this.currentItem );
		}
		this._noFinalSort = null;

		if ( this.helper[ 0 ] === this.currentItem[ 0 ] ) {
			for ( i in this._storedCSS ) {
				if ( this._storedCSS[ i ] === "auto" || this._storedCSS[ i ] === "static" ) {
					this._storedCSS[ i ] = "";
				}
			}
			this.currentItem.css( this._storedCSS );
			this._removeClass( this.currentItem, "ui-sortable-helper" );
		} else {
			this.currentItem.show();
		}

		if ( this.fromOutside && !noPropagation ) {
			delayedTriggers.push( function( event ) {
				this._trigger( "receive", event, this._uiHash( this.fromOutside ) );
			} );
		}
		if ( ( this.fromOutside ||
				this.domPosition.prev !==
				this.currentItem.prev().not( ".ui-sortable-helper" )[ 0 ] ||
				this.domPosition.parent !== this.currentItem.parent()[ 0 ] ) && !noPropagation ) {

			// Trigger update callback if the DOM position has changed
			delayedTriggers.push( function( event ) {
				this._trigger( "update", event, this._uiHash() );
			} );
		}

		// Check if the items Container has Changed and trigger appropriate
		// events.
		if ( this !== this.currentContainer ) {
			if ( !noPropagation ) {
				delayedTriggers.push( function( event ) {
					this._trigger( "remove", event, this._uiHash() );
				} );
				delayedTriggers.push( ( function( c ) {
					return function( event ) {
						c._trigger( "receive", event, this._uiHash( this ) );
					};
				} ).call( this, this.currentContainer ) );
				delayedTriggers.push( ( function( c ) {
					return function( event ) {
						c._trigger( "update", event, this._uiHash( this ) );
					};
				} ).call( this, this.currentContainer ) );
			}
		}

		//Post events to containers
		function delayEvent( type, instance, container ) {
			return function( event ) {
				container._trigger( type, event, instance._uiHash( instance ) );
			};
		}
		for ( i = this.containers.length - 1; i >= 0; i-- ) {
			if ( !noPropagation ) {
				delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
			}
			if ( this.containers[ i ].containerCache.over ) {
				delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
				this.containers[ i ].containerCache.over = 0;
			}
		}

		//Do what was originally in plugins
		if ( this.storedCursor ) {
			this.document.find( "body" ).css( "cursor", this.storedCursor );
			this.storedStylesheet.remove();
		}
		if ( this._storedOpacity ) {
			this.helper.css( "opacity", this._storedOpacity );
		}
		if ( this._storedZIndex ) {
			this.helper.css( "zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex );
		}

		this.dragging = false;

		if ( !noPropagation ) {
			this._trigger( "beforeStop", event, this._uiHash() );
		}

		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
		// it unbinds ALL events from the original node!
		this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );

		if ( !this.cancelHelperRemoval ) {
			if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
				this.helper.remove();
			}
			this.helper = null;
		}

		if ( !noPropagation ) {
			for ( i = 0; i < delayedTriggers.length; i++ ) {

				// Trigger all delayed events
				delayedTriggers[ i ].call( this, event );
			}
			this._trigger( "stop", event, this._uiHash() );
		}

		this.fromOutside = false;
		return !this.cancelHelperRemoval;

	},

	_trigger: function() {
		if ( $.Widget.prototype._trigger.apply( this, arguments ) === false ) {
			this.cancel();
		}
	},

	_uiHash: function( _inst ) {
		var inst = _inst || this;
		return {
			helper: inst.helper,
			placeholder: inst.placeholder || $( [] ),
			position: inst.position,
			originalPosition: inst.originalPosition,
			offset: inst.positionAbs,
			item: inst.currentItem,
			sender: _inst ? _inst.element : null
		};
	}

} );


/*!
 * jQuery UI Spinner 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Spinner
//>>group: Widgets
//>>description: Displays buttons to easily input numbers via the keyboard or mouse.
//>>docs: http://api.jqueryui.com/spinner/
//>>demos: http://jqueryui.com/spinner/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/spinner.css
//>>css.theme: ../../themes/base/theme.css



function spinnerModifer( fn ) {
	return function() {
		var previous = this.element.val();
		fn.apply( this, arguments );
		this._refresh();
		if ( previous !== this.element.val() ) {
			this._trigger( "change" );
		}
	};
}

$.widget( "ui.spinner", {
	version: "1.12.1",
	defaultElement: "<input>",
	widgetEventPrefix: "spin",
	options: {
		classes: {
			"ui-spinner": "ui-corner-all",
			"ui-spinner-down": "ui-corner-br",
			"ui-spinner-up": "ui-corner-tr"
		},
		culture: null,
		icons: {
			down: "ui-icon-triangle-1-s",
			up: "ui-icon-triangle-1-n"
		},
		incremental: true,
		max: null,
		min: null,
		numberFormat: null,
		page: 10,
		step: 1,

		change: null,
		spin: null,
		start: null,
		stop: null
	},

	_create: function() {

		// handle string values that need to be parsed
		this._setOption( "max", this.options.max );
		this._setOption( "min", this.options.min );
		this._setOption( "step", this.options.step );

		// Only format if there is a value, prevents the field from being marked
		// as invalid in Firefox, see #9573.
		if ( this.value() !== "" ) {

			// Format the value, but don't constrain.
			this._value( this.element.val(), true );
		}

		this._draw();
		this._on( this._events );
		this._refresh();

		// Turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		} );
	},

	_getCreateOptions: function() {
		var options = this._super();
		var element = this.element;

		$.each( [ "min", "max", "step" ], function( i, option ) {
			var value = element.attr( option );
			if ( value != null && value.length ) {
				options[ option ] = value;
			}
		} );

		return options;
	},

	_events: {
		keydown: function( event ) {
			if ( this._start( event ) && this._keydown( event ) ) {
				event.preventDefault();
			}
		},
		keyup: "_stop",
		focus: function() {
			this.previous = this.element.val();
		},
		blur: function( event ) {
			if ( this.cancelBlur ) {
				delete this.cancelBlur;
				return;
			}

			this._stop();
			this._refresh();
			if ( this.previous !== this.element.val() ) {
				this._trigger( "change", event );
			}
		},
		mousewheel: function( event, delta ) {
			if ( !delta ) {
				return;
			}
			if ( !this.spinning && !this._start( event ) ) {
				return false;
			}

			this._spin( ( delta > 0 ? 1 : -1 ) * this.options.step, event );
			clearTimeout( this.mousewheelTimer );
			this.mousewheelTimer = this._delay( function() {
				if ( this.spinning ) {
					this._stop( event );
				}
			}, 100 );
			event.preventDefault();
		},
		"mousedown .ui-spinner-button": function( event ) {
			var previous;

			// We never want the buttons to have focus; whenever the user is
			// interacting with the spinner, the focus should be on the input.
			// If the input is focused then this.previous is properly set from
			// when the input first received focus. If the input is not focused
			// then we need to set this.previous based on the value before spinning.
			previous = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] ) ?
				this.previous : this.element.val();
			function checkFocus() {
				var isActive = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] );
				if ( !isActive ) {
					this.element.trigger( "focus" );
					this.previous = previous;

					// support: IE
					// IE sets focus asynchronously, so we need to check if focus
					// moved off of the input because the user clicked on the button.
					this._delay( function() {
						this.previous = previous;
					} );
				}
			}

			// Ensure focus is on (or stays on) the text field
			event.preventDefault();
			checkFocus.call( this );

			// Support: IE
			// IE doesn't prevent moving focus even with event.preventDefault()
			// so we set a flag to know when we should ignore the blur event
			// and check (again) if focus moved off of the input.
			this.cancelBlur = true;
			this._delay( function() {
				delete this.cancelBlur;
				checkFocus.call( this );
			} );

			if ( this._start( event ) === false ) {
				return;
			}

			this._repeat( null, $( event.currentTarget )
				.hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},
		"mouseup .ui-spinner-button": "_stop",
		"mouseenter .ui-spinner-button": function( event ) {

			// button will add ui-state-active if mouse was down while mouseleave and kept down
			if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
				return;
			}

			if ( this._start( event ) === false ) {
				return false;
			}
			this._repeat( null, $( event.currentTarget )
				.hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},

		// TODO: do we really want to consider this a stop?
		// shouldn't we just stop the repeater and wait until mouseup before
		// we trigger the stop event?
		"mouseleave .ui-spinner-button": "_stop"
	},

	// Support mobile enhanced option and make backcompat more sane
	_enhance: function() {
		this.uiSpinner = this.element
			.attr( "autocomplete", "off" )
			.wrap( "<span>" )
			.parent()

				// Add buttons
				.append(
					"<a></a><a></a>"
				);
	},

	_draw: function() {
		this._enhance();

		this._addClass( this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content" );
		this._addClass( "ui-spinner-input" );

		this.element.attr( "role", "spinbutton" );

		// Button bindings
		this.buttons = this.uiSpinner.children( "a" )
			.attr( "tabIndex", -1 )
			.attr( "aria-hidden", true )
			.button( {
				classes: {
					"ui-button": ""
				}
			} );

		// TODO: Right now button does not support classes this is already updated in button PR
		this._removeClass( this.buttons, "ui-corner-all" );

		this._addClass( this.buttons.first(), "ui-spinner-button ui-spinner-up" );
		this._addClass( this.buttons.last(), "ui-spinner-button ui-spinner-down" );
		this.buttons.first().button( {
			"icon": this.options.icons.up,
			"showLabel": false
		} );
		this.buttons.last().button( {
			"icon": this.options.icons.down,
			"showLabel": false
		} );

		// IE 6 doesn't understand height: 50% for the buttons
		// unless the wrapper has an explicit height
		if ( this.buttons.height() > Math.ceil( this.uiSpinner.height() * 0.5 ) &&
				this.uiSpinner.height() > 0 ) {
			this.uiSpinner.height( this.uiSpinner.height() );
		}
	},

	_keydown: function( event ) {
		var options = this.options,
			keyCode = $.ui.keyCode;

		switch ( event.keyCode ) {
		case keyCode.UP:
			this._repeat( null, 1, event );
			return true;
		case keyCode.DOWN:
			this._repeat( null, -1, event );
			return true;
		case keyCode.PAGE_UP:
			this._repeat( null, options.page, event );
			return true;
		case keyCode.PAGE_DOWN:
			this._repeat( null, -options.page, event );
			return true;
		}

		return false;
	},

	_start: function( event ) {
		if ( !this.spinning && this._trigger( "start", event ) === false ) {
			return false;
		}

		if ( !this.counter ) {
			this.counter = 1;
		}
		this.spinning = true;
		return true;
	},

	_repeat: function( i, steps, event ) {
		i = i || 500;

		clearTimeout( this.timer );
		this.timer = this._delay( function() {
			this._repeat( 40, steps, event );
		}, i );

		this._spin( steps * this.options.step, event );
	},

	_spin: function( step, event ) {
		var value = this.value() || 0;

		if ( !this.counter ) {
			this.counter = 1;
		}

		value = this._adjustValue( value + step * this._increment( this.counter ) );

		if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false ) {
			this._value( value );
			this.counter++;
		}
	},

	_increment: function( i ) {
		var incremental = this.options.incremental;

		if ( incremental ) {
			return $.isFunction( incremental ) ?
				incremental( i ) :
				Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );
		}

		return 1;
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_adjustValue: function( value ) {
		var base, aboveMin,
			options = this.options;

		// Make sure we're at a valid step
		// - find out where we are relative to the base (min or 0)
		base = options.min !== null ? options.min : 0;
		aboveMin = value - base;

		// - round to the nearest step
		aboveMin = Math.round( aboveMin / options.step ) * options.step;

		// - rounding is based on 0, so adjust back to our base
		value = base + aboveMin;

		// Fix precision from bad JS floating point math
		value = parseFloat( value.toFixed( this._precision() ) );

		// Clamp the value
		if ( options.max !== null && value > options.max ) {
			return options.max;
		}
		if ( options.min !== null && value < options.min ) {
			return options.min;
		}

		return value;
	},

	_stop: function( event ) {
		if ( !this.spinning ) {
			return;
		}

		clearTimeout( this.timer );
		clearTimeout( this.mousewheelTimer );
		this.counter = 0;
		this.spinning = false;
		this._trigger( "stop", event );
	},

	_setOption: function( key, value ) {
		var prevValue, first, last;

		if ( key === "culture" || key === "numberFormat" ) {
			prevValue = this._parse( this.element.val() );
			this.options[ key ] = value;
			this.element.val( this._format( prevValue ) );
			return;
		}

		if ( key === "max" || key === "min" || key === "step" ) {
			if ( typeof value === "string" ) {
				value = this._parse( value );
			}
		}
		if ( key === "icons" ) {
			first = this.buttons.first().find( ".ui-icon" );
			this._removeClass( first, null, this.options.icons.up );
			this._addClass( first, null, value.up );
			last = this.buttons.last().find( ".ui-icon" );
			this._removeClass( last, null, this.options.icons.down );
			this._addClass( last, null, value.down );
		}

		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this._toggleClass( this.uiSpinner, null, "ui-state-disabled", !!value );
		this.element.prop( "disabled", !!value );
		this.buttons.button( value ? "disable" : "enable" );
	},

	_setOptions: spinnerModifer( function( options ) {
		this._super( options );
	} ),

	_parse: function( val ) {
		if ( typeof val === "string" && val !== "" ) {
			val = window.Globalize && this.options.numberFormat ?
				Globalize.parseFloat( val, 10, this.options.culture ) : +val;
		}
		return val === "" || isNaN( val ) ? null : val;
	},

	_format: function( value ) {
		if ( value === "" ) {
			return "";
		}
		return window.Globalize && this.options.numberFormat ?
			Globalize.format( value, this.options.numberFormat, this.options.culture ) :
			value;
	},

	_refresh: function() {
		this.element.attr( {
			"aria-valuemin": this.options.min,
			"aria-valuemax": this.options.max,

			// TODO: what should we do with values that can't be parsed?
			"aria-valuenow": this._parse( this.element.val() )
		} );
	},

	isValid: function() {
		var value = this.value();

		// Null is invalid
		if ( value === null ) {
			return false;
		}

		// If value gets adjusted, it's invalid
		return value === this._adjustValue( value );
	},

	// Update the value without triggering change
	_value: function( value, allowAny ) {
		var parsed;
		if ( value !== "" ) {
			parsed = this._parse( value );
			if ( parsed !== null ) {
				if ( !allowAny ) {
					parsed = this._adjustValue( parsed );
				}
				value = this._format( parsed );
			}
		}
		this.element.val( value );
		this._refresh();
	},

	_destroy: function() {
		this.element
			.prop( "disabled", false )
			.removeAttr( "autocomplete role aria-valuemin aria-valuemax aria-valuenow" );

		this.uiSpinner.replaceWith( this.element );
	},

	stepUp: spinnerModifer( function( steps ) {
		this._stepUp( steps );
	} ),
	_stepUp: function( steps ) {
		if ( this._start() ) {
			this._spin( ( steps || 1 ) * this.options.step );
			this._stop();
		}
	},

	stepDown: spinnerModifer( function( steps ) {
		this._stepDown( steps );
	} ),
	_stepDown: function( steps ) {
		if ( this._start() ) {
			this._spin( ( steps || 1 ) * -this.options.step );
			this._stop();
		}
	},

	pageUp: spinnerModifer( function( pages ) {
		this._stepUp( ( pages || 1 ) * this.options.page );
	} ),

	pageDown: spinnerModifer( function( pages ) {
		this._stepDown( ( pages || 1 ) * this.options.page );
	} ),

	value: function( newVal ) {
		if ( !arguments.length ) {
			return this._parse( this.element.val() );
		}
		spinnerModifer( this._value ).call( this, newVal );
	},

	widget: function() {
		return this.uiSpinner;
	}
} );

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for spinner html extension points
	$.widget( "ui.spinner", $.ui.spinner, {
		_enhance: function() {
			this.uiSpinner = this.element
				.attr( "autocomplete", "off" )
				.wrap( this._uiSpinnerHtml() )
				.parent()

					// Add buttons
					.append( this._buttonHtml() );
		},
		_uiSpinnerHtml: function() {
			return "<span>";
		},

		_buttonHtml: function() {
			return "<a></a><a></a>";
		}
	} );
}

var widgetsSpinner = $.ui.spinner;


/*!
 * jQuery UI Tabs 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Tabs
//>>group: Widgets
//>>description: Transforms a set of container elements into a tab structure.
//>>docs: http://api.jqueryui.com/tabs/
//>>demos: http://jqueryui.com/tabs/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/tabs.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.tabs", {
	version: "1.12.1",
	delay: 300,
	options: {
		active: null,
		classes: {
			"ui-tabs": "ui-corner-all",
			"ui-tabs-nav": "ui-corner-all",
			"ui-tabs-panel": "ui-corner-bottom",
			"ui-tabs-tab": "ui-corner-top"
		},
		collapsible: false,
		event: "click",
		heightStyle: "content",
		hide: null,
		show: null,

		// Callbacks
		activate: null,
		beforeActivate: null,
		beforeLoad: null,
		load: null
	},

	_isLocal: ( function() {
		var rhash = /#.*$/;

		return function( anchor ) {
			var anchorUrl, locationUrl;

			anchorUrl = anchor.href.replace( rhash, "" );
			locationUrl = location.href.replace( rhash, "" );

			// Decoding may throw an error if the URL isn't UTF-8 (#9518)
			try {
				anchorUrl = decodeURIComponent( anchorUrl );
			} catch ( error ) {}
			try {
				locationUrl = decodeURIComponent( locationUrl );
			} catch ( error ) {}

			return anchor.hash.length > 1 && anchorUrl === locationUrl;
		};
	} )(),

	_create: function() {
		var that = this,
			options = this.options;

		this.running = false;

		this._addClass( "ui-tabs", "ui-widget ui-widget-content" );
		this._toggleClass( "ui-tabs-collapsible", null, options.collapsible );

		this._processTabs();
		options.active = this._initialActive();

		// Take disabling tabs via class attribute from HTML
		// into account and update option properly.
		if ( $.isArray( options.disabled ) ) {
			options.disabled = $.unique( options.disabled.concat(
				$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
					return that.tabs.index( li );
				} )
			) ).sort();
		}

		// Check for length avoids error when initializing empty list
		if ( this.options.active !== false && this.anchors.length ) {
			this.active = this._findActive( options.active );
		} else {
			this.active = $();
		}

		this._refresh();

		if ( this.active.length ) {
			this.load( options.active );
		}
	},

	_initialActive: function() {
		var active = this.options.active,
			collapsible = this.options.collapsible,
			locationHash = location.hash.substring( 1 );

		if ( active === null ) {

			// check the fragment identifier in the URL
			if ( locationHash ) {
				this.tabs.each( function( i, tab ) {
					if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
						active = i;
						return false;
					}
				} );
			}

			// Check for a tab marked active via a class
			if ( active === null ) {
				active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
			}

			// No active tab, set to false
			if ( active === null || active === -1 ) {
				active = this.tabs.length ? 0 : false;
			}
		}

		// Handle numbers: negative, out of range
		if ( active !== false ) {
			active = this.tabs.index( this.tabs.eq( active ) );
			if ( active === -1 ) {
				active = collapsible ? false : 0;
			}
		}

		// Don't allow collapsible: false and active: false
		if ( !collapsible && active === false && this.anchors.length ) {
			active = 0;
		}

		return active;
	},

	_getCreateEventData: function() {
		return {
			tab: this.active,
			panel: !this.active.length ? $() : this._getPanelForTab( this.active )
		};
	},

	_tabKeydown: function( event ) {
		var focusedTab = $( $.ui.safeActiveElement( this.document[ 0 ] ) ).closest( "li" ),
			selectedIndex = this.tabs.index( focusedTab ),
			goingForward = true;

		if ( this._handlePageNav( event ) ) {
			return;
		}

		switch ( event.keyCode ) {
		case $.ui.keyCode.RIGHT:
		case $.ui.keyCode.DOWN:
			selectedIndex++;
			break;
		case $.ui.keyCode.UP:
		case $.ui.keyCode.LEFT:
			goingForward = false;
			selectedIndex--;
			break;
		case $.ui.keyCode.END:
			selectedIndex = this.anchors.length - 1;
			break;
		case $.ui.keyCode.HOME:
			selectedIndex = 0;
			break;
		case $.ui.keyCode.SPACE:

			// Activate only, no collapsing
			event.preventDefault();
			clearTimeout( this.activating );
			this._activate( selectedIndex );
			return;
		case $.ui.keyCode.ENTER:

			// Toggle (cancel delayed activation, allow collapsing)
			event.preventDefault();
			clearTimeout( this.activating );

			// Determine if we should collapse or activate
			this._activate( selectedIndex === this.options.active ? false : selectedIndex );
			return;
		default:
			return;
		}

		// Focus the appropriate tab, based on which key was pressed
		event.preventDefault();
		clearTimeout( this.activating );
		selectedIndex = this._focusNextTab( selectedIndex, goingForward );

		// Navigating with control/command key will prevent automatic activation
		if ( !event.ctrlKey && !event.metaKey ) {

			// Update aria-selected immediately so that AT think the tab is already selected.
			// Otherwise AT may confuse the user by stating that they need to activate the tab,
			// but the tab will already be activated by the time the announcement finishes.
			focusedTab.attr( "aria-selected", "false" );
			this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

			this.activating = this._delay( function() {
				this.option( "active", selectedIndex );
			}, this.delay );
		}
	},

	_panelKeydown: function( event ) {
		if ( this._handlePageNav( event ) ) {
			return;
		}

		// Ctrl+up moves focus to the current tab
		if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
			event.preventDefault();
			this.active.trigger( "focus" );
		}
	},

	// Alt+page up/down moves focus to the previous/next tab (and activates)
	_handlePageNav: function( event ) {
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
			this._activate( this._focusNextTab( this.options.active - 1, false ) );
			return true;
		}
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
			this._activate( this._focusNextTab( this.options.active + 1, true ) );
			return true;
		}
	},

	_findNextTab: function( index, goingForward ) {
		var lastTabIndex = this.tabs.length - 1;

		function constrain() {
			if ( index > lastTabIndex ) {
				index = 0;
			}
			if ( index < 0 ) {
				index = lastTabIndex;
			}
			return index;
		}

		while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
			index = goingForward ? index + 1 : index - 1;
		}

		return index;
	},

	_focusNextTab: function( index, goingForward ) {
		index = this._findNextTab( index, goingForward );
		this.tabs.eq( index ).trigger( "focus" );
		return index;
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {

			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		this._super( key, value );

		if ( key === "collapsible" ) {
			this._toggleClass( "ui-tabs-collapsible", null, value );

			// Setting collapsible: false while collapsed; open first panel
			if ( !value && this.options.active === false ) {
				this._activate( 0 );
			}
		}

		if ( key === "event" ) {
			this._setupEvents( value );
		}

		if ( key === "heightStyle" ) {
			this._setupHeightStyle( value );
		}
	},

	_sanitizeSelector: function( hash ) {
		return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
	},

	refresh: function() {
		var options = this.options,
			lis = this.tablist.children( ":has(a[href])" );

		// Get disabled tabs from class attribute from HTML
		// this will get converted to a boolean if needed in _refresh()
		options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
			return lis.index( tab );
		} );

		this._processTabs();

		// Was collapsed or no tabs
		if ( options.active === false || !this.anchors.length ) {
			options.active = false;
			this.active = $();

		// was active, but active tab is gone
		} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {

			// all remaining tabs are disabled
			if ( this.tabs.length === options.disabled.length ) {
				options.active = false;
				this.active = $();

			// activate previous tab
			} else {
				this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
			}

		// was active, active tab still exists
		} else {

			// make sure active index is correct
			options.active = this.tabs.index( this.active );
		}

		this._refresh();
	},

	_refresh: function() {
		this._setOptionDisabled( this.options.disabled );
		this._setupEvents( this.options.event );
		this._setupHeightStyle( this.options.heightStyle );

		this.tabs.not( this.active ).attr( {
			"aria-selected": "false",
			"aria-expanded": "false",
			tabIndex: -1
		} );
		this.panels.not( this._getPanelForTab( this.active ) )
			.hide()
			.attr( {
				"aria-hidden": "true"
			} );

		// Make sure one tab is in the tab order
		if ( !this.active.length ) {
			this.tabs.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active
				.attr( {
					"aria-selected": "true",
					"aria-expanded": "true",
					tabIndex: 0
				} );
			this._addClass( this.active, "ui-tabs-active", "ui-state-active" );
			this._getPanelForTab( this.active )
				.show()
				.attr( {
					"aria-hidden": "false"
				} );
		}
	},

	_processTabs: function() {
		var that = this,
			prevTabs = this.tabs,
			prevAnchors = this.anchors,
			prevPanels = this.panels;

		this.tablist = this._getList().attr( "role", "tablist" );
		this._addClass( this.tablist, "ui-tabs-nav",
			"ui-helper-reset ui-helper-clearfix ui-widget-header" );

		// Prevent users from focusing disabled tabs via click
		this.tablist
			.on( "mousedown" + this.eventNamespace, "> li", function( event ) {
				if ( $( this ).is( ".ui-state-disabled" ) ) {
					event.preventDefault();
				}
			} )

			// Support: IE <9
			// Preventing the default action in mousedown doesn't prevent IE
			// from focusing the element, so if the anchor gets focused, blur.
			// We don't have to worry about focusing the previously focused
			// element since clicking on a non-focusable element should focus
			// the body anyway.
			.on( "focus" + this.eventNamespace, ".ui-tabs-anchor", function() {
				if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
					this.blur();
				}
			} );

		this.tabs = this.tablist.find( "> li:has(a[href])" )
			.attr( {
				role: "tab",
				tabIndex: -1
			} );
		this._addClass( this.tabs, "ui-tabs-tab", "ui-state-default" );

		this.anchors = this.tabs.map( function() {
			return $( "a", this )[ 0 ];
		} )
			.attr( {
				role: "presentation",
				tabIndex: -1
			} );
		this._addClass( this.anchors, "ui-tabs-anchor" );

		this.panels = $();

		this.anchors.each( function( i, anchor ) {
			var selector, panel, panelId,
				anchorId = $( anchor ).uniqueId().attr( "id" ),
				tab = $( anchor ).closest( "li" ),
				originalAriaControls = tab.attr( "aria-controls" );

			// Inline tab
			if ( that._isLocal( anchor ) ) {
				selector = anchor.hash;
				panelId = selector.substring( 1 );
				panel = that.element.find( that._sanitizeSelector( selector ) );

			// remote tab
			} else {

				// If the tab doesn't already have aria-controls,
				// generate an id by using a throw-away element
				panelId = tab.attr( "aria-controls" ) || $( {} ).uniqueId()[ 0 ].id;
				selector = "#" + panelId;
				panel = that.element.find( selector );
				if ( !panel.length ) {
					panel = that._createPanel( panelId );
					panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
				}
				panel.attr( "aria-live", "polite" );
			}

			if ( panel.length ) {
				that.panels = that.panels.add( panel );
			}
			if ( originalAriaControls ) {
				tab.data( "ui-tabs-aria-controls", originalAriaControls );
			}
			tab.attr( {
				"aria-controls": panelId,
				"aria-labelledby": anchorId
			} );
			panel.attr( "aria-labelledby", anchorId );
		} );

		this.panels.attr( "role", "tabpanel" );
		this._addClass( this.panels, "ui-tabs-panel", "ui-widget-content" );

		// Avoid memory leaks (#10056)
		if ( prevTabs ) {
			this._off( prevTabs.not( this.tabs ) );
			this._off( prevAnchors.not( this.anchors ) );
			this._off( prevPanels.not( this.panels ) );
		}
	},

	// Allow overriding how to find the list for rare usage scenarios (#7715)
	_getList: function() {
		return this.tablist || this.element.find( "ol, ul" ).eq( 0 );
	},

	_createPanel: function( id ) {
		return $( "<div>" )
			.attr( "id", id )
			.data( "ui-tabs-destroy", true );
	},

	_setOptionDisabled: function( disabled ) {
		var currentItem, li, i;

		if ( $.isArray( disabled ) ) {
			if ( !disabled.length ) {
				disabled = false;
			} else if ( disabled.length === this.anchors.length ) {
				disabled = true;
			}
		}

		// Disable tabs
		for ( i = 0; ( li = this.tabs[ i ] ); i++ ) {
			currentItem = $( li );
			if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
				currentItem.attr( "aria-disabled", "true" );
				this._addClass( currentItem, null, "ui-state-disabled" );
			} else {
				currentItem.removeAttr( "aria-disabled" );
				this._removeClass( currentItem, null, "ui-state-disabled" );
			}
		}

		this.options.disabled = disabled;

		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null,
			disabled === true );
	},

	_setupEvents: function( event ) {
		var events = {};
		if ( event ) {
			$.each( event.split( " " ), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			} );
		}

		this._off( this.anchors.add( this.tabs ).add( this.panels ) );

		// Always prevent the default action, even when disabled
		this._on( true, this.anchors, {
			click: function( event ) {
				event.preventDefault();
			}
		} );
		this._on( this.anchors, events );
		this._on( this.tabs, { keydown: "_tabKeydown" } );
		this._on( this.panels, { keydown: "_panelKeydown" } );

		this._focusable( this.tabs );
		this._hoverable( this.tabs );
	},

	_setupHeightStyle: function( heightStyle ) {
		var maxHeight,
			parent = this.element.parent();

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			maxHeight -= this.element.outerHeight() - this.element.height();

			this.element.siblings( ":visible" ).each( function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			} );

			this.element.children().not( this.panels ).each( function() {
				maxHeight -= $( this ).outerHeight( true );
			} );

			this.panels.each( function() {
				$( this ).height( Math.max( 0, maxHeight -
					$( this ).innerHeight() + $( this ).height() ) );
			} )
				.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.panels.each( function() {
				maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
			} ).height( maxHeight );
		}
	},

	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			anchor = $( event.currentTarget ),
			tab = anchor.closest( "li" ),
			clickedIsActive = tab[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : this._getPanelForTab( tab ),
			toHide = !active.length ? $() : this._getPanelForTab( active ),
			eventData = {
				oldTab: active,
				oldPanel: toHide,
				newTab: collapsing ? $() : tab,
				newPanel: toShow
			};

		event.preventDefault();

		if ( tab.hasClass( "ui-state-disabled" ) ||

				// tab is already loading
				tab.hasClass( "ui-tabs-loading" ) ||

				// can't switch durning an animation
				this.running ||

				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||

				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.tabs.index( tab );

		this.active = clickedIsActive ? $() : tab;
		if ( this.xhr ) {
			this.xhr.abort();
		}

		if ( !toHide.length && !toShow.length ) {
			$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
		}

		if ( toShow.length ) {
			this.load( this.tabs.index( tab ), event );
		}
		this._toggle( event, eventData );
	},

	// Handles show/hide for selecting tabs
	_toggle: function( event, eventData ) {
		var that = this,
			toShow = eventData.newPanel,
			toHide = eventData.oldPanel;

		this.running = true;

		function complete() {
			that.running = false;
			that._trigger( "activate", event, eventData );
		}

		function show() {
			that._addClass( eventData.newTab.closest( "li" ), "ui-tabs-active", "ui-state-active" );

			if ( toShow.length && that.options.show ) {
				that._show( toShow, that.options.show, complete );
			} else {
				toShow.show();
				complete();
			}
		}

		// Start out by hiding, then showing, then completing
		if ( toHide.length && this.options.hide ) {
			this._hide( toHide, this.options.hide, function() {
				that._removeClass( eventData.oldTab.closest( "li" ),
					"ui-tabs-active", "ui-state-active" );
				show();
			} );
		} else {
			this._removeClass( eventData.oldTab.closest( "li" ),
				"ui-tabs-active", "ui-state-active" );
			toHide.hide();
			show();
		}

		toHide.attr( "aria-hidden", "true" );
		eventData.oldTab.attr( {
			"aria-selected": "false",
			"aria-expanded": "false"
		} );

		// If we're switching tabs, remove the old tab from the tab order.
		// If we're opening from collapsed state, remove the previous tab from the tab order.
		// If we're collapsing, then keep the collapsing tab in the tab order.
		if ( toShow.length && toHide.length ) {
			eventData.oldTab.attr( "tabIndex", -1 );
		} else if ( toShow.length ) {
			this.tabs.filter( function() {
				return $( this ).attr( "tabIndex" ) === 0;
			} )
				.attr( "tabIndex", -1 );
		}

		toShow.attr( "aria-hidden", "false" );
		eventData.newTab.attr( {
			"aria-selected": "true",
			"aria-expanded": "true",
			tabIndex: 0
		} );
	},

	_activate: function( index ) {
		var anchor,
			active = this._findActive( index );

		// Trying to activate the already active panel
		if ( active[ 0 ] === this.active[ 0 ] ) {
			return;
		}

		// Trying to collapse, simulate a click on the current active header
		if ( !active.length ) {
			active = this.active;
		}

		anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
		this._eventHandler( {
			target: anchor,
			currentTarget: anchor,
			preventDefault: $.noop
		} );
	},

	_findActive: function( index ) {
		return index === false ? $() : this.tabs.eq( index );
	},

	_getIndex: function( index ) {

		// meta-function to give users option to provide a href string instead of a numerical index.
		if ( typeof index === "string" ) {
			index = this.anchors.index( this.anchors.filter( "[href$='" +
				$.ui.escapeSelector( index ) + "']" ) );
		}

		return index;
	},

	_destroy: function() {
		if ( this.xhr ) {
			this.xhr.abort();
		}

		this.tablist
			.removeAttr( "role" )
			.off( this.eventNamespace );

		this.anchors
			.removeAttr( "role tabIndex" )
			.removeUniqueId();

		this.tabs.add( this.panels ).each( function() {
			if ( $.data( this, "ui-tabs-destroy" ) ) {
				$( this ).remove();
			} else {
				$( this ).removeAttr( "role tabIndex " +
					"aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded" );
			}
		} );

		this.tabs.each( function() {
			var li = $( this ),
				prev = li.data( "ui-tabs-aria-controls" );
			if ( prev ) {
				li
					.attr( "aria-controls", prev )
					.removeData( "ui-tabs-aria-controls" );
			} else {
				li.removeAttr( "aria-controls" );
			}
		} );

		this.panels.show();

		if ( this.options.heightStyle !== "content" ) {
			this.panels.css( "height", "" );
		}
	},

	enable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === false ) {
			return;
		}

		if ( index === undefined ) {
			disabled = false;
		} else {
			index = this._getIndex( index );
			if ( $.isArray( disabled ) ) {
				disabled = $.map( disabled, function( num ) {
					return num !== index ? num : null;
				} );
			} else {
				disabled = $.map( this.tabs, function( li, num ) {
					return num !== index ? num : null;
				} );
			}
		}
		this._setOptionDisabled( disabled );
	},

	disable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === true ) {
			return;
		}

		if ( index === undefined ) {
			disabled = true;
		} else {
			index = this._getIndex( index );
			if ( $.inArray( index, disabled ) !== -1 ) {
				return;
			}
			if ( $.isArray( disabled ) ) {
				disabled = $.merge( [ index ], disabled ).sort();
			} else {
				disabled = [ index ];
			}
		}
		this._setOptionDisabled( disabled );
	},

	load: function( index, event ) {
		index = this._getIndex( index );
		var that = this,
			tab = this.tabs.eq( index ),
			anchor = tab.find( ".ui-tabs-anchor" ),
			panel = this._getPanelForTab( tab ),
			eventData = {
				tab: tab,
				panel: panel
			},
			complete = function( jqXHR, status ) {
				if ( status === "abort" ) {
					that.panels.stop( false, true );
				}

				that._removeClass( tab, "ui-tabs-loading" );
				panel.removeAttr( "aria-busy" );

				if ( jqXHR === that.xhr ) {
					delete that.xhr;
				}
			};

		// Not remote
		if ( this._isLocal( anchor[ 0 ] ) ) {
			return;
		}

		this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

		// Support: jQuery <1.8
		// jQuery <1.8 returns false if the request is canceled in beforeSend,
		// but as of 1.8, $.ajax() always returns a jqXHR object.
		if ( this.xhr && this.xhr.statusText !== "canceled" ) {
			this._addClass( tab, "ui-tabs-loading" );
			panel.attr( "aria-busy", "true" );

			this.xhr
				.done( function( response, status, jqXHR ) {

					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout( function() {
						panel.html( response );
						that._trigger( "load", event, eventData );

						complete( jqXHR, status );
					}, 1 );
				} )
				.fail( function( jqXHR, status ) {

					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout( function() {
						complete( jqXHR, status );
					}, 1 );
				} );
		}
	},

	_ajaxSettings: function( anchor, event, eventData ) {
		var that = this;
		return {

			// Support: IE <11 only
			// Strip any hash that exists to prevent errors with the Ajax request
			url: anchor.attr( "href" ).replace( /#.*$/, "" ),
			beforeSend: function( jqXHR, settings ) {
				return that._trigger( "beforeLoad", event,
					$.extend( { jqXHR: jqXHR, ajaxSettings: settings }, eventData ) );
			}
		};
	},

	_getPanelForTab: function( tab ) {
		var id = $( tab ).attr( "aria-controls" );
		return this.element.find( this._sanitizeSelector( "#" + id ) );
	}
} );

// DEPRECATED
// TODO: Switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for ui-tab class (now ui-tabs-tab)
	$.widget( "ui.tabs", $.ui.tabs, {
		_processTabs: function() {
			this._superApply( arguments );
			this._addClass( this.tabs, "ui-tab" );
		}
	} );
}

var widgetsTabs = $.ui.tabs;


/*!
 * jQuery UI Tooltip 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Tooltip
//>>group: Widgets
//>>description: Shows additional information for any element on hover or focus.
//>>docs: http://api.jqueryui.com/tooltip/
//>>demos: http://jqueryui.com/tooltip/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/tooltip.css
//>>css.theme: ../../themes/base/theme.css



$.widget( "ui.tooltip", {
	version: "1.12.1",
	options: {
		classes: {
			"ui-tooltip": "ui-corner-all ui-widget-shadow"
		},
		content: function() {

			// support: IE<9, Opera in jQuery <1.7
			// .text() can't accept undefined, so coerce to a string
			var title = $( this ).attr( "title" ) || "";

			// Escape title, since we're going from an attribute to raw HTML
			return $( "<a>" ).text( title ).html();
		},
		hide: true,

		// Disabled elements have inconsistent behavior across browsers (#8661)
		items: "[title]:not([disabled])",
		position: {
			my: "left top+15",
			at: "left bottom",
			collision: "flipfit flip"
		},
		show: true,
		track: false,

		// Callbacks
		close: null,
		open: null
	},

	_addDescribedBy: function( elem, id ) {
		var describedby = ( elem.attr( "aria-describedby" ) || "" ).split( /\s+/ );
		describedby.push( id );
		elem
			.data( "ui-tooltip-id", id )
			.attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
	},

	_removeDescribedBy: function( elem ) {
		var id = elem.data( "ui-tooltip-id" ),
			describedby = ( elem.attr( "aria-describedby" ) || "" ).split( /\s+/ ),
			index = $.inArray( id, describedby );

		if ( index !== -1 ) {
			describedby.splice( index, 1 );
		}

		elem.removeData( "ui-tooltip-id" );
		describedby = $.trim( describedby.join( " " ) );
		if ( describedby ) {
			elem.attr( "aria-describedby", describedby );
		} else {
			elem.removeAttr( "aria-describedby" );
		}
	},

	_create: function() {
		this._on( {
			mouseover: "open",
			focusin: "open"
		} );

		// IDs of generated tooltips, needed for destroy
		this.tooltips = {};

		// IDs of parent tooltips where we removed the title attribute
		this.parents = {};

		// Append the aria-live region so tooltips announce correctly
		this.liveRegion = $( "<div>" )
			.attr( {
				role: "log",
				"aria-live": "assertive",
				"aria-relevant": "additions"
			} )
			.appendTo( this.document[ 0 ].body );
		this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

		this.disabledTitles = $( [] );
	},

	_setOption: function( key, value ) {
		var that = this;

		this._super( key, value );

		if ( key === "content" ) {
			$.each( this.tooltips, function( id, tooltipData ) {
				that._updateContent( tooltipData.element );
			} );
		}
	},

	_setOptionDisabled: function( value ) {
		this[ value ? "_disable" : "_enable" ]();
	},

	_disable: function() {
		var that = this;

		// Close open tooltips
		$.each( this.tooltips, function( id, tooltipData ) {
			var event = $.Event( "blur" );
			event.target = event.currentTarget = tooltipData.element[ 0 ];
			that.close( event, true );
		} );

		// Remove title attributes to prevent native tooltips
		this.disabledTitles = this.disabledTitles.add(
			this.element.find( this.options.items ).addBack()
				.filter( function() {
					var element = $( this );
					if ( element.is( "[title]" ) ) {
						return element
							.data( "ui-tooltip-title", element.attr( "title" ) )
							.removeAttr( "title" );
					}
				} )
		);
	},

	_enable: function() {

		// restore title attributes
		this.disabledTitles.each( function() {
			var element = $( this );
			if ( element.data( "ui-tooltip-title" ) ) {
				element.attr( "title", element.data( "ui-tooltip-title" ) );
			}
		} );
		this.disabledTitles = $( [] );
	},

	open: function( event ) {
		var that = this,
			target = $( event ? event.target : this.element )

				// we need closest here due to mouseover bubbling,
				// but always pointing at the same event target
				.closest( this.options.items );

		// No element to show a tooltip for or the tooltip is already open
		if ( !target.length || target.data( "ui-tooltip-id" ) ) {
			return;
		}

		if ( target.attr( "title" ) ) {
			target.data( "ui-tooltip-title", target.attr( "title" ) );
		}

		target.data( "ui-tooltip-open", true );

		// Kill parent tooltips, custom or native, for hover
		if ( event && event.type === "mouseover" ) {
			target.parents().each( function() {
				var parent = $( this ),
					blurEvent;
				if ( parent.data( "ui-tooltip-open" ) ) {
					blurEvent = $.Event( "blur" );
					blurEvent.target = blurEvent.currentTarget = this;
					that.close( blurEvent, true );
				}
				if ( parent.attr( "title" ) ) {
					parent.uniqueId();
					that.parents[ this.id ] = {
						element: this,
						title: parent.attr( "title" )
					};
					parent.attr( "title", "" );
				}
			} );
		}

		this._registerCloseHandlers( event, target );
		this._updateContent( target, event );
	},

	_updateContent: function( target, event ) {
		var content,
			contentOption = this.options.content,
			that = this,
			eventType = event ? event.type : null;

		if ( typeof contentOption === "string" || contentOption.nodeType ||
				contentOption.jquery ) {
			return this._open( event, target, contentOption );
		}

		content = contentOption.call( target[ 0 ], function( response ) {

			// IE may instantly serve a cached response for ajax requests
			// delay this call to _open so the other call to _open runs first
			that._delay( function() {

				// Ignore async response if tooltip was closed already
				if ( !target.data( "ui-tooltip-open" ) ) {
					return;
				}

				// JQuery creates a special event for focusin when it doesn't
				// exist natively. To improve performance, the native event
				// object is reused and the type is changed. Therefore, we can't
				// rely on the type being correct after the event finished
				// bubbling, so we set it back to the previous value. (#8740)
				if ( event ) {
					event.type = eventType;
				}
				this._open( event, target, response );
			} );
		} );
		if ( content ) {
			this._open( event, target, content );
		}
	},

	_open: function( event, target, content ) {
		var tooltipData, tooltip, delayedShow, a11yContent,
			positionOption = $.extend( {}, this.options.position );

		if ( !content ) {
			return;
		}

		// Content can be updated multiple times. If the tooltip already
		// exists, then just update the content and bail.
		tooltipData = this._find( target );
		if ( tooltipData ) {
			tooltipData.tooltip.find( ".ui-tooltip-content" ).html( content );
			return;
		}

		// If we have a title, clear it to prevent the native tooltip
		// we have to check first to avoid defining a title if none exists
		// (we don't want to cause an element to start matching [title])
		//
		// We use removeAttr only for key events, to allow IE to export the correct
		// accessible attributes. For mouse events, set to empty string to avoid
		// native tooltip showing up (happens only when removing inside mouseover).
		if ( target.is( "[title]" ) ) {
			if ( event && event.type === "mouseover" ) {
				target.attr( "title", "" );
			} else {
				target.removeAttr( "title" );
			}
		}

		tooltipData = this._tooltip( target );
		tooltip = tooltipData.tooltip;
		this._addDescribedBy( target, tooltip.attr( "id" ) );
		tooltip.find( ".ui-tooltip-content" ).html( content );

		// Support: Voiceover on OS X, JAWS on IE <= 9
		// JAWS announces deletions even when aria-relevant="additions"
		// Voiceover will sometimes re-read the entire log region's contents from the beginning
		this.liveRegion.children().hide();
		a11yContent = $( "<div>" ).html( tooltip.find( ".ui-tooltip-content" ).html() );
		a11yContent.removeAttr( "name" ).find( "[name]" ).removeAttr( "name" );
		a11yContent.removeAttr( "id" ).find( "[id]" ).removeAttr( "id" );
		a11yContent.appendTo( this.liveRegion );

		function position( event ) {
			positionOption.of = event;
			if ( tooltip.is( ":hidden" ) ) {
				return;
			}
			tooltip.position( positionOption );
		}
		if ( this.options.track && event && /^mouse/.test( event.type ) ) {
			this._on( this.document, {
				mousemove: position
			} );

			// trigger once to override element-relative positioning
			position( event );
		} else {
			tooltip.position( $.extend( {
				of: target
			}, this.options.position ) );
		}

		tooltip.hide();

		this._show( tooltip, this.options.show );

		// Handle tracking tooltips that are shown with a delay (#8644). As soon
		// as the tooltip is visible, position the tooltip using the most recent
		// event.
		// Adds the check to add the timers only when both delay and track options are set (#14682)
		if ( this.options.track && this.options.show && this.options.show.delay ) {
			delayedShow = this.delayedShow = setInterval( function() {
				if ( tooltip.is( ":visible" ) ) {
					position( positionOption.of );
					clearInterval( delayedShow );
				}
			}, $.fx.interval );
		}

		this._trigger( "open", event, { tooltip: tooltip } );
	},

	_registerCloseHandlers: function( event, target ) {
		var events = {
			keyup: function( event ) {
				if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
					var fakeEvent = $.Event( event );
					fakeEvent.currentTarget = target[ 0 ];
					this.close( fakeEvent, true );
				}
			}
		};

		// Only bind remove handler for delegated targets. Non-delegated
		// tooltips will handle this in destroy.
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			events.remove = function() {
				this._removeTooltip( this._find( target ).tooltip );
			};
		}

		if ( !event || event.type === "mouseover" ) {
			events.mouseleave = "close";
		}
		if ( !event || event.type === "focusin" ) {
			events.focusout = "close";
		}
		this._on( true, target, events );
	},

	close: function( event ) {
		var tooltip,
			that = this,
			target = $( event ? event.currentTarget : this.element ),
			tooltipData = this._find( target );

		// The tooltip may already be closed
		if ( !tooltipData ) {

			// We set ui-tooltip-open immediately upon open (in open()), but only set the
			// additional data once there's actually content to show (in _open()). So even if the
			// tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in
			// the period between open() and _open().
			target.removeData( "ui-tooltip-open" );
			return;
		}

		tooltip = tooltipData.tooltip;

		// Disabling closes the tooltip, so we need to track when we're closing
		// to avoid an infinite loop in case the tooltip becomes disabled on close
		if ( tooltipData.closing ) {
			return;
		}

		// Clear the interval for delayed tracking tooltips
		clearInterval( this.delayedShow );

		// Only set title if we had one before (see comment in _open())
		// If the title attribute has changed since open(), don't restore
		if ( target.data( "ui-tooltip-title" ) && !target.attr( "title" ) ) {
			target.attr( "title", target.data( "ui-tooltip-title" ) );
		}

		this._removeDescribedBy( target );

		tooltipData.hiding = true;
		tooltip.stop( true );
		this._hide( tooltip, this.options.hide, function() {
			that._removeTooltip( $( this ) );
		} );

		target.removeData( "ui-tooltip-open" );
		this._off( target, "mouseleave focusout keyup" );

		// Remove 'remove' binding only on delegated targets
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			this._off( target, "remove" );
		}
		this._off( this.document, "mousemove" );

		if ( event && event.type === "mouseleave" ) {
			$.each( this.parents, function( id, parent ) {
				$( parent.element ).attr( "title", parent.title );
				delete that.parents[ id ];
			} );
		}

		tooltipData.closing = true;
		this._trigger( "close", event, { tooltip: tooltip } );
		if ( !tooltipData.hiding ) {
			tooltipData.closing = false;
		}
	},

	_tooltip: function( element ) {
		var tooltip = $( "<div>" ).attr( "role", "tooltip" ),
			content = $( "<div>" ).appendTo( tooltip ),
			id = tooltip.uniqueId().attr( "id" );

		this._addClass( content, "ui-tooltip-content" );
		this._addClass( tooltip, "ui-tooltip", "ui-widget ui-widget-content" );

		tooltip.appendTo( this._appendTo( element ) );

		return this.tooltips[ id ] = {
			element: element,
			tooltip: tooltip
		};
	},

	_find: function( target ) {
		var id = target.data( "ui-tooltip-id" );
		return id ? this.tooltips[ id ] : null;
	},

	_removeTooltip: function( tooltip ) {
		tooltip.remove();
		delete this.tooltips[ tooltip.attr( "id" ) ];
	},

	_appendTo: function( target ) {
		var element = target.closest( ".ui-front, dialog" );

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_destroy: function() {
		var that = this;

		// Close open tooltips
		$.each( this.tooltips, function( id, tooltipData ) {

			// Delegate to close method to handle common cleanup
			var event = $.Event( "blur" ),
				element = tooltipData.element;
			event.target = event.currentTarget = element[ 0 ];
			that.close( event, true );

			// Remove immediately; destroying an open tooltip doesn't use the
			// hide animation
			$( "#" + id ).remove();

			// Restore the title
			if ( element.data( "ui-tooltip-title" ) ) {

				// If the title attribute has changed since open(), don't restore
				if ( !element.attr( "title" ) ) {
					element.attr( "title", element.data( "ui-tooltip-title" ) );
				}
				element.removeData( "ui-tooltip-title" );
			}
		} );
		this.liveRegion.remove();
	}
} );

// DEPRECATED
// TODO: Switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for tooltipClass option
	$.widget( "ui.tooltip", $.ui.tooltip, {
		options: {
			tooltipClass: null
		},
		_tooltip: function() {
			var tooltipData = this._superApply( arguments );
			if ( this.options.tooltipClass ) {
				tooltipData.tooltip.addClass( this.options.tooltipClass );
			}
			return tooltipData;
		}
	} );
}

var widgetsTooltip = $.ui.tooltip;




}));
/*!
 * jQuery UI Touch Punch 0.2.3
 *
 * Copyright 2011–2014, Dave Furfero
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Depends:
 *  jquery.ui.widget.js
 *  jquery.ui.mouse.js
 */
!function(a){function f(a,b){if(!(a.originalEvent.touches.length>1)){a.preventDefault();var c=a.originalEvent.changedTouches[0],d=document.createEvent("MouseEvents");d.initMouseEvent(b,!0,!0,window,1,c.screenX,c.screenY,c.clientX,c.clientY,!1,!1,!1,!1,0,null),a.target.dispatchEvent(d)}}if(a.support.touch="ontouchend"in document,a.support.touch){var e,b=a.ui.mouse.prototype,c=b._mouseInit,d=b._mouseDestroy;b._touchStart=function(a){var b=this;!e&&b._mouseCapture(a.originalEvent.changedTouches[0])&&(e=!0,b._touchMoved=!1,f(a,"mouseover"),f(a,"mousemove"),f(a,"mousedown"))},b._touchMove=function(a){e&&(this._touchMoved=!0,f(a,"mousemove"))},b._touchEnd=function(a){e&&(f(a,"mouseup"),f(a,"mouseout"),this._touchMoved||f(a,"click"),e=!1)},b._mouseInit=function(){var b=this;b.element.bind({touchstart:a.proxy(b,"_touchStart"),touchmove:a.proxy(b,"_touchMove"),touchend:a.proxy(b,"_touchEnd")}),c.call(b)},b._mouseDestroy=function(){var b=this;b.element.unbind({touchstart:a.proxy(b,"_touchStart"),touchmove:a.proxy(b,"_touchMove"),touchend:a.proxy(b,"_touchEnd")}),d.call(b)}}}(jQuery);
// Copyright David W Craig 2021
/*! itgz compression */
var itgz=function(){function o(o,r){if(!t[o]){t[o]={};for(var n=0;n<o.length;n++)t[o][o.charAt(n)]=n}return t[o][r]}var r=String.fromCharCode,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",t={},i={compressToBase64:function(o){if(null==o)return"";var r=i._compress(o,6,function(o){return n.charAt(o)});switch(r.length%4){default:case 0:return r;case 1:return r+"===";case 2:return r+"==";case 3:return r+"="}},decompressFromBase64:function(r){return null==r?"":""==r?null:i._decompress(r.length,32,function(e){return o(n,r.charAt(e))})},compressToUTF16:function(o){return null==o?"":i._compress(o,15,function(o){return r(o+32)})+" "},decompressFromUTF16:function(o){return null==o?"":""==o?null:i._decompress(o.length,16384,function(r){return o.charCodeAt(r)-32})},compressToUint8Array:function(o){for(var r=i.compress(o),n=new Uint8Array(2*r.length),e=0,t=r.length;t>e;e++){var s=r.charCodeAt(e);n[2*e]=s>>>8,n[2*e+1]=s%256}return n},decompressFromUint8Array:function(o){if(null===o||void 0===o)return i.decompress(o);for(var n=new Array(o.length/2),e=0,t=n.length;t>e;e++)n[e]=256*o[2*e]+o[2*e+1];var s=[];return n.forEach(function(o){s.push(r(o))}),i.decompress(s.join(""))},compressToEncodedURIComponent:function(o){return null==o?"":i._compress(o,6,function(o){return e.charAt(o)})},decompressFromEncodedURIComponent:function(r){return null==r?"":""==r?null:(r=r.replace(/ /g,"+"),i._decompress(r.length,32,function(n){return o(e,r.charAt(n))}))},compress:function(o){return i._compress(o,16,function(o){return r(o)})},_compress:function(o,r,n){if(null==o)return"";var e,t,i,s={},p={},u="",c="",a="",l=2,f=3,h=2,d=[],m=0,v=0;for(i=0;i<o.length;i+=1)if(u=o.charAt(i),Object.prototype.hasOwnProperty.call(s,u)||(s[u]=f++,p[u]=!0),c=a+u,Object.prototype.hasOwnProperty.call(s,c))a=c;else{if(Object.prototype.hasOwnProperty.call(p,a)){if(a.charCodeAt(0)<256){for(e=0;h>e;e++)m<<=1,v==r-1?(v=0,d.push(n(m)),m=0):v++;for(t=a.charCodeAt(0),e=0;8>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}else{for(t=1,e=0;h>e;e++)m=m<<1|t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t=0;for(t=a.charCodeAt(0),e=0;16>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}l--,0==l&&(l=Math.pow(2,h),h++),delete p[a]}else for(t=s[a],e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;l--,0==l&&(l=Math.pow(2,h),h++),s[c]=f++,a=String(u)}if(""!==a){if(Object.prototype.hasOwnProperty.call(p,a)){if(a.charCodeAt(0)<256){for(e=0;h>e;e++)m<<=1,v==r-1?(v=0,d.push(n(m)),m=0):v++;for(t=a.charCodeAt(0),e=0;8>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}else{for(t=1,e=0;h>e;e++)m=m<<1|t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t=0;for(t=a.charCodeAt(0),e=0;16>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1}l--,0==l&&(l=Math.pow(2,h),h++),delete p[a]}else for(t=s[a],e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;l--,0==l&&(l=Math.pow(2,h),h++)}for(t=2,e=0;h>e;e++)m=m<<1|1&t,v==r-1?(v=0,d.push(n(m)),m=0):v++,t>>=1;for(;;){if(m<<=1,v==r-1){d.push(n(m));break}v++}return d.join("")},decompress:function(o){return null==o?"":""==o?null:i._decompress(o.length,32768,function(r){return o.charCodeAt(r)})},_decompress:function(o,n,e){var t,i,s,p,u,c,a,l,f=[],h=4,d=4,m=3,v="",w=[],A={val:e(0),position:n,index:1};for(i=0;3>i;i+=1)f[i]=i;for(p=0,c=Math.pow(2,2),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;switch(t=p){case 0:for(p=0,c=Math.pow(2,8),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;l=r(p);break;case 1:for(p=0,c=Math.pow(2,16),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;l=r(p);break;case 2:return""}for(f[3]=l,s=l,w.push(l);;){if(A.index>o)return"";for(p=0,c=Math.pow(2,m),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;switch(l=p){case 0:for(p=0,c=Math.pow(2,8),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;f[d++]=r(p),l=d-1,h--;break;case 1:for(p=0,c=Math.pow(2,16),a=1;a!=c;)u=A.val&A.position,A.position>>=1,0==A.position&&(A.position=n,A.val=e(A.index++)),p|=(u>0?1:0)*a,a<<=1;f[d++]=r(p),l=d-1,h--;break;case 2:return w.join("")}if(0==h&&(h=Math.pow(2,m),m++),f[l])v=f[l];else{if(l!==d)return null;v=s+s.charAt(0)}w.push(v),f[d++]=s+v.charAt(0),h--,s=v,0==h&&(h=Math.pow(2,m),m++)}}};return i}();"function"==typeof define&&define.amd?define(function(){return itgz}):"undefined"!=typeof module&&null!=module&&(module.exports=itgz);
var itg_decomp=function(text){return itgz.decompressFromEncodedURIComponent(text)}  


var add_css=true;
var crosscorrelate_spec = JSON.parse(itg_decomp(""));
var crosscorrelate_html=itg_decomp("DwEwlgbgBAxgNgQwM5ILwCIY3QPgFCiSyIqoDkWA+gOYBOCADgBZlRggZV2NMC0WAOwC2uPFHFRC0eMjSYYlBggEBTOOjYd5i5Wv4xhGpABcAnnBUYA7u2NMAXELAD+AewHGVHgNxCEtamdeCwAzY3teAGYARgYAD1wJJKgxZPEpYllOBWMEACMNdmzKXLz9Qyh8NLTgPIBXY2N3TNJtUrhnAGskKAQYY0gVQq0QFRCEOrhjAHkGL3KRKHd4MBhO7NmvAGEwMwAKFQgvYwAaKDIAOXcVBbITsluASiMzC2tbBwAmABZ4qABCMBCBiuWi5DyiapQyRA6hQEzmSzoVxKGC7Uz2aIaGwgOwYT4ABkh0PSAHp6o13DgUiT0hSmgIWnIqO0ukhhhgAIJxMBIEr5DoCboLDRLAQrNYbOYCHb7Q7HM5kbm8273J7E2kSYCw+G0GAYEAIXL2IEIagqUkMATUbx5ZAqABs3xOYAAagAhaYAJSsBIA0gBxaiuTmhzkXADKAFUmABRKPUMOxsOc92cracgCaYa2AEcEAANAASKhTnILka9BIAkpzaEhvjAHQBFMPVr1wADqsbgQgAKlGCZy-Ymw4n3c3YxHQwBZFNpznJ0OxhChqPzlMR6ixvJrjdhhOxkOcudhhe1znVkAMUOts8pzujsvpu9h18AKTLC+midbABEy1bBctkTRMlzfJMQM5KxF0ApNn1dAMhAAK3fV9OTgKwIwAMTgAAvMNOzQ0NsLAKN3QjV1q06AAOFNXTgBhXWwpgCW7aIZ2mIQLggPIIwAViYAAtAMAE4wCEgTvjyAtn05P84m+aYBCYYwYADaI4BAANY3NDSkDyAQZwdFQ-wJMBM07L0IEzIQowdQzjLyTtXQJTMIxosBqyLagTI0qxtKQUTqzgJgLijLZ3T-PJInfOBqz-KM6guLZvisatkO+P1qwzagAAUi3fTohOQhgIy9WNMz06IDKMh0YCEL0hDyiN31cEAix9aYwBoiAQEifqABlxTwwahFE0whNMGi4mmPtOn4waCNMJbqxWgsiqEsBojwlRO34tyC2oYxHOQjKspyzlqEu-LCuK0rYyEitkIazDtLgXiwHdSaA0zB1LPfPqC2bYKvOy3Kbsh3KVH0xyHXeoQSvMhBOoJGA-1cCBBs+fjRqEbDOjyT44rGni+NEgkEE7IShCW2M6hnLZPLy4Nroh9nORohGSoYPLXrgQyvSYd7eMyuI8q2CmqZp6ZOgmqnXTqbTsMpztRLqFnXDZq7LpowbYvuhhHue16AoDD68ky8GroliaRL+qNOi9ANNb1yJfJh6IrGc1zMz7LK+xnasBE7O8thnaJ3wq7Co1LItjE7aImiLGPMzy5C6jwuBPgjPs8M7SI+wYd8kE+cKCT-TtOjqP8A2QgtY2w9xM1zBgkO+WMZxCd1BqjVxPD-OBm1dUTYxrEBm2MP0vNE3NXSjOJBrRbDBoLBAvAJL1PisGAGD9XME2MWiPSjV0VzgM+AHYtldBhogAahoy-79JckkHvglOj7PJXDwpBL4DHkagDUhJ5QLDOOor8QAhAgBAPKeUhCZk6LNP8QljCfDqBGZCEYJb2UiK3P0HcQidWiBcWMyE8J+ndAwVsEBTCuFEhcP80ZcyuGMt8MA-EnpIFjH2OotYBoeiLLQS+olzRehCDRUwM4mDVmrJ8e+AZXQRhCH6L01Y3QQBgDwvC74iychCBcToVh+JWE+JmZsVhoi0GbNEfiyE8p9i3DOAkeFXDYW+BAbCcQZx9ljEwTkpYCyuHdJEFQKgtiGJnEWPCAgBDMAJEWJgTBojdhhlYd8mdOQgCEkoVwDpORRlzBGC4MA6gFkGvfUSAYCRRnfE3PKzYQCX0voNQhMU6iXzqN8SYf5TBbDgNhSibTL5gAdCFT42FaDvnvnEC4uYhBxBgJEMAcRMwQEvuRcWDAhLvkkXhGAeVXR-TqM2VwcBYy-D-KoPspJqDRCYH6BgM0rChWbEJFQNEECuCLJM6gzZMxRmrHld0VZgkXDyA6CAcBR6dijF6fiQKoyT1JDATkdzPQqDwvfEIeEHSiT-NMGi0x76fCQA6aIBZknRBCiAJA9SwB+guJ2C4dQmDfALHlFQDBvjYRUEIP8tBoi5miDAM0nxORFjiH2KwyCCQdRUMYISXoaLugCZyaIEYBAnnvlOGA75Oy0HdBcAc0RIicmMKJBgkRSQgFcJs1VMpDh4SsINGikQsHMBAEIVwrqkAjgjNPd8BJsKRCsEgIs7osKZi2HkDSxgdmujygSHxdR3RIBop8GAMa8rGObLQGGrpvgqEGmAIZSAmBCCQHEJAXo-zITyEIT4VrTCiUvvTQaEA8xp07JyCMsYhDNk6PfIQlzqAEnfINVw0xRK8QJKJKwRYrB+lcLJBAQkhKX1MSAZCFjqwID9DAfWPraDfFdKYXMpghDihnH+GinYIxbD9JnTMxNqDYS2FNUSkqaIBn4ggIQdRaC5jPe6asl8zKREzO6MArgkCRL-LK8Z74IwUTiCAOoAhWzUBnDRJgf4Zwcq2EISIDc-zRE5Ai74AZOltS2FOBAsbXB9jAMhYwl9OjUE8QY5CIRmzVj9KSTkAgNYMArV6TsxgHS307Eg3MsZBqTn4tkwa1BBrfFnVKiJBIIBMGQn+XM5YAx9kzPGJACA8LVijHAe+UYQA0QuHhUZWwCR9lrlvCMmYZy0GwtlFQsY55bAEO6R84AIzVg3QRkIolkKREuc0xVuYCzSQYPfVq7pgEIDiO+sAElMxFnuhcQaphaACBCK6ZCfbXSqszLkJg1pqBxHjGK5QqWmzfL8bmP8RZcxbFUq6NeNKCTTG+HlDqQlPhHQgDOTo5kAwMDgH+H4eRmx+mg1-e+8yzmfq2FYIxAhvhbBANhAMMAvQqDyvxOAwYPQxpgO6PsWxqwzmYPlL0CBIjIVjHEZsM5Vw+etEgTsYACwFlJJfAFD28rVjEgWe+rgwCRGbO+PCzYMH306FsP8D3vidEiINd8IEaKuAuMB5sTAjqFIjEwPK5XBphRgNWWMsZmxhurO+KqVbOxxGrEgbCeVBpzn4tQd8Qo8olUvjOe+M3YymCxt7Qa8kaJ6MiaChdEZvh4Uu50OA-EqKRAJLwgQnw4ifADCAZnuRXT0Hvn2eOz88KJk+HhaI7o8h6JCGAMlyEhCmFmK6I0QgQhWZUJ8WgKUCdCGoNuUkuYVC+RgJfBAcAowICYN3Gi0RsKZgLAwC4FwSp+ieo29rzYwBt0+HjpgPdRf1wLCEISRiiyRFEu+C4qWB38SE3p4wLNCk0S2A6OoLfpi58WwGLYWDGURgYFFXMPDXSukvjG3ZLZQWX2DJ0aICBRJ5E6NheMkx1bVgdNIzkeRRI0VjO+UBKgkBRjwgGSIDo-yRCjJ2S+nIQbYXO9QCMdQeo4BaI4A6goxRI8JYt74CwQpogtgdoaIYA4grAF13k6g4hOQHQGAvQlYDlIgLg-RF1B1vhqwPI3U8Dd14c4gEAD8ZwfghIXdYxMCHQAwLhSRdFRIh4AxaAIAQhK0IAkAxJDMIwhIT8485x3QixohvghA-Rph+I88QBaAvRMxb5x0hIQBZVQDXRSRGCaI-wCYwBOw1oLVSQaNaBEdIhJhqwGBSQCQYgYMvo6gj1BoQgCxohd8Cw-RXDL4LgvQYBXROwvF3RkIiw-RaBY9TcNIthwjcwaJfk8J3Qj1SRaB5JEwhICUHljA+V3RMxZ8owStcw8IQBg4CxJkxpogIA4g1JOg4c-x15qBpgox75mw6g6gix+IexjAuCrBXAhIrpzRjB0VFd3RXA3VVg-xmp2NmwCQWoMs-RsdkJ75BoXDUVqATNXQnYthRdP8Qhvhvh74zpOhTB3QAwixG5rUwBpgSCZxTAKEkBOgyo-xL4mAwBYwkBWxVE-FwDSR+JOxTAwBEw8pyQaIaI8I8IIxXAS5XB75ogZDT951NkQg4hOhvg8C-wvQZw2ETMuFIhOhmxcUo88hVFMxkShJIFTA4hUsLgQAIBcw4gAxsJmxcwvRzN4Bh5aA-R-Fmwiw4ABD+JJ0ixphyQGBljJNqABACx49Ex75TBOxDkCxIgIAzRRVlFoghIQsowtES4iw6g9C8pphh5adqx+cwBXMRFPgzkikrBmxsIIALhPhUEpgHR59kJkJEwCQsMEBOgowhAthdsCR+IBBXRP1xQL1BpQEoxHsQAox28AiJ9PgQAITq1aBlicoQBhNKJ3QhIaJ+I8gZxAz39L48JBSowoxi5Mxqw8IhIpg-xmx4cmBIgkBfCkB+VBM5gzlsJZ4hI4gHRYwLgQgYAmBMxGy8gIAwlYtpgLguFqBY9Z4Qg+xZSapfVqwOjKSqisEW8+w4g1T8FsI88KwaJqxcw-E-ROhqwPTTA6U6gAwrACxL5fTOg-wQBBoiJwN-iixkIr0rBSROghBjTQ9xRMwkAwk8I-pXBzJXQZxaYmAox3CCxXQzs51XUEBmlLI6jpgQBvgcz58thcT3RfzSsHR01OxJCgx-MED7slJPg+xohldTB744ALhRIHRtw6gtgLghA8gMkQAmwHFYx1I8phJ4oGKCQMcCwd5blfhXAV08h8sYAZxIV74DM-xvhCjcMZw4gCwIwsZ+IQglo7IIArBkIsIYABIac-RTAkAZxIw4hXAjkPkISiwHQBBhyIBvJPgKFMwvYIxSQ71QRPgVBYDcxmw4A8oEBYwC5OgJw-RkJGj6UJoHROgQlQU4hRzc9ogSVrNMx3xOVKNgpqAmBpL29oMfykBpgtgIACNTBqxMx+IWDLMdcthjArA+wp5RJ+JR1MwnpawIAvR3w-QZx3QfULgBoVBtK+psIcVmwKpPh3QtgGA0UlJOxPhlCEBSQH90VvgixjjRiCwSSiKi0ZwhImBZZBorB8o-RJTRI+wCxexognlqwhAH04BBNH8wBgMgwJUfJmK-RKqIAmSLgvdTtSsyrphaAjD74DI3JYwNkGhcifQ7Iclii-1SQGxBoCsIBqA-08o6hO175I1ph-jaBaAmAh9BppgQlVNEA+46xRIEBBp9S8gwBRJgYUTkx99DRgrqw4g4goxMwwBOhOxXAAxXAYAPE-SAMfFaBXBOwZx3w70K0AMQA4ANVwiHRphcxOhphG1L5phpgGw4hkIkA8IMEvRSQqIIwaVB1+V+IdSu9qBXQkA0VSRcs6gIBvhaD756D74Wo8gSpdlOpOw-QmBqBIbMxia1VohJkBCHRaBRJSQQhPgj4LgiwhBOQGpOhSR6SVYRNUSthL48o70Cxpg8JShSx8b+JvhOQ8oioNJFcfJPhHk9zcxWUCxwBqB7E5hpg-oLgVAvRkIAxmigEAwIAwBLabTqxF00DTBSQIwEBvgBBrkCQp1OTjBmwAxORAj8YqY-d2VXQ4h+IZxqdXRIgiwZxbqMlZIjqaK+zJl+JIh+JPhIhaAFJPgfVogRdHpWJVKszjAZwPUIB0xbjvgow-QtxsJTBjBPIYBPgthXBcxzRvh5amAIB6BTBqAFsEFoDPtCqBAAwtd71SQIGKZFx5yBMCwCRSQhJ9V+I5dvhK9qx3RJ1qAQA-RH7jBoMCxUGCN8w-w+yZ9UoIxcx+CCRdSNc3VohKVoy-EthY9cxulSR3xqwSd+0-R6VW4oxL5CiiwlKGAh8ADqw9oCD5wo4owOjaBOh3xo9qBUAMB4RXgkQUQ+h0RMRsQPgMApCNRoRgByQGgGQqhaRag-HmgZBWgWQBQ2QOR0Am4PA+RWQhQkARRxBlgOhJR5BNgZR0QDgjgPBFQYnjBEnBAhA7gHgimyBngAnNR0gdQkA9QDQjQEATQ-BzRLRrRbR7QnQXQPRvRfRAxgwUxIwYx4wnw-wLxQx+kswUwLsOF0CzxzcHsowlxBoXZZG4hq9XxIpsFsI29Qx3QHQrHQxro7w8pjx0wMCwwQA+wwxZgnwHQ06SJIgtgykLk6IwxC13JqYTVWxDMcwSJKMLwYJ4Iv8wwvQQwJwUxwJ3Q-RKMkBUx0JIXpwtxQxAXlxDnQwmBK9UwyxIXVw5JORPx9xQxOhsXQxDMMxgX7wwwZxDMAIKXdmUwZwnx5J+MiwQhKscwCwwNOxwFdnMwVbQwiIbT3wowwAZUzxOxOwU8SLlCBwrB-pm1jAxoCYiYSYVI1I5ICoPZ-IfY3JUNpJucnC8IeUWp3xhIxIJIi5DWGAlUCwhZitqxzQ-weUZJ3RKY8JzJ2J+M+ytE7JqBIxvhl7KswBNZtYEDGohBpg4B3xYwvQvp9W4grWfpMxgohBWIOoMDitRIBpIgykQA8IIEYpRc6Z+I5pOhptRnpszo1Jw3V4pzBYmAIlognDpFg3WYoZOYGompZYOwYGLhTBCxXWqZj87oeYhzxpogQAzIvI22OZtY2Z3R42rXVYaYTX2pOorBupepHI6hLJrJbIkpX1RJFXIgvQdlEFpsNdXVqr74dgdZZ2Eo4hl2I25Z+2XIlYGTVZ1Z05Yw3ZT2aY-o+xYodl9pDpT2iZ9jb252EorAfWu2nY4Be3+3OXP2NYZ3OZ9ZNpSpypKob3jKjgnXpJOWbWhYWYGAZwcQ+jZw4ULlh5QXEjqYVBvheb97T6t1SNL43LIHB8-Qy8ZtsJGo8yn1HlaBMw8gs61VqA4UGBiWGA6ghBt8HQBcareNBJUIhU2ImBwtzBQGQC4hAwPUhJXBdThWaV+JMx74084Bwt3wyJXRgxowuimAxMkAGAij+J+J74IAg9OlYphB3whA7VOwM1LydpL4fcs6E7Ihpg6gBy5S2CBd753R3RI4ixX45HPhJDvgmA6JOwb5d0GBNbSQd9mCEB3wc4FEAwD0Wc+y+xcx3w+7PgP8CQHJMZpg8psIj0Qgf8ejKZqxz0CRWE7FJ3tIRCQgik1H95L4FFRIZsVBsJHdTAdk8gP7OzaAiZ74wbXRcwCR6KGBsIZwAwvRXRl1zZyEwAZxQ5a4R4H7XD3D-4zB+JowZwVAzoMq8pwoVB8kBB0jSQ27QQoK+NZb3BDERdmwl5Koy93Jp1kJ8k8paBXJ4Z3w24eD51GWeiiiqk+wno+wqk29BlphBotuBvYwtbqBRJRJOhPhLYVACwBA8IqJTAewQovc8gLg4AAxrRAw-x3vKZOhL4-QHRQXsIxO+xyqoK29sJjA7c4hSNMxNc3FDvsIEAaI3MhTMD7JTLoJb0HRhkPpmxR13A7AoxBoYMaJXRGUhJ+JqkGapFo3jLstkJmx70fMGAYxjT69s84BkJFIrtiGLRsICZL5TIhIiwLhORL4oM4haAaJOgQhOxDvlvTAm5ohMxTArA1ljBfd3xC2Q-s+keZwvRcwbz74BAQTYx3Q6gCQ-6aJsqQHRJqsi8-w+xUJnA2krUqYo29c-Q8h-CKcYBYl+J7sHR+ScNPuQAQAmBOhOEPyJZjACQvssKphGuzED7DG-QYwwBTAAIAw-RaumAZxEzqXTA8pOxwSixXQVA5ZORGTNUQA8hRyYS7C8hmqkEKEn9vg-w+Mc3PgZxBoqZBxC+RRbCEJB-KLIQgvlagC1TABPMVI7aaIDr1jAbEF4i4ZOHLBohUp+gc3bCLFQED-wX4IKBSqWTqAHQ+w74KwAG3mgXAMW6BViH2H4h1ciwMAUSP-BLpBRBoFwCLIwCs6tR3OotAkN8EGjVgaIfoM3MhFEiKROgEYHSEWGJSuA8gnkAQM+XhTUA-QwvV1NJhUAIAMkcQEqCEFDAMAiyrrQ2oEisAgoyOcgmAHYk7BCgBAfoAQG5iNjspFO3wApNEAnxph4A74IlLYMDJcElenwJOBcHPTTBPyAgMEK6F2iL0HQg0CMKWgdZDls+nYArkIyLDuBDaVgL0F6CJKu5TcsaaRJ905BKUvKEYEKmgVWS1hcwhVL0H6HuZ5xAqE0QqLyj5rkITqUiatDRDzx+hL4uXQaMhBoi5hS0AJLrjNC34Oh74XWGQlvgdBIBqwhcTmALm9gwQIAnwS+DSUiCQp3wpgd8PsUVwvYAMIQCNIMTqBY1Ow7oe+O+C3JUMh80wdjDGQjApwkot1bSggHviMNZ0s1b0n+DSwHYBArmPwJEBIKXwrAeDAMA6EkKDQ4ApgYggGDiCa1kIiZHMgSDgb3xiaoJbcEWFlrvgXEeQe+ATE7B5QAS3wRYuQJADTB-qmUV5IlWiDvcwAZ1FxDfiMQ49oioaasDABuoKkLgVgLmKm3ySnFcw-EZWsNmHxMBaAojagD6giGRAtIUYftNy0ToFhT8cAPWKYDlh5xcwl8QZHkH7pIBBcnQIVPiljohDEufYfzNhH4gDgDiGVLYNMGIhIBRKxYb3kwCMJRRjA+BLuJ0CYB9gdu96XSvxCQDUAOw7oUBn1EfRbwfMnEWqlgSLCnFTKGiTyF4HIQRVvgXYC4KMhWp+gUMgqPCO6ldC7FD628OQdODogwQkA0QFQOUhOzOlMwE6ZCClG+BegCwokIziEDp6P0LcnYGiDMJjbfAE6xlC4ZumrAhAFsLw0wKYCkLNgkhu+PsJ2AUjkCB898B0CrGOiEhK4DoeyDKCuJYRH8R3IQOZBnDvwz4i4UwZ8AECtQnmsYasN8H56xgCs-aZ7jOFjBMop4AYFQJmAEDvh6uDGUwPIXdAqBTAZ8UeKLnIzt4QgHdLAgwCLAgBqAnLWgPxHdA5J7BQkLCp8FdCTIioWFJfIOXTSfhPRBIP8SEB2CZoowp42gL2UHEzgCoTmAfGmjADOQk4kDAkBGAnSSkIcf4LWhACR7RAjan6TyM2Evh5BTAl8BgEbWkYCB9YZwjRLREMr4IMqf4LjAWGcidBb4K5KgpxSRIzhBq2aVYFFzgCTk-QCAWiqsPozaEkAA9JCIOJShHdL4yhP7DAArhcjkIceNOlYD2achKe+mUSHYLgDqZ8cWGClEqkY6wYhIsYYLHs3YCDRlMQkEIPfCEkGUvQAgB0E6NHgOhIgf4ACEOnkYBc8IoOP0GjHdCxgrAzADca6SLyNQNEAYbrAGGBguTPgl6A6PHCcqiRmwMAUPv-mwifAhIFmcZF7yi5TxgY+cQGlv3WGdhsIdXUOvfk7B5B5CzuQaH1Uq6chWicAJrK4BVEejFSUVOIBGCNQAI4gNPYwB1Qbh7JZ4-EE-Lvzhx6DX0kNXSHYNmHSZfu02GAK4FjAMAQA0QNPkXxN5kJN40wTkINGMBrRRy+FTkPTRCAgA4gnE13nPxc7jQYMO7GACAGJZfxAYpgZsAnUvgxJLBJqDLs9yYCjT3wmBSVKSDCJukvQnIPsCEg1iKxGgS0-iHUCEgWc6gToMALrhmwRgn6+KAMNWGMAVJ+INEZorXAEBgBNhJzbZjRGQhMBRI72VwB5E5JAY+wUeUSPnRUCeSf8eQHRm1Dwni5gM+jXHJEFwzp5oITNEJFBTwgXA6e9qUSC-BCBrdXe3wcAQ6Boh5QxImeDwP31IStifCVZDTH+I-oFYAw5uWgN7C9DTBrZDAUSjAm96QimAZtZ+gfVJBAYtuMJYgXkBXjt4d+gvToFWWQheh3QxgPCHA1SxCAn4s8VYY-GOR5AeU96XKdLnMRJVqAOaAsCqP1pegYsWlb4E2Rex+IwAGBagNRTqB+g4ARnU7PGE+CRliCVqB9HOLegwQWCWbUkeVUHydANIrgb4P8jqB5A8UCUeRtgI8QeJ+Il8PsPz0vGdBiitwhAAGH7YBhjA98c7tEFcDCRjuTAXMCfmiB-hJ85+DoimhuIOhXAWwc2HUCyzflrZikZsMhGskIACoM+KMFPEzjblJZdmNTO6EDKciIw9xOHhcCURbBRecAAQGAmsF9h-CSNZCF9Hxq5IvKFfPgtoWbBxBrcyiWNCakvhoRkI-od1vt1UxbSaIucOVqzkW5+guhmYAfKKyQBw84gBdVTGFRAAEgGAkUIuJyA9KGIuGPZIsINEzAwAP+2w9sI7i9AOhnSs2XlHFHFjvg7kpgacMQuoWXMeC1YJWLQF7AddBcEYTCt6WfIpEuRtAGMmJjwj-EEceUJKMwQ3yRBTieUG4hxwxbTBEMSkGfCLlEirxL4pgDCMrguDL0BJki9GkgC4SVw+wbaPKLGGmCRwb6UYIsBAGiHnl2urgOIOIOQizUwAgpb0pVnGSPZ5Ofoe+EBUiCTUVKC4p2OxkZaZpHpc3I1DGloB5RdUk1awq4BUBhQACSvTkrdXvh9ona+GchLZTCLQYLgzYLFDukzDx4iwBYHfrvB9pGcCQrgVwqimoh5k5EQgNKASF1qXwUy7oZkmXCgVsRjoyEPEgTBgDNhCw7tQaCoDyAqBJ4TANCL8ivmTShAKgexDcqED88qoT8roYDSWQE53wAYaYM-XKTNgOKeUDuKYDwiVEN8l8AQdMENzVgtEVZSiJEBoiaymApIZgg6Dwh3IvEMWZJDOE8k0QTs9MExaGBgCRRYwWxLYJ0B8Utg8IsYPKJyEiAMAbE+BNTCEC9D3wmA98SwtTALA7tPgnC74HxOiUhBoSwrZ7sxlzFWBzOeED1PDg6CFgaiCZSwlPzUAMJYw5sCnK4BNyywX8JxbFKCJAB3L-UWlbCO6Fqmbwzy6Zbav0DrhwM4gQgGbJyVJBNIacfhd0MoBeVFh5quYYVSEEzBOcbCDZMPu11jzGABIVSDfPhVtbiRSQfYHKJtMbK5Jrs34zMMxlJCAYKYuYdqssz3KRBXQnIJACBj-BIA7VMoLzOMvWoHzHyhtUkFsH4h9JgKy6RmI9VjzFkuMh5aukFGiDoz3QsCGcJmDwj904gg+bRHUCsDMJsxnwRHKYFYi8hdpYAS+DzjFkWMSUEcJgCov4gDJaAIfBUQIFgoEhtwcE7vsHlOyDQ-w0cxhI-FJBnCNk6DF8pEAfRdU4g-OPUMZhE5BjiYWqbxIhmMACA48xgUbLNAdCUl3wNELNZ0EFxehIgNQ6HCnTwijx3QAgOxLGDbqphso0Ce+Jyp+nvhjAtAI8NEF+UOy4CyEFQEJHwSpC8oDARnngWbACAEAzKORLejqC0b+yEYUKJ0BgDkRoU04nGMNmFxbouNU3KMDH1JAQBOwduQaIkgAVFyiwxBbFBAAEDKNflxgWeqy2wiXxqwJfKwIZwgAMAZyfoPCEIFdB9g3KtAPwCuUk5CA4EkigsGACYCL5Mw+tLOofXupYxEqleYRhAH4jPo6wGohHEARAB5QBAFCE6aeSazoFTEM4VsP6ODJgKowtAZEn+DgS1hF1OcGiCrU4Tw8AwpICokMuUT9hqwDyUkEwFK40RLEuYdQvxAdBwA46TJQ7iuCEiugoCW1JeUrFHjUBB8gcexAWD7AOgYOCASyp2An5nZQZPOTmBGDyATh3wpUPKOBpCB5Aow3iO-L3ELqxhqReUdVt7ALAnyfkf4K3lsF02xhZl-EYwHUD7ABIRRyELRK6EpR+4QAuYYwK6CLCPY35V4uIIoNSHIRZCY1c4fg1cCUoVAFwGEtlR1FIBiEPRUWvAIDB6FUakvWTkGM2ULo-QeUApPqhYkwArAEOCPggFQQIMmAzYMAnHTiBdoDupdMPIJVzQJSSwXKBgH+FsJ9c7mFwVcBiQFp-xdEmcofHKWtRbB8gSqeinaL7AbEy8WwQzbjMEoUYZBEJOoGfG+Az1TAxCdjMlEIyp9m8odUSNEHaKrojlREqCSjjBIkUwQKwu1IcHCifavQAYpbC-VMiSYtuNEfulxn4h7QCanYe+Bg0034pDgyabMcFWULM574ZUL0DPV7QZgG0gcC2dEFRqG7R5YAIhgRH4T3pRax2kIPxHilKEXie6qwFYCeowB+yeJAFD-NG15hZOcrGDMsVQY7sLMzxOIH+GLIMAuunIeEX2BgR80OI3OPsj9mQhRg1gCACAPTI-yircKWFU2cVBjBegQADoMiAwDABPFXQEAELHAHlQw9BoK8OABShXCuBSQnwagEcEHTBYXMyEBAM93anmwQAo8T4LVOmQBgRU7nAkEIDuVaRgweqmsGCFMjuhc8+BOAMInSyN56x-ZerB+JQig776OcpjZfDwxxqVqPFKOaMUki9wbSWxVQNvhg7Qo4cg9OzCom+RGo6g4FD0DAwQDfwm0UGDWAPmgy7h3NeE6LEyz7SnxvQbDLYBWWrB2MEQbwZEKiBcZYgoAOIPEOgE8bUhaQqQEkD43pBUgVD3jdQ4yFCbMgcgETBJlE1IhTAVA5ha0PyDyCChhQRTUUCk1WDrB0m0oWUKYGyYKhzgxhzwGYeoCqhSmBgYphU00OahtQUeXUPqHQCGhjQpoFplaBtB2gWynTN0J6B9D+ggwpzcMNGDjAJgwwozFMBM2zBvMMVqyMsBWHKg1g6wDYJsK+HbBdgew-YQcMOCZbjhJw04E8PuHAgrg9wlLUMFuB3CdH6WB4bcMeFPD9GLwV4G8HSyxaEQ+DOYdCHSwJaUsfwwLWlhBGAigRYIKYV8H+BHDQR1jEEUMDkZTAgCLgbXJlphBwj4RCIxEa-mRAohURaI9ERiMxFYjsROI3EXiGZREjiRJIldGSHJAUhKQ1W6kTSNpF0iexaoxkUyOZF3Y2Q7IDkOqDq3cieRvIWrL2IFGCihRwokUaKLFHiiJRkoqUdKFbBugFRMOKeyqNVHBP1Rw2q7DqF1B6h9Rs2w0fvmNDtjTRZo80RaMtFWjrRNo20XaCBxzzHRTo50a2HOxJOGxjYFwF6EIDejmxPo30e2P9CIhAwQYGiATO2yg7QxYYdUbmMwrAAowqw6MTGNjFxhKtCYxMbyW8fJhPs6YDMJmK2y1gandYup3mPzHrYixLYTHW2E+1ljyw32ysFDiG3bZuxSTkp6U7KYthEncotsJNmuKdguxgwbsFE97BchuR-Yu-IOCHDvB-g3QUcRuKnnLD8dYmqSGAN2RoiaaQAPwI9tME7DTCVpdnV6QGCYDZpsIhUurn4gKzm9kIF3GiGNSEh5B+RVZOAEgyEiAag9a1PCHw2CkUbpTK67oAGDmqOYU8xAvTkbGbBbAG4QgIsPTQjAya0QLdT4HMEbr8SBAokFsWMPkFtp1Yjmmsw8hYI-kc9n+gQAnU+BBLSQYSTdDm0KrB06kACz4G5T-CaD00veBALVLtXZcMcCcCALawBL2QXMirEiq6GW62aCmmUCAMKkYVCCKFKg-XRO17j8RHEGmPIADpbHugQgeUXMHcxsLnyzoo+EIOUkARFxKeACQLfQcU6lQrAno5sH2DEkRDiLpCf2N7BkL7zlueQDDDjCEjUA8IMCUUQ6BEgYKDkMU+tFcX61FI4kQgXREIGDS0mPkJ+5PVYE7BPUrA98YwJqWjCDR98HOCcWfBCDRZQ9gHAyaYAHD4a0YTJE-XUFnTLdOKKcQ4MAO+71Q0VsqJgEhGmC5DDOsmOgQzqsAXYNuDoLRrVJcSiRkUDbI5O+auhoq+67OeVF5SXRCAUy9AvCF5BgBSWRM0WJxMsM8k5zXACBY5LmCSzYdJWpgFdQFgQDwoaipRbzBZT0xCQ-5Vlc8pyBhGnZveWwUAvOtTqn9RcRRLlJEFJqvnOQEQ0wIzKn66RBcwjIQLTMzAEwowLyypchCfWxAexEAPCLer2hRwnspY6sEoRZxV8M4uYZCB-jIh9lTy8hLYNRVMQe1Vw-xenDRFjgpyKq0irYhFT6iKRCEcQUFK63+nHV7+XpUSEXLcEPp6MxpTsLmBiSQihInqgiwRUqgBDU+fYHMqXGIt4R+OFyYugVJeLGAf2Ngb4OfLVTXUEG6WGABdhiR2osseBWlSEUuQuU4knIHse6HvLJRZ9sBftLPS2B5Qao6DJwggAJBJ0kAAgMGsLQqRhzmSTVCmwtJswnQxyoiEVkSXoofjhNNYUSGlCSHhFyOPicKoLoy5ENrwEAcWUJD-CDQnNAYVYASM6CKsPoRSuoM-PYybKzyeURfZeIUSlZXEr8uUvIjygucHQh6ROgV2Jq5hIgZWIcSKVTYqALKp7LYJK2QiS9nAjEMsbJVzAhBy+NnUkKqsd7+BmwfSOBsoQkIEht898QqwGBzgwA2u6YNlr4kM5mgIw8lISCYD7ADz-8PuVSG4nGgN7RcfYfEkKkH5IByogtAbdS0AMHFX07OvAoniT5IBCppgeVMwcTL3CikNVFSieMFUFMrAWChXs8m+B9hBo5PbGMwlHlXgbMSEWtE0kk6HmkrGkXMP+tdByEEUzGKxT8mmCjdogSI5opNkF6JI98oSONbrSxTt5OQJ1c+m5IQDTVyVAgdorpATaR3gtT5fNtQBCACoaqM4IhsolfNehjAORJ7MHJUD+EtgyEc69YTADOw+tSABrbSOxR9g8op7aIJUl8hwARCCI1tdPCQQPxUZVyzO0HoJAhAZwjOcDbQHwb8ROgJYAnI9QZJRgJsi8XMMRYQZSW5Jeo0KvCmMBYKNRXyKWwGGozp11+Fwb4F0RnDIRsyokblK6HYygXXQiMLGlBLvR6dTAipFKECQvyxQutuyUmnvDqsro7SGl4EKUUcTkqRITUAUdBaFTpazZeEJgFvzEwUQMhHJF-ROljCaCk1f4YMl4PPX+x6cWwMEthHFK8lPg5Fi4AmgDBMSg4NEYy4l373dymJfrIsLXHtLXqAMkhbfM2HrlIA+iHPdOrMCnSAPX4Fc5BB5SCXVhL7rucUnUE5C+kHFdqiaFsDUARgVA0AxhpmFjbn2ssA1d4hlC5ncgCQ1pLRgwBIJykxJQ6S8n7ZqLRBeCHW0wOKHWF4MBAl8eqGaDFukpKLgQGcG6D9CioGnNOmaOo+Em0UK9sFgfPr0+CxhPgphCfnhEbTYrhCcAaIDGzWez6xxf9atX6CLARgCwBEPFIKULDUxr50QToHfnDSdh5yweJqMcnyl0pmw+bOfY7BUDTBwdyw3JBXwpKE4opxWodOoigy7xQJ-KIQGnWnT4iKpuS5hFjxjJyODuUgoch1NdBjKkk0kO5LlOypcYwl1YRtNBnRpKNcwAvYwF6DW62lpqEYOXLNhFEXctRWwcWN8CEiHL8k1BP-qK0wIFgtj2ZEgubmEBGhBBsuZXEHtInYQHQpRGAPfDqC0VSQuqfOcwYuB5R943IBKTAHEqyJ2KjcYynlFMADyb5l8ISOvwYAzjrRukeaGDa9BIT2XyJSXq2Y9HNpDtayuxJMDTowBcwCHO3GAFXmXivkWiJrPZGMAQBB3fhTsFYGAEqAa7eKCEXDI5cqAksmCPRk1a9CdB-AXoNnv31-RgAVAN8v7csUDSRQzQ3fPqlsGRR+lA4jYQB+5tdbRAgtVroWH-C0a37gQkg9ZMIU7JxAr0RMV+TND5qS93wE7BANMD9CdgfcHLgQPtwpJuRTipG1dbQGOLUAEAvWLOAWlNZ23OgXlGVETeQiMQi4uuJnOgT8KMLSEDO7CLZbxuBpm80wT-HkE2QbmR70wfwgbmjGjbmwOi9nBGCbVKQ8IECi7RGEfS6jtN-nGx+3ljRe1+6laSIC4LtKjv7+IKXhB6M5D0PJpW3FPClIdDtbTAnwEbLBOFYL05YwUvmkGVCTmFIg0Oa1qc8MIY5P7z5CuKjtjBOsthFwaCRfa84Lw-AXocpc-SHVbnIKtPeCkqPMw0RJHxgVOu9wXEZoiw4g2rtWALCVLqwwUXVAV1rEryLAWsPttQCvT3xn02crCl7UzDIQfixG1Po9GrGrx8WFfc2CoGe7EKsdfNGYZ8BXTHQjUIKAtJuh3BZe4eOzZCBCLXg0RwPzx+iottPWqBsIH+QVbRBFTLpeEwSRyV-j9DGBqAzkAiTYsSJlb4ccljOF0JxhpZXAroB0IxkbTO5pLqE5PJI4Wz7bMS-BWrBvKbtFhzu0E1lHqqbsxYCsscFBv6D3UxZg8lqbCMlg+i2DsIBid8DRvVIOgCQzYAsFGCQAWQksY+3+Z8GDiuAaqP0vjNMAlm1wwujBQNF6CnSMERCroAFFmEGjPTgEfQl7UkO49rYsUAyc-tQzNGIrBZInLqoVMd5Rg8ooyISJw6bQwAQgQjJACnlmliZqKj8ZPc5D-gVR7hiYJ-MknzvWFvdtJJ2UvlxGdBFiK6QaDzkQ2DE+eoFTTtgKNBkjzOzBoYldjnrYR4Bu+HdEwA11Xgt+1+fGrKriLiDGGJOB8RAG1otlRIGuNHJyPjB4RzCMpOO-fFvj90CJyEZvlSpUDrDjAE7I1nGugv1BqYC1cO5fFJC9Eo8IQ1BAWEbzX4N2CAMiDRF+CY4vsB0V+YFXO7GA4A0qspTODYbqicabGBdjxYDDy0R6qCYhU9WrAiiCspCd0C6mQLZtXx6iKlNfiQBJ8OgAokWoZcKF+2xhMtCAPA3It+weCHPRSEDi9dxA+Z3cPPHt2QCnDsIzCILzBBABjig8z8XgpTD7B0DIgl8MwOSl3TFgEAyvD-r6j5ZcJSHuMA9IlJrQiQ6eniJ+MVkTd1hCcT65rNPHB6sLxfnlOxqAFui1EwaUrFJBg4HKBXRYHWgFRxA0TcQ-4pVbTQARThbu101aVUiQOIiRK7S9F+wa3GFQWGC4GiAqZTsCYBiNOfWrA+wSTjtQICS+C0pvoRT2ADTKNxDygj2FCW8kC9AyRPEfQEIlNIXhJ2BJIbAI+D-R8CezFWFaAOaG2Uk4NYgmABAPICYAeiNWE-0eaJAiBAYsNmTlV3QM8xopaAVljNQnefWkgBn4GUEMQTxSNGbNSZGNjGhecLrkGg-acCgQBecejArRS+fEhCAd4G+CEgrADSH0w4EK0A8hykKdEgZDUAdHIsCwUuB2VZOLrRwdYlPtA-RBBE6kKpw7DDHaJP9fiBt0O4S7GP4dGB0D4wCqS-CVQVHMYVoArMTyBc1b4d8TbhReSMDwhOgBBiD06gP7XTwE2UkEaJ0EJ9DyB50JgBmFGsK7FCg5SLWjRgo+aXFWxZMe+BZQNtMpE7BZpWbB1JMwCsmfg-Rdpw0DKVAqndAdCG3SZpWCCxzts5+Xs3P040dOCJISwT7FI8awasFy4-ETEkmhwqRbTAVQ8UwldAhId-GmQjiZXi9BpCAlTyhVFeSAEEd9FciPICfH61hJH6dgRnAlpFKEvhbuR0BUB8XQH2Yx8vSWTtIwuPiFvVKYcZRD48IcWGDV44WgHOEVHfMF7NKYDsDB5dvUEH6FKlP-EqE3BAMFGQVEDJGlU+uVXS9AiicmUNQMRLczYY6kPHCe0tpENRl5e7OAFBQ7ycJHvVB4IUlM4-bStAjZ3iB-Drg2CUSAEB74e+HZdNQsZRvlu4JNTDQkcbOV3RxoWzQXN3ESEnylPHP8nN4FRc7DdAUiF4mTBaZJzRCIMYc-TAACIPsHmQz6Zbmwg9aJ2CKxXAciCPtOgMYTGhOpU4W6Rj-JHDGohAW1EwwowLiBMte-M4gjxlMUvnGE84MH2vRRgNUk7A00OIEkI6EA-FMDN6TZ34gA+HJEfYk1RVGTQ0oVANjQkCD5zJEIRJLiRFMwP0BUAMoQnmowYuUFjABxgX5CZJGYCWBRsIha9ALBR0HpAxIqyDQPGgWwHoiYAfsFGBgA3iGKiCwOBGiCEgFyAjG8g3fJgNQVaqbZQYA7cYdVJBjANKVWxTkF7hCACQAtHLx8wcSjSx20GsBBIeLZqFpgT+F6C6w1sV0ErR5uZ+XikMRC-gDITrVKA6Fc3TvxCxTXJBhDpMIPsFChnzT9GZJuVa9AjRdNC5U8DJeP8BrgSgzoBnAVIWMEiBTAH+RnBXICMDy1bUY4xr86kV1g-gjWH8EDC3QEICA8WaZjAb0gbRsVcAlJIPjKorFeFxQwziPWimBrCE0TjtWcVzB3ZSQC4Ge4esEIDLFpcKfgDBQFflFwEh8Si3UDZkfzi2AD8M+gR93IErW9g36JZErIwZQdwD5q4UjyewEALeHAEkRYgkBpvgSyFEhCoRxHagCoKzmn9vJSBg1FGeW0icBTPS+FVdXNTOF5J2tJ2WTRP0LeHRkOJR3AuB6oKwBER4Aa0QCUw3ddQvQa7cHWhIVfTsFJBhzDgUmgS+d8EYQAwdcEawGAQdD1lY0aYAdA5wdYWYpf0LwldszRGUEGh4BXEArAa7PKD9pQ+QSlJBrQFO3cJUZf6Uqie+JxCEhq4UWikRw7SxwCBDaD+mnByMLBXfB2dfIkfVRIcAFjBH8DiW9CdtDyxsAB0QeiEEQQEtDiB85HgkzlcwbnHQwuGB5yfRclQ0G+wmAe8mtZDucO1k0Hg6-iQAeLFJAhFtQuW27pSQM6DyBeUGnVzBoEOIDgBbqe4mwg7kDjlTo54ZSDwg5OA0ncgk8Qci5E0lNHR6h3lGGEHR6HagBFZdJWaFrQF6aAP7JifSmAKhc8EoSHAdeFbDW0Q5RlArlXNVggCA-9cBBKgwQGU085H6MHBgoglBAEjtmAC4HyltKWCTtArAd-BJiD1UnGbAEEBHxUBrwFekE17UOoFSw8IeRn9gQgfGVAVtlWfU7AduH5UZhXiBkni9iNV4m54NKR3GdxN0HBE2tMwboWmB7hFijYxs0HHzJ4JEY8nrAHQbDzNU-xXIBgBxZBSlc0mkQZB3hW1CbG3B+cQSFd51ROuwchohRWWBDxRV4QYA36AOIIlj-aHDyAytDIQGpJLA8SC9pbJolhdJZUGwYBR8CxnrQhITMEGgQAMSX4IHkdnWz4rgHJG1o4EOAFcIJSGHBY1Yla2Q0xYlEOSMpmwIDxA8WqQuC9AU4dTw3DQkfiH313nR9HiAqA6uCohknBOM8DPASw26Q9oeWW-FcafWkzA3aSTkzwxtNKQJBaCAnDI1FrHlEKJ8UISAEBYwRRg496oHXh580sILyVjc5FeHlpfUExi9AzGWMAsYrGaPFsYXgREAwAnGNEDMBXGWQ3cYFDb4C8YoQNQ2CYBASpi0MMEpkGKB4mboCiY4GQeS8MLDKw0KY-DWw3FBUmBwywAMmZw1cNcmc4CITQQZwG8MymNUDKYAjKpi1AamOpnCMGmJpjNALQGI3aZ4jZ0ESMemFI36YwwQZkyMRmMZk5A8jKZkKNZmMMBKMqwWsHrBGwFsDbAOwbsF7ABwIcG2MxwOFinBZwNoyTBcWdcC6M+0bcF3BCkQlkKRBjcxMpZRja8FvBHEx8DxYtgWYw-AvwUMEWN-wOCFWMroXYw8T9jbYxghwIcJPkgFEzkCOMTjFMDONcIAiAFYrjUiHIhKIaiFeZQwBiCYgWINiCu1XjMmA+NzWb40I4-jRSGUhVIIEy0gdICkzhhITCyCsgYTeyDhgETDyC8gfIPyFRMAwIKBCgwoCKCihC2XEySg6xQkwuhozEdiw4KoKqDBM4YTtmahWoNdjpNeofqCGgRoFk0mg2TUtk5NFE7k1XheTHaD2gDoQUxOgjIM6CjM72G2GmSjYJ6ClNTYD0y+hYzAGBVNQYdU3vZZ2eZJ1NzYRGD1MDTNGAxgsYHGDxhlWC01Jh3jKWGphaYQVTtNmYNDk1NOYF0z5gZTAWAEAhYD0zFhvTaWGfY-TRWADMh2VDkdMOYEMwlN7k8MzNhIzSZJthJYWM0dhnYV2H1hkzBE3TNA4YOFDgSIS7DzMY4VcBcgo8QdC0gXIURUKj+JD1AbQ2ZdgQlR-nTi2Iw-QXuGsI4gLfURU-wd5XO5APbcmUUAsaiGbNLBP1mmBVXXJE-ALhJFUdgkqZRWbUgteMAshNPbLG3Av8BGUehaANNHiR5-ZSDbQ1YF+FnQilSIBWlO4KRjCB3UF3Ci4DhK3g+dPgQXFeBN+aHQgZzOLdCOIcfN6L-Aw+CcywoWpIqFMAWpCqWTRPVFnW55y9LrnAJBSWtBl4+UcPkglPtVJGzAEAVPjqRd8UwVJAZwI-UXVyeWelupQ9HZzJUpEISFwxjgFsVmE4cVrV9xSQCaCREXyci2tBUJeCgTJ-6PIFLgWoBuNjAOoOgJ+AnRNbXH4N0TinnU20XMBYgT6YgVLgw+eHAkciIOF2IRvedT2lFGCNQO+ApBYATYI-6M4gzTXNKMB3gN6TehWEEABiHA0iYTMGikOwfiALAPOFsQgALfdYSzwT2U+CV5HoAhxiEveMskTI7QMhHbQMKZSEA5UtRSHCxOyP9H9QvAJAg7gTxaKzkVmIOQUi8iueR1oghQSeEzB-AJSXNFaRBgFWdiYDQKo8wkUsz7IUMG0i9FIgVpSWRSiSaGIjCMEaXqB-Ye9FXCnkZGy+wEAURz4ZPAE-Wco1EfvVGhx+GIBJi5JXMEzAFzRbytR7NTOSQkF9HgjtBw0u+HU87ZWgAwx1hedHhw+aZXFoATMI1iuUByMp1-5Endzm+AXIb7g10XtSp1nirASYE0o5SB5BKdOoFRXZdPCGTQgwyI4dPwg40MqmzJ0iRTgQoMuCmmWFnSXMGAw0YKnk5EZuewWR15BTkiOxsIX0Nf0aSLAhYJCcdELLhe5QFDgZFYPoXN5iNTslIgAlbuyngmJCAB0IthFugDwgSGqnKVofL0EOjH2ahiEhR8U8ln0yoOyiqJnIAkH7NNPC4AUkMsHB0X1LeXEXMyDJFCi84vQDFSqQMlUqh+QGvU1krNm4+mUgAz4elDM5ehDBUnoP3TsG6gKJRlCoCIUCPXh5NpazCUY7QS+G1RP4VZTaIqUZvzCVkiH+XahHwtYGCImhK9CEh5GPICZRCeF6XgphUfMC0tMcP-kWRgEs+Ev0mOd0BoghUUWifJT1NSPvgAQ3swTho5AFRewLKczGbQg+UkGwJ8GcNzsQoCC+Fstm0ERFoBnuG4XCJZaR-xY1KzX9N3DKsAsFzA1gFEnk4I2Av3sQ7Oe+E8QxhTTQfDGUexHGQTUP6SR8iweyCKhhNc2ElI8CaaEB8ySXIjhN4g9xGhxSQdOC-wlIzsHsjpgI6kHVPAyJBgAYqLA3EhgRatWpJz6OACBEQdIPiIpOQQVQud+BE6Hfw+ogmxnA1IHn0WQmNZilrgYKZRhdwIMdc1JwhckEiPZ+IJHw4ZjAZ-BlIwSPCAEFTPUmQyRGJUZkzBsccgTFQ-wYwAkF0AhUWYNlGeLyoIXhHxIch8ILaHYoMRRYgCw2eSiPIgsuJMPwQ1gALAEBTERjCvCO+USAKjVVGcUOAeSL0DcxO4RSXM5BlIoObBmwX4FlpT+YigxUxLAsBIoLlY1zqBOgKU2RI5kFKKqJd+SPTCJUaV0CKwyjTzCvxfhX0ksF1RKVB25vlSPzvQJEDjxp5q8YNU7FBoXbBgBUA0Ih9yB85HFSEG2UClYIscWyC5gURXyiTpXAeuF1wqvPUVEhI3b4LjBv4XyTdJ9mWnBXUK9BSXvgK5VNhREVyShHXpPgUwF7oowCOEd4xVRgOZ03MPdWqUD8FnXjk1mJSDRU4iQqJcoVnfzAHySsfwh158Gbu1OETHXCFcApMuXijA2JRuKoIONIPHYxwSBeD+k-QSIAgVFwQhAJhYwfni9wLgczHZR6ZBgB2V6HVHEtgjoAhWqjuLBImZ13wYEOUxNBRFRgASKWuH1MUcfb2UBdsf0Rog7HdFJKg4CUBTdJIvbfKwRjXR6hLon4QzmVVfyOsnT5U+R+CApniRdM1xRfHM3gEbwJOlzB4Xe6hggUok+T6FSRTqIcUFzE2Nso6Ze6gxh7EbOEDk3MJZAUQMhRVPJ4YOU83jlcuVYEsx06bKhC906ONVkIUkIlUr8tqP7SJIBBKAmZJf4S6z646gU9jp4aXAMl9QOhRZ1ahpgePAu4oKZ4NoA91X4hYJXpB+j-A5eawQYgOgdtAGcOxXSXYpdKFUWUApCauEqUpQ0zLGERSLYHfhB5W8lY9SxMNB5woqEACWJYwUVmvxgwViDh0XBf80AtLCDBUbp5rCrAIKIAAkFYIiwWW1MBKud0G8RI2CMCMIVAMxBYwZuLVBogHQJ+joCCvV+EUxGxPIBn0lUWDBvJqHa-CfTrWV0BHcn5fhEfBkEV22ZxK-fDQlR6KbBFNJroU4kpd4RScF0xsIaiFmwhIVbEnJ4kRiQzS4oTTmscNIC-G1CfkKhGjYWaerhT4XIKNgK8VKJgCuwt8sVV6CjFC3CLAZiD7CsA5wEEiYAo2fWJmRC1JykKU+Pb5R8gIfaAPCo4AcNVLJnIaYB0h5iGfCLyI2Q3TPMFSf9w+V87YHxbhYWT+0rw6kcPFmoiYY-xV4+wf0XDSiyWvTHoUcfSIgBOZCVECo5oQxi2A0sLYABD-bGBgrkbtPOVAtUGefwvE6yaYAQA0wd1BTgVYfsEM4awFS3ltc0QIAYA+NSklDjUAi-kw0P0rIgKkaIe-ULBGeQVVkRYsFKE9UmVNfWwhXpbKn4pjuX3BrQduJ3l41pdYymJhF02ph2BbaEVjxJVgNBEGp9efmkhynYWeARRqICBQG44AbzCakDsSTl5UEtcvDCgI0JAGxwUGKMEC0SeZhBewnyYfDVQH8aaixRfhZVCghiiWnCr5TUECAjZ8WToEfE1qJQGsxYKFiEmlE4EoT9AscIfAbiSoG6jGhe-NyRCA+6NggAJZYzsUAdzsRa2BhogQvmMA4dXLmOsaMI+hxQtQt3Bl4W4S2TTw9OcKnpQCQQ3GngrONRFjABRevAy5rZQtVyx6+KwH8DJeXnBUJ+Eb4CTg00bkkKEL+U12Moo2UkS00C0S+EkYH4JNW+x0+X1BEg53XMDVReMLBVTF90VKkAwmVEzHS0fCcoUphsIPBlsobRIUGVUF2EFAhxFSMAHzBoxV0GOxSMKcjKiIAL5EdkXYg7GZFzECMHKUOSIDCcA7Uc5Dq43NPWU2t5CMmXxkBeF9VcAW5MiEW0JwRTBUArmb4CQUlYSWBNR5Ud8BgB6EKTBPd9TcviWL6AHhE59B+ArhdwOuLamR0LgD9EfFauLHQeJZYgmBeFkICvRAABFX0B0xL4LcG8hFuJjTqIVfM0FcRHcQ7SVFqqw3RyzkUMakUFw+OWxAF3YBAIuAS4LLGilz6RrAO5SQYnDXg8rRRBCEVpeOM7giGJy2ywMSQLXc5jKZqFBMrAS8kuZ8Sd0HBpAiBSUz4QMjMV7wQgcwGiBD5fvXcibxSEnBl-kYbErgaEJbDUixkFClcBfiQuiewSUThEML+5GlSR4by8rHkiKyXgMfBSNUehXA+wY-xewDIMxGoy8celHNpAgUvnxhIBAkXLs9YCEnEciwNWU4dlAYVkWJ79agGNp7qWBlsR6ZX5HjhzOFWjlZw7MiKGUZwU9UQQ-fWeiLQ-tcOw40BIJNEbi7ddQjBijoPfJT4OiKlEYh-7UHXekoUcml6EQgWJWcoiVCogJ5vgXwhi5mwRtCSQ8oOInIgvccxBjJrwp7AaggKT+DKjSQX9MHERSysjF0wCUc3FhQNB0COwwEN8goZQrEIEU5+fegU8kAqS+zxIv4ZJD+UdgZd1CsMxPFwxhcRVzUjsLwXMAxx0a3UiQBnHTWndYN6UiQ1V+ED5zEhB5GkmmgTSljF4RdiOEuv8+wODyc4wGA+K6QaPDITNcuRLY0MpGwJ2ShQFpHyj5oUILwvxESwXyARwbwI5A9AzqEAHzpXAP8BYo4AZy1EU46x-xUB6SCWTgAVaf-A7opRRuDfo8MFiBwdJFGuiTRiCagEvrG0g3FEpc3AfEOVeQcJAAIJMHUTbgCQE6lbNS6UBvkRZYYdC1groTGHrFECSsmTUiyIOGtJCkGu0EkXpRujzZ7ibVDy0MxAHQ+VBwGiCAM0oAPA8g+seb25A6AmIXXg+wdqWh8YkXLk2d00I8kKR+IDZC1CCodeV7tkIAPAThmlOMGbN2XDETZR3nOQg9AqeCywsgKsaoTBVKkfnwIwx4RvFRCsAI60ngwaS+DIssaDtQ+hgEqaWQJENAPlIE5+PKE+BGIT8rcFgEOmhFLFwf9EoshNRsChFWwQZSEhBoHfSlRmXBbV2LY2HwllI-oy4g6lvtEOmDw6EZXnCxjMIuClVLiMFT-wLkcOhE8rwJOgARk1BNB7EYEa-yBwTtUSEpV11ZqCHxGNRVAfgiI-Yl5lz5LCg9RdtXcPuonNPqmoAJCOQVqRkIRTn3qrAPCBlEMYPmxHBcMDCG8wXIItWW8POISFDgVhf8QLB9-NLRGIuJS5Edp-8UfwCrSNGlC8hVXFsGYBfsV1VMki+BrUBco+DEUvRpgRdFiUckeN06QxhVBmdxWMB8N4x8CR3FBxs8jFkqwmxKODcJxIGuJrKSUcBgxZChIzl-yOOV0GA9MCcaEhJTAHEQzgQ4L0FIQnNCdBPE6SOeCGRRxXsEfEqCcvInRTnZnEYCDBCoiSo8gcvhcRZEKxgmJyccBDIQ6qENH3z1rYQSkyU5F5VhJdxBvRxgxaeILYINVdtDUisDa0UZsIAXhDzgeabmXRo4AYjFuQZ8ISEjsU6+aB9E0tfxGsRZCOEvnQiuIQBMs3MLWB1wnZMEj+jyA3+H3qflQzXJB8UITRmApVPDAhRjhJgHP5HEFzVcRKLbzErQMK0MGmwi4CFoDFl8fMgTZqAB+mEZV1GUytBDtf5o7h74KStMpf0YAU3peNCtGOsjaTDS9FDyIWCY0-cKMBMdvtE7X5ol47-VBALKOiGwgT6Q9Hk5y8tQCBI8VFwR9BdvOSUP15Bb9SdkriUKNKgMEfsHwgm2EOvUQviph3mpdvRMhPoJwfbyakyIHyhg44gRRgWwd61cKMR1hFnDLyq0LzEpQ7ZZNgLBLox9FzABALWAFpuMt2hnCrtE-H44lUQdGCJ4+XiBAJzYBuIVIZSEmKD9-1P4ix4kRX3FbVcsfiynTKHUgWGDgBO62NJECVvFuQjQGCg4IWiJBD7BVwYXliwI4deCcImAQyF0RMKGODvhdwybBrsCUXGhQkwADii1pS4FIhzwxbIUAjYdgb6BdLe-Y-mxyjlBMgqwmERbWkgI2TKC-g4CUrgtxu+UbEr8-yWgldR081wFY8wCNnmrBVlJs1ShYCJEMGp6UZdRszifeGGxQnKYjT4l8gnB14rzQakjzxpcUUQ2hADPPRx5oImBnDJ-m+hDiRDsBSgwqiVJ73NgQUaYB-wvQI5pm4i+HHlWEYUD+jh0PPErUpcAuRQR+LHNUsQvFWOuzB9QSefVNNZJzFWgcwlEImTGgPxa6itArAGNjUVBVPDTVC6uOTjSVEESOwqiZCPuDjAmYeyL9F6GNn0P1gZV5BQc67ZLFXlZlAAj4xN6ef2TwMSPhSbEdbVoNoAZw4yD9h2dSGkJA9FHmgGtbBUygCRAMH0medpZS-BwwYyQdX0IY+CcWHhNKeGE5Fz7AyDrhPgBAH3k6gUwxTCuCRrFwoaIOoBs5OQSbFto74WyQdYpCrDVdI-9O5CM4DsFyCFgErPcjOg9VORB8h3aWLxzxzGx7BCxNUHsGycRWB1zAAg-MWm+DNlS5E2FPCIWBB0Pak3JFUvi0kAtAL8QxmOh1CCFuvkURLblWFEwBxAkxaALBBJIkANeGATfSTOyjxcgWaXxZdtY-T06MIB0mEItgJPnNxf0RcSaBOo8+lG81ENt330K+DjCRK2HLfgGx5HNiVXlZMfzB5tspGfBhxG8BRAAg8gVkS4Jt8FBxRI1sclpIJ9tM9BhRysS6i8FooO5HFwYoMrFiFvJDXAHylCLfCc8nQdzjZEIwc7kJgLkXaQdIz4SfA3cGdMjQNJaAE93dApcY7ij9EHQ0uYwAsbcBfo4K8dDPqsrRq0PQQYQMHgYmEHcBYcJIL2jGh5qDrjzwkoOAFshBoIVCYgR0LygGFxe010YwaIZ-jNp5g0SkHUlSRAmqwhZfTGywSG2fVXBRgWIkzBvYGLzGQqwWNhpJqwIaNxQkqBzGLhEqQrP8wjlJKxZUqYaAX29KiUYnoNn0Bcn-UVIbuwDY+gQTXGbRKK-HjtxoXuBehf8+hung+o4fDB0RqtCDUYMcRLk08VeEAG0VkUHpHGgxq5ysOxGcL1Tjx4Cu0FlUuZczl+q+wB7Cu1donSrC4xUuHi4k2RfRAdB6G3yAzFeQU4joFmdaWlmgL4dAg1hm0GtEUwgKcIgKTOQSi1k4f2yjBjBTBHiBbhYwKXhSJiceEXap5CExBr9cwayh1IQAePhKRWgqTSEgRETxWpwX+uu1hJMwMPnLtEIFISwxcFMSEexOfQ+uk4qk4vvswyeCMAdB5kLQtF4xuiSHNhg1XQsot-OVwEVJkUGUyvw6K012vDz9UcXyxGotKDbhWECFsmBBqcQSnAARMyGsh8GV1DekJY6OW6FaCE2mbAIwenjYQCHIQBAwa-D9Hjl8sG8ShRCXCzEyRY+BHHiD5CDVSxxZY+AROkag+g2ywj0KMFihgpDsSt8ISD4urV5-UZmWQbqI6i5aDSHXjItdcf6SXyHwvLU-0jsF3DG0RqfOgXRu05dCViCQUyWoU9Ba9UD7u+UrF5g4kfbiD02EcSHLFN4LULxtyEHUWvIg9WmR+QQ0WuoYzD0OfjDdH6XESkqtQoUhIccYWghNRI3emHTpD6mlAp5EVE+VFFwabi17pJcSRwswzIPCD1pDLeyOEZONYRhOh8SBSU3RX4D0kZYYSmOByUrmcH2B9tPJeBPYEcbKV7AnKqcDcUShHZQL92nXkG3gBuaQjn9+MdgFQxRkCSGFYRs-iBGo3tPoEmpChG8jZYDhFjCjgo2TTiDJwqLbKExxgXmSdE3fEIEwGVUfOgIy8NQFzrVXSbljskXpVAJiA-xTknL0s6b8UgAUHez1PVXhG+DKgR6dgMvBIgMPEzbAwXMEKl0waVUboy83ygRLlZFOAqRqHUsHKpdSUhAW9TICACAxuqggv7Q6rXuIjAuiVxFOIckX9KepvkTKHoEjsFDCQlryezU1JPuIPAYA40Zgkgkyo6wVI0xhFEQjBNsMJSYo4lFZ3tDUJOoCQBEYHKEzA82aDvZ0SURdRmdBoP6PVpRcRLgfEg6O0mcgOCAofEh1MS1EKpVdUPSQZDkIEjcQzGUuD6h6DLHnJlQEWjUup+6FgnVFJGMxGYVAteeG9D+OJtj-wcHJVDyBpgB2LAxZSUCniczcXqGsF0PMlXgLKYORz98DcYHz2szXDgcVhUGKwGkGYASw3Xo6gUiLBs5Bd826xkIIaj7AvQchxHGsCFsRVSE2L1xsQrXAyTOhbkeESXHj+UsW95+JWy2forUZrikz0aFsG56dgEOFtpjB26igpfM0HB5ot9ETEbTtCE2IzA+McDR4QQGZBt7iUGGxSdcFsLL1G1iLajB0JdEFdRwUIUL2FAl9uHrDGUxUd0ELo5VMuCHUSYzyUXHXifoASlL4e3P3ks8stnms1UZWWEVKIvfTNomBRdVS0LKb4E-1UtUFnG6ZhXGGEUUpAMFLQV3QzkgYfKbxGR0vRI-QGQZNEwEHDGEffT-BFZQaFzBpgN4m6rOxCLCCUJMPr2XolCf4kkRLxKquItqhYHSRKgSYBJ5wI4biG7B8vasr3hckb7gB0d4OUg4IcmqHwIlM6Dc0dlK6NlByayVGuCHLuyb2Wzkm0FQGbULkOmVshjjYhVd4UooQCbtqWId05EXsBgDkdeCeSn1jtEH1MRg7lFuWsRDNHQS9Jh8N2it7ZMNmRYZwqFMJdofcFiEjJuq6kSb4m0DziHVyIZkkuo0YpdGV4AwAh05AfkYINHI5CWsXgQ6iJmlAQMhdGXs0aXbcmQhpafslS4d2Dz2a5CKhdG+VFoGdskhB8XXEiAuNNtDgK9EFPycsBneGnTw6gJOkZlr4Ah2hxV5IA3plscclROYtaBrUodqwWYHxwacEVAxYdIHBCHUlIrciEAGSPwij4x7RTDk68UHfl+5pMYRR4prNT7QUQlukOWkoCQebDNkpTWpE-04+agPxwxtU0dOxIJVVFIwUYTaVB02oJjUiAKbHrVzJykAeQjdrHaMhscgCBdtssNwuEtiJDIAiRzdBoKlXZ4UJObifVwNRHHa4KdSBHZ9VVSFX2YDVTqPNFiNXVG5I1lVkTPzY+9hwgV7NChH34blAl0B9mwJAE-1dp3NDFpp0RTjUU78y7E2Q-bd1g+0L4a0WjcziVuEUwTEIylCg+cSaDYpeqbYlkJHqYlnilAUNn0BQ6rB5x5DgcDbnoAbwKKQ3kkEdaJnb-OSw3EKx3ZlwnYFJSuGbAIAMxmEZDUYiW4tqI6qspdDtGEoYzg0WOmB1aASRCWxO-Bxw8shBeILLBowT+2qFb1EQzEMHGGBKkN4EmQzkMmADxhQSlDcQECNqgdBMpBMEluZqBtDXBLaADDAhM0AMAP7ACBnAOJj7nyEioDFAJQGhKbsnDLJnlBGEsgCHnma8eeKYOEvw3KZUEwJl4SwjCI0aYojYRLaY4jR0HETumZIz6Y0jWROGYcwJll-kJjcaFSl7mXZnmYBwJZhWYs6dZhzBgiHCB2ZUwfZlHAjmUMBOZfmApFDBLma5ic0wwO5jDBQ0J5kmAf2MsC0tZpcH02oLsUaByT8WDcOEgadUMAdcxmKexUxoEQyhTBIJHsF8J8SR8lamqETfnTsC47uVDB90azBZxaS7mlIw14dDTc1aeTmHAE-fVeCfpIEWA1SgdFDSmDBPJcpUwpfUQWXfAqYLfFTYnbEQnsidwVHFTZT2YQiSjPMG0VvguICKlliCpLBEepbIATFCskhU0it7fMJcZcFLMCEnRIkEQ7liQbAJ5lVi2CG5SbY84BtIDEMxRsRTrT0F+CVRkxAuyM4pMTjDVQCfE0oxIgxDWmENmAZqchpjiJsXcgnoJmAHI0YibC-h95SWVoYICASWUQYUCuXgEp7T1W25qyDMRt04ga2XpR1o8QvQwXsIdQvQSsVKhCAYUW9CyFNLH8C41GNYDqQh2iU0dlxo1SmEiAoWXCFaI4UezGXVrybux-BMkXQAaBRgEwHyA8bNZn8QuiAIWVlE6Rol+dpOCFrcJu+SwQL0z6kAElICoe8ix0StZ9GUVRITsn282kEUtPNPgXsmwgxhwBnxxaAa1DmB4cYHGlQfSZdx17g6L7DZzXeWyA2JK6iOXAB5guhAuQ2A-Mj2QiZJHHoQbyuHS+CMIYLQiwZRLAnfASaCnUQ9RtOuEnYYRBuPrRrsYwF6xhJVwFqpuCMECTwUYaxFIxn8Ah1ViGSVzkNsQAfFJSg0+A-BDA1YQpC3gwaPhEkV94fzieoIAcHTRx4pe1CWLzkWkURV4vWXHftSQGQUSV4ACnF2xGZUlDHpZaftGiV6CFagPVwyTSnBiySH5Sqg5genFPwu3dwFogQPH6XoIrGJxAaA-Qa6kvsRRLwvWoP8fEWYo96nYCeRh1QUqSdw3DnBjI7IGoLSzaIErV3NjEVrT-p5ZJhm+CKozYSNB1AhStHzeVPiFaVbLXqACQvkAnsJQpeEKRDRQ0JpUC8pBQxhZwLEdKSPBA0KbhHhOgnynZ9FEURGtQQgRUj9BodUcgzT+yHUPAJQVGx0NQylJuPbcK-LKH5pfMYMm7l-rEDCJQqAocWoBT1bLAsR5McnlV0jgTuCuU0Y-NAYguq5ZHkFh+Vq2Tx++PclHwg8ZInpIBkJOAGpdCnsMpJVMOgPa5D5YwBABjIAyB31-ZAuBU40YNn0ujlGQOEFU-4LWFVdJpYwxRAFK8aF1miwG-wEIXiVHQJBgkGYQiwCwNN3oQilOAgmJyIZ8ggByoMklF547eQVNbjud822sweSmC+CqPE6WYBpILiQ+R7BAQDoQl46BAtBbPMEgnwSMc8MlhTIJdJoUb8BHA3Q4oLOLcFRzC5X2ghSEHBUReIVeXpgq0cmhWoovNnLfFRoPfDGFUS+qF6DaSIPgtwScdMMZ4o+MxuOp36zqS+UvNE7D1EOPSlBxQ7lP0UPNl6qLhphT+AuzCAX9RQTJQ2icj1D5AMZZjyBBlYi3sjaCC-ilskuGSe3c+IRohKRqCCzhOoXNTIXEKDiK7TUBz5LP1OF4wA+CxEagjLGZIoY25GhYWpUpBzI7IGGOVGnEfkcR7p4QdBbpNNErAdBuWFgl76vNcxCQsL7QaG6FgyWvQyhYWPiAowUcUzxEwYKFCQZoVAUZDpQpLCISb5trWlR3T98Naj7JlmbAga1OHG1HgL-RDdD7aA4m7UfCQ4NWEEk-EekkQRCUSibQQWMQcTiQ08V+TdRqcLwp1CD5VSjscIhT5BgQVIH+GEg-EZVWJpisMyHnmf2v2ldr1YfgRc0tzTO0k9E6L0H5wZnM0AIwmAa8n146rUxCcwpoLTUroiZLBGfMGtfiAysoWQpUQ0poLrhgATpPoTahy9egXGBiBI4lERIwZ-GqQwkSqHfwbASRz-5XaxuGhnw0xiQHyzhLgiT6sDcYGikfcLOAbRMkfb3fB58P0S3qI4H6RTpI7aaniTrBa0D3Jm-LyCZxkdWsBeJu5IajagvXRLl9Rh4SCjCE9uQSibs3fLbtjdIVBaVaQK-Wy33hbormGkIfEKaHy9vIfHW+1SNSukFW0YmaCjmtGCAFmRE8R8SlyhJMaC4Zx+c2l0pBSoPzDwZBN8fdY6gIUmkswSKN0QFJLLLAPwdCGoOgFm1SczHhRpMavXQOpEwdc3aAGa0dkzhT7HdAxtQMYZ0mcLcdRQZ0GRAB7UdODyHxSQCkhp1h0kknWp6oNjFkgiwPRgIJUUZ1yfR3YXEt7iC8c5bK5aGY5Rfih9NtByrXUUJFPVcSCiXOFSI0sgxZiLWkgmILe35A3ZD6nsCWKK5N+XBJy8DCHAwKobs3Cx5uvbzaQ0lUiN1JUaASXxEyuXAVMFUJ5x2DoLLKvmCQikd0HD73wCvmVydcRoDCRRpE7VK3NIcKeZ1L8Nd3vUm4dPN6wtwEmihYxIBomGgf8Y3lfEXpXLgfFTSZwENoeamswYAc8c9E1IeHPGafpGOlYXvgu8da3UQhAJ0DGBHub1M3pXRBAGIR08a-EfIuZaMiH0ZwTsl1wAwQzhXV7qBTGrpB4GPj4Qtmv30jJN0EnFBjzaZqEtkQoIPSRDwMQy14DaNE3ADxgFeEOzBzMMABaoSMIKDzwkEMiK9hLCWOerAQqPOH-sQ4YukiA4+DsHaoZwA5A0z3OfFjUBY4WEXoNHuAZDy1sPa1BcEQ0LbglYMRPjSpqCQYc05ZC6Gx2rgPaOUmnylY2UkVxh0rvER6yDqciFR4KVuBqIASHMlswVtcAn432MOtZL51sYcyjZKnXSQa9+5eeH-gVyUwHB1YppRETanNO8kUZL4Y2lRJR-VRAZIwFFwRz0qGWN3a0tCrgk5Au8c8JFQiGcDRqRM+LBXaceLCxxjIjQDompZWgpnCApQwxXEZlhgyuHL0THbret0zXPevrxeIcOJT5s8xiUKUBwPiExx+aQ9HKprGYXgCHlJ6PnOXrwGwFmwLlSRDygYIfwkGhWiPhDNE1mPDBRlaxH9lkZjcGsCDp80UjxTt5+BsGnhoFRByV45JZprJ5iyHfEoZTnPIHtLDNDenQEshI+lMrapQeGfkSV59HUwwfB9DcygCEhG-Iv8SaD2t3afUjFscffOXQwQMkL3kF7MLYwswEPBgCVJUoV8QD5XQcMiKRqnJ7BMt-zLmXfBlMWTgUkaIcYDBxjjL4JGzmKHFrVl47UKGitjAYND-kIMRpAQGqIL7HagjiEECH1donZTzk7rJIXPDLqBxz+UVEWRGIFsPUYALoQAd8Gv8cHMiNBF4BKmBQlJMJUi8xzAZRES5EYNkRK0PadYP2kjiTCCJI-JnM2rTYvIAy8JF1TXFAbkcVYFfh1EBRUXT8WbHOW4gMZbhdJ3IcTV1wDwqol6hy9MwD6cf5bjxPVaAyEkuKOTn+WoAerBH2Zp6pzIShrn5TQX-gI9EkmwR5EL4TcDFOdXYCpIKB7Crgd+ZZr8Rjj3JS4pSyMIRnE+WLwmVUEt92n-UCUJ6gbtu0o+CSSLcY5G0gMUiqP+gcTHPA7BYkk0sqwI1rmV8QgxXxAwJb0P6GsPQE29CvOAIOhY-oUwHKj+3pWdD1tZdJeTkX1fkv5UUTb0SekGg-EFaD8QrAV0D4YN2SrC09uzPTgIhIL6CFgoAhc1BzA5+I7lYg0cI9h9glYVMGEIKwOYDc0zyMSH4QmzeVEjR1h+kyegrQKmFPjD2Y9jigYGS-W+CkebBCHAwwBxUQEvR+5cX10UqDA2gVaJRDktzG2mCtMGddtWfPNwAQ1LnhDORArnoEyQ2cYa5txlxB655BM3magXxnbmsEpIB8ZwACACwSdLyAH0vdLged7nZ0x6Q8BjgJJl0M8E-ICdpDeY4DUvJAYy+svTL8y88AIQEy6uBVAJJnEMkQOufsAoAJwBcA3L44ABAgQEEDBBlAYwG8AoAcABc5EADECgBg5tYG8BcAAy70vO5py6IAXL8Jh757Ljy6KB0AZUBXmoEiQ38vAroIBCuPAMK+BBQQcEGivYr3kGHFErhdtUBUrrS9bmGAHud2BvDflGYBcAYq58YGADq5qBjLwq4LBKAYq5FAcAdK5GvkgDIEKvMwSa55ASrma9tRDLzK+0uxrrQCV5GbYwEoBQWcNEoBvoaa9mvNrrUG2uMAXa8VRKAIhL5ATrmwzWvdLua62uiAQq+YTaAY69MBTr9a4yugjS6-QBlRvoEpcQASgFmABgdwFWvZrzUHOv0gAG64J2AMG+tZYMXAWmvYb+a66uXLnq94A+rpgFwAEbkACGuXr1uYBu-sBgEoA9qW66NBKAH6+ev0b6G+qB6bgG-N5xVgQCRuIb1G5sNKgdG+0vMbkgDkBsb3G9wARiPtpZvBQIm55uLrt660ARbhbH7gabx67OvuEuG+luMAMW+cAFbihKeuNr5W6yvoAQq+i4K-Ld3rBNbwwG1u-r5W4WutAOogrQ78U25EBzb4m9GvVb9ABs5GgUw3tu0r366dvkgSW5Vv9brQCBuCmT28duaQQJm9umbl287sjQTw3ZuUb1a79vJAPm6yB0AQW+BA8bnAGjv3b2gAlvdbq24wBqcRgBuBFb726SBE7-O8BvcgYO9pudby29JuaMj2517doL65ru9L3W7Lu87gG75QjQIDBUBKAJu+LutbpW7ruXbk5mcBq7ku7pvO7l27gYPAIzhNvW7n29euA7jAF-wC0FABRuQ76G-LuAbu7xMB+7sVGzuDro0FgxF7ne5du97poG4AhAY65Hn+770MHuzbhm+Vv6biO6CNk71oDTv+rnAHBv473O8CYAb4OE8M+gAYCOAt70u5fv-rl26nRoJcB6nuAH6B61glrs+6geV79AHOwjgesD7uCwFB4Qe0HjB9MMWySgEzBF79u47vW5t+5Jvsr-m5su8riy4Kudrw3hKv7GOS-KugrtwHofjAGq4iv6rmK7ivmrgK9auVAdq-puP7gW4W8cb9O9wB8mJAH-vVDAG8QBflQZEN4B73B-keXb4q5YwK-Pu-yZSHxm9QeTL4q-yZVHye8Mvm5gx-Gvlr3kEmvrQCwD0e0gSO7Qeh5yl0+vZgBS++vTHi2-Ue0HrR4sBKAXR88efbiu8Ue1ASgA6AnAYwDUfvGAG++VzQRQUoA-+JR8oBgcZS6ie0EmJ-jwvAUG+MeH7tJ6oefH+wyhuIHhx4setANx7gTTAOB7MeSnvB5Mvyn9EBbvAn6EEyvh752+kAaH1y-yvjAIw2ZlPDVhJ8vK59ADYfKrrp+4e6rqK74emrhK8EfrgER-fvuriR6FucADw1MNWEuR+ieXblZ9ceGgfx+lohAex99vSnq696ePb7JHAAOb5PDye2nky62evrygADwQCR+4dvWn7xjEeMAL+4zveAL5-Wf0nl289wTDT6-YfAnxx5Mv-n2O78A4gA58OeKH+B+uecr-Qzof3L7p5MuPr-p65vfL94GUuAroF9GfAQWq8iufARq-iuVtGZ7avHL3m4WferqR5wBUX60B+f8nky7CoLAd26uf5rwB8o3TDfa4+uin567DvvHky4JueX2u-5eDb6ucqfWX5e5MubbpgEoASwAElUgJXqW7QfpX5J4+BFX-26lfkAGV-exwAN0aheJAEF8Ku-sOIEoAx7jwHvvdodV71uTL-5zZuzX-a5Meh7iB8NetAAh6weLXp569vYXjZ-wf5Qd14+v9X-R5hfhXtl+oeU73K6qvkXo1-8Bl5gZ9YePgbF5GfOHsZ4JeGr-h+meoAIR7mfAmN59TvFn6l6XmR5+l+ufCrw69lfNnAqkifgXo5-QBjX018Hl9rlJ7sArXiu7re8oBt-Lf5Xqt6dfeXoN5FetAY16BA5Ofx76BFUIV68efXlF-OQ5OewV2A-HuV8reW3gG98e+7hd4Vfq32p8KvYnrJ87fF3jd-7eMANeBWvd39d57eQ3357Qf23-uBXeT37t6fvKHg9-QBqM496be+Afd8nfCrq96l4531d4rfVIL1-PeGX8a6yxrHtd7vfnn4p5hua3st5LAUKD29fel30e47eJFcAGtADnlp4ffJASD80MMgeF8oA3LvP1UBaAKJlHp0S-D+loUAR6WJootzwDjeJDEEGh8ObgK9svp3zwF8AY3oIFCBwgKAANx4gdq7OuBP726AA");
var ccPanel,ccPanelProxy;
var Index = function Index(items, name) {
	var index = -1;
	for (var i = 0; i < items.length; ++i) {
		if (items[i].name == name) {
			index = i;
			break;
		}
	}
	return index;
};

function setWidth_smart(id,elementwidth) {
	var width = document.getElementById(id).offsetWidth-50;

	if (elementwidth){
		width=width-elementwidth;
	}

	
	return width;
}

function ccOpenCity(evt, cityName,element) {
	var max_width=0;
	var cc_tabcontent=new Array(5);
	var tablinks=new Array(5);
	tablinks[0]=document.getElementById('defaultOpen'+element);
	tablinks[1]=document.getElementById('Axis_tablinks'+element);
	tablinks[2]=document.getElementById('Fonts_tablinks'+element);
	tablinks[3]=document.getElementById('Filtering_tablinks'+element);
	tablinks[4]=document.getElementById('Coloring_tablinks'+element);
	tablinks[5]=document.getElementById('Margins_tablinks'+element);	
	cc_tabcontent[0]=document.getElementById('None'+element);
	cc_tabcontent[1]=document.getElementById('Axis'+element);
	cc_tabcontent[2]=document.getElementById('Fonts'+element);
	cc_tabcontent[3]=document.getElementById('Filtering'+element);
	cc_tabcontent[4]=document.getElementById('Coloring'+element);
	cc_tabcontent[5]=document.getElementById('Margins'+element);
	for (i = 0; i < cc_tabcontent.length; i++) {
		cc_tabcontent[i].style.display = "none";
	}
	for (i = 0; i < tablinks.length; i++) {
		tablinks[i].className = tablinks[i].className.replace(" active", "");
	}
	document.getElementById(cityName).style.display = "block";
	ccPanelProxy[element]=document.getElementById(cityName).offsetWidth;
	
	evt.currentTarget.className += " active";
}
function initAndListen(listener, id, result,element) {
	if (result.view.signal(listener) == true) {
		document.getElementById(id).style.display = "block";
	} else {
		document.getElementById(id).style.display = "none";
	}
	result.view.addSignalListener(listener, function(name, value) {
		if (value) {
			document.getElementById(id).style.display = "block";
		} else {
			document.getElementById(id).style.display = "none";
		}
	});
}

var CrossCorrelate = function CrossCorrelate(element, widthid, data, new_signals) {
	var loc_crosscorrelate_html =  crosscorrelate_html;
	var local_vgspec = JSON.stringify(crosscorrelate_spec);
	var element_node = document.getElementById(element);
	var mymax = 150;
	var loc_crosscorrelate_htmlRes = loc_crosscorrelate_html.replace(/\-ccnm/g, element);
	element_node.innerHTML = loc_crosscorrelate_htmlRes;
	ccPanel={};
	ccPanelProxy={};
	var res = local_vgspec.replace(/\-ccnm/g, element);
	var spec = JSON.parse(res);
	var new_signalsString = JSON.stringify(new_signals);
	if (new_signalsString != null) {
		repSignalsJson = JSON.parse(new_signalsString.replace(/\-ccnm/g, element));
		for (var i in repSignalsJson) {
			var index = Index(spec.signals, repSignalsJson[i].name);
			spec.signals[index].value = repSignalsJson[i].value;
			if (repSignalsJson[i].bind != null) {
				if (repSignalsJson[i].bind.element != null) {
					spec.signals[index].bind.element = repSignalsJson[i].bind.element;
				}
				if (repSignalsJson[i].bind.options != null) {
					var headers = repSignalsJson[i].bind.options;
					var finalheaders = [];
					headers.forEach(function(element) {
						var distinct = [...new Set(data.map(x => x[element]))];
						var ln = distinct.length;
						if (ln > 1) {
							if (repSignalsJson[i].name == "Facet_By" && ln < mymax) {
								finalheaders.push(element);
							} else if (repSignalsJson[i].name == "Filter_Out_From" && ln < mymax) {
								finalheaders.push(element);
							} else if (repSignalsJson[i].name == "Facet_Rows_By" && ln < mymax) {
								finalheaders.push(element);
							} else if (repSignalsJson[i].name == "Facet_Cols_By" && ln < mymax) {
								finalheaders.push(element);
							} else if (repSignalsJson[i].name == "Filter_Additional" && ln < mymax) {
								finalheaders.push(element);
							} else if (repSignalsJson[i].name == "Marker_Size_By" ) {
									finalheaders.push(element);
							} else if (repSignalsJson[i].name == "X_Axis") {
								if (typeof(data[0][element]) === 'string' && ln < mymax) {
									finalheaders.push(element);
								} else if (typeof(data[0][element]) === 'number') {
									finalheaders.push(element);
								}
							} else if (repSignalsJson[i].name == "Y_Axis") {
								if (typeof(data[0][element]) === 'string' && ln < mymax) {
									finalheaders.push(element);
								} else if (typeof(data[0][element]) === 'number') {
									finalheaders.push(element);
								}
							} else if (repSignalsJson[i].name == "Color_By") {
								if (typeof(data[0][element]) === 'string' && ln < mymax) {
									finalheaders.push(element);
								} else if (typeof(data[0][element]) === 'number') {
									finalheaders.push(element);
								}
							}
						}
					});
					if (!finalheaders.includes.None) {
						finalheaders.push("None");
					}
					spec.signals[index].bind.options = JSON.parse(JSON.stringify(finalheaders));
				}
			}
			if (repSignalsJson[i].value != null) {
				spec.signals[index].value = repSignalsJson[i].value;
			}
		}
	}
	if (data != null) {
		spec.data[Index(spec.data, "mydata")].values = JSON.parse(JSON.stringify(data));
	}
	//console.log('element',"defaultOpen" + element);
	document.getElementById("defaultOpen" + element).click();
	//console.log('width',document.getElementById("defaultOpen" + element).offsetWidth);
	vegaEmbed('#view_crosscorrelate' + element, spec, {
		renderer: 'canvas',
		width: setWidth_smart(widthid,document.getElementById("defaultOpen" + element).offsetWidth),
		tooltip: true,
		warn: false,
		actions: {
			export: true,
			source: false,
			editor: false,
			editorURL: "https://itg.usc.edu/editor",
			scaleFactor: 2
		},
		defaultStyle: true
	}).then(function(result) {
		result.view.run();
		if (add_css) {
			var css = itg_decomp("PQKgBAsghglgdmQyATJat6Oa2sJgCgA6AY2LAG98BIAWygCcBzeALjAAYwoBXAFwHsA3NQAO-AM4xeMfnDb0ApgBso0gG4LhVDfWnEoSgLQGYjOWAEitAdxgATXgAs2ARnbsApFscLTj3q7uXqJQdnbwjGzsIgAeHLHxcdExWgBmsryGkgBeCq4ATLFaSvAKhj5+AS6FKdTE-Er89GwAxC7ELqn5UMIAvkSkAPqM9FAijhT41KBgAEb8MVmOofzWrgkuCeyEAKwKNIlgLQDMp4K4BFSzUMQA1iP83HB2bNaOUprUdEysHFx8Qi+DGYcEMs0adyyvAYAQ4hHy+y03xBYIht0MCmeUXhiKBP1B8BKcDK4mhujYx2Sgio+DAdLmTTsCnohkshnolXZoRg3HEbAALEVafT5vQmSz5rwBDR2ZzRuFeQKhfSwMj4IZCaUMVjEsIVWrQZY2IZNrV9cD1ZLpcbTVpwuIRCoAJ5sVJKBQpGn9ESEKSMDE0caTFXpOCZHJ5MBuZX0ollCqMfyuW3CumhzKpKA0GBKF1gABqzLsUDgUAANGAAIIcgwV8Ql8RZZkwVJ6+npwzWXyJ2HzJR2Nt0+qNZpHdqdbqDuY3e70R7PQzDpqtUir4hT91S5lZEQ3CJRKe8D2ZExmNjETFH+hTg2o-iQ0kwqK4834u+QzEvDgv+m3zXEqEn11VNVQtAk4DjbUvypfB+imfAZgAYTncRxEQppFBUI8kGwXC8PwlALiIDRGCgMF4DsLlwn4MB4BEPhJioDsI2xAAOXF+nCNRCBIsjZgosAAD4wBUWZlCE2i4Ho3gAG1eCdEQFAAXgAImIHw7nmGIVIAXUY647geJ5KKXUd4CkGADG8bskyjGCqGIbh6HEZcwCZTNuCUXgtDGRSGBLC9zw024tK0LSshgbJ9wZMVt1CvEQXWWoqF3MJovM6QrOoUVxTYDLLKUPp8BaNR-QEBppBEDF3RoS9GLUGBJH4kp5LYd4wkxLRUvCOBIjAVihRSiQLNkV0YBiBQB2obINWeD1AncNIMkMTNs1zNh6zgRtxGbVtqGYyLIwATkGnLt3lHk+TAY5ToWJYVjWMAaiehJBTiJhrgACnYCsfo4X7CBcABKMKZyMhdTPkRgvvyHYdgrWH4aeuGAaOnYQeyxlmSSsAXJKOwjjsYgiaJrRIbmFQ7iKkqyv4CqYCq5R9jq6FwQUCx6AsAnKCofgdDdVY2vsJk4C0I8YkyPnmQFx7lBKERJHELrQh62mRGxHZBu6iIwX4KV+BoDWhX6HiFFIgMxLsQhlkbG5pFkcRGO13qomNgZiEGeow1gYlOZ5sRJHt8xMNUGANC0HQ9AMYwSjPCx+CsTHFhyaKzolBY7Uax0oBdL2jzDJXqFsBxnDszwirpEgPbzn3sagVIr0YvPLzYAByVvM4dZ1zwyS9C4c90GDYSVHDbOCq8GVngxFMG52MxcGlclpVynGY06NuI8fsI411Ic48BA4unDYfIainBNbPgHwOW8kC09ZBPDHdBuqMupUzRFLH0-1mVn8yC7FRgDejeMCB4ErqiNGAE0bsJ6s3EM3MMjEj6l2zKCBBt8VQGVnPOL8LQFD4IIWFL+usf5PwUC-ABV0ABst1YqjhaLMVIjDGFwk1pvBo9gio0lmHwAQcBYFQHBPAW4fJHBS3oIJGANBGBIPsMfKMA1aj9BmAAZXku6CwPg5i8IdpJSQTJNHsyngfd2k9BHaP1ggHm9ps55nBPeW4oNDJzwhovUcvBRhbV3IoMMWgZjkxOGcIiVxiFWgNmQih3JAHAMxnQh+VU-6v2ibQ3KYA4CyE+FQC+sJji4l5nwOMbB0nEjJk5Fyo4xDwCvDYORpd8j2Q8Q2Ea5htjsB2P3Z2fV7IGldnEU0UYEg3SUQhcAiFli9XZlg8GBNTJgH4KkCxfDHayDAGInQRFTFTx4ZYlgazmT6VnjgheI5WgADFzk1JLgtYIKUVbRW6aAw4-T+lDKIcnZYdhBZ6IULwAZfSNhbASC0Vi-JjhHTBUVJCihVDsxLFwYg6gFDAEcvQHxvyVJbJ0XAFSYBiAqFQhsgRsxFmyEIHbMO7MeZTJcSZNxrRCFF1qdc5WaUXbAVoI85IfzuUxJCe8h6NoEjQP+UkIFcMdhFVMSMMYjh3y3EYmvO64gPlfOeVsXY+xDiBOOPvS41KcGvHeEeS58jUhSAXmGS8SJOX-AENat89iHxklhC4PJt5HXok-K4N1YFZqQUfOSdlf4IJai9eymx3cwBug9PalEf8KQwRNkMaV4wdwtQOc4g1YA3gfElUS9B080yNFUGwP+U5OknxjHSfV88AkMtfIlQ4XLm1VrADNCi80wASrvsQjkPZWgABEh24w4QTFMKpkELVbffeN3Kt4ExaFAJdRUJ67mJEoJ2dzeqyn7UG31s7DD5EUeWrd-o+22Rgiqdtc0YgsCOiA-EvSH0on-GUMNl7fy+tfYBQNH66STuun+1ZNlYRX2bBg+kEac55RDQBD1U5I4wH0EYU85hLArqGGu5Q8TGIJz3K1VhGGPZYaMEaPZftqB4eIFIPMLhJVcVNubfizxGI9L+Sy1WOMz6MquWXG5UG7FojFseGOphzBlv2stFicJ2I0BXbxciC4Lo0TogxHmB1chsQ4sVUqD96aMxqnVHmDUmo5ho0LDqosQisq6YQAA7HkyC2StNydEMNIOY0JpTSoNepkt6y7sCWmGFaWYcx5k2ttXaQXwyHWxA51zIS4mUIpLdflnzHrPWetsPYBwPpQG+r9QrcJgZOOwbWulYA8ufURgjFGyMkbbDRhjRLqT+nzsJsTTrZMKvghnNTXT5UvIM2qszRBrMNEeK5rh-mjRHrtRFsJiWhhxEyzYHLBmit+u030yN2qY3BETc5rwK2twFBOibhV4F7BWLXcC0CRYAGXA7AaSJ1D8hKh+PAJ0ndtlgFERNgp-YlsM1lZ1C0VIEOioMYU8xgmwlRLiWEqp2S8lFKqU8YwBQulGLOfZZ2BQsxbjmt8gofycBAppIybG34zaTWl35Im-A0OzZ8QEvDwRiPJLSTkgpZSGOFB6R5rjmhyV8eE+JyIPyniKfFMyWx2nPH5EM7dszpjbORIc43cJVXrOWPs7ElrrnfAedo-5zpFg6RHKOx5o8XghTKclNgvgZHJu+clkx+blgYuifhnxudJ4pY2aslGHcWRvHlfJVx7ylF5S2CVMtdeJO910s4zVXEFoz3xWIVK9M1omfWI7Gz7E8USTqEpOxocdrLR3A17u-0F3qO3cTM997814g-csicNwGgxKqVKpVY9Ftor0+18WsXivXKq+j7u1kkDgRBoAZF0QpLUSrpsJzzSvP+QjoDoAKJ0bqGU1y8fqnUFbyeSXpPpeRll9Tw0CdjSvKdzrxTcONcG4kg33nSkzcW-vIqL3LscXX3ewf3OAQPd0YPGcEHXPI4fPQvKHMORjXXN-BHQ3L-U3d3AXFgL3GgfgGafnKA0PHmADCPaySod+UpZyY-fgKpZkDfLNDPNpAvIvFrc6VfNgJfcfUcSfUdI4afRA7iGHdXNAz-KSY3RvH-LAlvPAggrA1kRwbvXvJPZVAVJtQFEfUfZfVJXg-GfgrQ6gXHaMZKRfcvFkZLLtU6Q5YyLfHfffKg2PMAE-eg5-JA4QvXd-TnDApvD3HAwwGgRsRpYgxXeneyKPQaGPGgugxPK4awnURpLxBgK1bg45VyBIh0JI3xOoCrdI7xZIziNwlnV-QSNAwSDIqxSTYLaTY9agRDZDUTOOdDNzQOGQYOZQUOcOcBFpDQ9Q5KAJcVQQ5A1-CSUQpHcQlHb-X-XAxsM1JQIwWbfZKlOI3BeA1g9eSvPg6vAwtg8wjgqMbjPlZPVVAFEVOAtpOGIvAooQoo2HEYzXMQ7nSQqY-wmYnMIwbgS-CjWIzNGws4nYFg7QifBIKfbY++Cw6oVLI4x6NPblJgrPQY9w1A+4sYx4yY6QvwgIhQpQ1jX1SBFMQ41QlPXorVAQ7g3pEdPQrY2vcg3dYwunTgsw0vNgdfbKZY2wvfA-ByI-CpWghPBEm4kQ5Eo3CYzA5vP-K3DE14uYp+VYRY1kn4sHVY-ktXDw0Y4U13KQsUy3AAl4laN4wwD4xSL4mtRU5ghA1w64lUpEj-FEiQ7-DFY8bHSgCdJlfqIDDTPIOki0oY24-XLw8YjUtSNxJ0wwufW1QEHYzsV0xnH0iiCIa3agATGDSCeDJ3WMhcUsWqRicWE8WOcTchW+KgJMimBxbrE5I4U4HVazTjcNLOSNV9ZUlA3GJmBFRic-YwS-MnCnPbTyRqQs-w-AjsqXAKSMHskoUkHyPMjUI8AI88S8Fwqgds3QIwL+aKRoZgZDRbXMsTOcvk+U0HWlcsloc5U5MspeSsu-J9SomLTTKMPJADI6eyYs1MoaFo0aSrdoxFGwI1EkXcGXVYUYROKgHM5bGbL5dbBWRqQElkR7Rk0kJ0d0DaUdaC1I0cD6T6FwI6fkCsTC7CqMLC5rFbWbCzBbJ3KYGYAAFUrAACEABJCinCAiJi5iwiA+IAA"),
			head = document.head || document.getElementsByTagName('head')[0],
			style = document.createElement('style');
			head.appendChild(style);
			style.type = 'text/css';
			style.appendChild(document.createTextNode(css));
			add_css=false;
		}
		ccPanelProxy = new Proxy(ccPanel, {
			set: function (target, key, value) {
				target[key] = value;
				//var value2 = document.getElementById("tabscontent"+element).offsetWidth-50;
				result.view.width(setWidth_smart(widthid,value)).run();
				return true;
			}
		});			
		initAndListen('show_scatter_graph', 'Scatter_Options' + element, result,element,widthid);
		initAndListen('show_hist_graph', 'Scatter_Options' + element, result,element,widthid);
		initAndListen('show_grid_graphs', 'Grid_Options' + element, result,element,widthid);
		initAndListen('show_stacked_graphs', 'Stacked_Options' + element, result,element,widthid);
		initAndListen('show_box_graphs', 'Violin_Options' + element, result,element,widthid);
		window.addEventListener('resize', function(event) {
			result.view.width(setWidth_smart(widthid,document.getElementById("cc_tabscontent" + element).offsetWidth)).run();
		});	
	}).catch(console.error);
};


var server = jQuery( "#rimod-ftd" );
server.append(jQuery.parseHTML( "<style type='text/css'>"+itg_decomp("HQUwhgzgngtGCuAXA9gY2QWwA4BsSJAAIBvAKEIsK2QgEtFbkA7ALkICcQcwGA3EUgF9SoSLAQp02PAUK0mWJCXKUARsnYATEOxjocGtgGJUpgNwqK6rTpjswm2vAhsALFgAeFyoWvbdEIhQeGwQyDi0mt5qGv4wAO6RiAAWbACMntFWyB4wEMkOyPFsAAyEGR6EAEyeHADmqmAAFCUANIRtHe0lwGkAlHJMEPhZhPqGhEYArDOjAGYGPGxMzCCjWA6OTHWltWklnkIi4NBwSGiYuPhE8oqILMnI-OztoqcSF9LXg3csc2jOZQ+dS5fKFYqEFZMATCN7ic5SK6yMBAyiOCC4MBQNiqAyoADWRzhZ0klxkIFEqBg6mQiEC9iwPyUZGBsVs43YxlMqFGfls9kczjcmUsvjZASCIUIYQiUVFfN0iU0KXSIp8HOMMym6028h2HT2Bw8RJO8NJXwIemYiDA8h0qIoeDm9w66xo9EYrEIYFUMqQa1FSpV5RKJQApKMAF4weTaDxsKomsQkz5IkBWpg2u3sQjwHAOwhB1KEOb0DMETO8sAEursZDwJiaZarDggLDgRDS1B1nD5splIxzIfD3nimAoLCqyqaWkETSTbmjdGY7GQ1ajDBgdh1eTj5CT12ijaaLZ1amzzClHUnvUwJ0ukrX08sR9H90MZhsTjcPgBnwTtgYAqJN3gRMlrnLW1oRzPNCAiV5TRTRFyUg7Nc3zSk9B4EA6g0KAC0aGs6wbJtBmSHR6FHGxdA1BdzHlMdaE3OoQGbaEqLiQJglY6VwkiDjbCLUpyjVNFaAxbhV1xNB8Xma08loSMeLSGovFFCJoRgcjaDqZIXTSYBXBADA5MzBIQB0vTm3YTccCfPVhUqfZDlhRCPmQiD0EzKD7VgiIWG4QI9GSWgcHnFkYmouwHCcFwOni1TqlE7IoqE+KKhE41XOTdzwMtLys2g9C4NoYBhjwVA5wI6t8VretGzYohOHbHgux7Pt4qMEBVG67rRlQeB2DCTkqGQeQCHYECzVTFCCp8mD8wiMquBASqQHnRxeALf4zPiCzdJdFYbLAHApqQvL0zmtC-NoQhNoLZdJJxPFZNFHbEHMyzDo0WzRg09NtIO9JDOM0Z4lialODAfEcSh-E4F7M7cotS7rXm4qIl8bb5L2r7rNspGwJR1CitgzDUGw3D2HwiKKHeq0DBGowwBZ0yPq4qV6BO2hUCTKltAgbtaCwD8mEITD6GM6UNjF2mxnCCZmdZt75I5niuYiHkVbMuglNKYAAE5jL5mMvLvEBnXF8AqUljA5AwOoC03bdd3YPHCHcNSfE3XJAaswgAGYjRNnnmDsL6rerGMCDtuXnZ3Jg9wPAAOZLCAwXc-ZdKpPbdOhRa-LgeFofgQ7Nt2Dsjm2Y-tx2463BPzedRyNzAX39v9oO0+ofPPTYH0-QIUYK-9mBc9FADCBgVOstIY4cqJtNMIgABHeAtyIOX6bmMAM5wVcAHFaF9ZgACUcLzLd2gANR0TQwCYMB2gAQTdk72gACS4fgGAp9oIAfhAPIFE5iE3NEva2eQ14byZJ2OWDEooClileUUtEjAAHY5jJ1QMnOUPht671CqueQ5E3aIDZgpPW5QZ4ULVmwDWPMKG4yBmuY6dlRTx3kCg72u40pVFDN3XU2x0hGg9gHQ0ewpguXnqBcB5Jl7QM4MVOWCoGaK0wdg3BVYiL1SbF1KoIADFVHssIo0AldCT1fKyUEBQZwQihH+SgliwEzWuAo9eSiboIQXnItxkDV4eKIGTSBFMCBUxpgguIaCNE4LwZQAhe9iFMFIZRbW7NFLKTMWkz6LCjq-SPEI-U4inJZP-PYIYHpPzel7B0QyEBCAnCICUCALiPIEHcTAm6hAABU3jZGuPaf4xRQSMIhMpnhHp2Ndod2+mw1pF0OmeMWqVcqq05x9Omm0ikQzAnFXJuM6my0KpVRUTVOqJE1FMzmGka51ymEzPxideZKNFkjJKr4DZ50Xk7M6aMqOoScITNUFMj6zD-Z5KecIGRmyLok3tHLNBAA2KYyLkVLnEiuZ6Mk86VK9APcI-pW4u0Tvefu5wiWNxHi6D4YMkjFn2KIgAhExag7AbSVlFNGWMIB4zVFDIQZl2ANDsvIepC2LoGzDE7IK1lIrRiT1cFk7K-StmwIImONKFRzF5ElDxBxo4bHgkahYZVMLiZXSKiiBFCsmZai1Ca+e1cpZy0eliNgtZ+LPLTHChaD0MVPUIB6uUQA")+"</style>"));
server.append(jQuery.parseHTML( "<style type='text/css'>"+itg_decomp("PQKgBAsghglgdmQyATJat6Oa2sJgCh8BiAJxgFsB7AEwFoAzAF2rAG98BIcqEgc3gBcYAAxgoAV0aUA3JwAOlAM4xGMSnCEkApgBsoqgG5bZHIyVUBjKDtrWYvDWClyTAdxjVGACyEBGYcIApCZeWvZejH4BwfJQ1NTwvELCcgAeImkZ6SmpJvTqjLSKjACeOlpCcJQk3Dp5BbQGPDBQcIU69vri2oqV1bX1bY3NrYVWcr1gVTXWg4VNZKO0cOLkWmQWfTN1nPlDCy1DWlDFtsqtWwO7Da5hvBGXs9dDxdqMFj5T-U8ce4XKAC8KmBfAAWNImDpwLS0ULhSIggB0oK05DmDCg5BgOhKQgARAB5ORaBAAZVaijxABowAA1dbUVpQGkAQUWOhpigpRXWMHoJgslB01SERF8Fl89AATFBZABffCgSAk8RIbDqjWalC4Aj4REqXi0XhkOjuahaNicBKKOR6XFOKAAI3KtAsuh2HDN3iiQXleoNACFJFI4BReJauDx+I5RBIpCE7g8wAAOHJ+-WMXhBxghiOOyipIpeOKUVxCeCKLSMEGZKWZXyZADMmSI1EdbbbJiVjqgFgA1sbKOI4NQhFDjiQjSQ4jASYwABRSMD5nOUcg0oj0RtaHfJsAAVkCG63O60e-8QQAlNIdZxu72ByQhyPXUKRWAiAAxb-fgDsN7wTh8xIc1J2nBJxEmAA2CErRgG07XLOBx1oZ1KH7AVukUd8FHgRh1jcDxvTAKV9zTTg4XuBFfFTWCODkOIEjgJIQTrdJfDY9NA2DdQBC8SgzDzAsixLMswArKsa3SNipLAZt0iIR1HSlDjfC4zNsxDARe0MC12HopQVDURxtD0XSTGcPxYIVVEM3DfTBWFEhRSUlSVPRYoymBYdK0YdFbnhIR8x0ah1MNOAoAMCNrVtKB7XgcdIXg-5SnKPpoUIzxPgvGIFTs5ZIrAcQdAjBj4kSPxURMHt+0HYdRw-LQoK0R0tH5ThHPfIgmpatqTDKpiWOETLiJypLTk8tKvgyzhuD4eBUOFfsikYHgEWEKrZqjBa0OWkkGo2tEtvmuBaAS+AYWKNbkjoubozO5CLtofabtyWJyuYh6UKu8xXrCgqouKsAOgjehhX0Mc2r8jqsJwyg8IIzgvU+UjyI4FDKKTKC0fw1JCjsBwhDdNpEbyg0AdQniEH02gqABVDqlA2hwJgSChHkkxaFuR0+xUBmQPWZmZzZuS6IsWHnLAXCSZIEwYsQ5clr7AU30logAl8X8oMbOX4Ni+1duV55CgCqigqFULjujZJZNEYb3sGm3hERfdNrJzMKcdKmAD45AjMxLGsWwOkJsAsXicp-oigxKdXOBER0mAjDzB86pHIRXC8FRjA61XRSlZMnS0KUo8i2OtP4wT9Jqx9nwazPs5VpyXOU1SLK0PHaHNQVp1UXiipHdZEvwd3DUrHgPnL9RQfBhFyiYarU6feqM6z-Cm661y26Axn1lXxud4FycVykchRSgUEL4vqTMJIbDJel-DZZH4heBJLQAH1x5ID4P4SKL9KY2osiTaHBxZ3zhgjZ+Cp4ByEkEQN+0IhJHysukbCHQWBEAsNgxetVl7pw-PQKCRCiH+UTAiaYVwwF5w-FfS+oJqq7zAsLSYHNjZFBgECPwnEHYVTAKCREyZ6wyQEUI9iPDIwnVeiROiGNyF+GRLfe+QhcbQwVF4EgEY7oLUsiCUByMhC-kPCYbRp0T5rgUfubQR0ODASZgYkQjCj60F0Q2NBQoPAfgAKK+B8T4v0SoADCBRYDQjvmqLUkSonakAv6D2jlVhwBpPlBJ5A4CKAjA4sauxZ6QwXjvQsgI+F2MFvmN6o9aahNfG0UJ6wtFQELFkqUAQ6IONTDESR1sRBiEkDIF++VvDaC0CkoUiSMn6SydEWQYAZlh22mYpWK1roiE2rMuZJ1FroT7M9AhztXZHQVAAATWAkKAYB5zcEaURT4UEyJpEvBGREgoakXU0fpT01yhDJmMZweijE+H2w4AqCp3AFrPNWq8+pVysrcJaW9D5MKQRTP6eTYsOh6AjJ0IkzJnykW+itjtRZP1qKgNMZsvaBDfCkvmV9J6xK-oEtOudaEOyDrWXwMcrQpzzlYlOg425biHn6XyqC064LalvN+ZcrmuKOJwpMAi4i7STAKg4PlNFGLyapOpr8hxoJkwdM6YSrZSzfp6JsUahZJqXrmoVWS5ll1VpmrRpa2lLKbVo1VZixJyStWjLSeMqVNL57rRVZwb1aSBD0BgHfMYWcQq+vif69JUaY2nA+NiFg7yyUhuSGGtV5N1DDL9VitJibDRFojekiMirPgCKgg2xtTbfwdK9eTRgrhKBVsDRwWtfhGyIkbEO4dI7W3hvbRonc3aa16p+UC8dHt8jdGne8hxjZnZNs3S2-N+Vo1GBXbq3FjYACcg6R3nrHQWj2yhUgHt7Xqg1O7yaViMPHEtYyZ24v3FBREm7m2XvyuQu9fawC3LPee4dhrTFCDjH0+dV7woXWAw438Aj8XwYGSSZDuLkxSl-X+ht27OBto9roLQr7sOIuPb4cDEHGwAfbbcHQ+730Bs-Yi7Jvac1QzzcR8NRaXFZxAlW9jxFGy-nwwRojGGO2UEEzG6gigROrtxdjWjEGAMCY1cpw9iL9WXqVASeg9BfIZMAmqygxnfKoRKLQSt2rkmWZM1WGzdnoRPOTT211uaUySak5pqzLnHS2dkx50tSSwCIic9Z4LLjO1hY-dm4NPGQQSbo5Bnd0WgshcncMhzkWsuFFi4Mqd2qvPcaYEIKUUEAvOaK7ZpdJAEtloK4F+rDAhxNbKzWirCJGz1oI1BaTXrCuub3Xl5Njm2tjaThN8L5XkuVf4QO9LQ7asxdsze5rEWovTdi1t7rSWNk+f3FKdb2WeQUfy7turrmX1YcO0G47KW1ODaG+d9rQHrujdi19zzPXFsIigqe1b9HMt7ds6Gdz32IfLCQ49rjgPDHJkROhkbsP8Lxxh7d4rD3-tHfuj55MP63vDf47DsjV3JutZx7ZyneP5sA+e0t49+51MXvB7TtzMJvAKe21NrnAnefCYR95lL-W-Nbo+652T8mQJKexxtuLcnheKe2wt5nQOQerel7FrT1gMWK4u-r9F6umeE5S6dsdCpFTgAADLJUUJwGZ0TXeRNvHEw0DE34RkoAxCwKh7SAoGokWgPm0Yh8+mQM2WQTE0sNqyyqNjpUOOafKxlNtYP-XFZC-SChlB9xMrofQs2TABxgFYGwBNHDOEYYUzhxSmEM3hfLOKKinSRwz90rPSNZXIoqTnsJ2kmDrHLczUsw+n5j7KZP0fkXybe4qFAEfJBkniFdPQCM4K5xCAAOS791ghNvDpnQ5zAeUHg5tvD-QSnFaKesFYOvJUbahzcPzDqcaBZILtURgHQZ49WAIIA4QZMT-QWFmEWPZUBSPIaH-GxEpZhCCSYKAmxP3XsQPBRe2G3fKMpISevAERvZxMpfqf5ZiJ2W6eZTPXpEabKZFV1cxM+W1ApDhAgsg5cJvYgw+L-EQF2TIf-TBbBCwEgj6FicEdiNGBAoWJA9mCgqRbvag3vDjOgslBgpPXBWuFeMABudeZgxQYsagCfWSNxWSIgD-FFD2J8VwPAlgwgpmTgv5EQ8g+FaDeQ+MRlBmVcRgqleA4SIpNgyQ+wmAoQMQpFWQrpWMBQkDY9GrOPDZVQpg2xJeOufeHQipSwxEXA6uJIzQzcUEegPIhhLgveHg-cPgjxAQnBXQ-Qww4w2olsMwhUJUB3YoDJN3No9UD3YqOyCMDoCaVKYEAPH+cocSdJDwHOBUIUbo-SXolKLyIQbuCgawEY5Qc0P0SYg0GkLog0UqUgw0cPWI+6XRLA-ALYzMIqHQOyTYi47Y9YzMGkW48MB4+464s404+yLvGjKxX-UQT46xOSaxDyThYEY9fFBUDoKY9w+I7wtYl4itEqaY5KFaOYsABY2oZYsYv0N42gIGLE4qK4-KIGB4uzDkMAIkoUUk2E4k54-Kck3E+ErvZ2ZMb474wRX-T4t2T3IoAwQ0QfOpPPQyQvTQYvcyXhNg44xEdfegYqGwZGHFJQ9DMpGw-wjggsAJcAaAPsC0RQboC0MjNYNoDJAwuAXfasEgYcUkyQFYi0Xk8JecY0Y4asfITRRYt+DJeAMAMrB5WJCUypQsKUnQGU65KFGVeUjpRUvwliAI1U-pdfOBAM5meEGeSgCGMAaPCIdMWM6UsPKGJMlMkNDMjfLfAoHfMAPEPEQ-fWdvU-AUC-SWFcLwNUsAAACSlH633AiXaM7NQA9y8Bo22P0j+BYOBDw2ahsTkUChIlAUHPoExGxHtEJGJDJApGpDpAZCZFZHZE5G5ErDIHal+BuHkTkgCA3jVnFElBlAOONWWnpRKOpTiMWQ9TgMvKZUehZRvLRntVfJhA9XZS8Dw37PYUBGBBoxRBsVUWDnsEcGJifnRBnKxBxCECJBJDAHJHSRpHpBAnXLADZBaBJK5HSR5F3LIQnOxkBU6lPIlGlFlFFL2JS18FKPhXHJjzw1ArAOPkoE8NQXfyHT-3KOfOf1NXWifMhIfN2WEtdSfxvOhPcKfxtWkvUQHQAv3JeCBO-2PVASYqTBoyZLAo7kKEYGnHSSdMYPGBUDsCBGIpj2CktmUsKDgrnKEBwusHQrXIii3IIp3L5D9C8AESUsHKAoUVYs4E0uAVHNgtnIQrAF3yQqXPSQP04HAuryJjnERlsq5kPPXTIpoTFEoovOCqrCfiKH9wBX4oT3fLvPugTw9QqoWkkqdXWjCNqq-MT1jxfi8DZz8oaACqRClA0qeiAQUV6psWnIivnJipQuXJcswrcuws3L-23N5D3MHNNiTEypPNFDPKoshAKsFhtHQLFNKqJXqu-2kvoNEoOkRCGv4rquWQ-JpVkt2V-J-U6pUq4R4KMT6pZQGqRCCrSvssioXOQtQspCmsZBmqcrwoWqIvYRWoRGsvWo-E2ryvRh2snD2oDwOpEpNXKuT3j3Ou-yupkuaqkpqpfJQh-PKXwDkEuOBiLlhPxJev+FUp4PUtxriI4tPjUtAUSpDkcAACtIJVB6AShhDHYshbzyBxaUD+LXFQFW8DYlY-QoBANUgGIRwiy38iA4hfA1qEq9Ku4tAe4S9+4qgZpGjwAABJAAFQAHEwBNJp4uynaYldRlbyYvY44aQPaQwcCqZkEmYIDkDxL-LmbTrlrDz4agJsiCEiBAlfw4646EavxvxRa+EZJvCZF2Jub9aDKKRjKhBxA5BiQf4Tgz9wFlEpZ4YZY-Rvb1Bfa44+IBI+So68FkiPwC4i4S4YYIEH4q6YKX5a630PZB6xALBdIU5W6ciO7Wou7X8uofwlFIFq6X4lQraO8LQgxM06lnbnaPdVpT8Bl17npVanJm6OAebILkrl6OB5aqzO9bEm9HI9AJhgRKwGJe4z9Jl0MXD-B6wchQjxC6IgiAHnyqC3CuAFpvqVI7qNkbrnVGqyanoKa-R97yhD7T9j7bRqg6lGB8xqASgnBNFmB6k5Ce8HDBpsyltf74UYCEyY9qHU7PooSI9diXE-coh2VUHi07jIs5ADBGAABVGADWrqMwy1MBvpBULhiEh+lBXijBEw880EUEKCNithuQIQfgxR6UZR1RooycHzLR4wsUHRlRtR+IoxlsJRsx-RuhpMSxhSaxvR+gjmixBI2h8PcSi+0OaC1KyQp+qAF+omIUZ+ysFB9e7o7wY4FgAypwLwGkaR7Y3BmgAh2J7wCMbxqClK5+WRuw1xxg3O9Jd+ucNRgJoJj0kJwJsJl+RJs45gBJiJpJrwf24owpva7QNoduTuJKj07Jxh2A0iFk-ZHgwZyW6Wmp5pvPXYgm4ZlAkZ2Z4SqRxpupnwNoLwV0eNagecXwIVPW7p3mq+-upZg+pJ0cNZjZzNbZ3Z8+-Wnp3xnJqMziwhikYpzp2xtMhENp156GRIyel8cilRQy9pkpmp5Z8MAygQc5yzFxEoYkecKUBAAAahImuZrjTjoABeeaKZ4BBeObQaSecihfoBhbhYRbAGRcbFRejoxeys-ADE-AABEU7QWTmzjEQ+HGBgkdA7c6aMnbmDnenl68XuHwx2X+GraOLrAeXWp6Sbn9nL7BWjn8BanwW8HUmiGs04Ij97QuHXR3Qy91hA4q8BX4BQgyAfmEDAWXmcW3mOBGyGWAA5FkDsnetoj3VsCKUqAU4yGDR0dBSQM-XRMiDpKB0ENGE7dDNpdPV1XRWgOVBByhhEWgMNiPdYG0Q23SH0ciGZBUGZfAGZD1s5f+fkgvH11M4U0vBK9hg8dDHzbGVpXFCRb63wet5wmlWN2ieFNF-BGlt-Q5PgHseF-cfcKkUiEdsdqkZ2HZvIXJYGKGCyIF4ypEqaOQHodYIwWgRsGy3rKrNGVoRYwU1MyVwvMAQ5UEDJccHgEY6NUMHQnN-NsAB9wtlEpOAQAQVqJ0vSXOEmNofEcs+Qb1-uJ0f1nQ8+6tuN8NlLZNuiD5oQaD+FZtiQ6l18Pt50cQM-SQwOoQBikwfd7gQ9p8VaE9s9i9i6K9+AG97OctswapjgemeAc0VIPwaZMAXNx9gt6gT1-+N95fJ+Isn9hEMs-qQDxwYD0ZUD+IiD2RKDsQkwWDsAeDhMCchhlujQ-5mhQ5NDjDpvLDg8OiPD42kyY94yU9894GMj50uASj-CajtNs-ejweJjkEFjtjh9w5bOXuYyVhe2GZREYUP3c5dzh5TOZC+cdzsAb2EQa5w5c0BWML4R8AQ5Kd9s2gUDYQa8TgZ97j85jNEKML1gGAOUS8fSGZAzwvA2hWAAPzxEOVYFi7ijlEpHzSy9fZy82fy8K8vDfY-ewZK7EFDHw+Mgq+P2q9q-q5KEa--fgxa4MEhe8Auby9q86545Xz67K6G-G6EFG7q+Lwm6a74zVX87kHi4U5BAy-vd86O-i6fkM8UHO-Y9PfSp5j5k1JKHoGnDWAyUI8M5rRmXe7XBrV7RmTafzqPaI60AAA15xhBzReAMugfWPflgfKBAeOBgfF3+hNBj3If5xGx9xj1Yf4e0fEf73bdsLsFGYTPXWuyPc1VewLA6A1Wa1vqyGb6H9j9Taz8OAWfIiY3q2XUd2Ja7UaV5OwqntKr8nv99kFVu227NxjNhfoVRpSK6IvV6fNXEd7zsbjqEizrrVKVQE1fsE6BQg4gz6wEJYhBH5UqjeGfYRon1hvYvBGwa1ZecjqBkxqB9wveFVMWiBh39wFVgGZIQ+-66JcnBZnBE2pDWZJgcPflJCo+PmY+RZ4-NfKqjrbrQE9eKUDps-PzvodeBf7rmrkGDuE5jf7ezfnJK5Hfnea0-fjM9zfm1OGpFJW53JfkyvgRnYpRFAd11eP5s5yBEQ+auQzp8IR-E4jBvYK+7fTfQIneXf3kPHLdw-G+FeE-qXRQAh8fj0hDy-B-h-Z-1eq-F-nf322psGa0wZky5553flt9f2oraB4re1aH5PZPfkQ63qaNCbe1-K-Rc2CFCD4ichSZkStr2iOKq9w0R-SfqP3H7D8K+ukE-pXwX519Gwl-T9g32LLP9d8iLN-nKA4CwDK+arBAVAAZj4Ma0wDcZu-1Yay0LUtDKEvnzxr688+FqAvnSiL7h9OB7qR6vCgj6Sw9kZRBRlgkqK9o3eMdfItIMKISCVSnhaPrpy-5yCiC+TOxoUCUEwCgAA")+"</style> "));
server.append(jQuery.parseHTML( "<style type='text/css'>"+itg_decomp("PQKghABAVgigrgUwE4E8IFUCSEC0EBuAjAHSEBMpuEZADIQGw40CcOhALAFAgQAWALvwAOALmDAoAR0So4AS2IBjAPYBbbhEwA7RQBs4AEwQBnERBVIES48YA0EAIaKLBucq3W7juP2UrVQroI-FaKNvaqCFpwnvYARj6+HmFeKlr8SMq6AOaZcEKx5rwIigDWccoAHkgOrsqFBg4hQnJlyA1yDrrK2Q012dkOcUGFlsZyAF5DIyn2Qpm5JsZxDkiFxghBivzToeEQG1v8kdHrunJGa7MHykg7w3texi1aWu3X98aFvln8cgUfYqRTwaAAqygIcgQAHdHFoDBBVMpXAAzND8XhyYwQDEISL2fBYuT8PiCUTiKQyFDyJRqYC4yKZXRBJDAAD8KJRABEECiHHBdPwALwAQSQnV0AFIyABhAASm3wwVaDmlMuMDi0xhwG3FKIAZCjjDy+QLhYQ8YboSb+YKhVpbqouvqLG8kAAlWpyODGIUAZiElX1cWyMqytwVtWQQoQzFjseD2VBCEq-DglkjlyFKN0TWDt0uYe6SEz0YM5YrhsUpaQ-r99fr+ta7iLEYQUdr7C73cTraQYfSUWFnJHBpDydT6YQA5C6Wzuf4+aQhfD-fcs+FFcrKMUM6HdYbfqbaT7e7n3Z7Ib7NrN2foKPv9ETE7TlhvdpzeYqy+Q195tuFRQAFZgOAqt32FdggKgqDjxbVcIKFAB2FDUN7Vc5WUJVawQIw8OfFNXwQTDsPnL8C1-DCsOjZxaMUKsSOjMg4mY5i4K0PtGNrICeN49DixFbY5CVIUaBoJCRwIydLEEv4RM-RdvxXAShJEsS-V5A0d1k4SEGzUcDWbDjVx0+SDP4iM5GyXhzms4dOQcZgaCkoi5Ssmz3OHBcl2UyzrNsgQhUaAweIQBj3IC4VUPoWh2M4iLPOQlCYucq9VwAUSQTJaxRctcrHJNCKnTLsrIxSKLXYsStubNCAcAAOZhmCraruJRP12sMk8MqymrnDEsSLKQAB5bDcxQIUHCm6aXKnUbkHGsrE0wVRsmGoQnGJFB5qQRbnOUDbFC2nbFr9VLQ1XABlXhamUaEhXoR6ntmyxrtu+6FOW1b1s2-gUDegw7tE-UDt+-6bsB+6zv1DFWlKN4bABoGgMDEHOQ2fhwSEJH7poVHlHR4IABleX4HHRNR11kE9VwfXJ+rAw0MMhBQcU7OgeBkDQAAxZQ4HhJo3C0OEEWUXEkHMddxQSXwkGMABuCAidaKINgRABZTBQQgEBgE4ThQCVhwUD5klil0IRkGMTgcFtu37Ydx2ncd3XOGIeQcHNy2kE9i4jGFgBvTgAEhXGecazAdN55c4ABfN2Pa95BffLKIcCcRQljkB4ICD4OlOQMwaBj4O9H+MxLG2AAKGgIFr+uAEoS+KTyzEIQMS6dJBsjkLQzDYDuQ+opAczusxMVTrQS428te+yIvp+UcY-ncMwhmMLIfAQEvoQuDE28H+P3bkT3Nm9nAxmCXOQ67nu+7r6falcLR54fkOC6QBeh58c43i-4Pf4IFPq3CAJA-QlxCKmHARgLCC1XhAKO28Q4onXDqSYCA25iUlCXc4xh+A6j+kESO7gkFH0TmfZOeh2wjzkJUEQcReS3AQLYBOJ8k4+yoasFEtCRAOBRCECWec0gbjMAAIlESXMOgRjZmHuEEEuH8cAqGZA4IQGwzDKNzGo0hrDT4W0oUELhPC+ECOvqXQxn8IAVAxDHMhbCKE+wmNwyoZjd4GH3qArBzcEAgMIF4kOvhRBvwAaTf+Qgl7EiFmvOIG99AhBLqDI6f1-7cMFIXEUFsbpVx+kkiaNAm4QENsYfI4S7hmEwOleqOs9bx10SiTI6QzETBwL3IwdDPHFzjvrA2PBtACKcCvYWMpEDW2dmM8ZTtXbHwIU0IBYddgIiEemDelijCmkFBAMAcgAi3B2OkRevcBE4AQEqdIpgEEkNsd0w2mA0ijImQ88ZUyPZGTMVIiOEBe6AJwMMPwpQS7YT+IoLo6dbL31UH7eRN9Vh3xwIE-uxAyBATxIvZeUSICWAXLpCBhEWnwiHP3JqRLB7B2HqPaE48-ZRAUU4UouQ+bwgvggS2TRiFMpZfwK5ui3HZGCC0tIPzuhlDMUEfhZggI0GwdC7uvccCiv4P3BmlRJFYmkSgMwvyyhcsNurLEihITFK6Pcx5JqHaux6RAE6xtsTPJPjyvlw9xpmPCWi+BzjcIQIOv-eV-83EeL8ZK7xvj-F2PTs4AsQsIDTIzhG9wp8OxvNVR8zV-yQ6KGWbcMw4TDnIFRZE+BmLBZKk7jC3uZgyCBjrlWzpwcZ7P1fsQZFqgo1NpbXiKNSEUXINQeMCYGCOlStDTG5ckbo3hpHXG4RQ5nVPznm3dtFAyBdvzhVOFXrglku6BS7wvgrnRp8H4NQgRggIGdREwZ0TYlb09UEmtPrgnprlpmiAayAJ7o9icOAIqsT4LwSgIhFzo4hzrXO4Jt8y3BPeTIqxQrU2kp-r3ftnTQ2fqjR+qIX684uvzffdem94ldOmahojGGWkhGbXncD98a2PpWVm5QOakAlyKSU3Z5T0p+PsBsU9ABieq9UuzVJDrg39hCgHbIcLysw6ZdBV1EY0HYIgJO8uAD3FE8sVgbHoOwWw7oaC6AAOLDS5LoXgIoYAigAEIikwCKOz9mRQAAVxDABQHKIC1n0oOZFETbzVm7Nebs5gSz7o7NIVEU3Qj6HohoZPp+sjeIcDQhqEIb2Z7XX30LXJJBtbZ0vzMAGFxFpm2FajewLtKGMOxZwPF1whJLhmKo+KytNaW52RST29B3rEPAPa8ExRfreAHxcfXN+lWYvTLwbMnAKD012F0cRj2U2Qhhuy410t98B7Kq6Ra15xTUu7KEyR6I-L3DYiw+e9FWXsVRbi6Roy2JjtwAS6oJLKW0tYby9kOVoTqAVf1obeVoKrJvARLamrVXpmvIuxly9+Gcvwv62LXwqhvW-cRcuprO6ITIYBzwNmAhgfZFB0d6LX6nuncDsJ37-Jd0hwJwqsbuiZZJBnbPfLZX23FZVeHaDXyesprzRejFmwi05e+W1gQxCkBOl0CWmVWgL4gNIMu2jz7s2DiYyHQFKpdBE-BZChHuKugg40UOXNIcksIDiKUYkOAfTJ0OCURniCS41eUM0h3PsnfbGIUB4ONXtRe51JsZ3fucvB59y7y5+tg6G0uqxspmh0oQAADxClAYQITpLsLkrMIScYDwuXTJZ+4FhJfEir1-qUcvHtS99wL8SXCteT715ELwYeLefmV77gM3SZjIH4JgbcOB99Xc7cNr4REDhSinsyGoCAKCJa4k+WkewDgICDYQQgXC2Ip8MIOFfYolhSet575TnA7hdBoDzoN8ty6KiVDQRMUDijH84qga0gluAiXMBJdCTEFbZ4JwftB0ZLVRbVHgB0VfdwA4RPEkJfT5LQIQHwCAUPE4fgG1PWXuFA-gCvQQdwfApIC-K-G-AJXFL-dIL+WpQ2evGA4WdAocKuYwBuU-bvAgxXIyS-LQa-araHYDS7eBPDOJBHddCVKVEJMVCAcQ+XWFRHHAJVWQ2Ve9BQw+fWIgwgl5AVB0QfPgtINnetX1PeIbagFXVQINPrCgbncgz-fFKgn-YlbbYOAApvHUQ6UAu6FLGOHbHAnwDQjwLQuNHQwiPQ2A2-YwteA9CwqXbHD-fBSgxnGtFwoA9w6XWXR+dnBtcrZtawmgngaEW4UoVYBlAwLAi1BPA7JPbmOQSwFBFxICKgdgWuV2XwvAuvHvEQEQd3ZpWbH0PFN0Fhevfwzo7ombPwPo3uN0MxD+MJL7ag3RYRJkelfIMxHXYFPXE3YnMwCFcsKFUOJNPnHggXWDd9E+RYrIZYoQCAAAPmq3OJyDyCEBezMVHlZQgHlSUMV3vRrSoyVz61x2mXuMuJuLuKlguMeJexEF6Pm0BLBIeL5iuNuNhPSCWIhKb1UGmQLzgBBWhKaTxTaTMF-1OKUThMuJwDWK6BBORIyHBIROeLzig3VRgz+RLleOj39zvwHU+LXVvW5OsRR3-kH31zMA+NuxJJRNpPyHJOQCBUpOpNRLpPROmKqGf1f1XXfzFKBMeNBIlPhKlNzAYV0AMNA2IGyNAX+3lMlKuMtL1KeINM2AOA2ip2DhQXSGf37XqkDU1NJIhI73FAmHXDlI9i1LpPtKNIAGodSaTbT6T35V171x9Q0QypSKSjSbSySwyIBIz0y0TyNlSfwfZEdEyFifS6S-TJhAy0zgzSz9ShhNhpl7V8Ep1Gk85FEGdw9iTkynjUyoyFTazDSGyLheUmz1xp1Wz1Tkc1AOyJ8eBLoXgpjngSg5BuF9U-0ghF9aETA2CuzpS7hddqtnhJjk5Wjr4Q5494D2MqlSD7ARR4RMgLg08IB2BTSIBSDs9OSkIgIJDOT1jFAq4B0qAKAzTIskyazuyZT9zJt5zkADzoKfYVjxyCyeSCF-1+1YkLhi9gzigyhH8ag6g5U6yqyT4uCVgyhlj4RlSn9jAIYx4kCMZQFK124itK0eNaIFFV08LvRzlSAl1zC4yCzpykzsLygqhOLlAL4vRxLMyocBVSK6U8gKLwj3ETCGASVJdGdVKnC2yvQfR50+Kc9kA88DVs49iZjAMdFAThLcLJKJL8KwzLKSgRLqgbLFBhLcJQitAu9XLHLrL8KxKCKBysKfLRKXK3KDB29h4PLpjaVyKDAWknQpNzKd4IiIBFCQ51KzA0qV0kLOT2ASVFE1y0KsgMLNSrKQr8L5kHhFkBDGNjlTlMDBLdEFNmU4YYKlL-VO19KQMOcMdm1erIMDimTizplmqWg2gJYRrZkxrZ8fZigE0YccMK5RdssMjDCo1eKmdJrmhWqJqPZRqdqcB5gTku99rxrqtTqZqcA3hUx0tFrHAYl4cb1y1-8UqSB6pl0MrQFiB3q+LQ0LqYKtqWrxrDrLB8BPZO8mqpqdrzqobgbrr8EO9sIB910mLiT-rdqT50aQaTkRVfsK1ts-rYaZqYbtq4aQi852zqA1DAbpqAa9qibk4jqwbEa2rqcpDUaxT0aSagbLr4bwakaKbfFqb6bSbiaaaDqmbHTNQTqGaMboFZarqQjgDnTGSNUTiBDYd7qr0CNJDGcZDpVYUVCsrEd9bg5fj5C0rCbRa6bMaFa-h+B1zKMNsi5TCNJ9KJcfE+s3rl0hTNj75M5Nc0bZbubabCziR1yo8XjOs+09LPjhtNqRaeaYKo9xbgakR0heAZbraJYU7E7Q6cAUBqFXEUqoJB1Ibs6cRdhi7lLMEvSXTo7+1iA4x9LFFNFVF1FJYVFtE47q1Odfry6k7l9eBjSerOqo03a4jhTzBzctd663ToRPaYiKhdADB2KBKE7baK7+BqrsrLhZjMjhsg6t6ERlas7B6cQEQN8GTBq1aWTgM5j1qfbjcwUK5PJJ7h8ahhdhq87obU7Lr68nTT1WyYqFK4rlMPD-csdiAx7Rsa1urX5a5eq17LgfspCa02yQF0GJyCDUcN75aK6-7k4AHNRT06C842TX67Ie7G121+rTTVcM1LENcBFVqTSNriB6BaG3ao1OH9LOTadlAElc8t188iQi9Obg7CGfZiG3grEe8pGlF0xLAWzkFug3jRS8jN9iRh7VAzR-h1z1iohGg5Y2D0aFHdHBQ5Bq6PEBGj7B6as9GQ6DrgTyG1HGcNGB786LG-gnHgbgS5EgGQ5OTmAvye7a4BG+67GvG9GcAyBfHLqXGgmUr9arb7HvGT4-R4nk5EnnCUr6xiA-Qy7zGYn2AsmfYcnOSkUimf607HGFGMyHA8Eyn41Lgz7onLHmmySdiDB1yFG5qGtEKUGgdOSASanLr0nmmZHAnzFqERTSYomDrMhoQflLAZ8zFOFLFrFeBkqa6uTu03Te0kNICIB3RQQiY4DKiSRwcsa7gjTr7K5hdbmFngbbnmnJbBbLCSV71bGJHs6L4Hbmn4bcapD8aS5KafnUn87XmFGmaIqBb6chanDvmojfn7HoWxnk54a4XWbdbD6EW+sIXPHFmAWFGpn1mLFKGBBnnLr0XN77GyWyHVHlB1H5nUWoWSWMXpGe9AG5GOCFHH1lH+A2niWiL8H7GcmKGMU362WRXOmITcwmm+n2xWmiWXmOW6X86unDdmn+mcWMG7IksUqsGkLhnXq1CLVbkztTHJHAiVab7mStUbD4i7DGccBf8-8nDN1aKJ5-YaUyLQH2V2xo9A2mgcF0cm0nrx6LS9qJQehbrhdhDr0Al1071fs4GH6kHv4HbEN5iRrY3shzr824Vw7rdVgR6siudl1sNHnlqbs-r83C2ugehi2HbpnJXRSzbnao1itglkigFgDM5iFwChAdmPEnIJCvXt0fXqUnXL9hHaLNhzg1EsQ0aG282m3vt7aggVgOFugNh430VE2dbKaCmfaxC67Km8YnCsc2Ar3e702D6GKnDPraBhbMa12Y2N3xSNwD2C1a3i1+K97gl4GzAaGciH8QGSjpyDKR4RHYjOaP332v2yW85faX73jWXd7k5OSmL72-X5KSj4rJMIGctzb10wPWGeruGe2wPImEON3G3uhvsyX12mP2Ckh6LXHmXGcGdV2GPWPm2GWe91sFdQPW16G+rW0aNGH6NGM+OmPqsxhJhdgrqzEX2SVEdRmkOFPpklOpgHhjlrGTDQX8WYitPoFEOmVe0VPzt0rF7GcTOV0cHc3P2dOPY9OVPYR2rjOvm035O43dOTBlODONgTrLOPOQvoQwv+P3Ogv9OghFbou3OT4IuEutAvOkndmkI1L7OzBsuCamrwu4ubPpnKasHnO8HXAYuUvivIvgXEj2KKvzOqvkurPgu0vSvMHI3muivrODP0v6vBSU20b+hBgc4BPN2S2d31mZPERqIRvJMxuEubp4RHbLdVBtRfA4BXLVt0Vx9g4tudu+94Fv6au+u1va1BDMt-2LLYvzugEVuenpnq3D2HqRDWSG6i5SASVVaHW4NA811tveBduTuY8Du+YjuhJQegNQ1Uu5ksQFlFPavlvNQnuu84f04D0J5T1Av7vPZUeLvfvTu2v4ugFnS1dLFFc9OctPr8vR2VL-FwegkcAUYkW-OxSMfbPS5ZvtRqfojGc6fMv-VGf+SpzcBWew20HiSMfpmKezAgE+eheTDBfg5KaWeNPhu7Pg0vTYfkegEMvuen1LFlnFfcmsvfOpD1enDNP+fa7qmzv2v+3ZeeeFe4ucscPHPPryASVKaOanOBSn3pe9edQDe5eDgTe3f6fCScuQEPXJfXWJe4yKureg+8eBulkjfI4I-Dmo+IA4+te+t8-cXxeNfmfE-de0-nfM-t8Sf3eUqi-Pqi+1fE+mf+5y-dF5gegxhlgy284X2n6oE-a5n+EhHDK4Pp2p4xTO-FgbBpvplp-u+d3ySuhEARO75+4-eveQ0O+FhF+y35-d+lgl-HVjZor-WoOIAZM5MFMHAlMEqEBVNlyNNGmEBtNdN9MjMTNeAABpOzZQGzfzA5mcziA3MwAGUDQCAjcwAAatzAAByXIGAFAMszcxdU7AaECKGhCBY7MvAcMjABgAAApczP5hlDoCHMv-EUP-zswyhSgAATWhCwDJAAADWXAyggIZALkJdBoD0AHASEdWNzAABamAcMuwG5hyhLMMob-soB5AAB1b-owMkAoBVAjmSQAZkkCVB8A+ApAIwP4FxB1YlQJCKCH4CKBwy0IZgIwOyDoAyA3MSzH6F0DDQUAMAd0NIPSiggyAmAbmAZjkDoBmAqgQgPUi5BQDAw-A-gYoHoBxAUQcoaEPgHYCKBCANAxgY5noClBCAUAgwCgDIDMArBcQegOgFKBwB8A3MfgIwKED4BpBl0CYCKHDJygUAigRgfgLlDoBGBcgAzDQMwByB1Y2QMgO6HoDSCoIzAYnNIIMwRDYBBgKAJgEkBchpBUAyQHiDlBLpSgQgYaDbkWEWwhA0g9AJIH4FyBJASAThgYEkCSBpBFmGzCiFKDpQZQMAQLBZmMDeYZQ2QEUOQLszYwOh-ArQEMIcCSBFA2QQgOlDIBwA4AEwLkKoFUANCQs9UGAHIF0AhNMQjmb-ocK0B+gPh-AImMYEuiEB6oKAJCAZkIDlDYBCAO6NIMszpRYB-AGAAYHDKghCA+A0oPwEcwQCtAEwRzKCAMD4D+BugbofgHQCVBYB0g6QVACgHhlOR0g3gNINgGlBpB3MaEJUChGBD+B7oXCDQMUA5hMAw0ImHwimhkB6ojA0onKFcw8FnAhAOAI5igFch+BlQGAJgD0zf8kU4ZRQJgBlAygkQkgGUAgCAiqADMvAfgcNBRAIAaBl0dALwCAgoB8BigfAazFKD8DeRG0d0PVEBj4CyAygdgLAJoGSAYougezPKA8wihSg1mEUF5l8zeZ-+dw+zN-xNGYB2ANA9IWQFeGYBYB7oBgUvGhA0BLM+AJCHIEIDZA3MuQ7mFACQjKBLoDgaQfoD9BYQZQ9UAzNyI3hAQcwAIv0JICJhQDeAlmKAQgFBDAAiYEwJCPwNBDVDKgRMICAYC5BdAYA0g40cNGMAnj+A7oaINCEYEOBuYoIKAMwH5GLiGYToZgPgKgD8D2AEwP0VACAhejFBPA-4VkE5A4DLRQEQccwCQjVg4AlmRod-wMxyDdA3-KAFoHDJcg5AcoaQerEUA0D8BDgXgEmP0w0CZQ6sXQPgOGhNChABmd0EgCAiSADA2QfsaCCQCHDLoqYiUboDIAoBwkDgdAPZkwCnDzhlwuzNcNuH3DHhIoDaOlGyFygiY2QAwMADkDDQkIcA6QUYO5jSCEA4ZOACiGMwGYoA7oFBHIHjEz5roCQa3DQGhD8BMAEqCYKoBoAVo4g+AaECiGcHqxCRMAQgBMEQm6AiYmAXgMYFtzpRHMqgZgByPdCMDKgUA9gPwImDSDXBbmYaAZjWHqwTYSAYYN-10CwChA9UOUCCNknABdAMoRgVAEUDSCkIcQVQEUMcxaj+AZADIcNCgHSD3Qfg5EEumkGSBYBEQuAOrCgCMCZQjmUoJgAMywDIRCAYaHIBWhQDVAMoYaOlCRCXQUQCIlAIwIonSCkQcoD0ZICED0BIRNAuANIJoFCBVAoISQN-3QD3CThZwi4VcJFA3CHMxYqSS0HShygkhcQICPVDiByAYAfodSfwD4G8iNIsAqASoCgBwAPBKISQFoH4GSBLo1uOAJwPoDQggIUAz0sAEYFOShA3-BAPVAmCSjEh6ULScNEpG6AuQ3MUoPVCQAGZ0o7oXgIQFBCghYBw0PwDAHoCEACp7ARgaoDIArjKg6AOUEIAmBQBFBUArCUgG5g-T0oKI3kFAKQBaB6AjA7-itIakwBmABmYAOGW1FQh2ATURgXKAMBkBsg7AXgG2OUApTeAjAgzPgIqAGZbyjAy6JZgdCWZoQ3-Ssdwj5hxB+B8YuUFoBoDug4A7ofgXwl0BejIRQEegPwL2lyA3A3-S6MUIEnYDcBBAogdZhIHeZyBlAkUNQOUCODJA7ofAFoEqBwBMASEUoOgDqiEB0A6AICHEBCj8AtACM4aPwMYG8BVAWgICLoFkFzjYBoIaQfgHdAGAYAlQOqZIHwAOAZQ4ZVzA4BoEwAJgjA1SZZnVgTz0Ai0-AUPL9Cghxg6sEUNkGMDQhVAyYpAJdGyD8CDANApAKCEYH0AyY20r0UhA0gTA4AGAv4SXJgDhlLMDCfgSiD0EbBKgNAv0EBGnkwAEA7AfAYQF7hQCaAJsyoH6GkFyg+pvATANxIGnDRv+rgj+VANrkohmJ-ouyXzJRD8CUApw-AQZlKA3R6AUAVQDQPDJTQaBrgNieGV0DHDMx1mHMQFh8x+Yix10h4YSMwDf8hANAhADQCJh+gaBsAjBcoEkAHz0AugfABMC0BWQDAaAuQO6HYDf9PRSAb-vwGYDoAhAkgf4BzLkDMB0ofofACvMqBDy5QugOIMTLkDpRGBpw5gDQJFDugaBlQFufwK5D0AoBMACtOgH5iWYapUU5QIQCJgoh6ovAdWFALBmwDdA9UAiSiCgF+h6oDgdWGQGADcw4AaMhgM7PoB+hdhqYaCVABYDhl1Yjs6ouwGdnNDuYDgBAH6F4ATA4gcoZgOGV4A0DLMEwBYXAADGQT+BII7ErDJbnZBMA+QuIJ4LxFqAZQWgBwJUEqCqI-hG0GUPwOMCSBwyhAUoFQPczsLcx+Y7hTnN4VyCxh9USzCgCAhOJ2ApQYaJUFBDyzGBoM+RYQCxkGB6oo0-gUhKJhaBcpNA44PVCJhIBmAigSQCuLgDDRLo+AfSZVOYBchmADgLkG5AmCwDeAXIfARcAEG8BYBKAAwOlEInDR4V70h0DVM-FCBCAaYfgJIJ5GlB8AIoegPgMkAoh3QUAomA0OAAwB0ApoZgNxP0EGZoIBgPwVCJCaVA7R9sgwPIPVgohLMsA26JfN4ByhylnQ7-pZgtiBDhgcAGUHIB5nqxYZZAa6OwAMyWZJA+A20SNOGgHD8B9AImKoHjnMgBlG8VMdCCEDHCRQOAvAYQIszpzSBJYv-hmN0AeLgAygImPgCqBwB8BXICuVXJoHoAdB+AoCMwCblGzW5IoyQHEE9CZLsg3MccXAHYGALthxgJCKzHWWVBLMNA9KLQIKGXR1YaSy6JdCWHpRwy-A7IO6F0CEBLMcoAQbAKQDZd3QMoBwPgH4EeZpBZADgGQA6V+gRQsA4AAlMwKqAUQ3vMwfMu5jcSLYXywgHLAQATB+AKIbQVAAMCYBpBQksgMYAPGYB+A0IKADQKVXMTmAKAbICjDlDZAJg+AxgaCHSgIADMYcxAMgRQBhSaJMAZQN-2GjSDaBqgOcg4EuhaALpE0zAFYIzE7LsxeyrhYWMOUlioBUASzOGWyBwBwyUAAzFcuGinN5Zi45tcYFeBkAWRfoNkQgDqVCB+A3MTKeGVKmqBhozAVmX2n3FQCUQjmJqHKBpXCiWg6AAwIoGhALC21qSpFBgIYXoB6otyyQP5I9H8AwwNw7RerBKF8hCAqgdWJ6FjBQDShP8hAJZjIBOLhpCAK1b4Pqi6B0AigSzFAHDJCADx3y+qANP4HiLRp6UDpWCvQBaAoIDgZQDKHDWkr6ANkICJgAvX4D8AUAWQYoAdAGYYABin9RbGGi8AkAiI9KLmB2GSBI5hqpCFAPszDR7oQoCLLbz2YulIRAiNeJkgcBVxEkW0IUEigKQsZLml5bPDVuSR1xEUQEYkgvyP6rB8SJ6GXL3FmTVZuts-XrRPP0DTM5KsVIjolWJ5R4q6ecAHod2B7Hcx8YPZbSDzW0w9dE82gzuwl-a4Y3uSbYOM0i-ztIA0yDQuE+xfTI53KwwWlMSSjzxZUMn2R9j8S7ZwMrucOd7sm15Js0GuIcInjHlDRPbSMi2O7DFjziTtIidOGDuShwDtIJ+lHZjpOVwYc0QdoebYM9shxk4DymO44KRgOj8AJWn3c0vpVdL4IF6ICZeqvWEw9YvejaZHc9RGwScwmtHWBsVp+ZYdLE5nUHSdgOhRBE0vOJkoLjFJ87nsuha+sLtvqOtO2CuP4jEVfaet52U7KlJPwO64podaBZkP8HGAKwxd+O+LEMXaIcEB8z9U3BhxH5BNAC-bVIhcmHa58OA0bE+OLspwyUwiTLN4rxwNqyobeYu84AMw1p3VrsAHDXYP3Q4eNJsAem2jqGj2zUCez3L7VrUeohxTt+KdpGQEd2Ztg4DO3iiXDD6vozQbuDboD0h5f11tEPFbVDy223cXdceg8nHokovxE9mtI9jljT0ElQEH3A5l1g7TLpfuou7nf-Cm0BsXu8CeuMc32ylJGcFSKpHgARm8Z6ASEMgEhDYLGA49k2HYCtkqpBAEQUei4MnEe5BAu86+g-WsCWxb74eGoKqg3rP1N7eULxMrVdt7jH5iQmFOvXfvLIBl0glJPvrlyjQ-VHtjer-ZWVv0oMj90zeQqe30q-EVCHDZ3bHs-23AKyP+0VqfpQY1Bm9yNP7Tnv-0Bp7eiB8A8ge-07A0DjezA7yhqy9xBueDdA4fuIOgH99GBzUJQadAuIPmZnd-YQeTg9lvOoHQAwXxiIBo323Bn2D2SYOH6E9NBnANAe5LfE+SqOhFLwyAN37xDS2cgywembyGledvFQygzUMf7mDzeqg86VF64Nedjegw6Ifv1AI2D2Blzi7t2QqcIDZiJbZXs23QcNtq2xqlBSPKCIg9NbLFKHt+7843ggqO+nDvH5q6mdwSVMlPW6ZQoQdcFPFLgXzJAd9uI+i-vt2UTPoX9yAN-ffUfaIpGp7ad7aJ0frNoa0cRofoiENxyH0c2RbkpTTz1i7kjjLM3v6ngP6VPqptCne6TE5VsH6ZR9fsEjQ4W6A6LDAI6921o5YC9-4IvYDvtaD6tdSO0zgDvjiGwkQJ+RckdBXJbQRc0gGou5WPynop8w8cUEYBfTzGNkH8Mor4deAwUHA9xt0Oxw93c7kKhVaDm-lR0oUAMGRjip5F+MkdHtyRhCr9ocNuE-D0CO6KYcUN4NPgB2pakEe3iGwx913ZExACZpDhsQFSA4IoCZBGkEgBbKuIwUaS7wMQmJpPSHtPS9xxglx4RA4EQwSxyTw9LXRE1UQsoJYjTCAKIndQGAIs2eEDhUeJIInpknwK6n2rX4QYH2a1OhhtXM6imPY4p2ZfgHeJWM84ImIE9B3baYc0TSJsXN1x7q4d+qE+wDkQx+MjMYjSRG3W4RAJDsvCYpRUyfGVOSmxT68dODoD9IvE3Gw-TlIUdlOtprCYeofCUBHzl7ttbpmJNVhdOqnzgkZ7UH3iVBSnFcZhjfiSngY-I4T6O3RE6bhTumVTap+M7tyTNFnNQrlW4F3lzMxnCzF+6bDvvcqlnPTFZnM+vGjP5nJTcZpU+6bUb1o2zMSD0+Wf8OG86MOIQiCKfdNt1l243Ls-2YLOdnnT7pxMzjxnMJmmzQ5sPswwtyhoqz7pwBnc0WPS6-ul2n2Jaf9OgYe2JARo+-Eg78xwqSVR08oF+D-By2mVdM0nrb0lwO9KYQkkShLRP5OSZ0K9lcgqBpDozj5yxlcUGbYcUqJnDYzwDDA7I3gjSBk0yeNSmp0L4ORslHTdJ8gIU1+MwGKAlC2AFQ8i5UMClsAagtQIePUN3t-S97ci3KIclfEHJMSr45DUnQxZYvDkkCuBLvFhajx8WmLJIQfKsHbCCXWLJIdo30dwuQimShFroMRcVBkWHAFFzUNqF1BP99mdFmOmTuJKNkuLfKZsiSCguWJcO6FBEKxRAhWW9LQl79mOTNOmXK05liADxi3Dlh8OsVMwDxgMjqY00q4Ly4eHrA2WJLdlxpFfT8vFgArgV4K8ORaZ6sKo8dZy65bcseXQGXl+MHGGYD57-LLlwK+Ai0tW5qdWQWnaGkbJxWuT6zHKzxjyvHM+kyAVbQcEv1oX0LJqcHMtjmTXGhWjFkK0ZYPKX7oEnV8S7Fd1Zy12rA19ZF1f8IsILU2ky-vuwECqAjSJxqxCUH5D7sF62+dyhvkWCzIc6lsXY60H2NT4nQs+OAifnrMGBOABRJAKUGxCd9vYvBAAoLrLhtBRYEsFmpYDBx6wFrorY3S7v6sXXsWSAFhD9eqx-WZk2+hHlVV4SqRJtCV67UldAjWXrz5-W815YfAY36AtFwq31gdAy4ug2VyKy5ZgjQROtYugG51ccAn6KbE1xwCIGrzU26zlN2-o3hCAGAWETxk3UkA5v03e4pQKa5wBZtEg2bAt-wpVaJs8YSbUEd+qGc-p7dgdO2-qx9aGuGXRyjSTfdNmVvdXhryrGPWNa1sa2Vs0JFWyOUHDq3azRt8YjCQ9hlWRrfV6bMbeZwdEDbXN1eLiRMuJXiqFluiM4FSsX8eMuEQO7TrnqU7-9eN9IhFefQ8ZWILEOII9qVuRUVLitzW4naBuM2VsH1umwzeTsZ3U7rN5vDnaAS4kk7htou1bbpsu3-rDt8u7f2zul2xic2Om-nfZuC3hiWtzm2fg4JQly7QiKqzHeYgy3YE4ZnRLoixI4ke7cZKijRW3SjZSsuHbuHECrjMAdMoCL6fYGHXsAQKhd4s8wm1uq2zbJIeu0uZNvlX7bK2Y+63ddu95YbXeNvBff8JH3YbQNtI1drMte2XL6kTSH7bRsf3xII4bG1TtxuOgCbkdyxN5YMjEkSKN5+EOnaARLmPKPyaBzvTMo8ZP7nIb+4yhyNgOfL8d6bPA5LsW24HsNrO3zdgc72m7wt9yr3Yls4PZ2H9UfI1Qtaa4GrwyEwDbBasYW9Y9dzEP5E8gn3er3DhKHZBPt23BHvD9mB7YRvv3XLtQUKBg7vPgO+QTkQm1Heii0BcHK2byq9ZfuOWXESV4KHI5RsEcf7ijxyLzqVtCOBAVNve6bZ-ZiOPI7MAh3alsuiPCHvscR1Y-Culwqraj8x9NmQDZR+Hatw+244CfNmDLCNXW6Nf6thOhzZlN+wHpctzqGoTUeR+jbygGBfL3jiW9OI6gdQNHQCWJ9Y4iehWQnVdlbEU6ceGsQrrj8p4U96gVXqHUd3J51AKfHIGncKQiEE4Ptn36n2UTp6mBEdRPen7T-p5LtAdeWWn+TqfuKGQN-QQaEmVAN07scex5gbgcUPM7WddwUAQzhNAf3WdbQFn2z7C6HaKsr0utszjZygBDxpBjGOzmx6U+G2XPDnGwW56sHuclPanCzuZ9c9efuA7nZiVrUyWgaskn9n8DJEICyQ5JatSEfJIrEa3T7mtrsEOzjZiLh2QHIOgG1Dd33LPp09di67s4az4vsXVDoeIdC2igcgFoLtJOC8q3ZJyXf0f0EBAa08Ap9bGZPFUmReZHbzM24E+TbrMku99trR-TS5EAQuoXDLiaEApZcXNEXHLqgAvpcv0AIBzAITJo0tZah2HHD1q3rAtTtXsQqPT5PfzuPCu+DoCegDHy9oWuCu7uzyg84EemujH028BtJl2hyZwGxgYALa2MAAB9C8F2B9dIp6AlQMgE0WIBCAX4RWsUrbeGe2uz+xjxlC68v5uvREHrr18RTuR+v-XgbyOSG7DcRvsgUbzFynaRq2uyHuJMt07a7uZ3K3wxCt46-zhIPeXrr2TKm+NfpvKcvr3iLxBzfBvQ3NAcN5G63uP21stbq+zDdHcNvuXib+-i2-dftvvXPrny727zcDuC3Rb7ezw4cdWOx3nd1nPY8ihxvgGqNmd8RzndtviOnrxd745Xf9vB3hb4d6E4aceUyHsTgZ2U8pzxvnXs75N627TeLv+oA0W9-m6HfEk6CR7p1wGyTdX8L3vKK9xm7Ow+vUIqEYD2u9A8zlKTGWOeGwRIq5gtApQXOFYibd6nzXjFa14rFDRcFgUlgfBIQFU4BwiPJ7uKiR4n0QBKPAqaj3yjo+yMGP075j0nrYDWuH4bH3RFR9Eu0fDOvH4jwJ79D41hP7HydOJ7YAh5CPfHw6gJ-YBKp5Ponjj0p7o-nZGPCb-j5rRwD0BWe2n210oj08h9VP0nkz56RawUedPinmj8p686GfptJHt1kJ+LgifLPnHiT+nw8+j6BPhAb3iNic-+elPZAK6jqFs9Mf1PJn8gFp988KfFcAX2JsciSzxejPiXu6mwC7COe-PtrOFOKBYMJduPOXzz0ntriCeO4xXhD4rgyCdAX4FXxWlV5C9JehPdX5VA14vzNfyvQCOj0A2C+EcvPsnytD18i8leBvrXobyp6k8JevPmnyb5pWm+NfSvLX7IG14M9qevPZn1b+R769cFZv23+bwfI69jeBPDnlxFN+O8CpTvbX9z3t4E-MBuva3+73Gke-zegvL3pL+F9wAfe0vm3wb5l8Vy7e7P+X5L4d-q-A-vvmX-Xpd55deeOAeVW70D+c+K5VgSzZT4HFG-I+avuACb71+B-Y+7ouPkb396h-dfif63i-GT+WbDekfjKcb3J5wC0-PvWP3qIz4W-4+WfGnrT+z9Bac-043P5TxD6W8CeDvt3jn6T7F-6fnvkP4XAoTvZC-YfmP0Xzj7o+K-JfJnt75N9l8a+GfuPnX7l5R8A+1fJPo32L5i-g-mfxnqH5qIN-C+5fOP23-21N-VekvhXmXy7+t9u+svnvzr9T9V+G-LPxvmLxsCupB+rvSXpCDT79-h-ufeCA6Lj-t95flfhATIc7-V9J+lmKfp4kz8W9m+BPtAQX2H5K8M+C-4v9P158alo+ififyv8n8CRufa-pfpojn6t95+7osMMoGn+L9e+7quHHACt+7-N+lmff0oBT-b9dfJvY-un1wQZ9T-lPlPpX+ikt+4AF-Iv5f5iH7-6e1-uv-L2P63+KEd-3Plf-p9n-5ftM8-s-679797-p-Cv6-8r5u+n-c-E-x-3DDb+D-g-yv-X1u9t-B-xskn-E31f8N-MLzZ9gA-32-9+-W3zi8--WP0d9BfGAJ79QAn-3d8bPJAIJ9vfBv1H97-WAIwD4AwPwgD4EQT1V80Ar-2IDp-SPzJ4Y-XAKh94-O-0-8NvXfzhhq-SrxwD+fJL2z8gAwgPQCp-TgMk8+fB32V8y-FgPH82Ai-yf9hAiXxL8TPev0kDF-AVHYCygYQIYCeA-L37dlA8-yWYaPdMAzof-bXzIDqMXAFv8pA+n258DAhWUv96PUQIz9IA7rwsCVAuNAZ8bAowP38RAqn2V9ifcwLR9XArn30DggQwLsD5Aof2V8T-UzwCC9AzwhCCFZX-wcD9vfAJcDYg5LHiDFcLgKSDrvVX1SCQAjwNX9TAwlGcCYg-IIyCa-bgLEDIAi3zyCiA2ojGBgeEwMqDHA8gOh9bvWoPQD6gkwEaD7AnwMgCfffwNYCrA4IPqRugwoOaCUfZV0m8Og6gK6DqKCoOyC4-EoKGCl-MX1KYJgwnxV8Vg1QLWCLOSTCKDAfbrxu9Ag45FTBq8A4M38tgywK4I3gaEF3g8fPoPICog44JF85g4eg2CTPCwNwAXg4H2oo9JHMEP8FA-L3f8rgk4IyA1LH0R9hEfD4Py9AA74KAsRfcEK1BIQlf2hDFgqHwt8fgjXxQQV6ShCyAtENWAODavQAJOCcQlBgF0Hg9f1aDuvEkJF9AYdNAwILgvwO89tguNHpC4ADAh+QLgqINpDgfYIguCvglkOuCBUJ0EhElEPdiod0Qt-1V9eQjX1FC9cCkIuC4QoUJODikYkGBR92GEMz8LfWUP881ARkK1DIAp31u9dQkr29gN4SkKP9M-AYJVCRfNZxbIpQpwJlCjvOHxqBqKC4MIBmAk0JdCNfWDElDHgzbCz82fU0I29+YP0MWRHQ8gIkDvQ1kJTNHzUoC7gCPQ0KjDQ3SbxDD+vfYOTDNsHQJjDhQuNA7xIgIkMB9wvUkNzAC2LMI353vEsJF9DGAWEERIwzbGZCoA2MKs87gbkMF9mwvMMVxLYHQEhEBQ-AM7CTgvQD+QLgkEMHC6QrECTCGw4oNW9qw4H1-IBQJoFuAPQi33HDgfAMjUBqDCsMB9jQ4sKb8NvDcKRBUCbcIK8BwucI18NgVYFcoPQqYPR9zwyz3SDPTD0K9C9wlsN5Re+acMB8+A18K7D40NsJPDown8NVCdgesIDD+4JQLvD9wi-HOCAIzv0giWw4FB0AHSbcNq82gk4MCAfQG8NW9jQ9CP0A8EJ-yZC2fNCJF8IUaIHCD--DfyiDiI4H1IifQKf37DsIgQJK9hwzUM-CrgncKYiNvFiOCACIk8OVDqIjX1nwb8NiM7COIlsMigEgWxQ9DdwtgBwiRfYwCOgbAW4HIjkA60IHC5I+cKXYKgVYAjCwIw4NV8BIvUJZhnw97w0iNfBk22APQ78NkjOIi-HAYLgwCJsiWw+rHxEHI1MPR8zIyzwUjxQWjQci4IsSN-CugGUiLDTwlsN7gUELCPR8ffE4J0IVYQiNW9ookXy9h2whKNKDzI4SgYiootKMs9JIoIGMs2IscMSjgffyjCI2I-iKKiNfEqM5AVwoiIqjLPF4Gy8TwtoMB86os0NlQVIxgLUjUolsLVQQohgARDgfDaAdxIo-SJbDuMafyBYTwpsNvDVQnfGn93mNiKoiZo+SLmjjkRSjYjBQ-qLGjVoqbH-CCogyOWi4LS-g29xombBqImmLECuMjqYFDZt7AYaJK9To3aJJBaTEIFqAcPAVFOjuEOWHyi9I9iIoCxowJCVD3vQ6I18EAKAGdwaow7wGiNfYNX0BIgS-GqimomSK2jfw2GI5CgEUqN+jUfKGJ6i7oNqk-DUIr0NVCQcEFCq5ywkSPe8iY+SJJi7mNiKbCqY4HxWBBALmCYAUo9HwZiNfJmIERrnLPBPDNojmJyimgbmNiZRwgyIFiSvLmJZjMmPiMpifQ-zxqIqEQ6jwi+ovgKHCFYhLloiOorQMz93vVWJrD1YoBG4j4o9Hz1j5wg2JB85vbwKpDNsKiNNjzI82Ph8tYqoPIDNou2PlikARWPh9NA52M2wxwt2OYiHYsr0tjLQoEIADdYqCKo9zY430BCIg6oKIj-YriKjixfJ2JaDAw5GITiL8I6A9iEuY329jU4jfhtCgwhCKTicfEONjjqQgyIzjI47OKARDwrcJEiXwtgCriOPc2MPDTYKyPjiI4luJrilEDKIAiaADsObjJ0A2OMBZcPXAwiU4lj1wBowtWJrjR4roD1xNYkaNiYB44uLnix48UKXgY4iiPIDmQmePkjpAUS3njmQJWMwiTwqIP3jfgw+LGAN4peL5j8Ay+IvDr4kwA3ijYk8JBDH4yz1yB-gaE2Zi4qXgwJjp49yJODv4p4kBg-48Gn9JQDJqO68IIkBJ8idQL213JZSWmN+i944BJF9QExBID1IElA1IM2YoBOyiSvUBOPi9cMmPcAQUViN+jBQuBMwSEE8hNmU9cKhOtjFUVX1oTakC1F1QFIg1GxJdAZq21cnkXV0NgwwBWRgpOKTCPBwqYH2AXivKW4BeNAkWRNESfYeVEUT5E-c3eNW-IHHETzkQrE7I5E5OBkSSyJRJ5JVE5OAZxTEwsjidV0VvwZxbKLigKwRDKRNBRdACxMzMcGVxJUSjEl42GAdHNxJRxUGfBG0SHEm12rJjEwxNhJjEsw1cTzErxKIYrEpCjMMFdQJJ0odE81kNgrUFABNdnHEKxP4yCRtyY8vLaaGmgEkSV0pdqXcrQgBxXKrWhdGXM6Blc2XJPFn01XB52op3oVwwXobcO3EfwdQaeyLgWsStHM8eMJ6Ceh2KKe3eg+kkbAGSWKYZMehbEIAA")+"</style> "));
server.append(jQuery.parseHTML( "<style type='text/css'>"+itg_decomp("JYWw5gdANg9mMFoZQCYG8BQACHWDGMAdgC4CmJAXFgK4BOUAFAEQoCGxrForYpA9AGcAbmADUADxBQANAFIAzAGFhYLMBQBeAOQAZVgE9StAPoBGLVjYcEhViFLa9h2lnNZJUQgO0ALYsQAHCj4+AHdwiFD5CBhaMD4AJgAGFMERCyFgUlCAIRhxbSSsIoSAFmiATgqsAA4aiABWeS0FAFEFRRRSADMBNo6BYn0oUjaIPCgBBFNZAHYc7qJiBAFgAC9SCgA2CogqgPEAbkWSBG67YCh9CgBBIXJgWgA5UnFiRSIur1IUBAAlUhgahQVi0aRYO4PFwvN5YD6EL4CH6HOYAEXGk2m0gxUwScwWlygFFkCXkKQaeAqKBRs3REym8nx3UJxNJFQS7PZNLpmNKTJZJPkFTweBQACM8NycQhStj6QgGnLMVt8TAAqw8MAhhQkhBZqYpfKGvyoETBaRTGKEjUtoblSazaSxRVnShZnaprNVerNdrdVsEh6EDUHaz5KR5N1ultWNyOoIhiN+ko+F1esnFGRYRNWAJvFp5W5iLRWF5FrQQNpi6WBCCyAwtqYIDssA1drNZgBKFryVp-eNZ4gZ9XEHz4EF57TyhIWTRaACyVWbNWkDQaEHkCQAaqZ6jVTD5oo2t2uNwkAFoWatl2KVrTX2vsUgMGUQJKmLClCCmUzdvjD9gxxzScC0xGdLG0edTHkaJSlmVd103LdSWbA8EG-BooGDPZFXkJt9QACVMBJTCw+oKgQPC9VMIjiJPRCEh8SiIFKUwdz3A9ENmKB6n1aQyQgGpSh8CASJ41DKN1ISiPkWZ6LPS8sAfcs7wfOtn1fd9P2-X8tH-XsOhHICJ3zadZ0g0wtmiG1+NmVh5C-UoEn4xznKSaR3NMdCamc2ZBNMaRklQwL-QC9zPIQBINxXLY3y2aQf0EhKmxXcKEuY2Z4sqZzdmtaRctSjz0vXJJFSbIV8uiyr5EKiKSpqaYNwqG5iIStyioC0xylXKSKlYIKkgqEK3yGtKvKi0oEFipIstclyWPaiLBISBA-P3eaanghzBPgsbsQavyOwS3Ytni0wTvivaoocqbkuXO6tlqhL+L1CjrKGk7FU+orPNXb8KKbWVco+0TRo6v7SoSli7vgxLdvB6JMpemohqC5y0Z+57rpim5toSXCv3xzHOqswSstmc8QAyy77PXBpZXkOnZTSpJ0IaFbYvOhL6lKMqecVFnGoaWYFQSzyWY8yKJOiRm-vpuXmZ+5i10aso-vW9d1sFo8hqbNXdlKEHDcx1mosbF7ZfO-7jutwWm3lgnGiG7a2xNtnnM55rttKFdvaezzSllcpRP63VBuG8OJft2USvi3YHOqxW0rNgLYL+2ZFXXDOTZenYobV9dzcLsLMaPLy9aBjd4Pj+Hk8aEW06tx6bebqPGgaBU4tx9dusZlj5BzyzdVTimrxLG8KyrcfH3rTSPy-H8-wA0dx1zUywPMhdd1igNbO-BJ7LD32j+J9CKgHtbddimqEuvp7xvurO7vkM7ysujrX2c2Cyom3Xf9PnusomyWSYmtUo7F-I+Evi1M2bVmzEwSrMPc8Vkh3VaolVqe1dwDxQrzVgpg-JJBXAQt899ArNkznqBouNdROX4rQxaz1t7Ni-n5YilNlY0wSLFGy3CyZuyoVNKhCVCbOS6qJRhps4qvlmLKPcip5Fu2iINKWswhr1GchopRglJp7GEp-eQJ4oqkh8ITeQrB6hc0sWDNK1ldHn2kLxdRr0c7KIolFYhoiRESJzlFGaMjTA3D4XhQK18S5jRqMo8m+9FLKVvFPGs6kXxfi0gvXS+l2hKCMqvEC8pmgQS3hUHuqM-FbCENBb8PhTC6m4UINxREiksQqPJTcTFogNC2BA-cVSvxlOiPjWJ08VIJK8Ekue2lF56WXsZNeU5MT5LnPOEivFFQkT2C0xinDkJNgqKArpB4SFbHAWsiogyazDPvNPMZKT546SXgZLJgEcnrwZJvJZPs97EUPqQ+hPyxpnwvoJK+VVLJVX+WbFcT9Eov2fu-CKhMXq8zgcbYiTSAEsSAd+LYoCdH7KgUCmB8DUVwqxqUGpspkj4OAWI6lCCF6+xYsQwhTK-ngzNpQjONCFq-LoVdD5skYlU3aVwnhKDRUCIzkI7O4i6EyskVLfxX5ZGOMEgo1V2iVFRTUSqkiOrwmS2sh3PRTFRFGNEvIUxEiLGiR1a41VAKVXaqcXazVSUZUD3db46RSrAnBICn63xgcMWfIvGPc58TLmJKfMkt8tzJkZI6JqWgExSDPLmVMUoFg8AFC0Lub8sws36G0PjPYNQLC0G0HmghUyHmKCTSmtNoEpgNCzTmoULFC3FvXBUMtWAK25ssQWhNSh60jEbfKLYrbi2WMzfgItWhWL13LZWwdNbMmKFUMBF5q0ezruyVu9NwY3ntocQkBIeBWaiTCuhViksWH4OIf7aYRrGwXuxKxdCSQ1peTfLDc1D7vxAJnTnPyHTvGzHkC1YDVak5FRPTg0NSkhkRrUtG8ZaT7nrr4GADMaQcO9iYJ2Q4GAAC+xHQCQFgPALAmACAkHIMQKgdBGAsHYJwbgvA8MSCkHIJQKgsD3FoKsIglbvwWHUI4AwRgzAWA8F4Xw-ggghHCKESI0RYjxGSKkFQGQsi5HyIUYoWAyRFC2EkXdAxEypqGAEBw95XjED4HgPMu6ACQEBBhJFDIKJIrQOw5ByNydzgwZjzGZKaMMNRFA3BqKid0aJgvEDxGFgUpIyUNAAGI3BuEFjzxBGQpYi4KUoj0cjRdy4MPkhXHSM0UDkCorQagVeIMaarYYzP7kUAaBLeWVRtcFG2QbFRmten66SG4WwbiDUUM1kMY28JlDXMNnrgwKjedJDkDLm3NvNeqetyD1DZjZd26FgkRXxulBuNQ20K3iDEX2xUaLk2bu0kS9BfbOQag5FaDt27XV9tRZtPuXbrWzs1dRBUCHEPdt9bB2GDsNQYszb+6NuHPnSpVGR69vLu59ulFRPj-HcYUyDGGKMWt+G91PIPVoTzx7YHn0aBehAuoBbfixDUoWWFTDri8jwvALO3Ubiljg0SzFUYsQF8PDyzZBedWF9LnZ+B3LrnRnsSqK4-JiOMRevYjUKUsRF9IQmIu8DlSKhNGXuENxQ3kFADuX4lCbnV403CDOvxu-gYzltw7FD7pMtoELbygqKh2ALvWgv3FS0mitUozPzes+j7b5i8gdDQVXJUKXSVE-4Rlw1Dxees8D1ZrqXa0w5f4Eas7dnUUhqxRFrXsWkv3Jfl1klXYipW8JWiKYXXItaFQw7v6ch8hBdbD7x1G3iv1e0J0CH6QOw1hrsMtTgPtOktvNPB6rXc-r6BQpOFG1h+k56jfTUn6jQ5cy+4qi1ZzfZdRX9ZfxGxvBIZXwHrC30NWcvTEaJKAFEGiigp4Z0a0CEjQiCEBW+kBM4vu-usy6+bgiyp4QCpU3OlQ2Eceke+cRuOy4uUMwojUxe0eguHcMsRBWEneG4uubOqUQuu0SUWqyuUMk0w+WqQsuceAjeXeWili3iAUlieAiEHUUiZ0o+sUFIgurBeoguIsTYWwshUsDQwBXe1Se+p4nUpU8CKBYsPu0yjagwCyFk5+QaNQXB34cG6u5uvSv+UA1SYuZszO5+Je3+Y+8e2eeuMsI+n8WEvS0ww8leP+w8HOYu9sMu56jUZe-Sker4D8ERHu5CIsfksofkChyR3e34b6wCMuT+YUNu-SXW0uphTezkxR9hpRX4vacBq+CBQeBS84i61cpeuul0HhbedBEuwoh+-eNqgMUhgUdhlQKqcepeguxCsugMiRkRyu7OUk4RjUrRK0E0W4SCWeDUnO9spBUsK0wCOgjR+UpeS+1RK8NOdO9RHSeoNspECAzi56w+cxuo7RMuEuZhh+FE5++EY+5CpQ4kso4+oxpeUMChn+ZsQsyEj+yushks5UcukUwBxCuwQ0wsNuTcq49eVxy+jyJxa+lWbyPsFhW+E+jxUM8ubeqcmRnksx0Mj+2Bte4kCiLRpByecxNJbEJWgkgRMhGxCuhueBUkexfBW+Rx+hpx+W9O6uZKeoUAPCq0kuihjxqskUip-S3OoJUUkhA+5cFhKUkUI+c+9Q8UZKNBV+XkHxl+NScIVEqcuwvsj+xu0uzuQ0kpQ6IpOJd2eJWu-E7SWeus2xQJzEZ0zY4eFhUippwutekeWEPC0gyRRJVhNqf+X8okWRVJBu5c-EWAUA8E-OCpgJeB2RPejUve2R7kdpA+jepE5ENx1B8peuwCVeRZzEveLho0oRlx-o0eexnpMEjQwpta8BIEdRiyJaqM1kOga4CU3aThR+-RLhsw7heRMevRlEAu5BvONx2EHcPOl+9Qkh7Y0Jh0MZl+ea2+cIKEK4ay-qwhZ6CZ3agU1kmJfuNRg5xA5m9RcE0MAYNZxJoxf+Xk-SJJZ+OcSQlBFhJa8gcZiZVuUMsMdhW5iMnJChUkMROpCpteC5MuS5eR7iewXZn510fZVO2JtRYp9RAq8UdQTO0uh+4SR+9uNeiEwZ0hS5wJhu0RWq3O5uR4uueRxeIZ8C1FewzBnxxJ5Bxir+CQOgMKlFUWL8EBlF5Mjiu5e8FFu5j5A5+YhhwegJZmewuu6xEBIljBb+UkXBlhf6pREBdJ0KAZWeYZo+wRHZjlelrMJZhudp-5mZq0QiZh2BoxOyJJTZgFUs16GBMJfhKp-hCZQZh+i03+Mu-xzJVlvJ+RG4c+OljxhFK+xFL5LaZFXhFQjxuu0hrRAM2px5jQWE7Y0wJ0WebOOxMuo+8hjVWeZeMJwRfJLEoFAU1QZuR+6uauFKxuZ+5p2pguf+DQUlBVmVj52GrpJFk69R7IEBkpFIkxxJ103xI+ElI1cVJ+Wwdh5+jh-lxlZBNqEVyZ1FORF+YUrmuuDVuoo+ZZwu-SzOdMUsAMtCspk0FSve2BMJluxisR5CERQR5eHVo1kly1nerOWVWJMyL5i1iyP4w+9Mp+gufFYZDB6Zw84eksK0j1UsBlNQUZSUa0+lzxtugUVNMsKZSFSUhZpRrm9FPVjJZpBN0MnVIx2eQJ4R21-oeAhZR4r+gB51dZPeXWFS8UjYnNt+q4YBKN2hSq6lz5mlxABa9RRyVh3aUAHIFh5NJ1KCNelx1kK5ihHe2Echch9QTV85QiAs0w4lsEz68ljQd19xbqBBz0SgWtusdMC+qhT8vtk5ewKtOVatvaiy+o8CMtEFY+YxKFJleu6Frl-VS5Hq7OPeZEeu8cdVmFqs1+VeeeQgayDQ7tHhE10FHlOg0d0t5UcNT54dgexAFQby0dzs6pWe0hPRrFQ+D+zeRZjVupaFgkVV2EoNAlFVfFOF8upgd1V+AJ5VDlYFW4skZufNAVgJsC9sNdAVzuDQDdGlzd1SbdfkA83uGFhNbkyduFpMvkdtHtW5U+N9f5Jd+EI1dB8uix3xd1blOClNWqMFgxeuPMigHYEBFQXe4D59CK0D+U7SYdCNatP4by1S4lNQqu3OvOC+gkPF0FzhM+vRVF6Uj1gUYxiR9ur+EFuZjBRBFsRBv9PNXhxJCK10eAjuSeWuQiQ0XDqKdxXxqdy9Wpj21SjkjioGYsA8NoRKSQ6DquiDBhd2SBkEhVlx1S8hlBr4cdP5b+f+o+Xh5UwZl0lEihYVt9CR1SB+z9rRmKfFFK7tzx41UMBl8EndA8KRlxEh3eODFId5nkEeAF4iXkghMRCpmxQNmxR4igKMbqSQ012psj0MqjsM74zYCjopxEqDcT0MSCzY3VNxWeixBdX1m9cp9xjZEN9Ndu1ZsMtVHtmK2Fg+g+zN25fOuDsJienONDOxjQhRkx60aDNqaiMjacuTk6xxSDx9RhC4m09pp+yFw+qFA1euRVQRz00+9VUAfh9hf1NDrFrFMe0eqp8Cj+DjzhjVF+B+OB5Zwun+-SOgszzph9qtzdSNkEswgDaN3NBlgZDUT+AMfV7Um1A+PeJJWZPlhTCdwj5e1DxT7lKJYu-SzNPl31axCVjUHRH1zxTF+NXJsuR4Cx2dfxxV1+CVTTbBze1z1JtzFhPeNdnzjkzzTdiBs6yNSQSqxuNp05bks5Y+3OnOjhUJOp6pv+r4WUyZxTIuUhTZRZWE2Zgk5drRxCXtqcI1xe6LglFQdhXFMVb+ue6pWLHuH169pZFzBeUk0pb+a0rmhR2D7MvR7LlxDQmhHLhsgk6TbpbzC4WtZUWudlQ9pDTlEBjxABOquu7xlxPTSZUb5hJcQx1hJt-+xKIV7tTjLhxBrO3LksA+c5OgPrMBTLkziBeVUduwAh7YxpmpQrsuIbCokUPcZ+C9C9wZPL100r0RwC2dCiireelNKUADLlgVpDHNnRNdZbji7YhbijlkbyPkNulFVj78blX9jVABMhTcwZy9OFSx8Lsel1GN2bk9YZWr0wMJR489izNLF5L10V3EqyiE0TdpC7ji6Dylc7UjalEz07GtyNNUNuqj+ioG2yzYVSvEeAZ9HUBeueoKlCveL+achcKqA8iH4iiVJu-TWjd0pQ89je7SQizkWc-hODN+uUvyuy2EFQaeDQ7kulhBOb7OjuORp7k924AHawWAUEf7yHPc+K56fjTeP1KJBL2HgtDhlxlRQiAUEn9hsL0nwuNtMoUVWB7BNJbCzEOx0R-STENt8kpQU7GTP7FkQkCZqRl97lgVKdSd7RdDTV1Bn+pZad-EtucZZJzjJJ5CFQDjEeNzUb-EaLyF-bEeFZErJZIV0rEZesXWxnKCNp3MrDe4cXJnzY7HUExnTpFqsUFQQgH5+imXrmW45Q+nbp1a9RpIEjAHTEPC3OyRCoKUQgzrgkOKDQwH2Kh0utw+MtpEQU4hwC+KswQgj0jXspzXf7Wwc+AqX0tCRXJFJXw5FQ1c9sAu+5rlXDztN5W5uNnc4hMhfkAMhcsp7i9e8e7kTVNtKq7ired13aQiYhYuiJgUK0iJlIwbt86uXhN5PVelquOD8UCtwhYBfCdxTeD8usu52EKCPcNreEoLlFqcWhK4FQYRHIC3vZHHyP0MGDyZT84sujRKiEB37Dl+whMp6eMpKEsLO8GLjtb++PeaNQ89eHChFEAMEhBTspPLqKEuVtKqf1C8f0k0sU2uYugvw0VzsX4lJCA8XjN5Wwig1oPcL7Vlqj6i336PciquS+rmX7Bnx6Qa-q8hZuJcVsX8gUCRwoCvFF2pciYFhMWRfRBeaMm5oScpQdoRQxuUkUNhuUrmTE4i24ayWwBEDkC8KXME0ZCQZ99XyRPghceAWiAc-dZU8csp4+fh2DmX1P0tydndrMvE2xLtAvl+QUc9AuHDSqUVFEanVsHcbCQfclNQ03L5u4eJN5OCFQQf58JdsEPg5P9XgkHf8gdS7STX4Jewh49eyEFQjfyDkdkEcE6JetmyaypQA36pI-i-TEayg-QiFq1H34k-ok0-x9s-C4hsBsD3elP4HUpHOCZvQhn5PPIij-ZQl1WHRNw0K0ylfCWBrvGnLuDhXvUSD72mCExR+7fM-ixBS6Gw7S1oZsFuBtAx8gy8fbxAoRFZWxR8pnNPhYQz7EocG7iHPpbXz7blC+HcYvvPTL7rsFSVfC2rX2gHfgG6eGNoIRmIxkYMAFGCACgDWCEBSAmAXAFgB8CkBgAYAPwNsCSAHBiMfAujGQEoA0B6AzAKwOxhAA8B+AAQQgGAEOBihcwpAI5NIGABbgcgAAeT+ChAkgAAaQADi8AbLNlieAABlAAKo+BWg9gsANYIAAKAAa2sE5BSg0WAAJrWCbgoQGAKYAAAqxAQIeYIAAafwDLAAHUCIfwUIVaHPBJAUACQDLPoHPAABFALOeHMEVBgA54WwTkAABSYoOIRlkIDngtwpQqAH4LiF-AKQEwKAG4MCH6AtwAQLcBlh8BJA4hrQUwPOAMEgAngQgMULYIaA+B8hhQ4ofTDFBRDAh1g1EKED4CkACIOQHwH4ISDEBUAdWIoXEJQABAxQAAKySDAAOw1APgAAElgAOQAIOeFRBnCtwawLcE8HnADDQg2Q7cDAFYCODx8IALcKENIAeCGg9gvwfIACC0A-BawKAB4KuHHCagogK4aiHEClADBhAPwHgHMGkQUA5g1oLwGxECAxQhAecFsFICPDgADQv4EID8EgB7BWwYkaSIqFbgkgfg2wTUGABXCCIYAMkdiNCC4iBAFQK4R4IyweCrQdQq4T0KeD2C6sqIMUPIAlGoh7B1AJ4MAFMDHD5woQ7IaUGRFCEdAxw1oAkCeCogbgawVUaEDADzhjhNwcQAYPZGhADB0TcQPOH0BJBQgmomAKECeDHCQhTwfQDcDABXDosgY4MfCNKBgA3BBEUoR4PPDHCAgtgv4K0D8EEjTARIkkf8L+AgA3Btg0oTABQCJCHRwAGoEIBQDyBSxOgQgHgDWA6AQAFQLIfoBqC2jQhIInQGsBuD6BWxVwjsVEOjHng1RGwOIdRz8FRCwAxARkccLDERioxMYuMa0HPBRDvReAKQPyPMFQAxhtwrIeYL8FbAGhpQksVEOyFCjORKYtMaSNIB8jsxuY-McYIMFFixhJI6gFSJpF0jHxHIYgFJR8A+A8ATo-UXcBuE+CKh4gagFWICClB5hOQJ4KENCFnDWAiQpIHgFRAwAhAc+A+jWNFHiioANY0YeMMgbDi7g84WwaUFCBz5TA74-QFcJPGMjx88gP4LYPPBxC-BQokAL0PzETYdA+gCoMBP0CTDphRQiYccKtBJB7g5gjLMRLWCtBqA84RQFPy3AEQoAoQYoRUDokLj9xpQ44TULqF9j5wnIgiJiNRABBUQS4rcD4FxF1itwBQsYRSOyGNDnxLg+weYJ8AliChawVgAUNCDIirh4gX8WAFMEDDNhCQKANQFMkuTFAHgnSZiIGFPADBHgwKYLT+A+AxQIwqAA4MPFXCMRxAb8Q0HVBxDshWwb0WADNH2CngrQAwaiHnBmikg5kzURlgyzZDjhUAPsHONRAGDWg84d0ccI8H6BjR84GiaiBuFciIppgKKR4OpHgitwxAeidRxSlCj0pmUjwawByl5TjhBU6UcVNKnZCKpVU0ITVLqkNTExDwlqW1KtGdTupvUm4W4OAAxZzxpgUIKEPsEzQ-g5grcPoFYBRDzwUAc8HOP0CCSwAcUuiQxJjCDi1guIjLK+NqF-AKR104iVIHuGISEgpUqCNkKSDajNRPUv4GCOdH2CtwigAwfYMTF-APBDRDae2IMGhCrhSQcqSgFanHi-p9E7cdMOOEoA4hpEYkX8FKEQyzhUMmsX8FhkwB4ZZU0wEjJRkaiaJGM+cFjJxl4y+whM0oMTP0CkzyZlM6mVcKEAXSYsUlXsbOPnGLjlxuItcScPDFuDpJm47cfYJGnmC1ZNQKSjyKhnMjWRoQw2RDjjwiTjh-UFkVcKenUAHhZwzUFcL4BuDHJooWgJdhuDxC2ReMnILJNdmzAMsSQDLN0ByB-ACIGWBoKIHPDyAxQ74nQNQAaDUAfAZWXSTkADG8BUQ1AewaYKLkCBy5KAYEKYIACOGWUwTAHsHsA-gOgGAFuBuAwA4hdcxQKUGoClA-gNwAQDcByDiBSxpAdmOfCaAgB9AP2VoKUJ0CmCxQPMupAkD4DyB9AGWeQNQFmDlSBAogEIIP1ECjCDBBEbIeUkUChAQA54BILYAECzB9A3QUwbMAIgBAMsBEVoPIDzCohfhcc7oSADwBgB5A2Q0wFcKgClDWgzgrcKwH7lbhugigQgKUMICCAMsbgnQMAFMHEBqAtgqIYoCSA3A-gGwxiAEHkBgA4hrAUgHEPsFRCoJ+gWYA4LrmzAUANwOSFuGACOStw4gHaToB8B8Bzw9kUiaQHulx41gbgp4IoD4ABBFA9c2gM2JanmDzBNwegJtFaB2CbgigUgHHj4DZDaAawVEKQAyGkAtw9guIToHnAgADB54G4PoKgV4A4hoQvgBUGIAZYAg9ggiH4O+l4BjhWwIeYxCEDHD5AhAGAKYPnA6B5R54AhNkNCCzBaJTweQLQC3B1SngWwcQK0FECEB6AOgUgMQGAAGCdApQvgLMHsHABshtggQSAACDEACIHgoSMCL+A3DugpQHIHwCiH6Aohq43eX4PEC0AkgtATiWsH9EERjh+OOufAFKD6BQgZE8QKEKiG0AwpygY4XwFYC2CoFVwoqaENMFbBsh+gecFcLiFuD5wUQ90QIBQB1zshNwYCdkI8GKAERNQboO+AaDZCdAownIH4OOG0LCASQK4aIDFD0iUAxwj4KEIMEJAugX2D+aUFMGlBiAcQgIMaKEDUA65IAUIPYJqkZZWgMAUgEID4D2D1lD8gwQ5B3HCArh5U88IGOIAgAhQ2QnwKYJ8AHi65xAElbUKuGbLQRMQp4L5JmgoAYA3QagF0O6GmBzBRSmLH8A4mzBaAjmAQHFhyBIIghCQVZVioIhCAoAQSHQAEBgAEQBAoQuubJMICFDgAWQPgKUMRxlzzwtAHwKiFfIERQg+InQK0C2UgBCA5E+MVuCJGKKDBrsmaK0BuBYq1gWq88GKBmXiAPlwAOrG4OyFigvxqYnQOeA+BrAkgdQ0gAtNTw6BFAwAagI3P+HPLjJxADwX4NBluCwAAK8wTAA4niBUQfAUwX8AEDUACVmK+MeIF+G0AiAxwp+aUAMB4BUlpAU5KUAYniBZgMAYgPVNsHmDQhMAP4K+RuDdAGgBgsAFqNYDjzRA5EtYHELWB8B5wC6zMHXK2B1yHBAgLYMQBgDmDDFCC1gFACiEeC1g5QPALfPMHpC3QrSn1ect7yB8MsCQUIRmuOHdr5w2QzwQEFMB+Cfhpg4DXcFMEJBoxoQ1oVENLnmD21AWdlsAGOEVBxABM-IXiPMFPA51VwgQaUJyANAUAFQMAK0D0VbAQADQeJbMC-Q1ADBLwUQKEAvCkgAgOgGZSAD4DAAGVpAEADAGyG9yhAcQ4DQauABJA3BcQ8DW4PVDAA-gdgAICgAMHJjnFpaoQB4NMC2DQlUAbIUcuWGkA3B8gTyUoByBbA3BrAJFcADPUH1gVXyoQPXKuHnh5wmcq4TnMUB-AjRoQUQARDTV8AlRCQHqb5PnDiBQAQg9icQFsEAjxAy84iGKEMnBangGasUCgHq5+D01JI-JVuBQC6LbBOwXMQ0GIBRCdA6tYABiPKEeD3NfwUQEIDonprzEFQIYQREmXsK8AqWoha0GyEXrEeoE4gH4ICBJACIawEUKIFZGtArheAcJX4KGm0BDR4gMAFEKuFnLTBIAAQH8HPWzAN5AgHQEkDFCILSF5ggIJSLrnyAMspgOuW2GAAZYhABEUQMoSeB-AYRTwNwYQGoCNg7ADkOueIBqABBTB1AJSUMFRClDLFBEVEOUgCCihzwBg2ocAB7lbBgAg2sALQCuGzBRA9ggMbSMO0JBaAtgsAB4NcFkLQhao89LL1IDHDZgBgyMUIDo2mJewHit4EkAaVbg65pg-QMhLnnyiMsMclAKOFsHHCqhKAYAK2L+CbywA7ctwaUKiGZyfAwAUoR+rAWsBOB+gfQBlMCBbhkVNQKIaYLwA5AGVyuglVUigB1zSgTM0oLHKeDnhTBJ2mAGbquE6AKg02zRTUAF32CARtQ6gEkBAAUL7cUOxQBlnPEGCUA7a1dTAHRU5B+AU6nQPbriGkARdHgnwMcK3CtBxAV6nwE8DFA5BwhpQBOaQtKDAB9Adc3XTAGOGaqMsxw4APMPMWmDbBCKpIKwDWD0BTAAQPqK4q2aDy+AawWkAID8FbhUQmQ-QOzPsFyjPJzM+wXaKNXYjmFB24gALtRBxDIM9CnIPyMeBHJC9rAHTY9L+C67NoMAJ4D5FKHyBbBM2hxVuGzEwAtgogFAB4NW2jD6AqIm4E8G6BXDTArQboIlNCAVAYAO827ewrrkVBSAtgv1VaMkloKCIVwsULQGAAwAohW4PAKEDaGua8AAQbPeYKuGlABAKC2gEqPEBPArhi+uubMvEBbA7ROQQgGKCf2uSRg7c1EB-tMA-ABA7Cg9bQFMEGCGgpmkADNGqXP6z5F6oiHYMICtBQgUOoJLMD8E6ArhV6ioAEBADmCDB+gLYPOEiWSG45tANwaEPLVPA1BYocoX4L+DUB5AUQsfZMCuFVzDF4gGBYPwMGsATwtggwdQG6DnhxAh4kHYQCiEZZcwpImAAYO60ZYUASSv4JGI8FDADB5g3McAGaUEGWdmcgwR7L12kA55fU8QKIA8GQTugPQ1oD4uY2FU3FcQ+iVEJQAty4hAgKIRltmDdBZgOgFAOICgSIKvB0EtwXdrV1Wzaxu4DLAVtmBrAUNfggwertoA7aiETgmoAIB5EoAK5PEUIQkcIAQVWAohsrc8oaACBWAogPANkIhGyaohPgNYARAaB5itwkOmAD4H0DAbSh8O8yb9toDUBSAswY4eICECKBUQKCnYz4BtF8AoAawQndsYMGmBJthALcPoNCG2CPB1AUIMHKuNkhnMBEB5RIvkCRKW6uuugA0HMHUACIuajLHwFKC57S5CQDxaDMjBaqcg+gGwyjAqAMjn9rSrcGAACBXDV64GiIcfpuBigMsVIDPc11wNNyrNYofQOsFKFrA60pAbIe4taD6Bjh9ggYcUPklgG-gBWs3WbtRA1BShgo3JbQGOGfbygxw5Y9idaBCAS63QMAH4JqDEA-VxAUIRKbAAobxAeAXDZaDcH2C6gAgOIUfrQWZKW6pQ7oDcCWNrBKlxEUwdkICGTy65M0NYKEHMGmC5JVh8wX8HPClaopBEEAKIAL2AKOdCQG4OIsxU0aMDNCuU6IAqC-LFAXI0odkNYBJBqApQ88PhoCBGjjhFcxFbFgMF1yfhFEg1ccNCF-ARdn+0IN0H0VRDRAKmsYSAG6B1ysy3QbIXwGqFRCjk6moqSaNCGBK+ATwEAB4MDh1Y65FYPgJ0jL2zAAgOQcBYKon11yEg3QOIfBPKScD-ApAOuQuPHnHCsTfAMUAeBADYbzwAQJzC7sUDsAZ1igXFfOG6CiA4hxAeuaULjyMHvRUQPgDoHtxRD5wRql+dttoB9nIJih0wUsrJShDOBskP4KYNgnngVR4gAiJcIKXOnShtggFekuC03ADBNQUINCo4Ux8uTxAbIaUK3BZkWRoQBoA4aNMbTxA9WMUAYMxUGqBA6ygIV-NoDyBUQoQrqONqEC9KJQN+q7TUHSO2CoJxADPVAAyx-AkhDQIQKED8FtgCpXUVoN2oEClDYFKAY5dxZABRDnTpgVpSgH0AXbFA5g2CQED8OlCDBp2sUNStu2tnj1+yjLGyOoBRD7BLo2gEQtvMHVUQqa-QLYLiFWzWgeAQ+bYLwBR6v1ige1eYMIA16UAfwA4QIE2E+BCAWwVEN8dMDCDv9vk0wN0AgoxyP5Hg2U24Nk2ZRxASQUQDcEPmlC6Vxwq88xtKDeqoAjwWvRutREDy6kKKtwaIAPkCBzBOQNwUkFsGohJDsRuIR4I-1XC-gswcQA0DcF+DQhAgAOeIGEAeCtwOgdEdlZGBbhCAfg+gOy2IBCAtwoQaXVuD8HngMsogNVbQFoB1ylxm1hINkM6HEAN1JuxDU-NCBXAxQ1AW5fYNmBgBrtF2m4OYNLmogNjoQBxSADjylClrWguIQ-rABdS3B3CpUfoD4CiAYdiuvsX8C-TZixQOgMZdnpjAZZOz1AcQD3IEAgBwhzCuIfoASATi6D2QwKfAvRkLSUAmJo7QkE5GxBIkpQcwViM81XDPFhNhrGkYOqnbSh72gIGsE1O2CYsdSZxXEPMGSbZNfAPwU8AywHirh2Qb-d0FIDgifAigcWXmLnlkofAwBlczoHck5A4higFi6YHF1ihz1AgRrAiMUCbL9AOQKIctatnUJlhFC0IRWFMFfZml4gEdWsFKE3AdAfwX9ToC3B8BugUAHwDAA8HiBb5P64AG9PnB4W65eShIPKO6ChDFAOgDwfYMFqKASxBES3ccLWDZCAgWwS9bQBYU3Af1J4UwXoaG0OatgpYnIO9fsGkBHFOQagH8DwCEAmzNSwcccKEBJAXj8CqdXCdq2hA65F08hcZZIgdid1AQe1fBbQMAbzwVw-JQIG3mtBQhjkyCey3GnABQVgF7WwioSD2Djd7xrc-wFCA+i6dpgoXXwEdM6ACAUQri05pIgBjmpWQ3BfYIoO8KKQbG2wXXLnwgBcpGWG86IFEBajqTeAboAYN6CDaQg6dgzR4PXu+D9A8gJm-buACzWYA6VvgBhdCGeLLTsE-sxXdCA3AqZQSk3fmNkYGDcHSQOXfXdoBWGaLcQqIeICGkgBrRaBoQAYIHV8AVLHgqIXgDGuVKwN6RgiHwAMHzgwAOQJIE8DWBXDhYFQcwUICeBMaLUBESG1+PsFUhkpDQZC24NJAwXWAKc5W+eHPCY7RAtgsBuAEsG2DTNMAGK3wGpHHDugxwvAE8FmChDYDH8+UQRBgAVBaDpQ4gAJYsSkBRABkjwezJ3OsAZ1lQwPdnPtsoBZlWw0gHgC0WrC1gPkQUQ0fUlnqYAsd9660ATF8B9ABjy09QCI2hAYxSk8wXXJzM+BWxtAfQCv1oDnh3lGN0wOkbOsggbgihqIW4OdALm7r8gaKZGYMF8BB14kjxT-fQUJyrjABrYK-NWF8BFAQoc8E8AsT8Lsh2Qm8xlg2Ae6Qgbg1IQkD+ClAPBZIr8VUFFMwA3tJ89pQRHPnpDQgpWw4bYPjmhDZgrQT60DoEByStQhwuAMAA3msAbnU-J4KYhjBLK-gP4GqCMraG0BFAIwmACBRimROwpwAIQGsCcvA3ERpQd5aYIaAJzwlrAK4QyoaW2CjjNQASXoahVinVgmjxQH4MIABZzB3QGpamFxE3O4hk22wcVakpRCohIAEA34JjFuDzBBEmANQDWDnhiAce0oM2v30GDSAexG4MlPZuKOHmxwgOfYNWenHZgigP1U5kdFBC8AVwm4KQrFABA2pKKgrbI3MmEAfFzSOIaiBBAJ3ddxAfRyqcm32CACVL8oRNiPN+DPFxAes4q7HFbhzr3O1oBUA8GAXc37EjLOepyBIGd5LjgiHif61aGTbYoaneYNvncDZEogRQGKBMcwA65awdt3dLl54AipqWqdbrX7XyjnMfg7FcBrIM6A-BigIzexpeks79ACUoQDYfMHiA65mpiJ-wD8FihSAYoKMUglMADzk3Ti5OzusaymC1g90rYDhfMljO4hsJ9IU8DrkeCAgqZ8QCMCiFbN2+g-A1b8J-CZHRAU7wgARDwCsBgAAgQl4MtCBCBCAawecKsHEdDBshQq2gPYIaBsPSA84WYPdtoAERSgdcm4KUA50361gVQ88FqeoCT70r24ngEldmDZiCIImuuepNaPu3D9CQadwRFCHzgopt07DOxqYUJA1gOQZV2cJZ0zGGgrQOtNtZ4ClCbVFQaMVcLtyLPsNYU+weC7sCmJlDcix4K2tok0rs9klQFz4HAD4xCAztjqxlgcvuLZglz8QPVZvXzh19SQaIVAFPtyKag4zjwdyoIjx2bFZB7PYiv5NDSXhUWb3eIG6BhDQhkE4AOXKUkNBaANwZqx+p8D726HH+0wdteIAAfTFtlpR66oIgBgUvTQbIa0AvOjrw97hoEViqevUBUQm4eexNN5O1n77g2oQBUCeAeCS3rAHN9hro+9q5lQnjwRUCNmRudNcQNxaqK491yagZn2XlIF7lQAxQTwEt2KB1tSKZj9g8RbQCiHUARnPOXxRNgKMgBWgKANwe0pgUBSoAogUoQxYBExi5nZQboJ4ubFj70hkI-BOB74XCRitYAX+Uc5EsGKkjODp78MKgSkaZ7Hgr+QudMCmCwAxoye1jNReGOa58gSPRMuIAGCSwOt+bZopA+e6ANAlkIaAbzMgBx8flr+VcIqBAeSIRonwNpPGvBm-Bjw0IKiD8GkAbg3ixT60DcHojFAtAUoaYPPD6A-BnA7oPYCG-PzsHfYCg2dd3dXDbL3xoQ3wDqA6bUQYAQgFSeyGhCNf6t6gFk7wB+HUQUQ+5ROOScwBZj3m1EEXM0MA3K1o2moE8Gwx4Ak5EfNwVcMPHEmV5Ko9EToCQPdA8Atg+cMlNsFbhbBAgboFEO6Cx7aDIAOjwSrcGXWkJtgqAH8HEeXBQgBEAwVELUUavCLcO4gKUMsO5TgP3m5IaQquEzbghigHwJxJonUAygrT5X84tYB8BY-dcv5UtapAiubgnZ0QDkDFBqiHZsunIB4OyFXDbBWH0IESOwwAGw7nXpZAkHPehDWg7MFAIM4gywauFJL7oG4OIinCtw0e0wEzLWAWzgF3x50WYoqDHDRAdkJ4Lma6ipDErK-Ux8CNEBRgpz69pFQboXdJW65PgEperReSXpmXKxKM1qEIk078v4YCApgvEpJW0Il6Y7abggX5bg54ARoA2D8mL4gglQqYCsApggrakAGamwA1A5gsVoPMEFHoLZCBghNJJAiCmAqnCsfkkCbeY1igClC2yvOAmim1k8CSUPJq0B8ApgB6qmAtCjdLkyYAANyhAtenMpOqTgt0B-Alaue7dAOgDPokB9IiiLq08FlsD2CRohlgmKnQn5isKIABlho2GWLbrw2qStlrswpAKYLrWGWHXKmKCRm4IngoQiACNW-GgUJbAxQpmDtypgLWLmCxwsEJ-WbFmMLLS3cm4J8qPJsQBbgWrvTZb6i-qQACA6uv0Jf23DvYL6AsmkIDqgsbhLoNAfwFsCNYA+sBqQirQKiCKABEOgaOY9wIYZ+CFHh4IfmGWKuIGO84JxoHuCQBaK3W2qvoAgApgjhYEQpxkFJMK1LtkLrApgh0bzg84LQANAnXn4IsquFogb5CtXgIDGuGdpTBuCawEDrnwOwKQA1AfAVPbngSan8Cg6awL8r+6eAaiq5y-XHlIFC54CEBmEFQNdqogowm4IwApQnXKmAPemSgeWMxueDZyIQhUCxuxGn8DcqkRlvrsg+gIcrkO57pmCcaAOlsBh2PgKEBbAHyhgpugo8r8bvKtonPhDCfqlsATmTqoQAHa4HHZoGCcQih6DqdctZYMOCQK0C1KpJvqAgAGwKoL067bv2Y+A1AKEIJAcQh65+C6tKcJCAUQoXoNAOQH05uCfFkMDlIxYn4KlCauqUJqepgG+oJSJKnEKGwYAH8ZOCXBPOBgaUAPQACK3+i9rqq1Nv6IZ6dBm4Il0n2rJCAKpAKQDDCL8D3wvBU2vIB+B6uj4oj2kYvbilAbgscK0AWwPoD1+W4Gy6QM7LHXKEAqogKGpuUQkDrqqtmPYJwqmplEKmAhAEIB1ycQsgB067wOYLZCYALMBXCA9iK4t0qLtkJPAHRsYpbgcihMGaKI1nEKlCKAE8BgGQxgQamCW2FABCqvKvljYqvghliogjkgNyDWWwD8J5WtAFB7zgklojwl21AG4I7Ao7nwAx6JisJ5uKUgOB4kAL8DkBQAo4Ae7HCTwESJuCZdgYK3SrQFEJ7ayKqRKAWWRroGVqawPoo0arAP1BPA4gBxJ-AQHmOKlQbfnXL-aOQMhaJaPKln5saEIheDzKsYQEA7acQlADyAogNQBhCgam6ooAmouspkeSQMcp3ytOhmo4BMKuGr3S2tnk5HmCIE4pDC9FqID+GBRvYI4GJNM1o7gkYMxJJAS8l5bka0lm+YJA4AK1Ig2FYZx4jyUAAECzAQqp4I1AMAHcLiAkPpQow+54KUIUGeagWZ4AYUmuqhC9ElIAOCWwLCqB6twkkAWqx6jGoVmkYqt7AEcQl66OqWwFELCK+gBE41KCOpn5LuVdnnI-C5gooC3KWwPTDKOPWrQCyhogLnq2CIvqsIBAYoqmCeSpQqg70K2jiACtuwJvJL5hhALcIZYmcrMChArxnmD9hU2D8qX2F6hGACApQAEDChNCrYIZSowkIKw6GWO4raGDQNnphOiJq25GyVmnEKiAT1uC5-WQuhq7LC2rtUJYqgfjjLLKZAKyHHCuQllbVawznmBDGfAGuBFWMSsraKuHgh4JnawyhUBZRm0HwE5WwoQep62F0pHoAqtgoYBym84PFI6OcQk-oSAaZlgpQAv9tEI1yPOk8Alevihkp4ANwKgFOQ8gNr6Le1ADmZ6ux1v1CmO4gMaG8hWwNt5WRFKid7ZmqIGcrtqGHkJ7dAhAEy5rA5DlMIBY6CmsA86rAHSrYO-DrYq3GogEMK2WQgDADngF2nYAVA6tiUKzAe4uzDZidcldqyhE9lZDZCKAH7LmCcQk8BPAn8jWqkQOgNEKkASQCk5+CeYGFYXSrQJ3KMufyryHRiZIh57mCucnCaqW5wgYI66NQM4Gmataj1rcINoBTDVCc8qEJuCiEotYbOjwdQDZCqIP2GWGSRmABgApQsCIGAKABk5TmUQrVaiAgcG4IvBj0Hkaw2mbrmbDObguebUqJUsJq8B4znXIkm84MoRrAXnjComGl0sNbzgBEEwr0Sl4eFFPAaug4ofSHKnwAMO-pndg5SBQuPJigsPkGJBCHsTXICAPSrZaTAMYGMrbywunZF2RYUoZLkO8xkkB1y9+lABhabgs0queIZgGIRgUUueCdqGWKEIWo4wr74lYFls7q-a2QpqCEATBvaZga7xizotRIALQADqpgKiB-A40jvYHmrRsABGyrITsooAlYlM5IKUQn4JQAOQOg6iAphqwA6AH7jyIQWCYYoC3O64XFoGOqpqniBuUAAH5Z22chaHuOlQi8BdBGwD5B+BCQDgZbAujjHL-R+MDjYsi6oMKBbgFHgYLumqeLQA5A7IuBzhiK-CAA84eAHXJ8Amhu4o22hgCgC5AIVjAZRSxAAQbYKxoRbK-K05oyqreZ2lsDn2rclAA3y9NvX5igfAP4ANAVoIGF1+pIL8KEAswFgoYWPgFxblAEVlaCdmtyvIClqNKlqBqgxYqQAlBVwmViRWbJq0AzWmQuYKHB56AUpFu+6hpF0SiVvOB1yEMvQrL+GWFZDeWdOu84HUkcrMB1yjtqwCzALikIC-qkZscJxC4APY7Eh-hvFqp4qICBH2CTlvIBASJSkkBgA-clEL9y6CnUHHCdcmnamCoQnEIjGkmjUBJAGvsppZRPwmEmKeDVqwAHqtgsSJZWpQrhECAeaiu7ZCucgECe2kDMhBcCo9iXZLy5sRLpQAb8ue5+CPgAYLzCQZkSJZh+kuyJOacQrWa4WJUi4q9CDQAQHhCuBj6I+AcJsU4JKSWFlHeupADAC7WA+joBRexYGoqHCbDpXZoieRlcK0A7IVcKC2BEN45IKK8f5qTu-okcpdyO1s0bzgBBgED6ArwVuAfOIAAkBiudIsADaqQmHwBCYF0U0Jli9yiMLmCpPv9o+AymkabeWKAHEz6ABEHEKDiBgn6o-JitgIDnmCYaYL9qHSPmH2CqHvUm3yNFm1KtAsCgkAlupxsAS0ApAGsC2BGDqc6cm+idkLgAlgaYBVGSQB4K2CX9qhZNmQkKECCRVssSKzAH7vdaAqk8UwZigncuSIGm3QP0ZQAyyqs46AhysDJliOwiEA3AVQUiqjRSQGTJymDxsSFZWZupbrdA55ueDKi5dqIBtyoEbMACAAUrJoOiV7nkAlgySfIArCIzi9rzggETuLyA22lWLVCAQA4oeCEGB4LVxAgEiqkai3nVi-apgn4KhAeADI4R8GpnR4MG3QLdp+Cz1i8bteGWAIBhCBMuprnCa8qYb1mGcjc7GesjFQpkGgSA74miaQuYLhgsaR4ZkhhAFlaCq0HmACsAWqTRJJAC2iXT82Uwp4CEGOgGAAUgYfpHJQA-iTADAAEXk9bSiFQM-JjcGXhwrzS1AEIDRg8NuNabKA9rybZCuRmsBCAmHj4CDWfqpGAagZQKmo6Awzg4mxm6RgkBgGNwLD5jBoOsWDgiO2mSpTYfwE8FgSUEM7o+A71gQgjO6ymfIA6qIOdC6uNQmAbNIUALXZdQAgJSn0JbgpI5LWy8s8CogUKkebdyDgg0CKegbj3x0eCwGeqjR9KeoALOeAF1KiAjLiS5geyEqVJrApGjUC9xFCvJ7w6iQkJotBSMa8486mQKgHoKV3n2ClClUh-KmW4YOmHiApQqUJFCLOkYJapnZhYLHC2WvHZDAdHsYp3ArbhljYZFQPuoVAY8T4C+h-Fh26F+S4mKCzApACKYWgNwLuG3WpQCDr2C+6syB2AJFrfFRi1oM6DoW0TnrrjkFQhi7zgOwq6C5G0SqUKWqa2kUrD+MHmogWWczsGrsKpQita-aduB4I-ASrqiCIab8lFKKma0dsrEA0xq0BPuASs6KjiwAA0AlCqpufCderetibTGrkiHpX2ihmrEYqHguyExqpAEXLdAAUqwDAqjEhBY96eAK+QRBoEnHpy68FmxCf61AKGoRC8gIEapWNiTBD2JViXgDeqfwH1DZaTwCgDZK7tnarTxPgHUI3hoQqvQ4u+kh4LMgYSZm41AUCHkBbAW2FUJ0aYirMBJhQgFqpxC9CeeB6qHxluBT8m1jMrCwzSpSCCCEIjJE8mrGV+i+hfShP4Y2MrjFpXagfnEImSVIKnjfmzStokMq2ZmdqlCTwIdZ+C5gmYIUG3PsoAsmycqI4yaBEOsCKAdgpmHvGRmQu5dSTeqEIBYfAC8GhqPSjUB-+yMaYbqgpGru45A9kty4-A4gCUFUO8gLSLzg5gnq6mAJLnwBORzUk6qfCQoqCFxm+GrcoxiSjlsCuC0LsNbc+v6t0Ai2WfmUoDqxANiJpKuQQOliKGBjuDYy1yiDp-ANQO2GlgiwGPoN8jxp25PWDIogryS+WO7avG2vsAC62YoA0DEBywsBoUyZooNqzA2ogcBzaAQN0D1R5hqwDWiN8uMIJA8vvYqoW3jisQcaGoLQDSGxVnD4WhMmsKH0JS8vOBdCVaifarKR+uK4ZY1YXkagq8gHwB5qI8vcn3CJSlEIhCoEmR79c3qnUDEAd2qprViMOmMYNAfUqUBwmt4jHLuOz7m86xiIANQA6Ak1lb6OObOj5aDWrbrkGtA0pNnZRC-ZlMoiSGYWK6mCGToW5B8+gGoIzKZCtQAgR6us-rZmZ3gJHDaI1uyKgGC0hX5teM1qiBvmoQJtDNiKCqIEH+bDqiAXOBZttrdCeCo6peeGoPynG6xITVI1Km8vYamiDQOE6uaymrABJARplx6Z6PQP1rNKgNsBp8AJ3nM4hKo6j5IxYsjEBIwWbgq0CDQWXh4L6SwoqimiA2QnVZRiQgAtJFys+aEB7BLwSfZSqawAYLiA4wmsCmC9XOUowGNDnwqEW3xiM5gAQvsaL2Ctzu2qbx84C-40K72qE7KqBgr4rcKCJpaIGmvyq84CAZepAxuCAdmUAqak1hdrvGZ6igrKqzuptaSexwq8EPMYoKUB7EG8gYoRqjgnsYpWmgtf5PAAGjg4MK1qS3b5i54ARA8AMmWACIiNQKEJKq5SNyIAgOBQYrnocQuyICCxWuM67yd2HHriAUQgRB8WQCsRAXq6rmsB0+OQNf7ngwkHo7Um6wAHHiasmu7bhOF2edqzABgfwV4AsYfGH2C4TtFKZYIAGr7HCuGr6FPSTMnnaXCDEooC7qn2mEZasoAHgDUmabqloFGLUdvGyyfgofIXKNdL1qTmGLgP5aq8CkXqXCnctRwTmKABSCOSI4ra6k2OCuyBigcKc6AdGRAawrEANjvnIN8dYj3zP5aShgy-2YfpWmRBpgsBa4OhmjoomF8gGd4wAONsgowqrkkIB1eluj4AUSmKhg5RCzMlAA7WH2ueDP6-KZoEwhbzsMrE5RpjUB-A48TABNGJ-l1DJSm4ToAaRPWmdbNIplq3Fs+KAA8aEABtqIDpqlZtN6RGCQEvGrOW4BXLViOiiCJcBhAMVaXqyth7EXutOlBJNAN3vDr0p6BngB8B7CaikNClAf3Ea2uIpBo5AJYO+a0AaeAsF3hOgIBYOamJQjpCGFiA0mIOiViFZDqXIlcLVhaQjIpTKj1rYKomUANBnzC7hpO5mub6gIDzgV+rYKWQq7ktluCOQLfIQ2vzujKbWLbkJ6E21wooAQl1StkKvy-YbYLUAWCqYJ7EHVkICJpc2qqIggGxuYI2gzejzg1Wmpojg+A4gLshhS0obPm0xawA0BTuxmhXIJiIAHzojJfAD4A6xyyrrFZF27gHZweklM1ZHZwZgzG7xojl5J4A84GKKjqdOWbJIxkIoS7Rl4gJKIj+rADkDdeQVqlGiGqICu73CDKmbbdAnQjpGkA66XJkh+5gq-LAAAQCWlAKCDvL75m+gNtpIgntvBbK+H8ooFuxfgg-royO4Nx7kABYV8ING48m4K+Sz4ddZQuW4KIAgJrQOUC2WW5VsCqWpysAA3qBwAGogpYoKqaUKFRQECOmSWJoqxq-auWr7qViVUIugUcW6mvABpueB1y8sgpY0WMALPITK7MpoID6IAIcIw62+YZLcQPgI4pCi1AI5jyAYhYNpkG64VaXcZ3OiAChyO-lcZ8AjARs5QAkBfSL6plZuULJAKIt0AulfFm0YaOm8kuLUunblXq8OGwgDZZFAdjjJo2fYh1J8AGWKOBkibVgNGRaXkuhaeCSikEjs2EaoQAxiOgA-ol0EwTg6AKXWhYbZi2kp5IZ6k5v3L261qfghbge4Z7b-RXIrIgpA1NusBsa1APkDYocQfOQrGwaiKYZYigKULVaB8jFrEpNct16w+hAMvlgAxwmOLnCyLqrEVFiNgoFliW4NQqU2TcWABigAkX4Kx6jwcQDZ6yYnViai0VTpENAGpj2gRldcsa7ngRyG5pxCYgCFqEA7iigFX5kgML5pm2yn7kJhAgEhp6+kwjkAqWNQJT7ZobVn6oLSawOC5iFRCjpodlcfLg4MSfMrGamAN5mTJARdVnTmDipgBgqsFYfhUISpjigu4NaoQM0a9mhAHXKvAQgE3GTWMAIbDelAID4rnoR3j0qtOGySyJSaeubtkF6GilnYhKpWQUbxK3cvpLNCuDgeJFu9fpjkjSGNjCGtS9bttbwS+gMAY1Zmya0DWq0TueDiSW4Eco+ps6qEANGa0aEE1AWCv2b9y-soEodGaSVAgzahwqUCBZiCYHr6pdOa4oBSZcgEBTu+WNcKdSWjsADiALhoEhB+42txKvGw4hHxVIPBlP7kSCTpaFQpkogw7qApcoNZDCGZqbH0pVQH8BmO4YOZK-2xSsLFJqg0YDVXGvyiY7bhypXuJ6mOqR8apVaqjao3AY+hLkZqyUhqDNc2CpDaIKXERs6RuYAFtiuCjwDoBCAdRQ8yBGMiqV50qkbnVYowansqJrAH6hypORZYmAD2AtgthgAV6avcCAgswADa0AKlvb7NQpQOIDmC45IzC-B8WWSKSiGfkULbqCQOfaVWxYtkItuVpsQCuaRzqzmoqdDj2F1yqsYtojipgmVJfB8hnJkKx6ys2aquYwnr6JOq6jcC-q4ADDraiNSVPnEAadqY6hlZSKUJgAZdWp7VaoQma5fFwCsZIEQI4qiC7JGDpGD2ChAMWaEAtzrcGjS9fl5Z0OvbkorlIkaigC2CGjqUDZAtAMzLHpDsgID519go5V3Cown4JIIGWFcILCbBcEpigYwQoYWWdVWmrcufPjrEV2PSByFPAdGgEDUAYoHmoEI5lt9WvkubjaJTY0Jq6r5C7yjh52EiaaEK+mvxn8DaOe5V0C0ABetQ1pZSrqUJdS7GqCI3Wmqg06Pu75ozCNy5Ms-nngCcvIBvKigNlb+F1DbKFQAr9s3K8h0hqMF9gqzjcBBh-FVgZJyizp4KU2JKpEqeCN-mEZRCXXiPIYu02iWbOiAGWACEazbmZ5qNgftoYmOUEAIaROReWzK3WdAK1I0pzpvNIWyZBmQr8KWKmrFwi09h4IzQ5CZVZIIigKsrUAHPl9hrgHUqcY3+sbiFY1SAIN+ZigogAYI+AFiFuLLSFZkIB-A3QCWCbKkSQ5GwmmoT0YIgs8oQrF5O4FQYEFlkAu4a2eAPTpday3gOnG+8sp-a9CDHlo0RgRsqkGOiRRjUD1268gJaU27Cv1AoAxtogmgKpRoimMwogMbF1yhSuQqH6QVVDoRFxOkVL6Aeahli6WJUigCNg2xl1iJhtWvNo0VeAJBqT2fsrA70Kp2mkrBCnogYI3AdDrYIvK-PmsBvWBpu9qDiWUfga1uIABgrmCZWkMIG2xUqwBDCvZiW5y2g5sto3Kv3piXse9oXYSgGV5vyZ0AGXhuisAwBJaYVAu6gEDOs6Bt5o8yIZQRDIQSdWKDPhtgnJmaO3WeQBtSIQFlHiAloRUC8NAgBS2pajzS3U-VCsYLQNa0GaiJ6m2IeAjsJbMh1pVBTZpholgbGjEJDSKADkB4QrwCgCpV06WFG5g7rjXrJ2RSS81uCDQBqBBRvafcqr+ogFOY+2K6WYJDaKAI1lqiFzlELpBojueCDACsUcYfMNtkKLbRFIANbAi3QEtaF+83H0oaGFQH4LbxGWLYKyxY6qTaWmUAITp-APjWepZRLOqUD2Czcm4JIG71juJbl7crkH0WYoBtpIa7HkIahAKGmo0FC9BvOCiRbyQ973At1quZUWmjn4YTiYoKvXnguescIT6lYmSKs5qQddHUWEDeTH761+vaE-1NwKwCog8QSEo8q8Umu4CAIaVJq+S59hlgYKtguIAvuz4WkKWiiUmbZMxC4lqLKl8AByKiqPnkeYGC+ZqiakmTkRraOqZSpo5Nym4dGWvCTdSsaLAJzbmBCONms54rWGqvbE5uuCbo4WJy0iKYw+mwUJ5S1U2oJa7Zkck6rbm92qq6I2y+ZuGtAzRiuq9guzdJKWiawBEEq624EBHJpN+nvIqqLQd5oaKpQquoRipQrHmiAS5TUB+CAcd6LVxVlrMDPJP9VkUNCr9jkDVZGoGyFB83ysL4ApJFiqL0wOYmBqsAsapSLBpgoYxDFKLpa9o8aLClQpB+vcVS5QprLsUpKKvbm4JQA77Xdo1AFiAkCdeJuoECV2NoLPLwW3QteENE0lgtIxqcZVUpTKAgIoBxCFZnaKx2FMu3l+ydQdQoc6hALaLOmYwr4UboumnKkIhBEF9jNGlaiQASKF2u6E0p7juNZepGDub7BafSgiAlCoQnPL+270lcIzeA1qYahCyhOIDMFGcj4AZYzBSLbUANQHB7eOdfkgUliVQKUDT2hhvWbdd6wKCIdB+glcIkWKQUzEY+FiC1EvBTmi1reW+CmMF3S2rgCF+2lKlkaJRYAD0UHitBtBCk2wAARCVpPxlXpgesKqQBFu9lo7miAeZbJDauaiu2Exa7chhanOm4QVUgeyGhlhDd1rkIKiOzVXToc6NwOsBJqb6g22JSU6SxUk0YlQdofOnGqICHq3XYYE52tKldjEAMYA1KmAnocJDZ6TMiOKDmXpaiCTYwgPmoVmCDnsSB8ecj2HJSd7qYC4ZChg+XxCGoGADno2QuHooaBOH4AOmDOjy1MVcEMLDvCOqWBlvmcQbcZYGe5XFj5ACYcB6lCiCh8w3yZisADyAdgvyJzmjCd4lE6DDrPnTalDZ17rA74shb2CQ6s10K25wkumTCCtk5ZPA2Ik7oRB5ckIDq6jLj7B+iBBawAOWJxmEZ8AfJqCpsiUYLIGVKPQZ16ct1CLUqiA-AHPiE2fqnrljyE6k3IEKa4CsahAwSndiYKWfrcLGS+8bkASeMclJrfmrTqwquC5EoTKja2SX6k4GSQM2Zw5cuZSJZ+E2I2mQx+OINCsAo8gQXa2FMkBGp9DMa0J8AMqiNY-NxlWkIiGlyqcb+ioBYoZyZ1Wt3KEagBivFIFeiqNGlCLQUXo0afANwpJGkwh6EmFgcK8KJ2e9YLX5YBEDYZVVkemMEZYfmncI-af3WogMqrIklhH6xwn4KsuUKdEqUpfgumFOQdvdOZQN6cjm4GCzLWGEIOYvjyoyKItgtqMF8OqELZy+gEpZJ6xwmfJVBxwvEE35Zno+79yd2KDILqznnemU2sOcKEVgNhpf37KWChGBWGEBoBFVVUEgYL1cJXkt5tuUKnEJagDQCAAQS7HlXbBaxIY8bHKc2voCdA8wnTZZiVwt0D6A-uqEBigDsgrayW59pqHGOuBUy5CA5gotWp1iZVBBkAy1rHlxCXbZObAWhFr1m3BUHg7LzAipnBDc+UQvfZHY41TkAgGoEm9o66eppRw4F6ImkJROyouYIJACfi8EJACYeaYbSJMXXIkWO5laawRW4K8CpC03hOoBA1FoiYNAuwaFZTuMioEZUWeIpyLYqrQDYFxC8AiJKtx7kqwDBpSyHM7t6UYL8EXZSrtoIyaVQVKZ1AZKEB4XK1oj40QKwBHuWe2+cqtXtynmuBUzWTChVkpVI0lJphhxwpbqxi1GsZrFg7fpTYfueAJsl5up3dQDsJCYX9WqmVpVZoNal6asD0uqvYAYlmBCFk5OadYuZGdquimNk1ZejqdoeCWVmsDdAILiMK76ABMcrBOC5h3pkasZr7nyxbRiJJyZdBtppw+ragcJYyEQYA76AcQkKKmW9wGWVyVERYeWp27yqkVyJ8Ik3Z3yjnpSBJC1Cq6qEKzJZuBXAEpqrr9OgwQcKeCqSpslsREOApHUcLKo75Imztr5FxCfss4G1uHIYjY0OKGiM45m3QD4Bh+TMv2HPyXAjU35AGCdmKwlOgLnlEIjokkD9pSmfMN7E54HfVsxBuqH4GCH2nmzMmt+sKBPy12d+KK69nUIKnWnLZIbPKPgHUAyub2quJ1SAkgYDjOmdidrQOfgJ3L9QNDdX30ip3Yk4Ch8ThOpsQ2IolqhuRKZsF8hA3GsAZhc+LBp1WUagcKGjl3iH4jiuTjfp4akciWZWW3olcFigxKdSVbGIlpf0Sq2g1BbHCCDmBW-KB4AuKnItgk6lndQYUN3himWE8BPBjktFLK53QEcKmCjrnoZjmkobwpOqzJqnpap5EpAxX+QhJMLdeoaZ-LUANFdxpJh2woQDNiTLgurklDQHlWpVX2IYiiqHSGKCkaHbt17cCDdgYJVivkgDmJluuvYrguQquVoeC1RWyF7G1LkoKyQwgLv7ehPLYZroibLpioFVDJevZ+C74PJYiStQkI5tKH8rYKOOLws8HYocdSlVgah8v5oSq7DIgZuC-hVgpIikjVDpQpV9kJ7mqxEjd41AmOo2JCSRVgtJlyPHa8JYGCvehYnZI1poYWGK+lspHaiOuUrpl8xv2r2CfFue03Ae4vGG5g4isUp2evAbV78DGjYPkqqK6uGoaBk1PWYY2zwWa6uaNg5qEIO0Q4BrzWAQEMYnGyenABfC84ICIrj6YTzKaqEDa8CgSCUl4LbRjEMBL+6M3vRJCeJNvIARCCDlxrbRkViPLzA22UJjAAtgsZolmPwKWUhmEJYgOWhSAQeDBKb4+qFmCJovZLVl0xu4oTi-AT37Z6-mo9DsStSoEAtaAQPWaC+2Cr2rZCmqhwAge91a4plOMJlP76O-aiKLutMmU8rxtN+k9IEBFqPLFZSsOUQo9BdngkBIVHCif5EmB8XEYFtjxjzYSSrQL74vKLxnLpCAqQWKKdecxq+QeCaoOyZbxj4gvb+mejnqZXy9KVmHAO4Gj6LQiWwF5ZWyRKQn7CApguY0p+cQmrpySctkjLuK5TpobmWCU5UJQAWomsDOKaDaiCgKThe5pmtwTttEyBWRlyFt1WMfDb2C0Kkck8iuwccKJWVkAtqw+0EFT6ARPgAW1BhC0VAC0jlzmmENEfTiJ3GqSCAFh7hkBSTYlRs8gEBfiwGk0Dnt71n-7O6-Gr-Yqy2IuvLEpNUrho1QbIufIVAio7g3jqyfoQAJiYxh+pmyCYs2Zu+9bsmP2CjBVd4QSog3YBEu5k-oC9xkRsyC2YLjTVLIJfiZXGWQDQLpZKaW2MbHHCScsn476lNvbqL2Q2sUKbYzgq2aKA-AxhalyqxpJoT2zwmuqnRtgoOrUWNZvQrpZjuSAXyWpvXjLyA7JgV6hOYAD6nZ2F2bHJVyjLaYAdmhADUk66cyvh4oDEfOVKAOtBknIfGDDglH+xUYkc4oKlAdxkhRBMlcly6qbs5rLePJpVIWK24jlpntMmjB6mC3UXEwnRQiW3J4xT3sF1TGBOiABWaswNQC-GAipEjmm8YYuFj+QfKgpj6Jtvxo4yJioFm0D2IQdZi6GLoVT7aVekfrGi8bYGG7WF2ux5cG6ZbKamCCCrjZIFTqVFhs6xwgaJ91yEh7rkyxTsxrcKSEqGUnjpQC8AJAjEjCEOyjtrxm5SnLsYJkogvsLqvG6XX7bbmzNqBEpBDWEMDIO8CQJIG+m4WEYwBTgB86CRtAAmCw+6QiaJCA4vk-IfqbsZVKlCo7mtok0jw1sCEAGzmSA8+NDgaqkA0Yj0ADcqsph5QQ1HKO1mmgDgYICAqPjgUXJGKthghWxgqEDm2p+m4INYFMommOqGcI6qpBHWrV6sATczVax+awKOEGabSr7ExOiXg6bIQYYUnFxJ3pdT5HxrxuyNJAfgQQWkALKoiKXKRqjQr3SLVRwowm28kunsegc6haRmpQIOa3GXs-oBFSYoF-LbCcJlVW4KxRjjYrNZyqKLzc8sZaYR8AgORpR6rfs0rMaNQELpllbRqSA4qcjaYCnxPfOmqZBU-unK42dVQia4KTgT2hyJNSpAZh6SMXm6cevoQmFT+C9hNjh+EoTUBf6Hg+MJy6GbTKptmrAUN3dVgvhgoHCF2tYZva5OTUK5KvgVbLzgPGUWaNBFhkGYYeRds4JDCpPSulPKIbtBDsmNKWxGQtuFv+qISCfu77TxpoLUJdQViTcDZ6-Gt6FxitmkZWsaadju67hXomNzoOpghaJWJZ6Pc6HgxQvzYQplgfaqtzrzvFIMOU6nelXyoQrBIngoBhobiAL8OO0Gy9MXzEyBJjl7Wge5MRlrNyypTKPcq-HcQB8dfHer44udNdEPWig1Td1cBnusnY6AWvrMAjJeAPE6vBcXenJ0thiK5FCFtdggZOYmhmm1hDO4JTHFjTmgxYrjE9kWoexxgvKI3AZetfOBJnEmACKJkOkZX1+NQQ4ut5boLrbz2AoXb0YMFMRgZpy205kogKpgqirGuydg06puWQwTU5CoQtg6HlqIPfoR8NIkQjPSEwDYM16Tqf-auqTHu2LlSnSauIYeMYmAn8dwGh7rJ2VCTdIBKGDKIDeacQjI6sFrwZ-Xnt9CqQUUxL0gOn4qJrnFqsLNCpHrry4fsTHPh2es2JXuP6j3K1CBXHHhqgsbv-6hlZ6JBKUqxQmtby+tQhLpN6OQKz4vCgcKxHZCOwvbbteBED+oQy-0WIap6Lghsl2AlZkFKyQEoaj5wmspuz7gI2gawB1CtVqQCX2h8u+ZW+ogDm7nafhjpplOIJfhrmKfgp2r7tYweeCmIDBuyJcKlIV6meJIokh4LxgSh4pyiuzTBbBm21u160A-y1qL0JM1rg0BrnQgRDHpbPp3Z8Algp0jFOdLfGoNaYYSgAFm2XBeCIKOmjuKpgock8qUwGflmTwSgUpoGaCDrplWhBkYtEreBaosaKBx6VnzrFiX6QaLLC9xiz7XCjkhIkORY4UFVnG7IWcKvyRuguLpWXWDsDtKawt0Dla0LrLp3yiCbkPChiziW5FCrwbsrsW5doX4lCVwi1WGG7iWYJw5R2RypGpkKnsY01IftUU5NhwVcKkgJ4GtknrBqqWIQY6QUZY6Opmh7LAyFxhzoagkOgepbLBkrfrgKEnueDiBfgm4JjZvkuRI0i7Er5IaO6XQDbP1iPNijngNdVmG0iBriqJTmaSR8q2iBysIpne-cRsbUd4kkz4x6zXMVqSWxOnCp-AEoB8ZKOoQD4DdA8noMrJSD2qIDz29Lq-bxB46zrkAhSReAGUcN-sRnaqvjaYDGq0adaA2eqsxdWzG9zZCL+mbQs0p29Q5SdHlyy2rlJeOb8puEepYvmMoUycrkhpGmpgju41ATluBw1AJ+kClJCPpmgphGuDS3KyhDMf+rMgF1UmGlCMJsr4vGz-dxBtymUBWq8qiONEoyqGUqwBhSCIc5im9uHiFaquDWC-0VAzyrJBmC5kzADNiwomMHaG32KIa59TwHcAMqBmtXGnpuZrgWjykfvSMkQS4Q-Iu9uugGID6qoiv4tu61fggD2cqVPEfOIBQZZlSN3iADiAZQB6mZy1nUnFey9EyQCUqX6lnat25WijHNiBwpDa3BiWdX6SUlig1rnwZDmwON2SQK-WZyzblqC+S3xnUCc6Z8psIyOpxgtuyyjrqc7-+56FAt4m3Or0DmT9Nm5t9K91j4DnqOBYYhpm7Ha4bCpkVpWrgu2gtbMQWGasQAqmiYh4qj1qKlcZepW8UFXkyB0VInzGkCu3YnyY8hz6Jl-GpyVxiCUgECcRJHWFobybOgu5tm3CbEpIVFy7QBEW1WokAeCGDjoAkFVwqYKmWAgB2IdpW2W4LpOPIkoATBd1o2GvmcJmKD9pCIY57MyhBuyGLg11qBFxdQ3qmDAA6g6ICI4ZiSPJGtmEFyLMbQgEkZ4Aw496rAGc5horChT+vDokeF2SL7eqF1XdL0u204M65JWwH7I+w5lhqbQmuK8zbzk1GhGCiBNdSz55gBSaiaDiOQDC0Ugp9qWVQu0Std4aaPQEhW0xONm6DbT+QOUo+GyIpGDQ23oo+6TYDiVJJX5UCJFbzWj2HdKAOwAPdY1AGxiMpKZ6oozAgAD5jXLMzY1q0oMSyuv+FO2AIan3T2MjlkUt7BSnbi6WTQNvE5GvM7RIzq8og6K5q8QHoZriFWecLdyXYrfFUWuyEB5NKlIDGr1VmzvVyfi9cvmU0ScfPnL8VRyANwv6modPH1mK6tf7oxAUhjpbAZeg0AbqMInwDV7yTpD4aB1GhtrEZM64grb5XBuYgLA8kkNqO+-uh+5mEyFqYCDK2gbYI3+i9uYo9Sitk4LIa22VuMggr0p9YLCnmjFakABYbJ50AUQskB4he0zIFiDTwGdkbJCfi3NgV3VcIoVAJujrq3mRqjkCRWgLsy0WoNQjZsQUBGhDgwhndr8bsy3PkvIjrPmzy3Tqu8xYIZwI8hAbvy-TmgqrqcLjEI6Ao8hnLhiEGLLzQa1qaE5G+g+ciIJeFoP7bGq6ckUZYytZkpL+J2pgPraxAcVQ7zioQujHTp0GS45kxFWWLt+YM6-0pbBBpqWWog3Vc0or8m8YB1l2jBYCJUu5EkB4dB2aDRCuyIJXMZbGq3lMGB1BBjEu7yMZb8oeeiA0-rxqlwptimAicvlslq9uGtFQuqqbCI-Ni1nR64w8Cz4A6aYTkVaY+DrRcs9++Ij0bmCOwHJUJAM64CWpu5Vl6WLVznhrb9xBumFHzAG8fiXbGvMCErQq12UvJzmlKWtoVg4Bovb1WRcoRbYO6IoNYZK4AEgkn+84MZ7L+m8Tqrzgb-jUBmyj0LZYO+oeTqIIg3rnXpgOZpjkGiGpghgkEecdek3NzoqgQo1AyaKGn9crbsk6y5VwTADzggDYZoiAsZiJ3tqogLACExnLWcaOmhFjUrByVRnnYbynZu4FKKvJjGWvO5hl1PiAOKhwrFWsHkSEwirzjCq0LZcrimThj2MMFpWqxg5E9BckxzlNmRlbfon+K1qkEXGogAGMUgpCsCbceF7jOYbOvZtiqQMOARTJjWoIYcr1VQZvnJCG6On3Wz5p8T6rbe1JRkphW03YYpWiA5UCDdA+uXKIt7poC6L9pA+gsDuOjrpVbpC85J-1N6bYFYlYGW4CvqkQ4Zqm6og1042CbWDQOICUlmwnpE-abpWRV4ixyoBqcSfMr5FraBjtnIqmJUuYIWi90tkIZYmKjsrnoNwol52LJQi+vbSLNtQByJXoT3bN2DrsFqhAw4xe7laTus24JTV5qz6sQ7agvZLeu-oH7GpXYifb5KhAJGZKO9uClZwukgyG4PGgYkIAIrNSc9IZC9uF1kTjrbbMBxGFy0kUhA6sVdqpKLwlvID2JARGXG2RopFp8xWMsBaZibOhLme9ZCq0BqiegCdqVxoETaLklWUbt48RuKSGnSKI-tSIxad5x8By2M2n8q3OachgkyqCwK25ASvcdqbByPUs1atGBEDZvqgAdvAq6xiIj0qnQSQoolOW1ADkBHKnvc0bigtKvo0Qy0mSIA98aJdlbFjYhbplTx2QoQD652QsyBfB6YQRC-2pGqULzgznpdjbzn2Obb72ladhq1SDiasYpA1qjRLR7-Ruk5Gaggvo0btfKsFFGA1kg8YNy2kU-rJjpUL97swJZpsKhC2VkIVPAghjlovBdwlfavCiXVwFmJokjZ6iRnibitEmzngVINJCCmADPWnOsJVhXsIg8LaCgeqwrO2CUxWbqlBp83L76lgZIN6qB0XUVFKUHtFJbm-gDmLCC0WFereaR2m1Ixi84MGnpGKdh9sfrgIoEasXqQX1LlWQgBBiAG7ADfJbLMANmLLCgwQeL4rIpqIDmIImT1KNWDkM75Xn4ZmwCHWoNhq65urbicLfm5AM-0qqEnvwFVRJxkzX7qpsdUpCAn4o5Kogr9fVixuWUWTE5AOsRkK3K+gDpYIGBK7sl8KB2rYLExpiGIWKAXCnx3XDTCm6llRHIxDJJR1qh4LiGGpidEaGiBnJIdgr9qxXUI189SXrV8lutVYKNwNyJx8wIs1xPWhsJ5qmS0Hp14TCMkaQBdaiOMzNmtoNj3pARNQbXb1SKABgm5aMapn4bSnmv31gA5wjnEf6TPuMKy8SWEoe7Zmbn7ayShBnD4aa1YN8dLq51lO4QSEInECXzxGa9r8afsmAqf9bmczIyqR2umHdAzUuirbSzzrMYGB5cWiLxaWVtoOGIo-jxlXCrGSY6tGpxqUKkmJUu3mTWoOjrFXnrkZ4DxqYRq1IOWeevbmEAgEY0ndXU2lyVgMWXhwkWq8NgIAJTsyjXWGat5-NJmJklr3Ixe-JlTeC1pQEMIERJuo51rR7fH-4Gid9RWE4W7JvZIkBr5o1WsAjuZPpCnYUkkA5AbAFB65yPMqP7AG8e626Bh9AKq5qqL8Igm+Bhan+NESQIojZomhFmSgYurxsoYVCtaQkDehwXUFJTmFqiBbEWFbgECuC4MfODq6PIiPIBC9Y8JpXCImhW498YJjFV2iMoqnKDyfmMGmsA9GoYqMtUEkmJZFJhnrYvX0IsBIJA5vo3JQS9iVj1+ijYAcBuKx8cCoK2nZlbLTqqlvI4wAknv+FzGYiu850eXyigDwJ7fhIM0a8divoA2iXsTvhm4utcnjSsykGKBDqdibZR1HodgokdVG5fMlqg+W5qkQWQwsHN2HyvxVGmWoPKJzaKALQBigYAEkAWhBbbMWwSlnovKKA6djJbeKMAAIZQAVhjMnbb5Qi-ADc1RdvEWqWPcxtzqgggTKeKbTiTvsWDFgrG1r2GExWImd6qwCdOoVgbGJegamzpBdVCo4bNOJJnJoRzNamh59+X6sB4BXtUqbJqg2g5lZu10Ho5Nr+N67Hp-AN1uoCwAeIfOTvirCjoDsitYGkI0qWQ6O1UO2pmUh3AZjk4UgAbpYer9xLj6gvEAq5oIJFBlMGiKp2NQeqaJF4QgCr0612if6g2tgRDZ8BpBfZ2eSdNhdo6x+oJAYc5IQEt7Z6F0WyIuGfmEZlphDRq3Gp3l1q4Iiu9VRDI3qPGR0L12os0a1N61ftuLfiOim9ZnhgcMWLAA2yluZPA4QHAABPXJgCq3SYByINQetAG2ZxBmoWBmgyWRlNoWg5hcnqDhB7t1qmCfq8Bpca6oJXFxl9jmKCSmJxkUh8+IBXXJNxKVRbJIqIkoMA+emGjXpG6IbmdqE6QCkNogKo4LdL3OTimZ52AreZg+ea3pfxVapC3fxpQx1LhKBl64DeTJ1WnOv6LkAQV9kKyK30w5K7Bye5Z7rqsamsCKuXBjxFCSo7Yw9Cq1tThYDlGflCKmg-QgzqF+E44oo7C5EmACr0s23gAntHUu7Z0q6TY761K8BjUEOReMZO6duB8H0qDOiet2eWeuN+4nt8JBaIAOB0Jgaf+OBdhkqjiiTl0HpZnhWAy2BTgbpYEeY-pAx9OgzvA+Tl7CW+NVO2WDxFQIbXrjaEAGhmegD+Zgq0BBhpIN0-a+fHZGZgANCi9onyXWWp6SAxqqUBIi55eUuA1dCdTYgAeyraL8dSFtoMkq5Tv9HmmrPm3J+a1AOLbyqHbuyCaitKmJ6vkdcqfZigNwHe63S3ym6B0+8wCJODhCtu7649i1hE6dORyC-abhmqkUkbtGiqABMuGz7WZtmRLjEpLKOTYZWxAVSuC0FJRGo2mTZGDfICVKZTonJfCrGoRIbyoMtRorBXFv4Ye6-cshcpBT+pMJsiXohclrauSnCbZCAT2c4hmYxv1r6OuZv1x7in4myK4OTFY++HBZzvIDci0Ig0ezWp9kkBfBPzQpaLaQFaRkGZFarQPRCu83CpHWrGqSL0TcWOCn3W1itibU2AG1Olf6YFSL7Oerap4XnmQhcTswAFEkZVDA6Ss87jCUrbmKig58I1iHixylYswt2dnZfngdwgeVORhwhmeGObggPtVyyTiOkQKNUjFXY7uQjUDpKTHoGpyTdLYov6CIAMxIo2BOKlUzKbPvZutvEKTfnuuzoEIABF3rqe9Q6fyl8Xl2nHiz5dtJRkzXpUkRoPKkyPwoHCyaP20GLxSAQB9W9LLChmHxZMc0umCCqekcjj27cjqrOsWoqchgARFvckeKZc9SoQKqL61LeuIIBqetitxkkqEVIOq4+ogeaj8qUiVCZ8KbhwadDlPAOogKEBCXCi1VwuBCLIH+JXJlcPE7m0FPwoAAqy6C2CRwm7NYytQi8A1CIeoYI8GVYdXaMwbpuGC1phVN0AZSpPluPxinui1EMaYGQpIYuAkouBfqFyxGqVK-Pn7k7GYQ9DY1QPwHCEaNZqsm4Eq5e8Z6xAtVu8b5Aeco8LAOm4CbZq9fGjWJNmA1iIPIJJLvbEK1V+V8tV2mQPAup2mWzkCyhKAMm4k0NtoloWn0GuJIa+4ttxpw5QYp4n1TJ2tuEV6wQl1Br+eIvUKrKqs-lvkA-6uxYjq71qeeipI-tA7bxgQDmaWe0aV5b5mWQ-OCRicmk4LijMWJR-EWdXv+rlANg1K1T52vuw7cKFg9lrYY0imYS7zt2+9rShxFuoAhRDyuVMgefOrZbUKj0NQDGp80l6aI22KYcLAqo7TuIXW3okNJLiejiF9yJvDs8FglmYSHpRJB0e2FWKrflKaxmNwBX6+9FhuGZ3v9zYaPmqtVghLipV+VECKAqd59XrpLkqcjcrCTgJEFcRqcOLFf4gKO4QYtlzCFVZyCp5qvOnQhdmmicTOkoD5R+o50a6dacQGwm9nfwEwH-pkTrlSWCn3XdAv2uAY5S654QAZ6F1Upk6xUUkBLuyjvh9-dKVJkciGzZZdeFO2FbcglQ5nGhJsuYFj8zrAnKfASj8R+jLkNAQgkPejEW4oyiEdYm3Ay509ElpgrECtk2eEigFOnSQ9SvWR3Mh2hce3Zn0cM6iYqpICA8YQAF2IlknaGinlkYixWUlXVTM1DQ5yjc2lIpgHpSsHn6g-6lqseuUQc9zSMsI9kKEeJkD07eWMC6+mFAdOlcUV2lHEkEmTqQIDPU8p3oWf4zF89+gF0woBCA56FWCtgmv0TwFTatyUrs45EeigyhF+U5hHuwug9+cXx3MuCXywzdReutagz0oUiQKWXgw8X2CssJKgrW+9l3k3Zzs2NdE8UyKhjUGpjoMCSlyi6Rin4Yyi+weSjw0EkUMUhyh3MKSngWVkVCE7PQ-cRVkncqs1kCW2XruliU-ExwhIgQmgEaZCm80GRT1ugqn6cnGkvslKnD0oSReke3l3iMx0LyYix28xujdc3LiKktxhMmBqgZSXBGVCaYVYAj7jbSFqljMMRkc6oVXsE69lP28wn0aQhioMAcS4UfLQ+c9gn6qX9inU5h1eM6pWj0IOySUzjxiWKLRLAdWwBCMOmTsftlO8YoAwMLSjGymYjmU3IlaAIAD-81Ln4AM5U3cT2AJqZzVrGNogaStCwXUrejBMAGimKJpWKcgIDASY8USA2ykFokDHrMKAXjkmqgxU0KgIggaknsAG30S0w0ckbswsiC2hs6LES6AkIkSs+QAWC9wHWsDzDwATMTlSqVTKUTamr6hLkaCcQiXC-UA6sMSx4ATtjl0BBW6AUYQLa4LXuErj3FkVpV3e0yXDM+20D4BgWiwEwCRkKmzQaBylmUVBjrk-RlEcVQlhyVQUIUANmpKuihiqwgBF01GktUfgjdCh+ktEhVUqEJzUIUg-HEALckucnAjUkNQD5aUQiQQiiRmUwcg+YIjTc0VhjWaJYDWE2+nmGDfBk0tzhQACll-sWiVXSGdhdKQ9X9kfSnmB20SGEmgh6ktlkawPaDoMGcFiMgazc6jPVjEBmlWEMADB6aqlnUp3nUWTcV5UitQ8cVQB5E7I27knSEQUrzjdM9gmKsP21O0H7kpqORSnUDJRLqmwRREdCQGi9umMU7AHBSh6ndaFeSsO3xmPSzzkVC-YRkcL0k4E8D09y4HnMOn8TkSuwTYi3CRC0Lzz2yDQhP6nvTGckbj8sCOhgUAKlPiQ9UFqfF24yrmm2Mm-xNcZKFHq71mxmvYBLcybhLMBSS8m0ohoaB-nxwnWkauSyDTUBrk2E5ph30zogZU+jWE0XsxscmigBsv2j+ULUmsMbylqsU-nA8ddQ-ctXgBm4GgrW6hQCAgwXiUbmiSyIjTEWXoiQ878h1chs3RU8ckFoIzl9ylKRNKIgC3kxVjMcsvHKkl4U0MEVjzMBEDEEVgT8wTH21sLEniyC9loAJADW08w0nMq7kqUWIivUIAFwSHOQjUOlmM8hAFT29dmT8Hgjk0sfh8kZBg8EWykAivwUHEEklCAC4jjMAGkYghfguclqnhkFqDcEHlkUAbmnUMKclIynjXy2G2igaFojVAn+lw0KBj9WYAAK8FogIg4oFNe8SiEANwCN848kbWrAFGiI8k2wgNzREohinUKlkhOjYCykxO0eg8Fg4kFQA2EDiWFgYCQJkgNSaaZinTCA6jkUSMRAMdgEDa8YlTwsiEaSPgE6SYgl2qgNnm4ERT1UMVkO06+TaEf4ztwE41KgBoKCUgIlCEctmpMpyE2StajsihiEEsMPgCeMAArsrTm9cDQBRcpgmq0wChRsvJm8S2WlCCYClOcQYngU9v00CnuSmK5OSM0DSj+SQmGyyqai1SmHmohr2iP04YGj0JdQ5UpllxSzD0ewgLlEAp0DGcAMTi+T9WW89fnmsb-jhCBODGULAXOscYmFE9VS-SG5xaqDKTK+zSmAc5SiRkUNxvMQFSIQsOgGsKA2hEMoj10KWwvUAgGUMDyhJUi73oSBogUiTcjRKb8mWsMACeU52kJ0AFQpASJkCcNFTSyd8luUYjjSUcuTt6tKkgKwezJUSDy5E59hV00jxI8NUigUqKXsEu8TA6CIn-C-TkdUNilJMQVR2s-vmGEDBm68fgBLAxSn267MnRiddRXcAgHyE-UDJuISkqUEoIchTj3-Cy3iKSt8jK0IBWm+50AqELVRg8uF24SHzlBUlYlh05EkeA5uQciZiX-UsKiIA7MFycReRrq66W4gOKiQsUHmxCAnjzUzgRbciKWIAHoMfekllWmT1nqm8ez9WZImo6o0X6mkTgjANtlzMd6UPk1SATsNwHzkGmX1AvjSEc3gV3cNhiQaW4y9K2kRCiTx06S+8gZEdQDsu9NhvWIQHU6T3lCWmimCcIlmME6wlcekLiFA+ajqQ78gZiIylJ6wKjbMcciBSQQkMEX6GuSL10Pka4H-UAYFfMBAQTEWXgaADiTwg9ygBsFQGV85gkMu9LgDiXyyu8wqShSCUVj82JnKco6mRcIOjK0gkX0AJoi9EknwlSSAVacpoJ6AR2ABUaBnk8mRj20VoESANQA4kypUbEHSGBA7hmf0WmT0iAMQR0iSh-AmmROMlICAkggAYUromWkM6jvCZ0K3AJhi9cJQTO6siDFEcyg30UXk7MngmNSTqXsgQ2kkci8P5ERgEDm0dh+wz-UaCyGRcUDKlWsVSjQkAIUicvgVYyhmiqQiiQa0xoXMKjWGV8IZmuSI5zWA08W5Wl01sEOYjtUh2h7EpqXcUS6lLKlHDk0cqXZylVnYBpEFKMqamKcyaCgarkW+MvoWgyHgg3eQUjgGIbS6mFMiZc61l2+6oJRg9xgnGcfHrcQFQ4kqeh+MBGj8wKNnGCpsXOAoKhBEo9UzAGpjCu50CxUK-SJcsjHXkXxW3Ux+hr0ZGmXC8QAfkU-iy2vOjcyEfgtEDUKxE8OjAkTelKAJhSqA2tnMOeAWZK2ghu6iXlPi4wVTs8sTV8MIPzKcuTpa7IA+qXWWjsIfinSLfitKq01-U3gRREN3g-W8dkQUFMW0Bwc1xW9MSgWb2lAUG8i4IlaSoS6dgiEi9jOsSBn1A-y0my2XDiGPQDi0KciqA64RWsRohWehgGDm1EJWsAlxVMHIWjARImyhh0ma0FugoMxvnu0PjUgY91h0Up73H8InQIQ2IUVctazAAu2xosIR3Ecq4j+qL9mAABOEoacLkmwmdheay+Ws+GIiREBp1FmPmxrEZ+k9EQ8jo8MDTdShVWiYgDkYerYlPS9WAraROhvC51n6hbTll4S4j3CbplDU2GA3apWhZ0R6kygdIXmSlQjHEFiAI8DcjsEJSmoaMZUtC65Ues9MDSSZehaUOqj4e9t2y0osw4A1GgOobXlK06ohlGTx0asjpiKsLdlgADWmwyHbheu+YViMDfzQaGW1IKjpg5UsdmJE-AxYCnakk+SalIUtxnmAiTnwQ2CnjEgETdMndhIs3Biv8telMEl0ynkgCgKSpYCCeUeiEMZcSKS3J268IXU7cFRXSMN8iOEsYT1c3LkbsfqlBMQEiBiB7kgSCQB1ifmnGEDMWGedch9SCvXxWkSSeAbYDTMuSRyyVogPApACgAjvmyEQ8hhal932hDQFmUg6nXaAHlWCLYTyUHYSIQ61h5ayUheuVDnHsp6nck9lm+MTGgMAI9zXmwFgA2dCRQAazW4gKACUOZCjzKRQkhemejTMLdmK+0Qll054B0h2kiLcu4TIUUTg-hiUUcydIV7RS4grU9xj7qUrURE8jgEkhABbs0yX4AFySqcvEJhMGjSga6rlfqpGiP0rfg6072jTUedmW0bmhsMDhl2yWKmAcfAWgkRIjsEekOjS3IiACt5wB0woW60qs0vUkwgF20Snt+C8WpKEXhe0K-C4MtxgKSHCxGUkmiz82whLAMIXpgaiGE+U2gbaCsVnGfqliAGxigaKTlxgEBlaAhmjpSFxkneUpg6ULTTzaqIkjAlxl6A3oQIMdkXYSlglc0ecmOMmJUJsbrhEyb5i8sqggA04fiOyVfiYmQURzkXllksASjrqlFlkYxYFhKTE30AL7nPMFHkjUL1zxM6tH0SofhCEvgR4iMR0WsPWn6S4HkRSmoC1cvknhS68gTCipgzkvaM-0bQjtwEQlNE8dlYWF0QB0ZN0rME4zfcYgzoMR1jm0Dkh+EYxjtEmOlzkGcnHICQC3KpZS5ymiJgAC0VXMoNheE9MEBk5wC2AkIjIqsBjSSR-iQUcSSf0CRixkVQnkAdcgTeSRjuw68iYm-fW6U8XjsAWriW8ZGk2gq2idy8gFpemfimEYwi3hgN0AcplkhwKLVaApygMUSgxy0LEOZsmcnMQj8ks8PECvidaULU9YQ7CromTh2Qk4ijYwnEgenAM8w2YU45Ct03Qi+MIbS+CB7mZa48TROqQUSEWqirEz+lQBUdwsQODlBEloQY83EGpcUYG-kdkBD0dImJMJaljSQCmyEJOxOadkReCMxhbouqhuUEGEus8wNhMxtgWCSRjjClARbcrGi3GjMgUMfqmjEwvjqsJah-A7PU3WIgxZ08WhWE-6iqcCRkbUPelME3ylVmTkBzMPQLi6igHr88mLLkxrjLiVonhEfUF5CmmS0aj0laAPgF8Ckin98H6xJia4CLcXHkOyogSqcbpVoSPQWv8wo1PMq7ggkdISZiXdSb0CwR9E38ShKWQ1IATcV5C9zliSIMPgWaVRZxfYA3UWqVcEkNlFS1qVCAuyi8xVPlukbwmjE4WNt0xShhCA6hsGBCikoJNkwgqdjYM3EnrCCONO8fCgZEzMklCGokHyGNyQ8GdgHsfhk6As23mAILgRC1alkgapg2MOAQJ0saR4AboHL2kfWzEs6jIUJ2ViUMS1chiZUyEwoDc0YznSsiImTEoqUBKXWhOij7kSAqYiKMqWl4ydgEIUBildkY8WTQHIFO86OWw2N62+MypV+ElcRD8SCV8EWyxF0HIFYiNakkMdKk8St8j9UNTV0kuBgRUrfkSkZZRcaRuPuCjt0yEyoR0UiXnbCRAGXh82KVxEgxtUXIVVmsfjV0WQmoSt1iq68ACrGP2CHs-JhchGwhCsQklbEu6IPUfCgbEOMnQUWYghSCBkpiL7QzCp9iqqAgBoCzGkhEnWhiEZdk0MkPxNEt4lEC7Elm2yQmZkaWTTMqdgnMhejjwwoBXGsSXMEA+k0UIXS9chFkuAZIhYiqcj8w-mhIss4xzcEfE8SiUnVERElCAyECm0GigmCGDEaqu4ENmNm1+ci+mJCf-jSkqeHdEZ3Udybswu0TynZyzSncCOmmCEhGVSsk4VSmQgh1S9eWBW6CN9MXBGKRlMWtc56E7kasUn0C0ObUB1CqMVRkcy8Bn7Mu9WxspQVV6EGDjCGKxLc183oSjtiQk8lmo6C2jGad9UTE5hULUkwnkcRxgqE6DkjRE6mYGVonXSSRhFM+OEvu2cIgUWpmZMyLh4y3AiP0q5lcejvjrkKIjAymW3qE2rmxMywjeR-DgZi8Sl-UAgHSBEg12QsZhyC-UMTEZem+qiR23CxZlP2byntsjlRyEDIgIkLKifkyjgyUjYRME2fny2MDT8wB2mFsegm3AMYlk8yEjL0k7mVCd71g8rBV2UGondh64Vo6HoWdsDWkCQEiheEhKQlyxWgrUtkNiMa32jKxOmGU3CBgA4wmT2y53fA1OgjKpmiDCirh2ALxVXMqyn0UNVlWmwyj5CvQmFSwQjYKnxw0i1nS6AfIx3AEGAhwwe2JMRandsiSg-0JbwPcEkRvy4enU0hKzlSEgHDAskAyKJgi7ReWLvCIrniAGcHtCAwiOUknkyMMWJ6EZYnjCUDR6EEJRB0WYnMEVoCVEUQg3aiIidsZKF2yxoW1cQBh7QbPirEujloM2cn64ja1v0W4jRKccmu0WChZ8MYjV6vWlc0lSlMMPZUpgIBSqAg1nCiUSR0cmwkqEuDj9wjPTyq6+R9EWdlAAtrkxygNXzEu3ksc-mme8IShxk4YD7+slkic4smY2GNnh0adkywUWAvk9sQr8i7yXUREjk0jAWLMzoH4AY6l3iTRV5CrIlk0WwikkViRWWmpji04+CKEcygIQsai7kbmguUF2VgMuTXkcPWg+AdADp0LUVbiRcmQknaQi83omgcmok5A2kkz86kgNUAKQvMcPg8MPMIKSiBmGebXnk8g4n7CmmWfswn2pcONhbmf-kh8-vyY+BygHUksJ7Q7wgeYn2CSA5c1QcJO1YkXpUbEyAEkaHxnQM0dn5RTdW1U+lh4gGQ1MEBWP-x75jNsokVw01tW8yjditEd6Xh02wkncNTWhcpYFKkwwWTkZIgTCxplhKiIh0cjEls0vexxsREgF28ok9yFHjGUZuBPa1nWKUpon4GdM1isJzVrJywiHsPtj2MDYn0UbYFKizXA-cZInXUOmmtSdM05E7fFV0SChKimplaUK+kqEIyh5M12P6hTMnXS+ZSesuclLEXYQfUhiGQk0GSs0pOkcUt539MBOjUCN4zdSaDUZglIAWCZ4U7sd4TzAbFjpC+OF9MOQHPk7PiXE2WhXSDR0bA0GlYihEgzUhoycUGQjNMuknrko7SA8WTlaE9NldcuDh00VYUZ6yykAivjwXMawmxSvmCjAm6ygkrkMMMWBR0hvajpytgmr6SyDWondgUMsckbGZvXFc0EksMgRLCiyTn26vIWFGsSRrEOrjzeENh60xFhoc0HnmxebDoc7ABeCcFWn++Qzp8lyhlc4fl96IESpA9yiD48VicmJxmW0MEHEhMWjky75ixiXqSQClGjjsz6WXMEfAYcM6mT8-ahKiS3iP0i1gkSQ0TREBJg36ZKCjApok3i6vi6AjjjV8yYOV8dwBPh+r2500Q0IA1nW1UzcxuAhMl+cp3kWA9WErs5IkMCMhQaM8QEL8ZQh20OWgz0F0mqQnunc8NQGoAO1iYM12JD0iXlh8MFkvqZKk8EF1V6MONkBKrPh70+iWMUgFlZyWwWu8gFjYcfxmc8K8gzkOHgoKOlgxUfpiFA2LRaamdj-GfVKeA6tHkclXTnJ8SngAoogmUW4HMKb6jSUJ3hRaRuKmwk2SOs4GjeRdIVzAeIkGqgdSP0LEKA81EKP0ywnSUpPiP8iIh6ALWgFCDinPE1oCWQF5jThJpR2AurgqEzygS82Jn2UEgx00SCCO0YAAjK9ggAsb5n7UNngVqSyEQkAu1W0PQnxw6pUe8vKkE8PHUR4R2FrWxml2UWYkUs+ZVxSRok96USQtRJjmHkcWADAcchv8RgBMUCRXtwfyhOMjj13Avz1jMkKLA8p0TFatun9MtkKYOEfgIQXFnCmfmna8BmQScMgTekaunty6nQb4hNkTSg8mGUqInmAbLm0cQaS9mFEm-MuBV-ktbgKx+ohX0TORMMrQHe0C0URw2dgP8JAAbEgJS-EFbnDUO5naUgCgIKKfmAU1-mvmho0UMyugUszUk3axVUXeygCt84USaK0JmThZKlbc1akyg65UdcFziqMxsVU0eASDSuST8EoSlxW38isg6wmK003W8sKMBZsbzh7Qbs3uCTkVWM-FQMESSMsUbMXmM+3QSAJonHsMDS1SQ7wBi0Jk-0owVzENBONaGmlfknbkgMB6kicMqj58U-HD0ZGjEev3i1EGSlaUd1gWchAF+SNiMrCJBx9OZKDLiEQXLB4jkI0cdXA4P1Snsygz2U+knzEUwQuUXIh6COygSiHKkV0vGWEgfezd8qymn+XHi5CwMk1EPJmIsSDyAiavljMcfDEEEZ0rM6cjCEyfjJE-0QPoTwCuA17SG0R+jkyh1hg8UzjAMDMVzUckCRklekcqXQSFcngBri-NlpErGQeU-2iycyij0ioaOWM0aKxEcQFTAVemW02diReQkDMwNwBEM7IGYUpZXBasMMQGtwV0yQugFu-2muGoQlVkpjKOcFYn4CFMHuAdiwgUC0j6EqdkuE0Dkgkfyn+0cemDSv3kx8CIkeCpvW5hdcjGC+CBiOukn3sGWw7SQgEkaVYg3UJFmikYWnACa4DXAjVjqujMjDsO4Ggmp5nU02KhfgXoR70M+gr0SIC+ipYie8iyJFsKInGqpEkiS8EiT0IQg9cjYFrcwIm200ulKUEuXdsL7k0uN6nME3xkzCycM-kAKmOsxthwCI6VCEUqSrCfqlg8PSgJxTPhsG18ypMuKTDiF-0PBDviAUCwDb09ElYBFw2sMr32Ykl9k8iuBS+KVeiqU5AAah5Dhy0sqX2CVonBEj2Cn8vvilUcujNUUqhs6Yoj+AZxjm0mEDMEaoA-WE4lqUgoUvqjPUKUbenfaDQE-kXEQ-kASn6h-ZUnaOQGVy-TiqqdwjAUtC0o40elwUsETpsDfz9U7ZSZinmm8cAfhGyiGhLsLkOmMrLy0MJnW2mbewnUUEHBi-ckW0mikniHI03avM1g8gkQ2pfuUGgJKJJitdmBs-sl3iKohN072mCED70-M55Xl8-Qg2EGbUw09ZWicyMRj09U2YGAQHksxIUEMhrh6xtOn4CRZkua9ghSsjEGGCyIhgCwrJ6K4HiEEqrlDkRCj8EiQlPi8VkPUUOjyEOQmEqA8iQKSATBa-ZiXkoQnrcFhWxsdSHjCtahvh0Hmv05e2pMTkCOUssiWsp+O2kEpl1cOBVjsvbkk06JWxaCzxpS83HSC51nVoImhKEJ9kcm02nO2-FgsUOcmGc20kfcnQje0iBM1MHXleA6iKUknInlUkemREkLVjkiWXj2AWB8EJLjAeLAXNUmmWNE46l5gYun1A1tQrUejlaxzXUrUadVoGAF3V8jEhAAoSwaAcumGecHiBEt0nxWEDWgkUpiL0Y2WkkIbSJ0Yi0ps1H2-JMfGn+49iaM9LhCi1CgIKoQBHUOMgnE7oi6kUegfMuCjl0tOnHZ8EjdEP2CFctgGX8-UH6ERxl1M5pi9KZKArMkhinSwBnO0u6OMppCmoAHyg-M0+RASFoT9ssclRUZmGjS8CmV8PjTdKLzQRaI8jtEq0xFpyCkHCwqXD0qAQcUHORLAjBRC6xwjxCqGNYABMgiS2YnECLxVMCt2iMqqPhIgjkiI0jwF6yeHmjKzcyxiWoHV0UugcMzGlaUZuHWAVwma0MShhCNNhAKQ71fpUmlg8N+lXUreR-q1nWusjrl9aZjg2Eg2m8slaU7cO1jbAK-VLaluiXcOxIe0BgHmkj8zWyE2BgGUnSzst4k6ENJhtAloVjC-Jn26dyTs88hxj0ebnPMcugeOH4IhEfHQ4MQ8nHacQhrqXBHuZuSSw8pZTS+U6ghKXhmNSRgGEU9Oh9EIkkME1swV6nbi9S4GnzkIejaWdwj4sSIgUkLyhjkkOHlin2AcMHxkHCzmh8exl11sTHw20k7zysfgW4kz2xakq623Cr8m80lJS70CUh3A4oGxUmSg6RGChh09m0PATkGtqC2ndEPGVfM0DivkKQWm0YYR7sYGVJkvblSC9m3F01nyWU7b2AAkNgREdXleAaiEPMtyQF2koWtqBogaJuNiKEhszOczwTlcuFgUCzpkJcrkMxKCAIXUrziiA0SkBZLwWTEbfRGBKq23kfh3-CxIkAUNSRZCernS0eyndEARQBCLjQF2ygGQkmgSqME43hEB9Cj8e6SSE7igyS9U2kMSggXUJugnEeUmFATqjb6Fqg2S22hHSDyi3iZkUAG9WDv0qNzOMflibs5ajPaAiMcMr9nssQNX64IXxaKL6wFWQoDxCk9l2qCaijesJQtQKqkvC20zCUCTkscqUxmg7bkay1wxu8dWwIKfMirUWwGjS+jkSOO0MqBPNhqkeugckl1hGkd-j1MQHkJyngE1MTwW0GHjnLisxkrE7Ckz6qAM68myg8GCYVWme0yaMZN3PaYnTsuZ3ig8y5wkMM4wIQrLhb20OR8URFXfEbpTXEWVkj6qZiycDYkgkAMVlq+9h+KqVQkko9iuEIwiocYDChUDf1MUpEjN0R+gCU2KHN8doko0Zoh1czG3UAZojeUCTg8E6CJAKkkgWeE4x2EMSnmk8Il8izIEK5nLQ-0r-iCu61i60EKRYiVvgEsUCVaUDMVL0xqRLcDmlKgkVhJsAMxFAW9IrMsBlWmqSjmM8QRGMlgRICdOmM8dgAaEdwBwsSQCqcI3MHCQQh600hksM2gIIQ3QgBib7lkQ3ojrSM63VKH2ngsucn9kFlk3CECkD49UiXuEQW5UFQk1E0AONSGGnuEd4Xrc8hm5U4AXisjVntyEJS+Qtay5EZSBIAFIBzco13bcJxj3R-iRZ0q6l+0jBSDMSRW3EDlmZsVFjLqq5gaSfwGiwg+UnM4YA5AywgdcTynZ8jjxH8gojbALwW0GqwV4cXb0dsAdjSUhKwF8H2NmM6pjPakBQvcTj3ZAklkR0z8hAoENhAs03XYCJdS2U8w1oWlaQnsABk-EKyjd8TFQckbYgpkHenVML6x7EdZWiwfiSHUPOQ5AdSCqaiUlJ8RCg70wah+IUUngAqagcgavl7AqakV0zIE-kIJloUYViCQK-HsS50HJKbvheANiiaaJ4y9EkSDRKreVCkMyUx8SaTPC5MkE8xYnYkR+knsWQ2qEnd1y0ZYgzi8MkBcPinL0IziCidaGAASkm2MndknkX4kMM3oWek50HUkW5hQUg1lTcLfi3EBgXzqn4gI0181gAsShf6HI0AMdGmCcC8jasv9iCUV5lEiaZjzsxEHYYqUVwcz-XXkqSlb0RclgkZtknGNDU-OkEnsEkCgG4BMjTsvKnN8JolG0CYnAatrnSyO4DLsboWUGWXheMjWC3iqdzFKKwQaWCSlSqcmnek2Ymj0MSnjkaliiEMhXomHIDhcXJj1UYgDyAEDVLAOTWtEdmjR0sbhBUXpVxUu6Mjk32E5KY3G-08CnGCjvk9CIBRKUH5hyAc+CXUS6QucGBjCS4HnKkJ-kz0MWhB8+knPksoQYMC21MQ27guiPkCVhbOjSktujjECswSAOqgyEGdjWEjal9CNgyDheYmJCz8mQsLQRoUdVWLCPeiqypgGnigIkpBiDipCpUlBEWMlg0IImV0aLjsWljn7yxIjvOe6Oce5kTCiDkLCMMS0-6QhX8AwGjIc-QgvckRnKkHCwVEliVREGhiCs9eXe2MWntwt8nmsOYgeEoCmqSjYCRAjxklCuBnzKIti2MWQ3q4+wJN0DmkbCCQPpMehnnIa12ICkYD2p9WCy4t8nI0pjKeZeqgpAvITLa+cnuM9ygSktbnc0DhkpA2kVxSSMi2WhsyekGBkkcmH2aczYjYiFqPY63Qm-Em5iO0MYi0Urd3LU0w0ihB5WR6gDjBMHqm3UzVmyw-eRyC3Hhaar31wM-SQaEoMlVikbhFAIyguqWePlUSajTCCIF+UpPm2ERwlBUkFQ-cPpxcaEan80QhT8AWriikmgh4yiaW8UQkmLEm3lXESqVOcJomTh3Sjz0owhEGIykWEDgjgRSFmUIUwSuEGgGYEpGDYE4AAgAcYgRAvAlwAAgiEEIgjMw4gmwAfAlwAUggYwFAGYw8gjYwXACUEnGFUE6gk0ESIB0EegkMExggk2VgmsEVKKcELgiwlBCmywPgmiw7rmywWx3SEu9UiEMQniEiQmSEF4DSEGQiyEuQm9KBQj4kZQgqEpHlqE9QkaEzQlNAbQmsEDAO6EvQn6EgwmGE2EgmEUwmYlswjAkCwkWErkJWEawg2EWwh2EZrRsG9EkOEJwio2zc2uEtwlhkTwheEbwg+EXwkiCvwh8A-wkBEKtzBE4d2hEsInhEiImREqInREmImxEqADxElEnTE5IjOET4lpE9IiokdsjZEHIi5ENsj5EAoiFEIojFE4Glc8UohlEFa3lEiomVEqonVEmom1Euokmoe82NEponNEWoJtEdomIsjokbELojdEHoi9EPoiGk-ohDEAYhTigYhGUU4k1k8YkTEyYmukp4gzEWYhzEeYgLEt4mLEpYnLElYmrEtYnrEjYlJkLYjbEHYgMc3Yl7E-YioUQ4hHEY4hJEE4iqlkYhqlc4gXE4Tl1kzyIH8WJg4aO4grC+4lSkx4galVEihk9uk8AsEmu0l4lalN4jvEjIkfENki8lr4mcUH4i-EP4mtEQgCXER0sSE1YiDee0rclfIjukg0CT5LEh88Y3A4kXEh4kEkv4kgkmEkoklbEEkikkzinGE-kt0kY4j5ijBSDCjAQBEzUqvEbUoulD4k8lL4i2Ed0otQD0sbEv4melgoopAGBOTqAImpchiGF824H+k7yn-EYEhlcwElWCUkvUZf0rSEAMvYknEmwyIMpmEYMuSAEMrEk0MuiY4UkRlB9GGETzNOl14kLExYkJWz0g20yliXEoaXyEYhXokb7mZEQUkbWq6UIkXkg+lfIkOltgDel0UgPAS4h2E3skk0BgQEAXBBKUA0gykkUmiko0kMQE0kHE41iEKM0kxEwBHmki0nykhUjWkavk2kGrm2ktUnqkjUgOkrUnakJ0jKkZ0lFlI2SGk0UlikGV0Sk9DOmkaUg9lWUgWkuUh9lq0hKkhkgDl1UmDle0iakh0gjlXUijlEMn6kCMoQkBkiMkJkgKEHQgskkWjOE1klGkz2PskjkmCkrkgqA7kjUUXHj9sTwAaEZjlZkz0tDRC8Uuk5S2+ll7kekz0lek70k+kQvh+ktMgBkC0gPoIMjBk7MgpE+lhX+iEi9EAYx4RWMj7AQcvKkBEXFkj0lKkxUkgkAGWuUbmRakCBlJk+QhFMFEkXl9MgKEjMkhKrMnXlZwk3lsMnfkSQkFC5zNlkh8pp5J8vEM9wR7ll8qyczUkG0aIgkiQZjSGlshVlDFzEqrbjZhdkpNk2yhlcwmjHlS4kzEwwnPatssi0RSQaEs40vEFhUaEH0gMCloHPkC8S3iL0hdlRsjrEG0tbcye2REUHmwVlihFEvWMNk0kjzUqwQr0MQllhDsgjExsg2lU8sVsCoiB0iQkXFi7xYVz0urKliggUfYDml0kjREs0icluInSULCtWE6wn8kSkrqwi3mQcM0nOkbk1nyI6WsE8Mj+C71jecDJXHk-tjsWKVkXhGp1IUZ6GYUekTJUDTnPs32CSUqKkfZ7HN+MPeiUhAoQNW4kl0ySFk40uymhsCtXFUEqkAGPaGKsgtDeAUdi9mgNSqM1rlrUa4CKUCBP6hQpwR0TQAakFfkz8cHl8kjVlXMoQFMEncgDE8NnRU1ojcUGihbck73qi6mgb+c1IaU7rmiEFSoN0fFwjE6-wwJoKhnkZ4UHEO8kIMBEWAspGXZ8VDg5GCdgQUPYjBakWgCu3Cn9sUwVnmv0mHGz+jykmhjCUYfjhU7ChjK-aTvqNyjrxKoguyf1Uza9plZxwZjpy7Mk7s20gkMwGWGAEBmbsholvEGcQiSPJg9Uj0lPS+cjJElhnBSxKQIkzenpgkekcwFWUPkYIjt64gAkG+iR88SFnUA7yj8w5Ql2SBeiHUlHEdsjkhyKW4kpgXQU2SxpkhagtHtwtXQ+MrwEMQGCho09v3tCpQHsAZ8hnUtyUcmILliwLhwB0k5ktAZ1nb8khkgiFHjnw0Rmd022nrkZbUJ0iDnWUkClAMedhyC41h+wkPh70GZmssokR50fslSm77XPUMIPrc7OVfkHwGOBsEgF2XxkEA+CHGstETvCAWB38yCTA8rRj9sTkUL8KwWWUS4heCpjJZMmwlTsPxSvOV+THi9Jz2UpD0-kMCjZc8ySkS5dkz6L620EeMXa8x1PmUt1nisigHyEKrRU2O+jVAtQlyhXsQ1M2gJV0omiLsS2Ri8S31okQIk8USyhb8Im0AGGIliSHfl7UknkCGk9lb8GxiOcUEDLkAdjVEbe35EWUUkasBh9EJZhm0bgkzCE-jkSqWj1UtwXZCoIGaa49hOa62mpMsGhyKJ9iIUBtiQkxygKSRwhO8iphWMzwvzUMmS0S72nWs6wgkit51LUF4FFEIADZEo2l+c0oQPcVwTK0y8PTRFyUVcqwQdktb3oUzUEsSvQEDa5VP7kzGxQCPCOPUhbSkSOqheiTCkSyC9l7wvWkZkzEiP8pQDWsjag0as8kS0enGVCh6ltELFnl8oIUAGVDjIMHihBG+JWt208WOMSkNMEeIT8J+CCqQfYGZh3OjoAclk5SOMhk0WwCwUNmkBZyqnF0BdhCs28SOyZzSHqPpmLVeeleEMagI0WmW9EhVHW0CdlIgPon5sMMyXkQkhckwWjCGQZhWEWjTI8NnWtcvMy6A2gRCseHkZczrITEmOmyAgqmuG78XisRdjyaSQkdEhAA7CHoUtuckDg8TjxYiyrgry7iji0JQggaU9gJxVNwicbMkSEqZQNEhhjGExoUriaZi3MVoD9k6aKNMYzST0qLxOafe0GAkGkbs9Fg9UYYVXC+ZhX8VwIW2uUUscUXhwC5TlPiRyBcMBwkCAjrQK8uylwsFyza6NKj6c2okQkbMkgqiXn8cABmROH5lGixpkksHDVwUMYi0sFhhLsyolLAc5hmStSjj0Q71RAHoTgO4uivkY8Q9BLImMaQzJPGc4lu27IXXs-ACW8KIj8Eqwmv0BVV2SiR3ckrIQr0gEWumlHHKKPYXA8i1mncaakKE1YlE0CIFKCXGhD8JZi9KIblYUFYCuAMUkQMAiNRclIOYk6ykbklaRZCWQARajMmQ0KkzI5QZiRUZojdSJ4G5EWHlgAuIiyERsmZkzEgK4-GkGsbLiAMvRguqLxWkUrAwZ6ZZU0ckWnZApYDghGoi-kz+SAiBogMCJdAXcYhXywTuXKWAcmlIurkFouUkDCs20KE3QkeaaKkHkojkkaTBiz07Jic0Rgm6h4AVBUTFWqU+aOmMnKniUHKi-U+2hboIZm3UJpR0ib2hkyJPKuALwWTpMPjQ82mhP6NDUSKxImVUuq1TsJzWN0JUk9EEpiXC5SwQMpDzI0O6gWcPCKcKKQFzA-FmU0QgA9kpoKTapyEGqYEj3KSCD0EtIw9kFLn0AsSNucUiQrsZ8hg16gCYUMriKSxYkrCjtgI84Tm4MergaSrxmw0p5RAiBsTy0Z3SIANNl8i3lkaCJEFv0vS1MQWjmelvvU5adojXC+6iqC4DR6EHCgr0dkQj4jCVGpebSb0xujwUDfwhKtyi9my4QcSXX1oAsSVciethcULdFKgnkNJ05CVSm3OjiMq2F28YxkOU0SjRsDKQ-kpSiDMwGmFE-CgR0OliJEAHlaEuYn3adNTnO4-gHKlIVNBY6iwWuTjp0XxSEMujjMESmXPcJiiniuwSvMmQBiMLnxeSyJy304QGQsHIUJWYpXMkHnl2C2CxY++6k6kVhmM0kwD0i3PjCAaLWf0MCmfCHRmLE59hNEUtXXUXsQPcDOkSEVwVrWWe2qKWoB9EpMlNB6RmeAkDG6ck5QOAtykbUd6ThCyF1+0boCtM2hlpA7iSc03EkiCfKn0Uvbl3kRIlSUMWH8MKLX8Swe3iy-i0osVdkIF3Lwga6WRCix930U71mpcAMUMA4Giu0g4Vwuu7kIsvIVS05iFhUsrICuQ9U5K8wNZcPQJ1cigSoMmMLmUAEjEKRITTkiFLYGWvmF0KIgcgk1H7y1SHskbFVfClFhOabXRIKo4hCAZzUKqXxTV87rS+MUEArC2LU-qQ3WpEqSlR0FYDXUAugMyPpgVmQxT7AqgkyM2YkJs7xh28vmCQspoGAy3GVpEGbV4U3TiWyb6jp08FmfytgnTRwOpgauSTqwpQH9kwkCT8Nzg8UbRnoZPYVRAHCy4EkgWzBGaM8UJuk5cOHkPAlQgSEeZVqUYbx5acWCy8EfEU8RSjiSC4LPRjemK+UEhCA1HBCiO8jHEjnRpMRong2G+mAimgkmAMx3Vsxqn7K-Jk0BOAWeCKhVcEIWjUaEZkTKn+l-sg0Cz2K-USc89iRUtllViz6TOa7ImX2Zxism-CnACHelwUR6mzsZuniyn0iaMqynMOKqnFA2QWxEpEG01wihB0D+k6AGaMewyXJj0qmkTsV9QzaJNk1MbAzi6kP1rE4LQkkvTnpc-ch1s4CDgq0TklsFoVfqheU9yMUxPk+IhJEeznp0IhjQ2QYUfkZ6AJwkny3p-cghsgkVSUclWBk2LXBcT1hBKrigPc6SnsEdwmZMSBXa68UjW0loHiET3m0MKWIF1ev3uki-mThjXV+0hXNXSUXiKMl9T3KhFR74MRgQawTgUik704ktABhMnTh9O-KUbUhQlXMYCm1il93i0KNwgakaj0MQgp28f1giEuWkj82riWQvymVydHg0yJdCD4VekUc59h5ks40ih25heC64QkGtICeF6TnOMp5k7MPKka1JNAw0nijUEW2H7SRQR6M9-L8ASgCTZl-TBSbYh8BTCj3SfgnsEgJUSyZTgahNzirswohVkOTXgU0VkUSGUiVUh6hrqUQhIAnWj7qTZmtEeJgEMqfkccSCDBMz0oHU9yqvqZhEVq0jxoaitXesW0sk0UYTEcHVlXcFchmU61O0k5MSRUWUhOEqQgzMONgPcpeg8M4ijyqSJm01NflySuAQw0JinO0ceBo0iGlWqtzm2M02i0czCkSkLflsAUhn+iJMX5+LwC2ApZQmUmoGM89zhEMsslDRxDiu0tems608Svci1gj822V1MlIHh8HIAXqQ7zrEtWi9mETl4hlSgQuIrkhch4jWeHCnXxo-glyWJkCcNVk9sqJlqU9OkcyICSUAenBJouGUZudIoyEwWlpiK5kGs1fQhmbqNiU7zhdEdBk2wFkSikS6VOMFekS02QLZ0R8rQMiQh6xyz0fROTXAUhFUnCWZiI09lS6EWizzKi1mQghAs1UuMH4ssoTD01rg0M+SlFmmMP-8xxlc8DWnCxglknkYwn8ZqflKEj00wUO6j0UZUjwRP4EhUJojBSb2l4U4YAUiPkDeEBmWFCEukEiYGnJMVVRSqzySfGYRkP09wDU8OUmxMIZpyaEwCQUB8jza11hpEGeh+UWWwjs8qgZSCDWBMpYhGy3Xk0RT8kbkrsk9OEwB3A1CkIFo9TF81aj+MZuGWM18i3GnikuAlwGJiuwSjCNzljkZdmX8iei66QVlEGEkmAkk+u5eiuklasjAnZ7bl5M0ogZU6ki+C0aRX8EOG0ka4ALCmQBckmQCuMzWkoa72j0MBEjdmdNV6UAkVT2GxlkcrAIPA6ShkK6sW68FiCQCa-lVkZwmiEbqWm+W4x3AtUlWm7YmKkxwNqaoHiLMxARpUzrNK0IHg18ZDi2ygFgmSRuk68ZImX26mmI1vwSlqdGkcm12jF0jaXQsZHMcE0dkX01Sg2SrkQMAEoF6ywimz0BEVwyLukIk3ii7REDT0Az+lTEm5Mz0PfgByVsrV63Ah6ENak-0n0nuCrsh1SKui0WgLJ7JDcjgGkjn-8CGVDUfKnMSORV3inmilqNam3UBkjOEakjI5tQgrC-IjGMJ40rCrZlW8eTQZSiugXqEFA6kaBjM8uGg+0CYWEggWRMEYSW5W78nNs92iv8hCkBAnJS5C7whj4Xs0vqTtmoAYrh+w08Upcv9i-0-XGFE1fhgMZglOUVwDGEbexoUf9lq0RzgxmFMlIyzdmospejFAwqRqExGh30DwiHa5IlwcciXFkwIFYydM0gkQmFXMYHiJMC8VMpgUmIsw0JU2DfE8k8ohJsWUVoMRyFEciBgtEKSjLkpECG8+cjMc8YlECGKmm65cQTsr0j2Uqsn+WBmUAsgKnKAwCg3UiSgc0t0nXahHgAyGyQTR9+nJyV8jfcQngdckoXNBlsQLCgtDyA0ujH0rtg0CtYGGAo0wXUzAyDMVwJXpzbhhmeSnPKXxnPKjMlLk32FcKssOfMZ2k2ExyjLa9hibqG8S8cpzilqiKi2wQZkEMYCWw0ZSVj00LmbUKevDEzGxUK9xgjKWi23AHrmL8mcsSc1tQfMTcmKkZiTAy6+RwcmQA9CMjTB6OwmtqVYRm0uQSaEt8Rf60pAD88ABdEWqmkkKVSJS+uTc00liWy-ulu2Iq0gkZUiaM4TN6EiOjlMAQAXsyvkL0MAVlMVIysgMLUrSNGgiyLdjky+8Qvc-DhhEWlgYc+W2zQQIDlSXsWdsWmUjUg2hsMwgm2kTExe0KhUcqU2SQqG-SbiQCir0PliHU7HTdiUJJn0TckR0kyjqk8BjbkyPX+0aLUh8ciShcliyREfYlvM2jnoAFkVIyOYi6mCJns6i8N0kkfR30vIUxhLOIAMVyXQMNWXMiTdUAUfQid0onlEC61iFUMAGXOaljMECkjhEaaiQkUOgXqZ2iT57ahBEUKgaSZQiCssGlK8jAWFsNYkaSMciL0+cnY0PWIssexFMMKTnmUcqTwUfISqqIen6UBGhpETgV8UliUs26oWWMebTmccmhOELbmRONDTWiqZleA7ymwWVkF-kXygyc9GjHkFhmG8t8RrE4oCEc5hUnCmgJ6kasUDqCwCcK0GSD2UUjN0XwjF05kkV8nJiaUoqhcEV7hCUzwXiceTT8ubch8Ad71jU4HilMebCLEyxlIyzZlPikygoUggQJxdWGzcwsB28OTVkO0ShbiPEUiuTQjrMoSWU07Cg8sl6hGqyUlrcangUk42g0atL2QAJAWF8KLScmdDhjU63WT2SCEVsakkbS4Bkk0aDVsCCmWMCmRv3ARgAz0E4lBE9qnKWrRjgh7pjZESJksS+iXOAEBiCs4WLeUqZkricknechHngUcIQ+AIpmusWwXxWnFJBc4rnMODfB+KmcktEdSAdkJ0UAUGwghkewxbmuKmuUGZhU01ZUwaxti3Eu4WGEd9T0UhHTjqvaKwiX8hmMeRg36cEtHUvIT1MC9iQMoTmW0p3QySwMk1MRSCNUS92yAP2GEgjrTmUk2ggofokcEveyceD6liwijiHkM+hsGnUmAU-fQW2uQQrUrKXLiETh+w9YQWiFskuMBvl2UgRh6BEIhs0-ShP8koWkMC23Qsm0FSU9nXNMFegNUxGr-GtOlhUYWl2+3Hnrc8Bk1A9TlWczolCkmQgjMgIkgk+8ROaV9jpSWhmksQ3h+Uk8i6mQYRiWrYiQ0wNnua3oR4yyUiuAp5nb0xHNWsU+SdtwykFFDKkeClXX6UU8R3U-UEPUQ9gJwD7260hlScwX2E1t5akXstrnuqzMkT0VSAc0NVgCwkniQsp+hNcdOjk0bQmdAvZimyNchX4BAWbMVTVNiuYCsSiInMKG+m8UPCKdST3n6MgSHfkgONGsPynWpYjnAQMYkI8CsXOsPuzOUNdPt+BwC4MmHghKx6VyEKLSQSAdhchqokSUznkcynoT5MZzRNsigRu69ymXMmYQLC2+mXO4egeSUlA9BOqU9C31XdCU2SPphl2umiOHIiwnmBE1QkcckoRSs4hg7c+MFTUGW1MA1yWssYDyXULUlL0fogKS2ms5KgcEhOIJQjMjlQusYpQPcupkys0Dg8MkgDghKQX76K7hN0qPjOMJan-UY4jmUpzhbi3EE1CQUWKCSYTqKEhii8G1Ou2-4VIgJ9R70YdmScCJicEXUzdCt52nR51kbEGZgbEhEshwU8QJwoQVnKQ3gnEtrn26aWkmwAWF6UsSV+ktbloGxKSSK-l2asSihJsofi3c9VXzCAFxwc2dmuqvgnVotIACUcSVTsHjg6C6exZ8DsjROTingkBq3KcC9XD0qwCaEbtoy0V8h4MBCmFAxykj0vxgmw-6tIyR0q4MKIotQGSkBdTtl3q0GS09uajUUIWnPMdNmE+8hiMyIQGJyEwErCXJhiUBElPMWaI6ZXqSY8AjILaaakhptDVm27eRSCtIzjkOQrWEceBnqdZXkMt22a4dHgF8nwl5Moatq6NNmC+DghCsBEUYSz1isW9qTeAownOKvEK-QEYmLAGxksSCp258HxgcE3+keC+SijCYwUWx0aVzcSIihSg8jpElXXlUqslchdVhyKNFlT8a4Csl0Yj-8N+lZufYGxMVQFWMPkmRiIBlLBBCDV6MEAnGIgEpco1hrR9MDJB9xkXkfGkauFyjTa7IQ8EF0X+WOwgc05MhuUSikrUeYFyUegGuBF4HnEndhuUfgUjEBjikSVQHVsK6jlSglW+UOISvsWwV8+JonNsEdjze9jl9M1CCY+wrTGEcyhbx89jzEK8nISggWxso0SeFkLkpAG8lr02GQRUTRnuUVRl7S+QkDEoIT5MNGjdJbMWrErkTTkkmjaNLcwoKZWj7869hXcP2lAM7diGGJHS4iPjTysSMXm4VQVtcGaLAMGaOtOk7ljkAYn-855QLacRK4RI-jW0RQinSRFgwSWQA5UiGlaAiVmtc5AoWxtCxekFwzokkcmFgPlj+GMR0TsJ8nBckYg-WxY2OM5JRGk5S0nib-m2Ez6RX8GCWT8Rgkz8og1Vcp+KOwHYU0cErNIku6jiMoTkhZpNmxULVTSqCRitKnOn0cYwU6SUJXRUtwiqcmEEBuRZiqyXWGm08pUCJqsTvkoeRDacZj8MbqUs14WuM8ZIEw8miNvEQQhv8KIjnksWBwCdgk0RbGBPGxsWiwR2HD0kg1c0zNn9khRjD0zrDgOtunrKgkQ5FTeudYosRREr8LI842grsS6hOEyEEgGbSgXcWWGWi6CiIg51hhBTNg4OY-jrQ7Xg503lmdKtun7MwihysOonjUJ2mFsitxMkoNjJA-crV69wSCk-tkysfPrbkiPFKRSFum+9uG7UziiTUUTni0C8jSkDrnsEQ-hiMuShJcDml3ipmgtCEDS-EY6jrMnoRMld+i5CXJmSk8OmTEgEQ-WwsWmMIemVyU-HeUiugOoomlJA2wlySaBgFOLOhFcQkUm0xJhiOLug2A8vjLaX6B4iVWWlIbMkEMMxiEwfUlwyKW35S9ziIst+hoUegh2EU+TrQCWKpA7hiUyqKhX6JwgaUIQGbsrhmIyghpeaDbSgUC1lMMg5ihyPJrnU2vngAQTwPiKfi6EumQtEBbSSwawFIkftMbGmYAzOYxk0BWoiEkZFyEkWqTWEbYh5wloXtKSGh82lNSPMsgSG6VQgP8VD21i6Dju0Z3TeSa2Wy4vziywJBTGsP2zJug4ko4gNk7NooBgGItk3C++pNK2+nU6WQ0UcSUSaSasV0cKxEHMICgc0HUjZkSSj2mPEDrK0+yltaSXbcOmknCzrFzkKAT4ucKlMcBQhocd7iQUiimMk5EjukMSw0ibyVUsFiiuBG6Ciuffgx8h5X7KduBuc76hA5myQ+t22hUmn8g4WEiRagpel-Uu8kqsAu2ThVagHy7GgtOXxynsljmMsk2PVsUEk4k68gtkH8lPMbYhPqCKi4IEOHJioaQEsvQecCOT2qajlWxEj0nosiiV+MDBXdEcIVW8VpUusIXW0CG72QUCsW1iHijIut21giIZgCAqxj9yoKllMBtlTA7enXsUznuk4oAvQ7I2QSH6m0cFlj9Ws6m4kLwmOM2mqh0BEB3cYhkFSwCi2yTZkX8OTXA04ZhDcLxVVuIblu07OU8mc+KQMfIXZs07jc0Mx2vm6hTHZwVVYCMJl0UqIgcCxkjKcAhgrWAahu2JJiA8GokIMEpnDM-9myJ3BmGUeqm3k8ckd8XWWPUdvTAA-vj2m1YSF+S7m2M55mUGAUhbosgT5MLe00ElYm7OIq1yEV2ArCTRU-qrYnTKPPztx-hX7KAwgAq2kX-CjXXzN8EgnGVQEOKFMBBcLj2G84Ll60+B1tc2pmuy9pXfA-nKSK9yXCEXQWY2xOXksRahO8ofm20xinUkKKwQBcQ3ti3LnRy0DiRE3gT4uXWG9E7wEzEwJkZa9NkxhLKlQ8302Uw4wjrKTZmbULpQUMfLTiYuCWrsNNWu03qn0AcdRScDRARMC4hD0WpiJSFRuuETRne2ZrRC+qpgVKvklnUagg9mW5lbEziiCUfF3XO5dixk2dhPGWhl3k2jjr6+j3605yiXKmoUiU4oDjwnQk60XlkMQE-nrCtYnraN1m1M5TiSswlQMAg0AMUMkSgWPwFkOrEUHCjwVTEiQClUTILpyrj1oUsli4MdHgIkpvR1id00QcyYiAMNvnCEpRgvcrgjLZn4gHsPBgi8AIj6EMIQNUIQmuwO4gAMP2xCAJhQ8sPqkJWv9mvm2yTLiImmyAm8m0E06j8AM3gyEqzl9MMXn8c+OBX62mseMheRzExWgAiWxzf8BoO9i9EkXkmcisiTgl6MvIXp0WhjASZqgRWhl0gwe6XBV8nlHanAgoKgIn0aIhRbm-skJsxTlV6fFxjUY-PISIQT9WqQgxE-AWQkKMKmUZ8h00dCRhUypRX8TjzWaOYnUKu8nG0d2i8OsvEfeGPjm0FKmC0bSkCUqIDHiVonECAOSEEzVkhZ1TWtEgQHSMKQTqwnLgLsuKX7yzO3Pc2YkHEPQI6U1YhX87GlKUIokaCl6n-UQ1O8ca1hyCobkrsoWQuS2ISVS9vxmULdHpcQZltsgIB78h6zxKblXEUz+iFO3antsLKlzM7xicEpoHmEYehhaEBiMsjYxCUNFn4M54HgWm5mQSF2Qx81nSrSmpIWF8vgCuSCBUmt1jekgbk0MqsyJM4QChSg5i+UU7mppYvgpkphiKDp3kQUYrXw06tE5KRgmYUTQAZ04BRpqaLUfEAkmNiXWSes-FzECPNiduMEBchggUKE9gHPkRmRokgvnnRAYExKO4GIcUEDFE4tnmGddSP0+ZqNMNBSjC21lYGiDhDMdUmiceRiM0DRx-ABBipupRhvCivJn07YW2R6QSOE2+R2JpIBPqJwm-ElIHUZKVSxkOqhRgmMLQU-HRNEjvmXyssODmheW5cNhkdyoZSGpjijnMrRhpsWXGrs5wl6EX6ios05iJJmxUuEQhAXxgvi7RzSFgM3WlfIFxgAuJSjzs7CVAAz7hv0AiP5+Vw07s1yXhUOAXqSyhigg2QKmUs8jTs8iLIAVAS2USehf6qelRECwArA48RearTgPA-gF7ehfgDi6TVs0dQG28drxY142necc9UVcGLm1MG6BqsjjziY7oTdiYQxMMuF2ekZTkpBmWwYszUm18fmDyqKTguqxVnekpJO38BymQuPomYKohn6k6dkqkL2i6NxRh5kOkMckuCTi+Ekn8cOOjo80ljlMfOQahtegnsaBmesdZmeUr0mbVdUY0inEml0AuzbEUqirGNC1xErOPOKCDgbNRUjuEn+irCPQPjkDyUIUMxjNwKLQkAUKWmGbqQUMgIDkqUYH8cskDrp5lkI0Mrg0C30kYk-U1g0YKnPMDkT3Eq6jwgHWlx53QEUcVwFj0kSh4R6wzGEf1gK4AM16ENDhqUmglqsUImxEHXiC6MA3vlvKgAyp7xpUDClYAgNRA51ikyNC6nWpVegyEOtkkUTNhzkSgAzgckEL8J8kO0a+o6UKAH4CjuRKEutG0C8lgvAdRVcUg-DLa3ARhCJ-W4UnXjl0rTjiw101BU2GTrSCCmBsEflrEuOoQBIzk+0WlnFcFHm1sCQgkiGmQTE2SWNcyQFLBeaVVct+m2ELehkK2WgBii4Fm6ZpiLsXWFoipCnwMzcnjsS2Q3aKxmhMHIT+M9ZlJkJHni03tOfyqvXSsl9VT0o7TkyTGlc0Y1hf6v9hi04emyCWImm29uC9MBGiD4xul7AbLnZs5mhceZ4X3U5Smks1YlfIFYDzE5buG0zmnuk7Inw0LcSLyhpxP6Ygo6kSYfssrwhRa9EzocZBkcmi8lTMJLigg6pgOoXYnDhYTi7kC8itE0DmXhmgStluehGkI6nQsIoGOMGmUOKEwDnqzYldsaiiCen+htsdaEiSbAxgG2KmZsfdR6AMOgziTQm2MJNmUcKDostTQFl4-aUbRt8nHk9jnTKHPluEog1R0GET4U48nXUJxgwa78kSyGajcGTk3vjLuqAigLOnMLUUyMT3glaWwA6ZUEhyFnZMm06JReA55S+EEyheKEQgBpwEhxsMbINWhkgPgdADqkyPW1cUScekk7qqaBuhscsJXFcpDx1cGtlNehNgNWxMRcaqJlwC9KS7a9ujCcUKkDgghljCKwjs0iUnyAT8nPssSXmGZZWJCV-gEUtSldUaX1-sS5UYeYrVust22eCJRiyG2QUyghLkH4Cz330qvS9m-jgzgrwGs+82QIMenEHMY8i4i0j3XaaX03AdIsSkvYCD8hyykAuzQiKEBxb2n9SbMlwg8U8hjkqONgsE5MQ0c6tg6EPOCIk5exR82tlGeUJWPZtVlLBWqUJy6tHhEkboGspjI3alihRgeemKCZZQrEGijUQU5nLkznhTG+cluSbEQo1wlTNafMh9DMx1uSvyhyefJgfMvyVz0jEEncq9CKSbogbE9imt2GxKCitDUYehei4UjWUawRFRhm0oUzabyij0wHhixu31UEBAAySwkPl8pUhB0VangkbXSNxFxmosY4kaxHSGIsJhWLGeZQmwNnWA0uCiZ8YWmhy8xiHUnkL2I-aji+7CQakIQgHKsul7Rmfk3iHzkyg+Cl9aQXUBs1sxQDN0nQMMoxs6EevuEJNimwnHgKktbnHIywe6i+4HXUFHnNBwcnOg7HnEcWin26ZHkYgyMnD0-PmyJ1fSs0RIQZ0jYHA0VIUpc+Qx5iMjggM7SgCUlIgy8W+hwxSUXPKRdjAU20SyG1DRAAJ-QwCpyEBuU0WvmsuO9CARQgMIv1J6sh2LG+BluCn7m48-Fk4pT3hrElKkMcuZltEt1jaETOQaIk72iURuMgUf4yQslSlpGdWxX64AF6JLNiwWYb06ArEQ1A-6gc0Ivxy0qKR+MxGkIM57XsUGkUbAboULy5oIlAFxi1cdonyEZcxtAzaiiECSidSrsmvEADRNcM62mGpoh8eaYQlAUCQaSiumGch4l2aPkFEi9Ejf8qwkW8GmREy24BJiTilxUZbSnMMZTzYUtWJpcuQo8BWM+kx6hDhPpx7QE0j-G-ZnLUXQS9CgkXMOO7mQgmMMHERSUrmBWhQM3TjHEHC109TilZyuMn0cuYko4yMXb8jlSSscWi7EOkPISfchjKX0UruLpQxErhgLssSiaMoCnIUEBwzMvWguqq4jFaWej1MliQcCnugzaK+jjwbFh6CXCll0mCnWs5aj+UCRl9y-iyJSwn2WzBHQ29qvVLaQjk0crRmLdy5lYguBXD0nNNVEumRGkgTkhsi4GQUV9iqt9SRBK5utMcvym6E74DgqXxQUMzilDRbzhWChfmu9O2b+6UDU1c093piFIFmMi70T0oQlxsJ8iPMUCuTkA+wgMFYkgK9ileCaiih0IxmbUngGj0bYlkOh+g889icV0-sjKQ5eN7RIUWQSGHkJyTdVTEZmCsUhtPmE6cj-8UCWGe65TNkkV2OsjkkIMypRu6jqgeMA-kSKcHgPAoHlk0U5nTR9Gin8yOnqwitXBSYQ07M7Dt6UacOSE5Mh1sODlbUyJ0dEKAFfqA6VjMXIgTEzyQwUMfGF88yg8G-BWICTHisFRtQiSNwhVWVolKiBYUumaOgsikg2UshMgzRgTjuktaStl+dTJAPGUjA5SHXsXClSUJ2g3QOQX5EPjRLEpBUdaRvj6pYDGcUe7UNOJdXN8d8jedmEDZ83LwcSrAIAqWJn7KNQj7M8-UpUo7kAiEFn6M4YgCKTYvH83oRYijL2XeOAT9ylEdXz9lm0S0KllkHrgrCLCg+xhMk6S8CRikmgSekpEkcehlxogc5i1SrAWuEqDhdEaZgyw+L0TCvb2EgPez6pkCRuU0linMWqSIqzXR9gfUAYcfMn3UFoDeEXh2eScRUSAmjhLEH5j9UA-liAKWgXMOBni8t1h82sBl2S9Ef6ScQydywgkVpL-TO67YnxwjckkMc8g+MEQRgaYfmAALPiJCFfMwksmlDVOBjgAKpieA35mgCVDjO0C1gSEbzlHcsSXsUeSh74IstOVJmzJAjtgTWbA2T8ciRpsjYVHa8T1mUDd13UQmFjSqfmp09VQRE7HmvCQaVms8AEGUeRmuGZxi3iz4VTMyGiDCTMUbWZInywmYQtkNUYiyuikMAd2iYUMYHVczYlP0+ZSNUq6RaqUSZJ2MrgZ0psV8CBqkGi8hkrEPxTJkg8lGmC2h+K9MUHEF2jhyWemN0KIjeEcQBy6UAHYCpWnskOLiG8itjOUTCk0clICqUcjR7kxQjiJK+kj0Z7UUU3EBEkxYFYi3CD0iQaXmEmDxu87wgNB5kgDsJkqGKacgxUDyQVmDfw3U+ImicAHgVmiiVNAzDJrqQkG2ilGhOaAdh208Thj4YpUw8rO0I8ciTS0VpV60lYnKQOgESE-cQiSpandC50nVC8kl2Sc8jOU8hwBpZF3PcBIUHCBAE+EceA9Cbyjv83pN8CycIIMzznoM10RKiExpEMoIBF+lIKt0o-iKS5xltcCgTEG4mp9SnWh78YRnt01ihX4HuwN8jVnPabEBYsHnhqsoSlYU8ojdA5giYjp7z8Cn2KOcCUQcM8hx7s1omhUUaczCbED20Uziyku6Oic3gXoUeYl+MdmhGU0TBHEz1mKMqDhHkzVjpmLoiHpSYQMk09g7kdITpCMWPUA-nPHwc+F98uyE8E8wJ1c6KmEA-YTJUk5jSkbMUpE6E1Iylonvs35hpE6VhiEE6m5cE2DnE2kg+k+BhNZoUmAkK1myJuETgggbiuChwSGKRZlYBniXA9goUvCKQSos7dlsxQCjIUfywfe-FnISf8RYD5kzfc2MmDmyoR6xcIjAOuDSUGhKyfkdbRCLgEVaSE-ussiYg192SnuSAwlWCmD2c0EuXYpLIdXpbrmdMQrhoJ4InckjkzAAYlQ1EnSErCO8gTsQHnRKgDhcUIxnZglJT2IqIG2EMIl2QgnIw8VkzBtlnhF0cQSCk70iAkEIjqQy5ijAtL0PsIznKAg1Vk8IaUicsJR9Otal5MLFnRU70crukQWaaQZlTsGfkTCNeg3k6cnL2YJ02syCSAi3clhUWTlfsFsi0M8Fm30xYjRKoeQF2jD2Y2mJVOgnkNHskVi8cEqS7RRSgNM46iLEeeiAMMLUgSvuSWsy507u3MNrENoBqCZ4TqlZISN09DMeA8lNKgdGgwCojj5Cb7mCFtWlaUTmGji9KTzei4OOMgbXxWgshRgmigIKU1JiqPUky2joh3UNBQA2xMT72W4yj870YrM2KBvxxSjUCNSU5cqFjvU9Y1zcC9XHUAFimUEoJx00HjukE4lZC-FiEwoUisieIQbE6EzXmcdVPsasSwMCamG8dOWzEYQzROxtl381ShyFCJgrELQZ0AfAT40Poma0iR1BE3on40E1g0UYIkV0rYm1E64Xj2+3Sc0+jQPcVCv90rThs2bPMhpUC24S-kPoUZ5sXWGCmIgOBhiUL6yAkjvlT2REhNEQhC2ODogL0CIBASfMVMM9ykxy+CkRWbScOEVVRukXchKM4owPUcIhsUlHCRUhKVy05GRIgfuDJEpYZO+9ibO8DriysEig2csagt0+ME7sGqicwwBiReSaQcCsHnZyb5qGZwe36hjQikMvAOmiKVVTMaiH6gV+gREMFUXhsOVuC9qUUs3QmEgd2k2SN3itK74moa66nKE2QFXW7ohg8JrlXCHIEZWbyl1i6Dkx0okiBim7RsS0HnUK4rg2A6kjv8BsQwswzxKMVJmxsMMxQUwcyBEk4QUssuo3ktI1TAckxjKr5hjkA8iZczwBHuxxdsu2rh5wgei0adAAHKRSgBpV2BAUrEGUUs4zi+NnW9KxoTF84egy8V9VxUY7L5OMXl6EcXyUyRqWac7iQXE3xgjMucgt0VWUBA7ACLcutEVsXlicq1nwtA+qXDELlOQkgghKMcWikU14uSdvuW6ezUmtUubm0inNODmjYmW0j0mFcwakR4X6GqKZxgnZxTnw2cxjyqDJTQ8L5aGKjolmsg+XgAUKTnhSKhsyrj37MSIALseWmrBkfnfaa1jfMoVhwKb8kdUHTLlMEhnfMizmd85oLThdDkn01wNkY+Hm6eD8xbsejOGUc6hqOsmmFqHoe6e7i3HaSvRkUcKU9ygKkZcC0Rs01QmwyVYUdUwIHAUV-nFVhKyoSz5ljsMhUj69Okru41Tb0fTkhabWpwKGdjDe49hfcXygfMd6Ru6VDn8unLWGs0ljakxSgW2xX1FUOtiZ87D0-qfI23c7PV8wONjDefZhwsrA0GLheTiGCwmFEDfwFWuzR+a5OVk8kLJuk3x30UAV398UOjcyuQldsVimOUjazTsGcQ6QUUlxSWYTsEdOhJUIJXua6Thoqy8gUMNNVNBTmAFOTdiaVZKCHqdSrU80WCXCDaPssUCWSdutn4KKclOi34neMJmFfzIBWtSffm2iIrl-kGxgrU1-n6cTNhEsV5yaECp2fy3Ty6mywknstdgvkwogtkcXRsCMIVfCzdQVOd8g8MQYUTS-ThtsO+jykbWtOgkihs2qAVbMQ3WXkkBVNAdWABEvb2YGQMxYs6pnTVU2QNUvh0HE4mg90pUHYCUV0bG-iVWc2Unj2DgW4SIRaaKlt2xmjQguGCoguimHxV0DgV1WRon6qmdkElf5kIU0pGpcpQTya2kWZsbTlMQI2To0e8lnGlJVCyioRuA1dgWEWWCEkdaUCcRbkaujWVVRQZmm6DyiaMANIPcu-lpAcENO8q5g+CHI1B59qg3O-Tjya9CnQUr9nOgu4EgkBbXOgJhb89TRmwwuzU2Sgc2W0LIXCxMalqUN1g2AliQ-cwzi-Q0unWUZGP-8pSuEeClhiOL2fxWwsF282gh9UDgUicTjmVUJ9QByW5Ugw2Ug6k-A0Mc6DhtAN1hjUyykawO1l8wewfQcLbnOKR2nuCq1WfjWqmelEQXMORzhBU2SkKxxri+KGxlvih8iYqZUjTw24VjsWiRjkBSjcUSIFTutahHsF0XPcIbRLoMmkgYpOjocUC3Ns12UT9mYhYtDhit88CQBsqfh9W72gjtVQCcebVmX02KWtcnQRF8PGhgUqwi1SJ2WisNclqS81kFoerhbmUYAdaILn5Sh5mucMekauFoGD2ULh384mglBlaWz0OYxaishwH0AjSNSL2hHSyPXxw48VsdAkjhCDWiTq9CRh8BCmcsK9KYqjj16EveGnSt3lCWUphXc9iRXSGfkGi3ZxeuO2abMQgmd6NYnNBIbXJxVmiz0QgH1yKmhd10Nj5M5ETO6znmxM2QMkMOwAcClYnX92ShMMrKTPJQzZKCi+eeAebTFK-CkF0rTmMU83G6hwPggwj2HZYcfEsM0GY3eGInUDUnRroHghQGwiimw84guquIi-sVTnHaTSkkMBmS4CBKixEcYkriJFhqs7DgrWMWGFx9AFjsTNWtUsBlCkg+S2OH7nzRjvg0q1OhPsAhu6qzIEDaKERhEpZWT2m0AmkmSXxgvg3XCIrmWsVAVkgBHknRLWk5M24HE0SMj1s35nrMWYSP0EwrsIhsAQykIhucX9TO0zihpsJ0Sb1BCC2C5cVJ0Dli6glMUyMxcVshRmh1cPWWDeECnlEavivk4ulfhWaoBpNBTqs2+TGyAcWTsKCgahTQEH4sAEMk-vncUo1wN8+GiEg1Ch2zSCju0fBu4MoZTVEgtcyA4+E0MOBS8O1Qj+69Cg0CDgXRbBdkmAuFmRTO2fQM340E8Lc1qs-AXpss424UtrjKwR2VrUi1jbA28S+EaZk4kbMI0imZUj8W6e3yyyj9yGdkcqF6CmCPp0+aIljszi1TsEAYFkCUkgsiRzn46dqmTczas4pEwUYC03UvmIbWww3iQDsw2gtE7vliwH6zvO+Ruwcu-hf07OUME3EkJ0HYFyMMR3Qm5h35jtQidyJNg8cK-UGhVTTKk7ICuSJgMUyfMy7lUemRk-Jml0VQU2sWXDWeLWlLEh5ViE9sRZ8tazAq-Uz106rIA0mjmKMPaEKxvaLq9anm+k5EWbUqU1qUpij2UigUeAmVikU12XSsGYQXqo9WFC6phEyiPEMEbLihSpEFYKYahBGit19a2wgusvygUCk2mUcyMiIUTdVkgF-zNkp5m6h7cn64YumaaGkTuwQUivsYUUz0Hnn0kumRxUcoj1UK-QMAqC0Rh65zmJlaXecL63RyVCUpBqdyy4PWhdDqYE40+WBoWeInjsOkX60PBgDiVxmb0kyk4ECWqUUxHJFcGcB7sUxjBM6DgFWqrlz0H60XkBp0JjGRTb6jXpgRJO3XCSqi8chC11cHUizEBijoSitRtUvocoB+WxhCLzWtcA21vE-9mbqbWrTMQix002KmTU1ta1Eklg30RqkAiPxVkg7iXsAw8lTipHn3iI1nW0uSllCdYhGU1Wn78JNAlBrC1cEFMhH8RLgsKQSlcULCnkk6zeX80hi+C7IQI86rjkz6TVucVxiZqXsRamTkRAKpxnsqEVhoJG1NFUpzlu2DogyU54jnklogQaINSKUp+gn93Cl0ywwW18qd0cyqolq6NJcjUoIT5iHEn6hxOjX85TgqV0uh4tyynQcb5glBywgvMxY3kca7ixE0ig3atMW6evvlV6K6RGyJUTa1ehmTs7NS01AqwMEh8j-5UWHAAK8RAqz7mIk-Jjvel0mFSnOnm4IoG9CTj22UPQSZiJkoUsTmDrkJYic0zG13RalggM0QnTk+Cg3s+lj5M0Q2yJUyngENBQnGCfncSUkg3edm2F83PiF0-gC1YG8iOwvSxbmJ+rLETigbkmPiVxYEhEs+Zri0XQBXi6QQaOxYGbcDlmYK-vn3jqcjLKjcheEiTiBiGyma6Gpxh8PchZU-gGWkK1i-EmPjYs6TWfSxYX225hXZkDR2FTU7lcMUyl1o-Ckcw6J3m4iQGwU06QT8SUVbEgcAIAhiBggKMUMAwWkrSzrCny5JY+YyCUEM49SYmdBmf6VskzArGUrSKHkPkLcx0hjPR6ETmCBqdkV28OtipUZ6ncSVVTHZFqHQsG8gycAORRsi9i8K82n6gTex+q06QUy-ZVBUVbhLSJol10OkONMCej7kP23KslkDfNuKXOg6pj9k-MYRMtyRikhan0agEXNBdKR6Ap7yOck2lmMM2mu8Pg3w0u8wuS1ojRM8CmuyZrjXCoMioU0YB74J8kYK7AUZU-2iyAGNjTMGPnMEwBiicSCEScxlmZaw8j1c8ogrxUfh0UadgnEVskDEPHWxsFgiSKtelMcv2nuAuGUmoLc2IJY8QckF-f4ApZTNEzYimEclR8kkSGMsL0WZsaVTdCgEQoKhl1WsfsmnS+il8k6BmI5poIpAJNg7S0QkX0tIEEs0DnrsssMpsxRm66QzKnc0iiTqNihV0g5moa70muL7wAQkAoXBiiQE9yMPjquJEDX8VQlacC-bsE5Kp9UCKl3i9DPgEcKWbMjRs28PgwycIZjkyekQIQ8MXzU3GVY0TNS8LDzHWqoOm9CTkDCG5JVoMC7gtCMjhvk8kiW8tCj8AJVebyna1EcVQDuwgoV5CeRi6gFyTV8pSvjCp6R0enEiL0ZDgAs45GVCRrTeUxDm2E9VTqQylkHCxrSKCAcjd84MU-0hik0yU2G66lwi2UM4ZXcn-UIMjSQBsygGAsdSBeLCEkGqMjkDchwTLi9Niw85SBQ8hHYkGKmi9Em4TvUq5j7EG9gF9cWgOUjYBCAMLQtAuq0tAz0gz8xxl6EYRmxCLIWY0pPgzO9BmdjD+h1BxqVMGvmB60Eg2Y2GQjiGmbn+0CSibi5ADZ8IjzCizvXw8aeR8kYYXN8ulk7V6jIVmkjkZ6Jv0k+pWQlyyQnbMupqKsnEjAYTmHwMTNWhEiaVaMijNgAAOTq6wqV8KTcQjt99lgM51hD8uGhDcTth7QXFlxWpXi3pcPmkkbwgi8ONhRsbDhdKnSG48y0juxMckgKt4h9EzukS8Pyh9W2moe6EfA4Hd7iSUXeglSzZgXEGIlXWciVYW6QnMQpojy0xCcZ9SMWwUYvk56g-XOUoGXbCpUHrGRukiSNEEaCBqykoPYSnMo0UnK4LVUMypVecyGmz8KAx5ErZk0cUYA3Oi+iNE67Xe03K3byioy8kKhTasu4S7kg0SkSHaSzR34meSnPU60qakiQpjkjSZqiW8MSlLbmgQOEk8TFc9wTLKSgmUM8YkruhWKj8ViXHUMqh383GQ6MpbasU4IinMrj3W0W7l2SqshcsdDjrMj-ka6s0VYUDGWvC-+NuE9Ni5yOQgpidgDfMA+322YHkiQ0xj8OqDdxkcEEMQCCmIsFHjykRejEc+khusMmWAc-XDTwYFU9C6+QPgUnQzsEoAfKfLRSctXUcmaGoI0EgFCyCEjveGhghElpkSEpUkpB5DnukA+yt090lGsvJj4CsaXdM0WALaHKyncLwEQkg2lCSmGm8UekK8EiaVnKsngWsj2B0sGLj9UjgivkyaAIUhiif2NUiOEvFTzsqCxKksYnMQweY7CLHY-0QEmSdAVwcDXUCQKl0hrk8OnV89sUSKciiF+Auzg6KMDCGvWTwCwn2AWqe0Q0bewQaI9x5ExO2kMVunSUFBiLyXWRcMpsQPgDrjzeLIU9x5urIxZsjLsZ0PU6e6SJSFkgCACAO5e8dl+8z6Xsqobh3MBdmSFXnj5atUjukCKgNUmgkJeJFiLE-KRix-SiKsz6RhBCIVKyWW0YKMmm90fZgm1qDkp8qPimMCCLCcDIlHcfGk8U--jhCQ9lMZaWkS97AUNECBipu+Scx8lKiNM1ln+0WjT7qU5k4pGwnPkNARkiJ-Tv09CVw0fgQz0B1Hgkit0EEwSlrsRakFqtZhikGaL5MxKS7kycK2Y6tmc0SF2uG1QkpZAtwHKqYdHqGZyjEJugz8Odh30-wYlMAUhf6FlrPQZNyyMAiiXcDpjJRlinUkWRQlM0DksM6mnmMijmo69Inr8F6AiyDlhV08QmVsZ1kiMMoiY0GOkBUsugmA1TXzkb0i76YDEvCVIXdc5ORakkLStAG5yD8TkVKUt+mvket38KzuluS4AGywfEyUUIyN00SHkj0SL2YkZQlSmxpgRCOFlgkOojoALkNzMKA13q+3QakTgmOs4Hndcbzkz0oEgzURSHbEOjhzG1ljO0hsypu6TRhMBqgz2Ak9bUAciRkWdjgnxqXXB7em3UpzhcMqUTkkjrQuu5MRHSvzjukcKS2WXBbiSb5TxxBpylaZBhbsriJrEBWmfcTkUjck1mjS-th1iHAAlBn2GK0YjhVrigXFUuQg5GeumcwQwC0W+WBSCm3hs6UlCKQTggaSISg9rbQizsTqlp0Kull0O6k4iFYQcDrLiWMNKn4KR+hak9B2RkbyWQkRskUss1lXS1Jg58tMTHkbQincAFh6CiKTKUJKiQeDMRME5ezqwjVLZkVckBUK+ikkBXn-skThSCkahpSJZm2ma1iRe-JIsiDkHdE7rkVG-l2gmFykXsUtRGBFulm2b0mBGJXng1TEaVx6SmdMxuKmyhgEVuUxRuUHFN9yqFl98Z7VF21WiZkwsTpak72IyyMRKiKk1XWQ2jbB+YTJEsagWEGKiPU7MiOseuiM0ciQJxplMXzV2g+kUehlG4CAyN2IlL0AAZBKAlkSEivOUlobmJESJkruLAWu8Pticm0EDK0aamNRyihYU9qheM1tS5M7amXOregn0EViAqTPh2Mbg+-MrKXXsetmIcPknMQO5o-MxnjiMzMjmULTQ0CB5XikCwtxO27kKEM2l2Qs6gaOpSTSaZbX3iM5TPUOxhJcpimbEyrgQMFfj-GBikXkW2H7DvdgIiyACIA06hbV38Smk7ciVxKogFkMSzbEy0RnKtUmKC3TNP2LkItU5GnMO+6kDEr8LEqJoi40NWXR04MQy8ngzEcyYjEM8dkwggEJ6UY8hP6CQIuW8QFKUcpi0ayuVCsDmjCua7LJumiI5E5hy6IwWkCmfiQUseoL9+EwivhiOmA031RcamKkx0UYDpUjCR4iMXhWUIxg+qDsmT2YQ1ucPKlj0ZSucC32AhmpSov+nLVtEg1mEerCxsMVN0c81IjhE2WhzE6iz2MJpWY2MUnyA67VIK5utzmQ9gMA0Ql4UqwgckwexV0G6lxU8whREA+hZ8BeibioAAr8mYECeLvRSqhAsytk2ibszTkcM7NlfC4OjbMU6nHWFa2m6QYiiTY6mKsJ4A9iTBQr5xGSY+C2lpE4YHNUpDwNW3K3l8CpSF+AKjqEs5he034lCya8yF0LDTKVVz26OGBhwVGc32CqKnYcIhihEQXQ7kbMgokPkiBE9iehsIHNU04agakqsnYUChjCcx7JB20Yi8KX9S0UZQkXewFgPioIC7knLW5WvGTWa9mxX4UihMcyrlH89bhGyg2kayQHj0A-YR8acRKZBGcGdMsYWywDQibq-hWUUzUEukd1mF0pyHNs9qZ+2O+QOiMRTjE7AC2Uy3grACDjdcS63wM5EUihM8IilBa+xS7XVlkgA1ukvDjgAjpgn9oavrkJ-jgGpJMpBPjwFuBgCGpMKmuEo-VnyaWUa6TwU4izokhZQzaciTevgMA1kThOVhbXeQCO7dZnSEfKizRgTlW0Pcjqqm+yLkWRhlcagmAsjMjCc2iSfaGokj0ZQii8PSihepal92mGgNsgoSEEee3TKvOUqszdVGuAp2mGlggtOTkUsUIJQgOVgSRkM0EcM1Ti88q2jTCicgaUo10T09UxBAiNnA8N+U1tcpl7UkFQNWQ2lKkOBjUkWQ3OMxSkbGowkbW4wVvEgfHe0FqlfqoOjTCp8XnshOnVArOW50Q9MBAq3jzA6pVucMSk96GthLAoUi3E23jsDqsjS+XHdMQ3XivxJ2h7CXHU7ssZlqT0unfUa-gucrIPKWB8kaqdaD6kPPkzAM0AIiICgPo-XD5iyToCEyg3mEPWgpkWoiQMTyge6ENi6tSL3kKFMXnscqXtUnuVN6BHhNKkYj5axIKMym5mSE06VUs0GUNmdVV6MmwmWEMyjykpznTKDkKeRqYEc7aWVWEZKlYyeNgpktWnWOI2TV8-JhdKLNgmwvuUdulMV6Ukwh1i8yVSUkJ0hU1m9+E+yhlEHxVjMnNKbnZvwvceynMMNBTw8uWgInq6M55wghi8Plxd1ioy1E+onuMBYnJjQohCLYpXkk9kDquK6mqaa6kCQhBlhs5ihqagBja8OBSCEqVU2cqan3iMahwCoakBntGdTDQjhpEl6mREwGRjE32FViLjmhy3KzvebXWEe+Ik6VsOlWqo8hchPygL0zdiji5oIMcDJXoZCagPEEDXY0aDV+kkYHdc0Gn8584bl2b1h1Udl1G0uySKkLChzMO5wAsbYmyCMUinc182JE+QAckWyxs2W8S7lutjM8r9X4KSgEsUZ2TnE34k0U5sQDEg0QN0FEhUbFkWksk70ukMjZLucjZ30gnNInmdhV32sSonaagSBJSjqwvvS7TT+QhsgtD5aHRhnhgTkWEU+Rbi9KVVicB0UAb4pIwH4sgAwSmVcAgBowIEpwA-4uEEjGCAlRwED3oEvAllACglrGA4AsEuUEUijUEGgi0EKEv0ERghMEFgkwlNggcEOEtcE2WCci3gj7xxEtch71k1AdVmsE0QliEURZolqQnSEmQhyEeQlBlrEsqE1Qg4lVIm4lrQnaEnQgElfQlRJIkrGEYkt4kkkvmEMktklWioUl2wl2EKkoOERwlOE5wk0l-4h0legj0l7whukhkp+EfwiMkQIhBEFkqAJMIjhECIiREKIhUVjkpxELks+lZ4gpEOMu8l6Yl8l7Ih0kgUpukwUuFE6EnClkogT0UUrlEColc8SohVEaog1EWoh1EhkhSlhojSlZoi8LmUttE9olylzoldEIPM9E3ol9EpUoqlKB7ml04ljEtUqTErktJEbCqllmMo6lZYmviVYhrEDCobETYkGl7Yk7Eo0pjE40pdlw4lHE44knE80pnE+9m1ky0vkkesnXE60q3Em0r3E+lh2lFEgv3vIhukeB-OlxYkul1+9ul74gJl34iJlT0oZlgEmZloEnAkUFhgkcEgQkSEhQkPUtf3dQiwkA+9wkCwm1lREhIkZEkEPhIiokT8qYk-0rYkQMp5l4kr5lIBXBl54khl4kkkk0kheEckgUkfLWUkown0sakg0kH0hb2Mcv0khkgBEtcrMkDcqsk10tblDkickU-E7l7kmiM3kkKs-kkCkHctCkMcvtlMUmAkicqSkKctmkwBGykuUiSEBQzvqMYvSllUkDlO0hDl+0kgVR0gRbp0nLlmR7jlI0hpETssmkrstSkBR4mCGct8UDDhB5V2EgkJHTv8W0mqPhcrDl9R8jlaMj6ko8qukE8oekT0hekb0g+kX0gXlNEjplgMhXlIkjXlHMiyAfIhrELEQeEfMgRkgsmRk0CrRkYsglkuMnxkMsjlkCsjdyVMi8qVO9okdMldOV-iZkLMhfjux65k1ZV5k-MkRkZx618Fx+6U4smxk1x+lkRMiGl9x6VkXlVVkY8o1kLB8WlOsg4Pq0qUVDCp4PZskeklsmtkwh4kGWQ3tkjskgYWIgL0bsm+UnsnNlvsn9k09lwMd9RIlgIAcERCijkliWohHikTk50GxUi4GabZGgMU-BTumJK70EiOm9UDiVdWavlFmzMzpmwQiCUFw20GcEETk1EKLMauirU9jm5pxEg+ABqgkbMenxE2xicm9VQwsKQlBU3US9kuGn6MBYRoalYRfRajTPWm4X6hLWAgwkYAjrCwquBGQxQC24m-03CWyUochdPHYnc0G6H8WNFjxu+ZrGaXoW6c4hhqkXp500F0mySkUO-0Yoih0HIx+aZxm01kVnMmBUiKkG7R2M46xpERSVjRXgf6UKAVjCRvnt09ulP0sxl3UIoB6AfAW-i0kmI57kmzk40gJ56quYGHQXr8xGnYqt2nYkRUhfW8VlKeKmx6AAYhzkO5gus0GXRamH2G88QBoqj+keM+7QfKjSUCA5OJis71nFsPOhkCw8mhMg8j2IUxl6WVSnYUPQFe0bUidSdhC4uUCG0MKm160XYhb2yCh9s5cQpGJdG5OGCVPetVm20ThRJMjaTrKQCjnDW7nA403xKwPsE0UpIiaErhijpuUk3CgohbqVQkU8kgaUUpMlzMxsQQkfJnDAM+lxUqd3KAGWjoS5iSjA-Qm2U2Ym+m6ml4ydRV-sCUWaeRVkSKw4jk0fpkZaD8g50Fy0q6REl3i61LukFYRMMheSBA6FjjkY-iXSccjyqfaxyFCejvOPShl8S4SqcxgR0UY5k+LxYH85tlh+MjTOyS8TgJxY8khUAci4UDhlWcZxiZsYg3jk8ewxEAuzrqebDLs0w1-saonNBUXi1UcQExyxTljCxintyQvk5a8knLsnEU2K5UmNMnAgn8dyMUU+albaGzh8gG-bWydaVjMLAQFCm3jkgg5lCkN60mEUKnccYKQ+MNimjSuvmBGz5X4CuUk56sjDzKJriUGdW0x8TRjOy3ijyUENnYU20k1AXsSIvNCi8KK1kFU-i1NiDWkMAlwAoKeCgYsh5XuqEo8h+jpiAkH+jKAAKmtU5ckRUK-EKM2fPsgE-h-UEGFKMXU2o0OonV8rPgY8QVluE24GUcCemZMMJmkk2gjGakynEh-U2OsQFS+Mx1hnWXOR3MqNaYm9zi2EE6i6wiNmb0ZdSBA0THQHTmmpssamfqrk66dACecC8w0cyLWAAs4oB+Kwo268FIDCsAimkek6-ckLNmpMFfKOyutG5ON0iK5aLW8CV5zVAzrA6M18lrWakkhZnoiKCAYh-qcQEeE8Uj10GcEhiqamjstYD58Pxm05YBnTKvmCgaGCVR0F0hlE2emPunal5CGOgcWWXkv6ZSv+TiJnVciOAGE-GkOsM2mc0yC55aTdgZEtC2tAB0Ttt-6tBAQhjnJFZij0NajjwYDHxvh3gfkR2TsuFax2+7im0ihIEr04agc0ooi0W34jH8LJmA0JkimUinlIhlzmxafZlg0N1hIg9Ii-qeb2OMdvXMSoOkP06whhm1JXucZFyz2bEVykqwS1AY5m9EzXs5Mt1hW3rFVMUtaTpyBEjpSInR7slwDpCFlsuUk1BO0EYHcMtgAUMTLhWd4ugw8LsyektljNLhkgkkJShfLRGhCisSKEE6XWusipjqEofimE7Sl67YfvZCuyETEjV3kkO+k+EIoHRkzjwVOM+hAUMZSrktBkALyugRWxX33i2aU+wHKiESkLLzsyKnCEFHgQyaugEMbDg60TcguWS7jMEOCm+OU9lMMxQQIAIVrsEUmlOU1YipkPwHw824HISOlnViVwIz2bRh2J69nYYiVgIgn9VCW3CR5sFMECkLNgHEzXAnEyyl8EsOj2MqKLfMA5SjAq2nOAU8RQyrslh3wvYjhipgwujmUxtY3An0cqXt0c8mcwA+RxsqAExK9mxBs6MX+L9XcoUXChyUZGMSUUrSywAt3N84kmIggNiF0FyRcecTEhiyLhk0vCmG866QxsU-m0MoeVQ81ilfCWYT+vhVaeU-i30kRJgstUqnsA2QP40dWaAkdXg58XU2TkZ6i0St1kcMfJjPUg2gak2Zi5E-y2WD8Uj8MD9O5cJJmyCJ9hCEF8lJEDpg7kqhn5EXUhxktWnp030Sv0gWSDEyQlW0Y8UAL1RTO0t2hDDQauCNBoMwkDKkHXIRx-ALc0KobJnrcqznc0VLhWEjgh7s07j5MAT31EeChpMJrK2W2gSwUHIXD0cth4yW9MScyblOi9dgF0+4DpCitgWsQxRJEhAOm6LwnRkmViGbj7x5wDUmoQL-R2sXwk+m41RggDgmf66pmYkxX2yUXZh4y4rn+WliWdYXlkSsV2HicVPkvCwowaSfmHyNC32Na35kJSuYA2pYWkXHRQVgOpyn9V4Ih9UfTiCqRLjFNxvl4UhPS3MFlgtEA+VjsC9RB235uE85TgNUrwVpUQYgMc4N1Kk8VkYS8Il5XEoBjAFuiAKyYhchH7lQWdHgBUhmkDHpryGEgfkfcHWl38bfX46VihGcb6l6A+JRrq8qkbWq9HyNl15ag5-gK02ZgiCYOyvy8Cy6+qhVTs6tixEnqxT8d0we6GZj5UbwGOuKVUL0EijWE26mtqCzhFM-MaUcOsUbUu1jBaUJdEB2ClIyBWmm2VCi6C2qgICbUmGCj3Nq8IFEqscLh-qnQglUFgmFEzySB0GzsrsVIEzl22i180ARMUa80QGPfG-0NTWCUPplJs6fU3WEYFIKHauAktun5Mv-VaMMowaO4eg6EKMRqgqaniEu81cejuSeCS7j1y4ilbUTckJkJzScm30yw8RpIkW5QD2M6Cim09wmVysQFWUF-fgkkMTNMZ7SLkp+mC6ZBh+aHuiGpydPiseEC+iQ9I7aUCTeEpMnIUtl2WUJLjBSmqleEVst8k7hjya+Zh+0EXi5MuUmr0F4BnhkOnwUgtBdKoZXLsQzbI5KujYGOQoJkGQwciwgGLxxYmO87iXJyTc8ihLChZ87egaE+m3JEowQ1AKsmrCNFQSiljnxwNDlNciil8kYUjZipoMFkOTeq0DUj58pckcwgQ2axcKn76sKin8Enks2YbyjCDknQMick8kqmnRiDSV3mrKRnWwQma0JHSZq34jhSiWRhU56lhU4WMsEg4WwWQwHVEnIg+YCDUMkLfmNaW8ROytxkh8Ifk2UIfh305pnPXfuWsMqHnxgFy2cCMPkumIaU-igFnwMAwmVKZrPosBklVE7eUZcbrhqS9YVLEjAXL2g6msU2XBCLzRk+ESHmt2PJvFc-UI-cNUjIuETjy0+KwIKTEySRRW6fySRt00ZGh0Uili-UgjobkrLgzRhjh30GSi2C66QcSp0BPh3CH0k5xmG8bAzBauGjZMJXg1A-eVxsBClzyOHjdm8cgBA3-TWanJbRatEQtE27iYMIng+AYenJxxGmMUAF0iSydQ1GLhmTB7Z47ciciNaoZRSUSFXPsz8jze2Vi-UecJ00ioQLEvaQlMIKVHsAY3nANgSDk9QjdifUn3s81gCuU9l3CF0cPErFTZ80yQpifTlxUPOTBS-cpIgAclT0daA18HXLAM4oGZkk7S7aK7mqKcEl7RVij+MVkQH2hC29CHIQ-WJLmcCDgihKKSnZCXply0QGWGe2wn6cQl0KoHsWa0c9w7cDcnKU2+lyjP4HRklQnkA9kiqqPGm4MwzyGk8vjxE0yRPkPSiesSKjJCrCkUsQhSycEBzEWA2M+0cymgJdrXnsX2B5Ed4Vk8VYgClYYT2ZF6CIp7pg70AFz9ELOLZ854sEsMsXsk8hy3sG9htsK5lv0CDm0Ce2icmdZg58v12UAkCRZEyQkoCzGi0WWjV00FukFf0HnmG4UQykOLgsEf3oVsiKl6EyfkhEZIlPSV2nVB9a4xEsrMXzHcg2SEuhs0no+c8gLNcELzVPi66mOsctk+sEFgacGegQk22kW02WmNpq4gAy4FN5U-KXWVQOmYK3ogvkG8jHEWejgR6ViGAGpwz2XSNEiW2HYc2QJ5MtmkkoeZQm1p8U0MHYT+suzWEcaiF28TuVmMl9yvsAFQ8cXZjcCev290YwlPsbewic+MCtlSCgy82chaqZSFZej7lg0hwRYUvvmI0x-yD49ZU-0iSlYKm1i8El9W009VXTkTimaQwig68VCR1cLwSRMAIiXRFBhzkDombVB9G8ZxVlb0gqicsaO5Esu4DaESqQjEPQH+OyQq8sXch8srbWKCCCn2UiCgkM5TncCjQS-0iliWmWwg5EEngC06ymT2lXSoUTCjxkhIqds3ZmHkR2Eq6NGkCyQng3axOnBVanNSmX2dvfrbWFsXUAUiK4wYM8SkmA3KmNMUYk6EKKkVug0RTkYf1FMcHjMS-ZREaJMXGc9WE5pazXKQUUlTUbWouspUhv8UUNAFhfnLiUKn9J9VUgSaeDQ5JHI2ejaxGC0tyhXZGEMtDLzJNlggETnCHJkmOgz6NN0dwDQEtxIYzRciHkYmQS3OLSIVJhIBIZ4z+g+wIfI0HiVpFlwkMTwGBPoA3BUgOz2Nzj2pMKM-iRRgAacSgjXTBDIlYgK1BV4QwiX9CvMJuhaqE1UUd5iiPIcccjLWJnqIQAlYEaEM1hTGF1IycLxKOyYZI5U3FZolIiPACpoDchXbLWkGHiHyPI46pQH0ug4J2TNbLeYa3K4eCuMp3gweFmQxYCBGF4c3CAAbNQkj0jLwh68CJiOdMLouQAZDN64LARIWGQY18hVKEiA5pgxiBgYi9hMVJKE-UKq6KLMTIJ5iEN4ZwjpqM7YP4ACGOlksjDGxIHUrSikKFuUAMwMKIwUywYI6CTs03gQiB3a9qiuRM5gffy+FOQANiSWiDkod6T+ctt4F2Sk2GP4mRqllq103Kx-GI9EMRgsWMn8aCij1KPIGihCGFecqew1Yg8kRyjJ1HjEysyTvFu4sjB4hM8IdBjIiH4AltyajgQgABC06P1ALQQkmBl4JJgCWKXIJ0QdWNaoxqiRONqozZh5SPfogtAw8hkUPViOqF-U2kTcQM+YPZLeuIoEAhjuaHpwtCzYqPI40-JWgIvCRSjq7BnIfqwQ2Gd84rjiKLNsjwT9xMiahgRBdNDYU+SSNKO4BcQjiAJIvChoNM704MRgQvooL+iO5JxI3yiWGHm8FMRoiDMowcwVrIiofoIyQngEJMQ-FJbeYIie6EaY044CcmK056AguPSIF-zEmABc20yp+OnI++gMWH3ItEhA6PsEtdj9yCN23iiMyNi0ujjRlP1Ayojq0Hm8gSAYJHvIPygBqJPE9YTaxFMYxniDBMEIqZgqiGcolph3YAyog4b0wIlS6YRBRPEEIuhOWMSkgljryNASoTgWhIRYHgxmnNd4QSDuJMyYkigP4j0KRliyQPNwiwCjUkaKCKhedmegHIDYXgFIjd4EBGroW2DaOLJoYJgPyHiYuyBDiq-UYGgR2i5CuAQ+nFmOOkS8hA3IJMQngEmomo4bCBxiqphM1LBIgbi7fGuoVQC6xCEAKkzr6OEoxihM+IS4L1zS6Df4XBBD0jBAdkSllAfIO-gR8Ab4WRRNKAaqh8gE3BWYy0R11MhINdCzGAHE6OTTpMxcNEBr1JyYipJeCMHI41gu6GEoxJgqFGTcFoQJ2MLAE2p6GC1E5ujiqEuIyhiGzMvsq5ihKO8AzrJXyIiIx3jNaAno1nTmNLz2Lhi7BFzSh1gOuAIIWbLXJD3IXohceILItbgnNKGUZGIKGAZoa8z5GlnoRyj9+DuIBvjFfC8AyljG2MsoPUThPhmYmYCQnBmEOShpmAwYy5i62JjCxqSZyO+oqIgINLSslNhQLJXEZxiGwIrUERghAFUA8OjhgDg4laR4QCMI7DoJSJaIQrggJOwAmygVGtxIeYAYIvGE0EgY+D0AXVqenhk4CXjwpjkUMch0OEdkrwi6rKVE5cg7KHKYjwASgqTYirijTj0A0Yg9KOxUWIQRFJJourYfGBqoZu799F18F7jTGBfI0lhSKImITgiJMngESFh+5CTEtain6FOYmyhTBBCCNEgidN8Y4fi60Fvou3iVKDlYBlrQ5Io49eSRaKT0LEQPmONU7PTcGIjgXhi3JK9oUwhhJPaon2DDKPDEb1i-2GAwizhezlkUE9gQyDlIEpjjSDUoxVaXwsSEmbhqIKmYskBROK5EFeQD2GAYXOTLeFGAwlS7gIKKu2j2mDg4ychD2LkYGZjjSGSofwGQ+NaIlIJForyEnoSNiNZUW6KZyBNgQoD+jsTkSL6CeL2iuEQoiAhIO3xMRsx6CkhE1CsEL7hIBJ+cZSCqyLw4ggCRiOZEssJnqPSI2iTfGKpoPoh8yIuIaSQWGBeY3cpTxERIb4xtyLOo7ihnWK5E9Gr-Rou80aTCxJJIwsQdhHmULUS9LNhgP6g+WPQA1sxmtP+ojwS56LGIFyyvOBho9jjUaGXoyaB5yE3E7Dq4rN4EMCga2IkcazweJKUqN6yfWMk4VegAhJYIE0iuSC8EbLjEOFDoHchWLEQg6kgMWBNYdZgxLDIE-tgjqJoEG+hKpBo0aNg06pYIi9j6NJP+A1hlYEFYzMibJKzkzgSGXOdYfSi8KGcYbnyAuJvIl1jCgDnIpahIaC00lkDfpMNYAWB7KNmWDgay6PkoH8jAEDBAXrjfHAac12zq+CMYIVgfSMzITMT8aK98m8jDeNBILQR2bK34FYjNiEM2C4g7uBpkufShuD7ApUgiNOSITSi9LD2gitxCePZYzYgwellsf8SaZPcE1ajXaAmIkgwOGPr8kIgotD5ss1RLeOvIUmgHRG86SRS6mldgSHgWoL0o3Qh86FWEVhwAiDaU3ihBYlIYrCg8IqAiLwCAEtkIsJikiJo4hmglBBo0I6zxSAu46TQGqHb0OxKwaFK8A1gvFFDoK+i7qL74gtDbiNn4s4yXSIKK5jSdyBgYeISbFDPo3ZiQaKGkyrjdPBQB8wyNdKqIyjh3aI6B55gryB5YMRi9APTYr5ipgCEA3ayv2Ag42yoWhM2YCGTISNoM-tg2DC8EWKjLhMtEVpSZgI3Y9ZIYKPkanLiTmLxkm8TsAJ0kBMirBHTYtlgQUDIUnFJiFBzkx+gD5JJ4IbjCCAE89bjbGMo4ONj5yL8oqojfxG3IdLSe6DuAxV5eiJoi3IjRYGuILIiWeDZoKDJ9-Fp60yQLAPGo8ajvGIvYIWg6DKd4FzjddJO8bQi2uBP4reiw5AREp3Q-KO8Yx6gOSNWoQFRbYMSkuQS3OB1IdgDeqJ7YpbSe5AbYQVj45rkovSwuNIlongju+CfYETgHAJ2kGchs1JJ45ph1AOoYAhhbiD6s1JhnGJH0JQzzAGh4+2zAmHZcDghnfhnIEfC7fE5uduAaNFUE0GifiIgYlKTR2GXEZWjqlHnstEQ+eHzEOFjXKFUY-vhx8ENS7JivfCXYWJQ1QN9IvGrs4uTYklhbYNEo0HqR9JRwqAGjgMN4qxgbJJ-0PmxPeGYoVJg0VP9EpZTDVAa4eeiHmKuotERx6HWYZSpRhAOk22hl6DYEvaTrhAsAIySxqNjImUDn2Kn0fMQcVnHIuMgDqO+oGmhaesHMaeSPWF4cqyg2NnOIuNxhGByM-Phf2tpq6eyovPUUZHgWoMKIuth05L4EU+TLXtq4ZWCwAjkUjrSptMAeFKjTGDTYj0DzCLPk9xhrgJtAJNDQZIBYiIg1yKpY2aD+FLHoHlJdaBWIrnhTFIKodkTzYlUAWWBrNNXY9zgz6DsAuMC0iPTECOgVyD1iOTTG2DFU254iNE8KYGQ0drJAxoL-2BmYVQASOB2Ao8LwLEsaq6TxepQEfUi8IjsI9EyVxMKIS2RltDJkrKSqmGNBaSROKCWAJuiZ2M6sOxg5uOkYQxhnaA0YI9xuxFqYHeiiOIwUKAy3JGME03ibYFJuWwgKRP3k5piXAOxYgqiKBIzcvvTEiNaAVljFZjtY4BhMTG9IATwZDI1YoSw2lN2Y+Zjz2K3ELUh5VOns0WCWmHZctzjaaKrIiNh3tFwEvWiVCCOkGjgLQgBYLJh5yHGY3LhMfIFeN0KPiL7IzTgxaNvkg1rvGLLBc5ymKGmE6ZRkiJuE1Ng+nEdgTvQJuAIoh8j2VLgocPhGiA9o4DSAlFQkX0SbhCZg7oiQ2PbYlMCVpLhciVgY6AoEqgjyRPZY7xhD2MWIngz4vMWEOQqf9Oy0IwgBCLDC9kjI9CyYBrg6QjYYAijJ-OWoU6jV2IlI6QjgpELoX6gKSO10rISFCLisnOgwGPdUM2joqLmAjgifCJHGCOiDBFlgycjFOK5CschJKAx4pIgcJCDYUKiJ2GOYmyiLeMTEhaisaMlIzwhgGLWIh5hH+A9om8SLyHwoRSh2njVARShtGJyUofJ0qFMEDFgxqF3o28ispFfkpXgBPGIUXwibWEF0YHiCiBGYSBg+NMLo1UbfSB148bQ+wM2YYUSfmM7YNoABgIPwuSioiD5AMECVKGUACQKi4jfkUYC9KKT4TkRD0n+2r8Km5PWSMj55iO8YkVhjqBXyxYTqiD6YkBgJKAQgPaDcQEBIzgSuQj8YokgT2HHg5SBcdA5YB0QiiKPUp9LmguuoQ8itiHaISMi2ADzY5hjceHmArLhpaEi80upyZhj4L2isuAvCxgSudHcKuujXCFYsiaSQdhe4R2DDKIYI+qSf1Fv8KooZmDVY+MAD2JOYpZQhAE6oEZhXBNyIpIAhtBR4j1iyIDBYitgA0vyk9DINyBl4CmSRQgPYu8w1IrRWg5g4qGlI5SiRJC7uxFhAGNUUcyinaM9KcfCt+PkIgtBZ+OaCAcwD7DfoyjhLpFsSv8ifmE6qafzm+NzoO+iBqAtEqZhKDP8kJ2g6arjA3gQduG4Sh-Y7xCfUH5SuJHIo5Qi-yP9oobjgAC8UMZTTDKtUhahEmJGYr5g1JA90-RhH6HmoB6jW7KgEPqj7qPh4p0C5qKtM4ajPpPjAI6jjVEJoJih31G1IZwjcGFXIQKE1BGc0kKjzJGu4C-YTWGZ4kNIngEPSOqg6pKnceeiuaN2c-GiOGMoSZiiAgKOEMRiF+kMAY5g2DNRohozZiONoPEA2KA907iiT2GsMcxgAqORoU9jphKI4JLgiSFUYydRmyEDEVsr0AHESVJh9OFfo2mpMRub457hgeM4IU5hAxEQg3Hho2EdozGyyQGe0f2yBwPHIygD9+LQsmcjRMFsEdXjKWF3oCpREkmwMWBi3xMtI4riAWCYoPEjRKB9oGvjvOOcUM6xO4Nsk5CQFCK6SDizkqmuE9YSY+FJo-NiaIm6UFyy1mHFeYDBfiKIM5digKJV0WzB0aAMq32C7aEkIJZhj6F5IQ0Qt0tysWwSyHM+4IRyJKNRoTegxaA1CJsRt7HBAgTht6Groceh8qHzIu9SC1FJQWJj9yqyEQjitSP6Iu6IVtAB49qTiaGXEJSjzSMG8gNyQ0rQsdkSS5M1IqvQXoFgocyhkiBaEiKgE3GuoiIjOKMV8aHgWiKq4CfjlAGzoiVhfGGVo6thpJO9uPkgTAGv4CIjU2DnIwwBZjmZ4pZId4tDklLgn6jYEVxiSOGjYHaT0KMEoeHinvEiI4DQxeAVoSSi1CpDEBqw1dFXma2iJaJBEwugKxA8IV6jRFB1YPGiLyKqB9WAR2D9opIAdpCEADlg4LuPSxoSBwPkaLSip9LpYLuglpEXo4GiJaGUooU7NKAR4bADWWKNcV+QK1LiWlaRZCHJoyuS6SIBYmehqNIOEVPjXaGoIO5SJCEKAm442NCIA4LSISC3USuKhLB0WRALiqKqYgQC0gDjI6DxruAYE75j25IE4S5TqMqSoi8j5opYknaSNhOsA1r5aKFWIYDy0RA3wzAy8ZF3oOmhiOJy0G6CUgNBMckhamCMCA8iRiOhMIbTrPGoIQ3jSGJ-SCojbWBYIAij9lKLMqALsSJ3cgfiSDJeE8jgbyGSAA9helEggukjlyF1o7rSuSH2Y9wAKxNzo8MQnNMN4Hri1SG6kO4hcZBgkPYQj+GVoGhpH6BOMqgiSGCEcymjoTCUExoR1AIiIVxhLiL94DxhZbMwolwgP6A20fqgSSAIo7eSO2JJo3QiyAuqUQESbQNdUHy7bTNvED5R6jDxkvErH3PgYy+Q35P2k4oy2BChok2RYyEukoBj1yKH4EJZWyhj4W2AoBHvIHuic6OLYX9hvIhqYl0j7BM6YVujYqINEPZIR8L-Ohpy9aEfyqpjwLPcka0RoalCUBgAdGJG42CjMlC+oiijmAcLEcrjGxKz4TEYQKMCMCwDBqGgUBlz6iCyYmRoWdvX4cQQHwGIYzChxGM0gvpjOeLKy-bwj+HdI4kiB5M6E3IiTAIhI6Oiu2HHU7OR06MBINgQYKIOo6hS1WHwEnkSoAAHI1-SOmL4ouQD9cGK0n8gWoF54qm4aBKsoihj-Ctku3Wip6EhoXnj0WJAUochcECQRKWwF2B+4yii7hGQ4l+JXACOkNmiC0M-UDHh2ELX45exaemAkjQR+iIfBJIjzZOpIkWipyABYeei8BBMo65RlINAMVRikSKQoILjWfB+oIjTYVmbgfLQEaF6YjmAb9CJk7ji4XFboboQEAblK0HiyQGnk5kT-KM24zRhJyObqeVibWHCYOuz0HDpCFwwPdNCYLFjO+F4IhwS5qh3834glKOXEk2S-ojqIW4JSdKq4tIBTFKqIaDQE4gOUp2i16IQKdZjbSAq4DKQlCFOkkFSSaKPUiUSSeNC4XnhmKKuoooimITc4KMASqPFoTijLaIiY9LjYODcoZBi2iO4kdyKqCO9oVYhMRozchWJ2eKwCtQjC+LzMZHhESE3qnujFKCWY-coWiNUU7XRiiMdqQICIGERol2Ar+MTsFEjXaLQMgFgcSBAB28itCONUImieDO5oaUpOpPiyroS-ZvhoOkSKGOoYM+jrUtRYME47eFTITljG6PSIQiyMuOYggkTbaDTikGgt1N9gXhji6AmIydLRlB0CVdjvCq+E2sQwKCfYfAQZKDC0khji6G0okoQhAAEoJFgG+Lq4G2JVVG3svvRS1HnY0TgyWDvIWliRiNN8GoDeBHChRZg2eKDYH7gauF1AqpiSUHeoOqgnaHHorkRd6M+YKTjNiOUge8jJONS2ANi5aJ4A2NhRgAnIbGgeBG86daSrKDdYLRRfBPcIO4T5KLGIDgRDSP9EheSbCGRoX4ijkpy0WQDnyJz0brg9iCTYb0i5aO5IWojFCFQodOSJZABkrTTQBLIwPlhUOHo0nFLUlHF+cmh6mIHA42ghpBHauKhQNKO0Q8hEKIcIekQaiLloSWB-KFj0e6QjKP5yIbRqGmdYK1gVyFiISrirBDEsa4SYshwksJSaGDB4eZTbJCeu-2jKhDGo1ShtiKy0h8E0NBckE6h7lKXojXQB+KgsjaQR+EAYKQA8tqrIaZhEaKO4dWzeJFuU1SDDAUkYwGR7lObq6OjDiDt49mzFaCcYJ-gNOCLYQpzGWI+IHSjogS00h5QGCL90HciOmMRySgiiSCOsFkREaJGIFICg8qmoragC6G10uQjZ2M4EW2A9aBH4YrQV+OmEcdSqaL9IjzQgjGicpejQQM-UirjywTWIp7rHKI1g54inQppkHWi9GHJUiaSKjB7E0pDzKMEIQVSHaA-yPRh5sCwoIQC9mLsmzJTLBiK46kj5ABNqgQzltDjYzZ4TNuk2EMzPBGyG5ijZYCAkcPh31MJ4JkoRBFWMEwi9KK5EygycUl5YQ2hX2CByivIqrIHUaQguSIkAPQgiAEeoQ9g1QDAonNIImBGYyQEc+B2Ah4BbyAvEFZidQpGoTCjFSFo020SQ6JSsHCwKWIMIq4hRAMoQ-GgchF6YsGg9FEkIb5qlmr4kEFbJ+M1YpPTxkivIPaBGiIvIafL+6GnkBeiDKN8Yy1h1eH5ogJT5lBdow4wwePTAxjgYOLdoQShKYgsS+bKA3KPYhgRilMRkMASnOKEoFMA-AK2IsNEgiKTIQSHDKCXQm8ThgL8oDsixJBWEbYC7yF6BWyxkyMTEF9zOPKSSymhmeI2kwwTgqsCMZ7QnNK5ok2j5hJdmZugxVug46Kh-GPmaiOB1mBYYeEBfyGQoWnqAREa0+SiJyGIIdIo-NM9Ye9r0uN04moDoyHqolFg5yCi0k9hZ+NlwWqSZ6suE7yhmONyyihgRBHSG8TQGqBZY3CCUNIfIkPzBkjsABsSrCJTYCYTGeHOSgnjToVDkVwCOtKd49DJCFDhYWBaEVDgEd7ww+KQojtzXKJOU9yhnfHEMsaSOdDOoy8gaZM1wh5ihBFKYWxwgjMLAraioAKH4-QFQJFdgqfijiMDIjYSECqYoyFyk9DsIlChHmA4IaLRWiOKAVxhgKJ8qjoiXhPQhjcT6KK9IsGhUBJJ44ASy8DxkvSjkAJZAa7gJAloYWjQ4yAI0JZiOeIs4wCgKxCAYiciltJioHwAUgFZY6oRjZFJ0QrhbBHm2voREhLw4F2hchMSEngC9GuWWdQSfmBq4JdjaOJoouDzrGjrEF2jaOA0o6sQ+wDXQ5XbFtgX4CljOslj05IhllDHw4ajFmC1o8OhARCXQNnh6KEDoeRiJZpTAkIjM2P3kdSCneFckOYhi6HlYdNiCWDB4oBp5lDSoskCROE4UOz4-qApIxQSKjNN0-4RfoHJkfYabWJuE-vg82BYoKHi9vI0kc5IdEj2IQ2hGmBwA--jQqM3MaxZZmK8Y3PyyBAoELcgApCaUHegbSDEoZGIuNFIYBEiZhMucLjzO+JyIjQiigMmC+aLLKGAY3NIfqJZ44TjGKFK0qagD6OLIicgvyPNkeRhMyD0qJOyGICn42ygERHf4J8gWFI2s9Ng6aIwUqLpmCANwgFj1cJeoE2qCiFJhb3QwzKrEQjhgaBTAiEHCQNqIHji3yNMMtUi66BWobyhfLPkI59itQVQo9EwmKAP47ORW+IEoEGAvKNE4l6gugGiUomhCQPiUwogsQnRi5GgtqGCIPih+GF5YhxSNjFB4fGG1jmVoDA6NpNOkjMhQNKIA2egz1OZ86DxWJOqIV64iDNg4l8xJGAFc5kyNjAfQGBKYfGYoDJR0hPY4cthXaGw4ydRSKFPquHgByOEhJrKqzA6YUIi4aLWOSmK1KEF0Uih1BDZe3oRs+GpYgwTaYgEI2XAG2Gp4cX5VQfDO0pDtuAiYDogdiD9sxng5aJ7kaOg6qKgBOqjHGJhBXpYz1NBoQYjiuEWoVKKDCDZivSgoaOBwkWiEVNo464QWWM-oTmjKVtDYdkTISFcAyIGsBDZ0NUB6OPNeIwIesv9EErSvkGcoSghcEHKaSpjHpHvI7AQjcBYorcSrGHkYc46xAPLE587lCEI4jrTNiBvIp0CU0j1oGehiGFGAQrh7KPc0g4iyaHzE7ITXJLWkMYgJOJGINVhtyNwoGSTrnCXQmbiX2KfijWLJ2JcYZug2OFwYgWQdBFlY+pJKCOCk8AC1CIqxORR8NI643GjXKMJo7ih91E4IFlgzHMa0VuZbyGAk3xzjtPbo9CTOaDjo20yL2NloAYCgeIQoKBhl2HzICzgx6LVYlpjx7CliRIhLpN8SWXhv5jjYkNhCUYqYS1h+NiP4C3IsRB8YAtyvBFxoSdTxKLg0FsiQssuYnogxYggC0oT+XGmENKSF5DEY8AARWAVKbGiKKPnUiYi0qMqIuWiTvMBEowRVGM0YiIgKxL3gyog1CEkU1nREuFUYRSjxOAPoy6qViGv4rEQNOABcwWg4yKcoiaRaqN9U2KAqFLSIiB54xPfoWxwdSBjYZOK4qBtSXxh+iLqYBXhiOG-4YCi2XD3q5xjhRFLUmRiasUpC2sb0aEIUzmBhxF66GxqTsuAg20zsjJgoSbSlKCMsuthTYFsoi2j3-t1CjuT2mDd4oUjxiGG8MjgnNBaE7IBptK8YH6wzEknU7Pi71I6IPWgchLWoNWLAyF1o5cGxyNaOJhRgGLYAuciVmP6Yq1Seeo3IbqS7oqi4ZOLpLOk4J+hkeO8AhCj7tJKY9FhilMSMS6SZBEGYIthG4lkUGHj4iNtoFZj6NMoAnuTltJHccdiECpxqFqIMOClUumSlQMM89GikZPnIJWBwIvTYI-gE6nGY9sTgqmVo1IgKWFkMSRQ7uNEMmGgdnIrY0Sie9L28HcgKWEZk6jJi+M1YtSisQH1SgNxSSFyY4AGC+GooFMSehByojECk9JzSqYZuaBsABBQUwO+oF0TIyJRo+Hi0tnB4NQSZiP+oxFgA0mwUSRiv2OwcQ0wnyEZkuKzsgFyIHVjCQuzY4aip6MGkAUi-boJuwEQqbDfoergQpAgoMUh5SIhsbMIneAgYyvypyI101ZR2XO7qfZIyiOq44ti2iIJyz6T+iHoYzdTSPI60gERaiJcoJZgXOD9gfhwnRKHkF1hb1gDGasQdhBkMjaShuGG8ejjJ-KNYWRTjOAQAeyhamADSZzjEpLjIGwiCiLjq3Kh3qFUCJ0RO2GmEEDT8mKUomwReAL8CSgz9JLrEF5iTxL84NIJpaGbyMhQMiC3IN3T9hEFUlMDpopTAmYBSJKukSRhXYFBA8Uhw9HHg76jqhPGoetyAiHdMoMgvyH1AHrg0QEL41kju9kLouCihyFnso9itSDzYN94CNHUU-lxnCE48eYBi6GMoipj1uCf0Chgs4niE7eQTYBXk3hZ3yJGAbRgbCBBQXsxPMpxEEZRs6BvowHj32ATKgYQP6HZA9ZQBCPZUL0SUiE00KIg6KKwEZpaBOKLMa1iVSEseYfh9OGVIRyiBiM74jhjO6KV49cimOBu0PwBLuFNgxDhgiEPU6hhtdL-YpNR4KDzkplLjxPNIzJLqlHrYmazYqB54CwoPBgYowsRZjmSEERSbBNu4XgHO+IwEokjwJEL4NEhemDl4usT22DVYfsLvAFUEuMiAaNQgODjwhOXYMMzYaE5ORFTrKKd070bP6NcCwcjV2H7YuMjdyOCI2RKraDXUAYwkNgDYr3zrqP1wF6ieiHbazUjJOhXkIEybmGOIUThbPOb482JA6OqmSIqB8F8shVSJaI2Mu-hSqEaI1+gJSKkIitxQKMmCWXjOstWIPxjFSB3I3WinQN2YZ0KBJEH4FCimILCYmLJh0tUg-vheCJ4kz1ix5FD0WeyWmIYaHOiGVFCo8Mi8Zu-I2ojPOA8kmehWKAGMxGpelGEMfmjPOBrYDThlKHMYGWh+JOoUILgGuMzYGcQrGFd+C2w8El+oqeh1SDC+1Jh6RKNctDRYmOXYlNSIiHe8AFwH0GbYm4B5SPxozaqyMHso+9iuPKZY8kjlxEZkihi06I+459jlWB+YNDhLARW0gWT24Pls3KzLwrRqTEaZCJOk1SDLRLAYuUT10lLmqC4Rvhg0Q9ipRN0oIHhhSCByz0jYaHIkrUg8vlNk9hp32j803TzNquQoHYDgtDBAFFZOpBr6FMQTBNo4AVypWACImYhWiM4EtlizqHEwSHi3UqGqYxg02IIYhQh1YBEEjhhpKB98DEizqFQEBri+tHsoc2ie2HHIjEgChOvynFKiqM101tTESHIkpDzJ-GbYZiT7xFcABHglBJyUpJLVhAUocSTvRrZCWehlKHRIldwhCJy0YQhcENcCKKg9nBZYCtRFdM-UWcGZiIu2bszkRCvoZNwhHJ5EGpiELCPYtLELCG6IgGieHi3MZKjfHOxq3xgOQFxYIZh7PuP4z-TP1IYYwjyagPoIB0SDmF2YSfKhBKUEmmBUKJboQBj4wBdoUnQyjNNsz0h0iEFcckzgpBGYcKhy2A-oX6BN6n1SGCiA2NHowcx5qGnIlIKEeNTxPYjKWPPevhTpBLc441RbYLSoT04ruAqI61K3-HBI6RjPhBco6vi4WG9Y4crdVI1kFhjBKDk8OFK2iGPC51hYLIjogajNdCdo2KixuHD4BujxJoBYo4hxfBR43jiM9M2YhCK9LJkazYh5DqmK9yjLhMB4OOhtsbAYeZjiSLEyIXSwhOqAihgU3s6YaeRpJDgogwTNNJqoECi4KB1Y2WgjkZTU8Dy+mBwSnQjaqDAoHoReaBphSaRz4LWYwsB0pIdoMKiZbGAcwSgZ2PSIKHilKnTo9Cg7eLHIetwHlNNor4TRCGnYwsSxCLkA2GgJqL0sNdA-aOz0aiCp2AFI72jyxEdojQjaardko1w2lHUgxv77qPpYuyCDABwoHhggKqXoLD4P6JaYh5gAiLMofbbbeKW2nvSGXNdE82jNqE6Rm1gzXnlIIRF+JJjoSViaGLIgJRifFrIwEBhvOO4YkEh4ylOktCiAuoDcFlgkuNpo-shQSK3EjLgAXFp6kEhfCB2EcokVmGhBIOi26A8wjdI0WEy4d2gfqHuEuzSHyE2B-jj9JOWojazHWOmsfuCmvHYQzjLvqGsB+LxFuG-4L1zKhEa+FqADlAPYN-gu0UXIIaTL+M6IKsiLwi3IuYipBNMMIy6o6FF4FQhxhPDo4iEdhC48uDTIOEwyAlhdaOeYnKTMDkg8yji4OOroOkRxdAXYIJQLqFDolKT2Un-uQojIJJJQ-ajKOMF0tooWWHb00uiZGFBArATvaCCkKQDMuDv4yhD6iOYo2qhdseyIiYQEBK7Y39gggHzoPZJQcjjqEhj1JCz4IICChGbYdKiWQC0UbYisLOOsBOobUowUh7pB4sE4cOhHCH6IzjwCSk7xB1BXAO24H2hHIFMUhEhIgM2qCBKF5J4UNwGaCBYgu1RBmIZobYC3aI44b4iBKGN08jhTos24XnKqgpHIx8FZWC1on5ztyLrEaZjqFPxol4S4GE3UjIrbmLToQbjZAGYQIOylKMak0Hh+qFsEwTjUiGEIsfh0AC3YJFjY+DR2c2g-GBqY-0a7yOO0M3YwWMd0mWxRhCMAL1wsqH2A67RQlFdkONilUSKAsEQs+DEoAcynQMTojwT8xqiIh8gWIML4WqjexlFcrAkVgIO8tYgkiOUA8YSqmPykdkT3IuLoM0DKOJb+supVOHe4RsjaGG5ozrCpdsgkZSpVZM6w4CCUiBIMcxizapco7ChPyAHEolZWRERUjjiPNHQ47IELAIry1khtmMZIPogE6AeoAISsiG9I+JQ5GFmQcZSW0SYYtxiWeHronohpSIKCW8hKZDRUkgDNiCPcsrK1gFOkfATJAJh4jETVxFbIAfhIgCdoB2jyHKsol0gOyBugLOIESJ1c5TikyB2AivJgZFAosaiZYjX46pRCqOLYxFjKDOkEf8IVmG62EfDmWLd61RQptsUYcQxIJKgsaChk3JdYIRa2YINkFbFCNIDcQiwjCGd0VoGdBB58WZjAgJXEXlQfhou2cEAR2m+YYwiQJOosaOjAyFE4z7j5KGB4RxjVNCCotwHMKNGA3WhitJeoIthkaC9c8jhjiF1oJdgUqA1CEki1uGTcUt7TbFSANchbmEhW5Uhj+DtoTdgmOMsI3ZjEhBu8Y2SPBHm8JbjT-IgYMXh0pO0OYBz8dIdYK-jfyIVUyGgVgPaEhwSdyCFoglj9QmooqwQ7mruEZNxuaIYAldjt2LQsLVScaP2k6CiIDONYgSBgGDhYBohYKFIY+3QZaMqE4AZVjObERagoqrckihjTJCY4cPgPvEoM2qgdKEhUAXi8EeYg8wyrWOqUI5E7eNdiknjyyJ6E-0Rk3A-IXaJdyHHUn9RFJO+oLxR+Ip+Ir2jZYIGEZ7RWKANwErLSKPas9NgXDDpElShXITpo1TSmgmrocWA42JxIgohkgWYBlph4hMk4nKTvmIcU5pgt1Jc4azSiOHOoQri1pKrELewH+IrU57RphEdgOYi8wJ2otmgm6GIIwEjLCLyU5ewEAYBE6MgnyEFUsYRFBFmi+oHJ1HloxYRtgI54xxaGAD+ogwS+9H7YmhjxFsZIr8h-VE9EFshVjE-oJJgpeA4Ycb6xpFecDRBprL0oG9iQ+MxsutBg9CcudkAY6F1oiZRDdL4UXXRonD8AYGTNdMLAWMT9yZbKKWyGzBYUxGiZYDd0n0iRSJEEclwS5CfUXxgpbCxB6Ijq6KTYU+QJePRYSgzPuFgYFihXDLjckNGRiL0oC9SmIOgoL2hsOF8UnbZqiCNULij84rjAZzhM1Lo4WkIAgElYV+QWXo2assg+KJ1oFEirOIG0vKjmIBk4VkT12A8IH+gqpJXo4DSt5IaMb-h+iD7AY2ROKB-IBwCjuJyI7Fj9xDco-6i0RBher9yaAudoaeB9gJWocdi4RCEWThRWUfJh56BcEQL4dgBj6D0IzMy42AsAb-iWqFnst1jolNuYrdijyPA8eIj9JHVicFAxgP9E3EgjAs0oUkjHqB+saqgAhB34GIgqbDUxo4SBGLZMw8hgGA3IHvG7jtJYybhWRMnskOh+JOmh2ZLo5JOUnZg7+CXcM6xj6DAM27glRE7ohhEXZHnJVxjFBIQKYSgboBVhHqr32E0OZdQZaKnI0EBO2PNYXHSElu9oH7h3EKuIjmAHCNrYOMhRJqb0x3jaiBz4JIhfKEHikLLaAm8h76ipWswMV+g6RGOE6whDSMv4nmQGOJiUq1TPCJ9oXsRAiAIIWCzqgu+ABEixhGeEUCBtgIIIVgRUyDyatUjgcCf0hgAilBW4shFJWDcojgjI9FU4sHip4IvCDyjzDE0Iq1SqmALc+iiEGL847YiiSP7oyoTKOMAYogS1uDBYUFK8qOkI6aKnvP1AYGixhJqSQfBllB-oICTtlDVYOqjzJMM8EWROPFBIeMjOgDB4yoRciDLCVTQ6KCdEAoQOiP2ox5FrhDsANTS+0Rc40QTySG64ClgbvFjm4fi3WJqo7NinGB6EtbjHPrckl8yuiAD++rbntHSIVPh9yBvEexirGOCGsaj3BOMImGhhGMnoIuh3pHE0HIC9KDCoPpg-AH34qvSrTGdCDWBVANUUB-iYQJD8xqhMaPmYJdyPSCkAerg+NIeYBWgkAK-C6pjgqnGEKxBhKAeUiwAcjj3IRrKnUjzIYlRISByxigzx6KV+pywJSCsIp3g+Zgv29Li4KAEo66glpJGAK4yK1PwElcTSiLMYkmjm+JhBheSU3gSCmHxmmNcCgCjMlOdYkVg4OKsIbTg+mIg4HCjnCLuEANjTDC5CIIx29N08yJzxhKWU9MC1gKgsSIAHCOsAqQiixKLEdIQHwISpm0AxKP2UYMTrpP7IC8T2xDuIH0gOGMjENiSACSnYLwClhoryABDmBpqExmhc3EEoj1jt2NFBhVCf6DAMhowwQFUAvrSWCKiYSWAwNI5k1yjl1DsIiOCeAPpIk8iyaMzMGeyHmFdg-0SNZDkoIIzRgOuUCvSyWHekqwgweClsHXKh+JnI2jhfYF94USSzGDr2Nmz0AISsvuTPSCM4wGTCPOzYlPgBqP1oIQAJOBegw2LOgM1IjLiybt9Ugj4G2ASoyaAuQmL41+g+VjfegfD+OCWoN6ijXGhqdlxAcSI0dGL5ACl4gUh2XM48yuhZ2OwEt2hIVH90cqSjyG84GBKRyB+pldi4eAF4HbgMSHPgcZQ9+JZ4E4yhRAzEgwhsOACxF0hoiG0Y8o6CBDx0ICh9gH8Ypeg9fuPItSj9xCjAnlSWJOFEbRh3TBYosjhmuHu6A+SOSG0BtAzPJOQuwoyTKK0YxOyrrNSUpUh5SOY0EiIbvP3If8K6WFEktliTjHC4-FSMQA8o85zUlBW4sSpINBpkzBT0SJ8Ip8Tqsm2IuER8dDaUKshuqS3MnQhH+H2A2wg3mESkqLgAZBvoJUQnRMnBOTGC+GroGfhxaOO0QmBfoKxES7iAKFss6TSysgacEfjzADU0Wezj2BVkQ8iDAJMAVPgHANZ0iOAMqHiY6sTdmIE4DgT2WLGIVITijN2ocyjxiJGKpBT1+FmiVSCdSOQ4LrglqJuAUgDDOGkk2kRVyFKoCKwr0kMUNoAMeAbE1TRGWNiEkAJCEINEzMxwtF6EfPgWWDk0fhgiWLnIS2TqgEamP5ZYmBNqP2zTuMsYqQiNqJTEFZiDBEJ4VshzOPdIGphxJF2IDMRTFIeoHejmlr1xFfjl1kFULAJs6E0UqgjCxGQ0w2hUoNsI-IgYKGlI6xTCjCRYVWS3yLEkWyizYs6YciSdeDzYcyhkqK5EihhbVN1UGcRdtCG4sshuxKO0FgwGaKd4ygzhgGkcU7jN2PwM+JQgRMsoJtENrIcEKyin6IvIAMzxCI3Mj9YRFPwMOmgSRBr6qwgzqPQAhgRTCLPkEoC3CAr0rbgA+K6IYPFyZCMCpji9gClUBZioiLjcApxQXGYol9TijFM4duATst04PsCzlCf4IoAHqLh42ZhcdOOQw2hISPXIT+i08mMo3XgcxpZ+NCwcgHKYreikjvMI36q9uONUMIQxiE5E0YBw5MhISKioLOwkmVi-eL74vcQdGJDYLSjUdABUnQj5DPNo4ba2BFCUvaIeGIq4NVhiAuyIENFNDv0koMhD2FkUPgqAiIrydXgZhAshAQjRYGLE5hQrKMmCIwi4XGAx6ChPouucqKTOiNSYl9zVxDCC24iWhC1ELdA9oDaM0Sjkjmu4O4C6KJn42ej+5lQoirg9-vcYCpRypJC4BXj-aOQAskCfYKIMK9wpeAWEMxgXKDh4wEhPWIYAx6hM-GIUSKhgMi-Amc74GDGoTuRDSAJIZGhGCDQoFYDY2DdUFyhrGJIoxEiz5MEo4rjddFWIF6CNXE4EFayDANa4k2BDdJlANilHuiDsJpTq6JRYPwjTGFiY61QiaF7ISYh+AClB6qiuSJloetGggId2+JoO4UK2Pug8AHW0HCwKZESIH6iR9NUgZcjXyD2Sh1i8qAKQYU4+rCbW7wjsAC00H3yqcUzIR2hdBKY4TPj4KHMobIhndmaoXWAEFF54ZIDy5NWq+oAqaEdgiRxWgGTcjnjCuB64ycibgOaW9BiDdC3YYGja+ACEtCxvOhGIXuaWKNqchoz38UPIcYScSEpCLcRiguZY8szfYGg0ebyBGFTctBgzrAw4JbhDUrDCIyRcCG04pXSMqFT24brqaKyIH6TzAh-ITEzH6HpEheTzcKlooCiZ2A1CldIoaDQoqDgTtjvodWyiOOTIme4aajloW6wzeK8YniS1SLho8ISneEIINzhelP-YpIjJ2rGoV1wfqKsImpjYtJQosegJOH90akgRgMqUBXzhKhcolFFpmOB0UziIQTD4UBw7EgEiQXRFyPjg2CwxEi3MjoE16CJo3HiWNr42AGxJYIoENUlpaJlAGnqjhMMoE2R1CNUgw3iIQXm8IyhQeACkYZE4eNUJHejX+K0oLEKpyFqkIETpBG2IeEB6qFOoPxDlyDSoKGb+iCCIJMQK9Hb0E4gl9FvI5ETnANMYXhhmKADEFfj4aFEqZpg-dD2IMhLLojC02iQ8RLbCr2hQLJSUB5SMQLNY+6heGDB4MIQW4gIiOqiViEaMW2BlHuCqGai+9CMYgFgfdld4TijQQGR44+Da6kRIrkLAeEUELgjFWPwYQHTo6BpEi0GlKFZRZ4RoeGRIsWAlSK5MaIhy5Dso3xzwpFdgWMQNiB4C1nRztGYQToLJSEZYT1g3eCXcBqaXTF325WiRGG5ozjIXKBn40YK4mnCEp0A6REkibzhRYN64+2SrCIq4qbR9KKEsN1g-qJTEyKT8VJO8fGjNqgCo5CgVhLGJTPhx8Bd2qZjRosZIaNg6xDrYkEgXWF3xHxhdoocICUjaqG3xeQBbHHOIsPidqLZc7PhJ+lS4T1ivCKaIR6h3+Ck4aajHKC0oazQ6pPDqLUgtCJWchlyizITI6tAG+E+4WZiaONQgLWAP3DzY74jqAO64+ZgxyLGkUCoSSDRUHgj+yCpgFAE5KCLoYFSclPNYTQ7PKEWe3gTtOLwoXUxNmH34zIC-BA3IHrjf2HgyaBhUhoAMkwjlxAAQkejniKtY0YgUgLCY1fgyiEPUH+gfuCuYCTgNQsqEuRhIVhnEm8E0QM9Ik7wC6F0A4IYbqIYIqw5VBJ0klXSPGLhcJ+j5JktkO4CCit9MirqiiKmo7ISfnPoI6wjY2IQRQSBkYi5JtfiW3MeZl0yUiDfIxXwGnCvEvjF1YI1UU7i3xCnIjghGiMd4PygNJHa8LdDK+NwpZ2gkeBXY0d7bTAlq0-xiOK84eMittORI0GT4aL5meZTuBHJoklBcRB0gB5SNqIcoVxg3qRZYh5JwmOO0MCguSBnIWjwFSNiIYvihLArEBwiXCDk8Z2QReLLwvRhpqLlCLoiwAOQSXchcWGu4RoHsjB9ITIKraLcoZhDZEtkANohqbFaIxrTNKLxku8wNVr5EDSTu+ACIprx2XBcOvDTkiPkaNMZM+K8AnXgA0j7ouqy-Kl8Ii4hXYLZCPQIr6OoUpkk+iIFcgLI3eAnIqeh+2FMU67SruOms4Kr+6OqUQGTLyD-URZhv+Dqo6IgWFKr0sQAhpL6Y1yQtBNckCpTkKOz4rjxliG6APaBJwkMUWiTDaMfoe4RW6Fo0ZnirpO640xgibMM8fQgSwQasEygj3EDYmihh2JqEyQAY2Ln6ikLQeEXIJohAgG-4i+jM0tbMb7gUGDPCRlSSKE7RGpi3-IMqt2ghACFY2+iwRC8EplLTxCo6IOjt5B0YErQGSMU4NFhGVCLYLESl6HcAyTr+aIokXeSUKB0YC8hLKOyAjnTKqA8ossIq6CvSZehkxI9EpBQG6CaIYhTGpOSWCIhQqeRocyilth1JAtxW+JfMgehzaHHICBh6ABz4wQjnyGaIIQhO2PwYnTh6AKUxi7waZHSKBOKgGHMZVQAaYv5yBGg9GI6oOlhjWNaIu1QzHPykXYnSUUWEISnvSHGU7IhtMinIxJhiCK5EzSAQyFkYD7wnjKIEWiie9ClUl8yIaG84bViiKXQxgUhQKJNkYNb2GNgo48jnQJQodAAMWRyA-ACpBLHkdBq8WdZIPQgeGB8Y7Ng4WNr4WwgWCONI-iaGSGc0i9j8VGVIK1iuQtKIQ0iJifqIpvRyiLpk9Ui62InYCwg+KJUoc6g3JB5YRziLOM+4ESRH6LWkHIwVKrGER-gOQgGIP2AXKOoyvgjJwbvUasT5GtuiPoiCcvpIkDD59GB4TygXKJ7oV8hzhsVo91gjJhckkjTpGG30owgGmEt+MmSZ+F10HShTKHxoxDgsKKsEA+x5GGqAQaSX2GTcIOg76PEABvhq+DRU6IjgRH7YqjESMqekSohM+MB6p7zByG5oXha8qFAoBug8iKVECXi3GKq4RuJ1lPEoV2D5qMNYxGr8FKEE2aKgSPi8qsgaZD2gveAgclkA-vgjJM-kxDjPuMzMq4juFL4EOLivBKY4TkCLwh2ACkgdiM24g2hQeMKkPuiOPHKIq6ghtNd4xQK3JI1U2aDeWMjioICt2IhoGezjOM+YlYjEiIcIXeJ7otoMQojEgReYE9hqCHMYNUh3SCfIDogiiaNMjQhwVMwofcbgquB45up5NFwK5QBxMABs3p45NM9Yc2i-KEbIB6GZYAGe1dhw6eEAMkIOWF6e5JYWRDA5PQgx8M6AGjhN6tlgbDilBPVwb5pypHh4FtkESt3oEnjzKJfU2sQaAK+KRGCkYEAAA")+"</style> "));


server.append(jQuery.parseHTML(itg_decomp("DwQgtGAECyCmB2BXAUIZAJ0c17Pd65BAHySnLnKmnAAmAlgG6QDGANgIYDOnAvAER0ALgHMw8dgz6Q6NfgFsEiPiSqrKqqsESsWHbvyGjxTQ2G3KNlyOqubWdXV14CRYidNfGwAI0SDBAPbwUjL8ABIBCgBCfoHBRMgAkMmJtIyO+i6i9pyCYHRywlK5AJ6ssPwA7jKCABYAXADMAAzNAA4AHgDctbB0wrWC9QBs7R3KSSmpnAzCkAywAE6cdEH8AIwAdOshsnwAMuwlSwD6O5AdcqzwzoOCbfUA9I+Vr5uVjZsBi8KPAEytZqPGZFC5XG71Dr2eAAa34dwez1elXen2+v3WAE5sY8oXRYVIOvwxlISsTOnxEvM6LBKlEAkS+M1IMyWszRsVBGUKnwEOxvOUfOxmDDhIsAoh4DR6vBaSz5WzIKMuoSrvVOG1hTy2otYJwlgtlMBSuVIFy2jzBLAOoJHsxuMpEptcs0AN4AMzorFY9QAxM0AKIAdiDUSiXQAvk7cusPV6fb6ABwAYQAgomACJByPRwR-OPev0AFmaAFYAGKp1M552CRoFhNF4aJqJpmu5IsNv2l5NRTEBxPtwSlru+0aJ9bJ9ZD4aj0uY+fzodB0ep4ap5qY5NDxOj9Z-IulpdR2uY0dRcsXi9D9Zuz2F32p0upoNVm+x+8J1NFp9rm-5z8-S3Nc-xPGN60A30ohbANrzAwR1k7SCU0TZtp3g9YR0gjNMRwnCb1nSCQ0TdNtwwldINaectxvXdIKLDMGIYyNgGBLlyiIYBhCIVJNTqDJnBdKQ9mgdYgwAGibTY-mYZowGaaTxLkhTSyU7Z5M2INWDAINNkaMBPkaZgNKLNThjALZ1nEyyLM2TFrO2WS1P0hSrIU8zXLUzEnL+TZVK2Uyi008TPlU0s7OSWTNiLDSJK2P5bKshLLKi4YlIcv41MyrY0vc1hfJi3zJzExSi107KJKkuLKuGaS+EeHjgD42oBP4GNhP4UT4pCoKjI0jzoosxKhq2bzlM2XLpNszL3Ns4Z9l01S-iDYyFNMhSXM2RM1JirZGh21bFPG-bxtU5pIo0+ytlLWzTM+ZLovE8L1h8x6FPsoK0oK8TaqMjaNJmzSNP2myNqik6zLUty7Ky-Z1m6xpeoAL3qxrmtavhcj+Dq+GgP5E22cTMT0uHTPWP6ofShSZucpzPOaLKqb01g0vi8GLIy2ztt8-StkTVL0ssxmcrM5JWCCmKi2TfHFOJr6Cas4nTJlxW9NR3j2H4tgnDahCcbxhWnr57TaqDMAi0O9aJsSrzbPs97Dty6aAbm-rtO+orwZ272FO2taHMaSKGYUs2NoD2KHJWgLxO+u6Ydq7bPm83zcskuzpp+vSDOkw6ErW4GNMTAv4ul3T7NLD2y6eoqY8N0s+fVprNZa7XMlyRp9dqzK-hT5g3Ic+2JpjxTrtYG62fGtyAaU4HZMutTx6Hmy-ndqagsxC7qahjSzvUkOocOv3Xfzh7J10sm0tZgnTK+yzk1voevprruY5T+-FJ7x+P5TzPu5Txv0at0EnrSAIk-jRyLEFfmYd-awJhv7AKdMs70yBlvdYLNgoW3+nAou+89qFyDnvN6RC-bqXigANUaATFaJkNLrFisXHe+xwGPUgVtFGDUNZaz0MA5o+sZZxWptpCWkkvZwKtoPMm0UkExRQbgvSGVxaE18mNZBCjfb9U5iHBgOlpJB2BjPEOdCLLS2JiDdyMcrr+wEdZamADm4Yw7PwoKS1dIrRgcQ3eg9-J+SQTdNBO8HJFiUVZJO7Mt6zQQTvchfxPjDE3mo+hkSprvRMswlxMc3EcLRg4oBusO6gM6iVbueVDLZ2GJbWhs0knW1HmAWq9C2bTxUoEjR70HLoN8pldehC86ExaSg0O2wpy-RjmghOYzHrFMmcMex3CdaYxAWAoKVkSovRMgvG2Gi+ZqX5q0oa1NbomW0oZEKE0opWytqzSGOUg6bICSpIJrBPhxz+oNDxmJAnXR3lFM61lhaeKUfpFxh1NqyL8pdHetlSz6LgTU0hvNpLpMJms7JXCW48N1ucES5MtrWQKqwRC6lPjQLoYYo6s9xqTVPps66xkcpgF8jdCW5t1KLVZesC6QUJJyQJmlOJYACb2QJo0KcvltrwxRaFayWw4okvxdFOZGKFlCUKbjA8ilGgpQ2f9aG5lrpmTplTKmq9-I8zEf0oeHjSGllYLpfStV4mJFBVU956d86INOllDmLSArIsylq7YaKm7zLbnWfWWI-KSRJVOYmqkizysjfGxNcbo1bWYQGnKh0hkPU2mbBle04aqUaDJYO-TnJMyLHctpUzanKKURJONU4hVpqusTbpKao0Jq2kqxx4a1VdQUS0aR+drUbPwWtPugs8UWK6U88Ki93FkuOuSrBrSprQ0XlWxIJzBqGUts5eevqo0qXpTPUa-VGUbr8tpHxpbKZlppmDMtA1sopKXhNOGe0QprWDYAzFizSwRvPpJUsUU+knTdbvIZWlWVmzjbnbejzXKFwPgYqlxjUnU32O2kKG9nUWIQR0-5o0kFPohYMuGIHDzZNYtxENyqw2zIHVJJK7koo8traskeyikH9wic5MeGULnz3itC4eD0wPB2NfTAjRDd7JW9XSuSvl82DWeuU+p0idV1rffQvTiGvXjSGesfYrGZm0f-SqwQzGRKlnXpk7TET0OtMOmdA5ZC1HBOzvtElFyfZLxuecst8ipHjwHjuplacsGJLMs091OdYG7MpkLMG3zZXD0lplrTorSyjOHWlI8eKZblwc8tRVDUGN9qDPrEtwU+WEpWWc6BaiJW2RBltaFLrPqsoSiKwV6cRXGXujPcKV1raLTTpyi1VsvELwcj2OrElr4hVU+JAmxa1t8tRlVvJizEy1bGz+85BdR0UYS1uuehHr2buhcIrOIL0PvsmptSRlCq3+cGRWzd+xGhHYK5Z3JAHciYlqw06yjrc6nbUUMxFpb12KY9dFe7ktQXeuu7tBeSDNp6rJZyhg5VfkPvgbWwGQZfvg-WI6wHobgG3lq9QySXcrsno3TtW62l7VaYqU9vN7PN0MFvL4st61kueXinJ3eqzvbft9hgs2UsqF4qkvZJXNUh5q6Z3VSrVmw3w31qWX2kkumc6HXpKK0NAabuJ+4+5lrPkIOZh7RyZ2yaaIZe5OT9sHKTWVh05gRUbahWznHG6Y2WcnUvSh96yZ67K9OXH7pKinpG6LF0nbuu6fYs6oeRShvthmbW0WPZ4ifV1smjzo3clvlI4d3ZE2mCLcVoiVakeBH2coLrx1mS0dRpnIkiN-LOdk8M3CrtKNCds7eVdeC-NDDZXJjYdteukkHP5-jeFTK+edg66B9Z-cBvo6NExKa1lFsns1OpUenOLnkOFzofdxtwv1FHVZ1bTjWkueGWdZh99NT-FEJBix7+wlh55G7H5Rpx53Sg67605YoFIiTdrKzsZnaQZ15SLgoxbkZ-L7yuT5Rrx2SVLYKdZGKNLSQN6rLt70yMxloUzJJ6bu6fpIEWYZ575MZg5RrlZvLgpoFfJQYCwMypY8a7y2ovI+YupnYAF15boEaaKHJCH6oTS7r6RxIHrEGSK3QHQRzV5qKIryKJj3ZJSEEt6QaQacbd5UHWxoLyYLYU6cH2o06MZ05FgG7dxSbLrNLAy3rTRqHpzdTfJzp0pyHDTyHna2oh5nKBwzbzbtKPKeoPrN47RjxRqyoiZG5ibRxdK3RE6CEpYv7BJlIxoVwfwvwVwxzhSFZuGUiwFOG6y2adR1aqRmKHSW7LpqKAzBIiIxaYHWSMEDQVL9x96zoKI5QYKNIs5TzOYbSyH0yeEbS-ZRZmKOF9qYS1Zyyr4jrvqAwAGQahary7TmrSZHFKSOznpEKSb9QLGaowrRHIYk4+JYJ27ZTjrRS-brFsJFjLF7Yxj1G4xFhCzdotYQzIZi7bANpgAIZR6DQ2QZHqTw6zEwLHJgALq2RBg-4eIDTjZkE+KNBmZWSAmL74nyr-GEyAmSQAkkqsFwGLJiSdwiobFBi1DlLkKSpFi1DeTSoMwvxG7cy+I7IZZF7DwSS6QvQMx9ID7pw1wLo-695Az7TiqsqJzMxmLWSlhMm9TaR8oWS9SGZXrQz0IVFQzkJsJBhIwwDNgKLlaJi1ChQB4zpPREKXx1obx9x1rylZzJ48zIlzxemzTj6fJgbtZDRiEMq1Tj7DDqkxK6SJhfHA4IQ1YDqYhxE6lGZs7VKbE9FYYfoAEVKEbEbWFXKfaeJeTzYBSWGvodKMGBml6xF1qFn7I1IPTgrDDJhJnBSYSPRtn+QOZdnWTIwwBtncx8w2nRQMCxJMkvIxJ8yJCxn74Jk4pU4KImlhDwyNCamDR-DPRjnPQTkTQskBQjlaS3iWJKHExFx-ByyHkMCNCGS7nDAslyxfqjImmzl67zlFK57dLhR9Tcozz9YFqpLrzGRMo+bZxFy6TmQkoWR-SKlBIDYfRZz7jbDOoqLZyZRhmwVC7mRQLMCfTpQExvqsz7w4VRYjbyogaJqqZOTryaGfJBTZQ8xTjFEfRxJ9lKygYjGfkcWBxmmiS56BRdJ2l+wOm5riTnxgV2kJQ-xlJD68x7Rzz3SQpdxXrmTEzrKypXp0WDQspFwSw-6claZvr6QEVnLT7dzWz7RjYGREzGFpxxTraPSfCrIx7kypqgFXRp6lSBH8XG7SSvl07vm4xU4SqILfnpQqm95946k-zJ5JyZxKlXSpGj4QrRxnkcoKp7LiohRaaVQpVRV+SJBMm1SYj7nRQrnNi8VU4iJEp-DGl-C1BUWi4ikZxmLZwrRZGkWDTg4hkOxyT0XDTsqKVnnAVwlZzfkh4QkQovKJDlUSz+VYoHYDoAjhQSpqnanSSC4HmSqNBjlbRMnbWC5dwrmJiJgsn1UlSnWYTzU0mLVgJ1bZQ7kWRrTXkbR3ksmPVC6NBnUNW9TvVBpUm1E3XOIjb7jMBhUMwRVTL5VGQxUwxxUTJxWSq24ompWdZNZIWZV4oOqYJ5UwwuKFVaYlX7hhAHj3S8WxLExxRQJjnRkNWaS4XpTNXdStWfDtVTSdUxTdXQm9W9YDVTVTRnk-6B5enjViFxoh4k0QGmk7bAizAJC2C2CsT0AMDy0K1q02Bq1UAa2K2PD2Cq0K2gAQCQDAD2AYymDGAeBGASA+CxBBC7D8BRDiiVD6iLAxD+B21EAADiCAkQsAkAjtAQztSwrEetxAZAmtxtpte25t7gMdOivg7twQkAJoPI9AGoHAJQ9Q0g8A0IsAYAgg-I5QXQ7orAAQms9Q5Q7oggKo+tEdxtyt0gewwgCAsAJw+o7AiwzAtQJwytnI3I8IfQAwQwownQNd2tdd1A+IbQfgZtIglt+Q8A09gg9tfAzdsoUg4gCg-Aa9sAUgbQHAzAsAtQAQrANASw-AAAZL6B0OsOWIbhmKQAAMqwAd1d1Z3QCpgAAKAAKiwLUIsOsE0JuaWCWj3IyqAzeaA1IOaJaNaMvcnexDyNUDQHUE0K0KPb0P0IME0MMBSLXRHUrYwCoFYOPQraQxoCHXQAkOQ7YDQxPfQ1rTrdoLXYQyreoMgIbVAKwyQGHdYGkCYHsKYHIFwFaIsGAMg3UFINHa4E7RMIrQ3aEFkD4E7S7eIzULUFIwBkI+wPiGAMwEEAXfiEsEaI8MrQkNw+QNYEAA")));

var samples=JSON.parse(itg_decomp('N4IgVgzg9gdiBcBtUBlAhgWwA4BsCmCIATgJYZQAmATAOwgA0IAggOYHwCsAHIyngB6EAsmnwMQAERIQ8aGYQBiAFQniACmgAuACyg4oLAJ6EVa8VJly8AWgDieGOxDKJAOgDCATgAEACi8A8gBKCjRUAJTi9o6EgSFh4kIArppaJLCxnlBEAGZh3gCi-FhoMBDpcIxCJDDeWBgUCADMTQAMjFgAEggAbK49PQC+9KiYuE6k5BRNXOKs7D0ALLwCingYogSMFrLy8M4q6lq6+kYmEmbb0rs20U4uHj7+nsGhEVEOTnFviSlpGfsvNk8lRCsVSuUMlUanUGggOIsOB1uvA+lQmsNRtgxPtJpQAIz4uZsXrtEB8QT7ERiK6WPYHVSMDQ6PQGYz7Uzma5WOyfRQqR5+b5hSKMO6ZV4JKp-TQVTLA-JFEplOXQ2r1RrwNpIkBdXquKhcTHksY44hkShNTzE9gcTwrSnOdabLl0+6HJnHVlnDkXV03XkxfYPLxCl7xd5ivmA8M-aWpWUAkBA3KK8EqqEgarquHwMJkvXwGBJHA4Y3obETC0URatG0IGjLcmrYPOmmSbn0lxHFmndkgTm0gPi4MC0PPSWRkAj5OxqVZmVymMK0FKiGqrMwjXNfEFlF9fEccumqtTJocet5skUtYbds7Kz8xkgZknNnnS4dt2B91ucfCqcZwA34EyXWcVzBZVIUqTcc01Q0931JZj0rQg8WmJpLx6GgHVvF0h0fUdn1fb1+0HL9h2jBlBQnCNRWnKjgPjf44GXVNV3TaDEi3XNax1Qs0U8FDxjQ6tDywpsbypfCKMIhkezfH0Bz9AiZB-J8aIA+igLnKgQJY+V2Mg9dM2zWF4Jofj9wNI8RhNVDcWrTDGHmXomlw6T707X8FNIj9-R5GcQyeLSPiDWdJ30xNWPAoy1wzGCzO3eBDSs-VEWEs10I4ZzmBJPMqA8p07y2WSuw9F8vT7fzVNuKjgrDSdtMY3SorAlMQWMhLuLghAqE8RDURszLT0oDg6Bc-LFkK5tHQUNtSofcriKq99fU-Ja6vChraLeZrwqYhdQKTDq0ygjcktzJpEWRfVPAxOyKxExypmmrCeFmvCvLdJ9fOq9aArUoKxxC3T9q+VrmOiwzOviri1XMhBFl3W6hpoGgRtEqYqAvSaFg+qSsxkzbfs9Xs1uUjbvPUojNLBsKIciqH2qyOLOIunj4J6Qa0VsrFnvNbG6zx3ocM+1sSsBnyycUsiVLKrbfzppqGYlCM2pO1nYfZ0zOYQfFFibQti1LTGXoJYW8vYZGiupRbvNJyryaU8jNpp6j-3pqMDsho6DLY7XztgPxOigDB6MuzVFksg1UZNstHpPLHKFmEXURmwn5sl2rHZI-7Kal92dtC73GfV5nNYguGOd6gq45LBP+ay6t0Sw68WyJ76blz1aXflt3gb-UGVdLtW4z96GA7OkzEr1lKuA+42G7NwXKAGS8OAzjus+Jh2iL+inXepwfXFsIIADlVf2M-L4rmLrGsHrEaLBv69NxOHNX6YiTTgYip3rucluwyz8gDWqRcBQ3yvtOC+GsYo318LYHAhg2itAABoRznk0Q8qM+gZQ-gLdChosLuXFp3e2P194gPzkfb8J8oGj2vrAu+hAH5P2Sk0HoaUhq0BXkQ60acaA9H-gtKWPdnZyypnQ+qkDmEMXCgwieYEEF8CIFwKgAA1UQOQIBoPxI2TBtcqA4N1NZfEfCW6LA3lvOaoic5UKdrLGqCsIFuEUTORRyRjrwIvr4VR6itE4B0Xogx7Dczoh5q4RYRoCHN2xlhe0ZCAEUO7g4vOh9+7HxkW4uRHi5FeP9jA8+iDkH4hxhgsJmomg41wVExYFipjzlcpwAmHc7ZiLSb3SRhd6G5Kop4xcSYVF4DUZo7Ruj9GLEMc-ThkT8RCViaNCg+JcrNOwiI7OCtxFOLAS43pt95FOAGd4wgwzRmBOCZM6ZyUcbcLRA0ygAira9HxLbXelD5LUIyVIyi21ZEHLyQcgpk8QBsIRslDgrQjYonjg8msP9nmcESYTdp9jPmONAQXcB+zoHHMKWC2Cz9Uq1M3nCxYTzmmNg2e81J6L0l9x+YFbJp8+kKPyYM++j9wW5nzG-Ru9lCFiVToiv+ZDUVbM6RIkwaAkg9OZUIJgaglDQIVUquBwhFVKF8GoNo+IAAy1yrqtEiQ9JuSyOC4xFaQzOdiJV0q6dK2V2L5WapVa6lhVJNW+D1dgjgQRDXwQtbUzhcKegIrWda7etqSaSp2QOGVcq-luFVcqxhWZ3VKKTCmxBtBNEBr6pC2pyFFnJwoHaS8llqWAOWgfF2CbnVJtcCmt1aqPXpqVb4IItYegaPzfAQ2dz+hwstc0xYwixU0qARVelZF617Jda2w5GrF3ArAtmnVrR9V9paIO6JZLVn5VFTazZMb7VSo5HOgeC7U1Ls9Sujly6tUbq3ZUpGxqSVUDhddDekko0nr3meuNShL1ZMbc2tN4HM0xWzbYXNvbX39sLaY9KQwS3m2mBNRF5K3nVulhimhIHpFgYzTOSDq6s1etg2EeD3Kqko2Q0NBEoa9K-1abY-9HzgH4cPoR35StIOkYzeR6DXqfWHn9Qh66kTUNmtLT0YVzTN44ZSVOla5741OvncRxdgn70nLvU+3VBqEM9AGnyslmHFOvInbh7ZmLgOaavdpm9umb3CcfTm6jfaqBcNqeYtDX9uBt2Ux0wD9neNMucy2tzD6DPaqM9u9Ewa4VUBYyK397HJ01q+XWxzoH+MkaomR2L7bDObuM7RpGSHCwcFcJ4fzsn0MIgkiFtFXGZ2OsTQVnTRWhMlfXQlyTXBB0zFDZbNZ7dHTitPe1h1F68tEe6y53renCkDfK95rgkT8GNa-jQcbh6MtfRU9l7juWusaQEytmL+nSvxY25J+jAkomhss-lIRVaTt4Y6-Ni7tMrvhWK7d9bL7Ktai2+ZgL6F5mXnq61u17hYCaCIHoWt-ZEcwGR6jhtXwkco5wNAjHWOCdtqJ-jhD0TIk+a-QdhYk3juhbJ9js76O8fM6c7jzH5O01M5J1B2IbO+eRyq5EmJu3srhvylwZFf6suc+J2jgXXP2f5aVwrnngv1WAk12Dpo+3g0yYFXEteVjBH088l9tX3OWdW5V4t23fOgI6-59r5XQu57GO4TQA0cL8Q9EvFwSNU25cO8V679XWn5fW6d27rXyZnfC61DdBjfRzy+7S804bn3GfO5+-H2POPQ8a4Ly7-PEfE-TW4bCqH1Y3vsHUfD09vOw9l+txzovt7W-M-c+H63ifzyRPGmShTU0ZfB9s735nefm+F8n47xiCeSsz8JRwytKeDSmqN0smgkv69i2PSHufLfl-t6P8X8vS+E9z2mpEzwn6a9ngz+98dB+J9d759P53p-3+E8X7d5fFe54tSXAGMD+lAhsFaOor+luZ+NusB3+y+MeF+-+V+tc1Sg6lkoaI6UuR2Esh+P+OWrOJeCBzuSBfel+Je-eQa6+DWW+pam8AeY+DOaKy+n+xBqusBZB3eFB5eWCtYtSmBYB0w-uacXAuBxU+BrBc2BBkeHeXBQuPBfeWCnCRaYudB6Gu+CAge2eLBue0hJ+HBMh8hceABWCPQpCz2huT0xuZaIhiKC8jeAGUh6mBh9unBC+lBih3efBg03uGIAAuowAAMZ6BJAYBlAICIB0Eiy4Q5yEEXajwsKVa3T+GDBAA'));
server.append("<style type='text/css'>.loader {border: 1em solid #f3f3f3;border-top: 1em solid #3498db;border-radius: 50%;width: 50px;margin: 0 auto !important;height: 50px;vertical-align: middle;display: block;animation: spin 1s linear infinite;};@-webkit-keyframes spin {0% {-webkit-transform: rotate(0deg);}100% {-webkit-transform: rotate(360deg);}}@keyframes spin {0% {transform: rotate(0deg);}100% {transform: rotate(360deg);}}</style>");
server.append(jQuery.parseHTML("<div class='loader_box' style='width: 100%;background-color: white;display: table-cell;display:block;position:absolute;z-index: 999;'><div class='loader' id='loader_itg'></div></div>"));

var loads=0;
function loader(status,location) {	
	var a=document.getElementsByClassName("itg-page");
	if(status) {
		loads=loads+1;
		for (var i=0;i<a.length;i++) {
			a[i].style.opacity=0.2;
		}
		document.getElementById("loader_itg").style.display = "block";		
		document.getElementById("loader_itg").style['z-index'] = 999;	
	} else {
		loads=loads-1;
		if (loads==0) {
			document.getElementById("loader_itg").style.display = "none";
			document.getElementById("loader_itg").style['z-index'] = 0;	
			for (var i=0;i<a.length;i++) {
				a[i].style.opacity=1;
			}
		}
	}
	//console.log(loads+' '+location);
}

server.append(jQuery.parseHTML( "<div class='itg itg-page' id='Home'  style='display:none'>"+itg_decomp("DwEwlgbgBAxgNgQwM5ILwCIwBcDmBaAWwTADs8YB7ErYkgUwCd0A+AKAEhgALARlkRQZsOdFDAghuPFgoAHFgGUsAVxABPKAHkIjCGDoB3YAHpebTrP7I0mXCwCSJKFi50owOgSuDbI5gCUwE09mJABrKAQSEHdPbxthFgBZChBggmYwADM1UhwoLIQYGQYkAooGWK94a0k-ADF05gYqGjgq+LqWABUmz1kKhHaPaoEEu2YAET6COmowBCgAChHO3xZAlJA8eu7p4xCASihZFoArOmKoAzccOcYELDdFgmU4LDA8CgIwGCQAGigr3enwIqTo7RAj0WDDoSAoygYMDcWQqUF2kygsKQdAQSK41y4vwJBjAcHaQzgFAMYjIIDoshcWLhuPxtJkzlcQIocEubzxQMuXCiYCQBCQADoTLJzNwAExrRLMADiDAQsiJMCGUAoOgYekMOqynLcm1SOz2J3OlywUtMctl4GgNR8wjwLRpACMKAAPFgcThOxVSSjUWiMHX0aREhgxN2UODKAgkf3sNPASwu8Z+RwnYU4qA8QEACSTUSgAAUKEgsIQKk8vJ61aRnKKkMo3EgEARZLyylkWl5gR9e25YTgwFQyhRjbJHvpqGVSUzXjQPlPaVBlf4AHKApIAQQr3Ui0SgAGEAJwVLIAdgVwp0UE9dDmsB5vOKdBiURiyhxMSopUw6fN8vxlFCNBQHc9BquuJASlA3RcpByB0FgZSPm4L5vqQTw4HB36nj+JBDGoAHEScyienAoquDEHIvpEMDIigYA0c8ZQYsy8KIsiiG5u2no4gAjh21B5mhZQICA4DwdqqFYGoshwtcZLtExMn0jESxgBKdCIQe3QHueonHL+Jo8QiSJuKS5LPm4dA+k80REcuBKoQUg5Ao8MBEiQ+Rgv+bhgvScDSWeYAVgo55QPSDCQERyLkkpKmSkhXIgV8Px-JEsinBQRQEpS1JlByBVZGSIVvCOvLMjg-IlBoWS4io2JGtB9xQE5pxwkgk4kICpDwKoeTdSQwokMiDB4JRBVgk8M2emhMTjo1A2AgyYAwehvz1etVCAkMi2kR8T5IL2vx5ICAw1tIaokEgMAJYyA3amtiDwcsPy7geSDmWeH3zlQHVYA9SCfQNywFU8YF-IcdoygGFjBvgWqvVQog1movIYKi1B4P1ABedAAFw+oTRDkiwwCLFwsJZBgXBYFgshIKTxjGAY3MSp6k4MD6kAShUODGKGLlYMYPAAAwSjwMs8MYcrS8rctyhK0s8BKAAs0sAKwAByXtrEA8CwfMUP4gvQAAPlAjj4YRMRZXDEVkf1ZSwjoQxlJQBBgk4FngDWw1YHF5FA08MRzi4BgIOR5SVDtHwwFAQmpapM7oi01AUA2Axqu0kyeHMHwICYCDMNK5icMYTo16AkCo+QrThpUWAGBQ0ZgLGZTxjySYpjXgZN1mdRiFISAQGjrekIwojiBgCDCWDRRYOACAEd2NN15ADe7xAsoH46o9jEvLExGcXapiPzpn+gRQwCAAD62BxFfCB4G-BALxID8oPHZ+j8KgbyHsjRud9agPwvngVwMkIwf1gbieKN90xcAAMyoxYAeBQCgDwAE0FAmAwcPEw9dwFBjHtAp+eBvTqCgIguhGh+5hjnkwYet9UYT3wFvDUv8MBOW7KOZ+vCuA73IWmWuEipF7w4GQ2RnCqGP0vtfBulD77KNfg2BhXYv7aLXolfh6AnjdiASxEBCwwGSIgWsZRSD4GVEQXAlBHDuCYKoUqboABRA8SRiHoNIcfChp8oF2KYToz+4SWE0DYagxR983Tej9Bw+JUC3QuFhG4fuiZkxIDiWgvWWDmAAGk6B6CcEkOY9ISDEL1ikzgXAABsRTlSMCIE4c8pcIxASgDuOgiJwQ7TgolKAkxRS4hxACJCAAfvmAU5iAlaQwdpahiGNJSfIw+yN0zqLSVIDJr5uEtxyY9fJDTCkeImEkPEOBXAJSgvUB6rEtQswoLU+p3BmmXL8Es9pF4umVB6X0gZ9IhnzifGMnEUlATdFmXkBZW42lRFWaYdZ2yZFbMkTskJrp9n00OdkweeSPlcAuQkiY3Q5hExbDuMAagiDvPRQ0r55KflIo6QCxOvT+ktFBfcYZELxnQpmXMmCiz2UoqaRsoJWLUm4vwAcrJIYB65LOdwMley-DngqPQWiZQABCiBlA3GiGqR4jLZXMpaey-51BulomBbyugYKzpuEhRMuEMK4XzMGoi5ZyK1kkpZZqlgO5gakXaI4EOKgniRigAeCcAVARhvkpGx6HwY2Z2NMWXE7wuCAn1ehVwSAoT7kmICAAqng9wqL6nos2Rs3Z8royZKOQmIlarSVFL+lwZQMgkAEkmP5LeFrZWfOtf6jldrAUOp5YM-l4K3VCsmV60VCLfkBtrfWmVWKbHfJbQS5VJziVMvVUUypequwXmQB8ckXcAAyYAiZ4hAG80wdTT1NInX8zp06uWOvnbBRdozl2epFfC31G6SCSrRWOnd1im3ZgPUqmex7O0avlaGigngFjokYKRVySBR27q-d8lgUHbWLX-XOvlQHXUgahSu8DPrxWTpg9K6RCGcVIcVW2lVpySUYezCwe9QxsBQGKQgREIpiPWNI6y8jNrf1UaBTR51C76PuuFbCtdkGJWBu3Zx7FkDm28cJaqwTRTi7ejVASYpOc5gvgYPgAAaowGsr4cCybQcGzDKolOctUyC9TdGRlaaYzpiDrGVkGbg0ZuVPH8UoeOR2yzZHmD6r4soeNNBSjKG81a9LFHlP2sqAB2jDxNOgamZFljfqYtbsteO9LOaGAfDcFGjNfaURonPLREgvxtT6ubE4fwLI8R+VXVF+rm6pWGYUbuxDdRkN8bQ2lhTzAvFwHpF4BQMkwBhAoDgKk+X31Bu-eWErM6ytqZdWF6rU26tQfY-NzFi3uPLbM0e1Ln6hNdAy3iZaaooD6oqDnIIZ3P2+eE8wADVIcAaArQNrAgJi5zja7MCSWc+ukEGxSM8XifQqQSpjtoUAFAwAXKxStA29T9SUh1YbcJKcIEBPYNoL24sLa4yZxLrbzMCd+0UvbcAIAyTRP4VICUGp0CJngWl6E32kvO0VgLf6gtOru4KxjYHatipm9B2Lu74PGebl91DP2mtdvSwAKQQAaSoCgwABzwHtqargiYFeaxt4rgXZ3Ba10unXNXvX6+e0b6xJuEufaS6ty3Y7rcbYPKatw9RRR+UYF7+TIb-OTso6V7lAeNP3eD4sgAbyzab4fGvG-i3u1lK2Bcnqt399YUx7fiCgAAdThLyDQ55mxech1b6H-2keJVKNgDQWcFAIhcPh69tEgIDdZ4v7IOqFiVurRH9MUf6+asb99izQv0vXJIB2RAhf2k1OHwn0fbfffq-95r4v2uPUh909F2bsHa-c9N-u83FLY-FvYXJ4QoJwUHEgG-ZXKHC7KdFTZ-QDSrEvd-R7MPfTGvEje-JUcfOnKfKASpcALUdoK7KAYsbsT0REfALxfKKpG8EsCgqgr-aDGtObLnN7HnM3WPJvdDIpCsR4BKalRYQIImImU7GAkfOA-Pa7QvF-ULN-bTUPddDAtg3-Dg--BvQA9tYAhPVvJUCsdCCMHNPtUgMILPbAiYR-BAm7IveQoPVA5jdAtjVgn-SPIzBtcBHdDwjFE+Xnc+J+CJG+ffHwTRb+CJPROIAxHQIxLIZQaIPIMxSgWMSxVBYImwOxZxBBXRTI9hbZNxIpeoCtHcSYewHcZUfxQJTjNI-w7YcJRhVIZhZVVhWCOJbgbWAouI8AAKYhbWVxJbXwWhX0fJaogYj0LGJSXGdAYOXseOUmLIXkZJU9Z3fIY6VAAAcliNcgYDWObj1VrGWKgBIDAjyTED-iOJ+BOOxkmKIGc1IDwF5CyCwFJkiD7QoAAG4bjE13RtpmZnipMZA3i1V+i3QLoih5404Ji6AMBPi7iHiniXiASYSyBpdfiET3jxE95gADjViNjOjGAdj909iv4CB8gzhZBogjFzjRRxicYoT0AkT7i6BHi-jXiPibk7iUT4T-j0SPlgTJ45xpoaTrj2SyA4SWTESRTvjbkuTWSMT1CfC8iTc2ju0YAwgjiDBeQQA7hSciNTBei8i+T8AklhjMwNsqw7owQ2s4gmxaBWwUAOxrhkAdRPQYl6BAJvJ593A6YGYmYWY2YOZjABsEISA4BjBRBYQ4AMAji5B+VRBcs7gsAMBn4aIogwhQ0i1GBEBogDURsQdUzk0MyGAsyQAyhOtsButqMBknoqc6AK5mB-gAAyEgYSWQN4iyAcb4SyWmKAfFRmdAZmVmAMgARQ7DmAAFJlYFAxI8Q6AJzpZhtaA5z9VUy5ygI5y4cjs8c5zIUQF3MWARzXwnApzlAZyQdczlySAIgNceRNziCGNdzSg6zEZXF4NvCFSFSG0gA")+"</div>"));
server.append(jQuery.parseHTML( "<div class='itg itg-page' id='Genes' style='display:none'>"+itg_decomp("DwEwlgbgBAxgNgQwM5ILwCIwBcDmVs4C0MA9gHZYJhkCmATuviBgYQEYkAeh1AZiegB8AKACQoSLEQoWufLkJ0SAd0Zhm6XmDpIspOELHjw0eMjSY5rABYI4veUX0BXALZlDor8GsBGKeayOGoaODS0APpkCK40jLoAnnA0GPwUhEhgAF40AFwAzAAMhQCkANxCwAD0foLAAISEhFAA4uH0dlAAkmT8gMgEA4NDwyOjY+PDUE0iXuKUbMkBMpZ4rJmuAA7JhPPJIRhhkXwCM7PAWNY0CCBLFgSOO9jbSqqnZ1h0b+-Wt0EPWE8aIoVIx9EgNggyBgAExCNq0OidHr8aoXL7iKofL6oy7XbFYDggBLo850X4rf4MdFzG5mZb3fRwMA4axYOHtKDRWJQAAUAAkWgA5ADCAEpUSBqedadI7nJ9CAEHQANb7dCHGhRGI0fKVTGSoxnTGfQ3eD7k+6sD6eWZmmWBCmM5ms9m0KAAGXIeEF2olUqw9vp8pIcEVKrV8M1vGccDgWtieoDJONJPNdLlqwU1v9gYzsBDTJZbMEAFEyEgaK4FjQoD7Yn7TXaLcHQ0rVdTxAhm8EmBgyxWq3GNRE6DReHqEB2JKZZUE1f3KwsIhr4lgkil0OBwYgErlqEzaOw4CQYMqKnUqiYpfrk1jG6Tu5SbbbpY+nUWhAB5C70VocgDKCRViGSANraTbpn8CpthG7QRCQP50PGNBIImBrgaiJoYWms4UlaVKNjSb4Fs6xYtMK1h0PkAAcUAAAokJkALkGB2G5lBIZhqqvboDAlFobeWEvjhDqWlmBHgURkGOiRH6CAAKoi5YwHQYAbFgoE3oRr7SQynEwTxHyQkgKlqVgERMroq7rqk5BYBk2R5L4hQbJwZQHkClykbkUC+AAdAALJW56sUad7YWSulWOJz7vOxMmxqRQgAKpkGpShYKFcXEa24ZTl2UU9uoGCpelCEjmOsVnCY3bWckGBblsCC7vu1BAgsJ5nnqV7VJO2laRhKb3iJQaZkQ2baQGOWFi6pYUKOWR-rQWUQbhem5e2hGdrVPFlh8NBZMucGjuOU41YV87zQdR20HVG6NTue5kB5R6dSFl6QBefWSStmHYpihLEoaqIINWpzVFeRjTo+Nh2A4rAuO4aqsMoJB0CA8AkM4ICEBCo4UHdGDKOoFy5AArKUZSuAg3DEyApMAGzFK557A+da24Gqw6o+jmPY91n1Qx9EAzBDgtiyLwjQxdPGRp6JDKs4GwC5L0sc0VGhblcA4GYk9WbmA27NbkZDkHEF6Q8IVtqw6CAwDANwAFZIAgng28sdsOxE2CVlAzsIDwWC+3bAIQHEPF0NEEQ0JwGyjigYDkDa7sWJ7OO4iAv7+4QGf0M+Pj5LVggAEqCgAglAJax-HmQsTU+Tg8L4Ps7b9s44Dfsu+wJBEg8pAUFQCL5y3o0PDgiIbNYaoxxs48ILwp0S43kMYpDS9W0AA")+"</div>"));
server.append(jQuery.parseHTML( "<div class='itg itg-page' id='Browser' style='display:none'>"+itg_decomp("DwCwTABAxgNghgZwQXgEQEsAuBzVA+AIQCcB7AdwQFMjgB6cPAKGABN0A3aeJNLbAWigkAdpjjph1DCzQAzEgFdhbYQAcWAfQBGpCtQ1kJLcqggJMATxiU0hlphAAuCAFsJgkZkqiA3C7hE2BKOAAwQcAqYJD74jEA")+"</div>"));
server.append(jQuery.parseHTML("<div class='itg itg-page' id='ITGFooter' style='display:block'><hr></div>"));
jQuery( "#abstractdiagram").append(jQuery.parseHTML(itg_decomp("")));

loader(1,'Start');
server.append(jQuery.parseHTML("<link rel='stylesheet' media='all' href='//fonts.googleapis.com/css?family=Roboto' />"));
server.append(jQuery.parseHTML("<link rel='stylesheet' media='all' href='//fonts.googleapis.com/css?family=Open+Sans:300,400,600,700' />"));
server.append(jQuery.parseHTML("<link rel='stylesheet' media='all' href='//fonts.googleapis.com/css?family=Oswald:300,400,600,700' />"));



var samples=JSON.parse(itg_decomp('N4IgVgzg9gdiBcBtUBlAhgWwA4BsCmCIATgJYZQAmATAOwgA0IAggOYHwCsAHIyngB6EAsmnwMQAERIQ8aGYQBiAFQniACmgAuACyg4oLAJ6EVa8VJly8AWgDieGOxDKJAOgDCATgAEACi8A8gBKCjRUAJTi9o6EgSFh4kIArppaJLCxnlBEAGZh3gCi-FhoMBDpcIxCJDDeWBgUCADMTQAMjFgAEggAbK49PQC+9KiYuE6k5BRNXOKs7D0ALLwCingYogSMFrLy8M4q6lq6+kYmEmbb0rs20U4uHj7+nsGhEVEOTnFviSlpGfsvNk8lRCsVSuUMlUanUGggOIsOB1uvA+lQmsNRtgxPtJpQAIz4uZsXrtEB8QT7ERiK6WPYHVSMDQ6PQGYz7Uzma5WOyfRQqR5+b5hSKMO6ZV4JKp-TQVTLA-JFEplOXQ2r1RrwNpIkBdXquKhcTHksY44hkShNTzE9gcTwrSnOdabLl0+6HJnHVlnDkXV03XkxfYPLxCl7xd5ivmA8M-aWpWUAkBA3KK8EqqEgarquHwMJkvXwGBJHA4Y3obETC0URatG0IGjLcmrYPOmmSbn0lxHFmndkgTm0gPi4MC0PPSWRkAj5OxqVZmVymMK0FKiGqrMwjXNfEFlF9fEccumqtTJocet5skUtYbds7Kz8xkgZknNnnS4dt2B91ucfCqcZwA34EyXWcVzBZVIUqTcc01Q0931JZj0rQg8WmJpLx6GgHVvF0h0fUdn1fb1+0HL9h2jBlBQnCNRWnKjgPjf44GXVNV3TaDEi3XNax1Qs0U8FDxjQ6tDywpsbypfCKMIhkezfH0Bz9AiZB-J8aIA+igLnKgQJY+V2Mg9dM2zWF4Jofj9wNI8RhNVDcWrTDGHmXomlw6T707X8FNIj9-R5GcQyeLSPiDWdJ30xNWPAoy1wzGCzO3eBDSs-VEWEs10I4ZzmBJPMqA8p07y2WSuw9F8vT7fzVNuKjgrDSdtMY3SorAlMQWMhLuLghAqE8RDURszLT0oDg6Bc-LFkK5tHQUNtSofcriKq99fU-Ja6vChraLeZrwqYhdQKTDq0ygjcktzJpEWRfVPAxOyKxExypmmrCeFmvCvLdJ9fOq9aArUoKxxC3T9q+VrmOiwzOviri1XMhBFl3W6hpoGgRtEqYqAvSaFg+qSsxkzbfs9Xs1uUjbvPUojNLBsKIciqH2qyOLOIunj4J6Qa0VsrFnvNbG6zx3ocM+1sSsBnyycUsiVLKrbfzppqGYlCM2pO1nYfZ0zOYQfFFibQti1LTGXoJYW8vYZGiupRbvNJyryaU8jNpp6j-3pqMDsho6DLY7XztgPxOigDB6MuzVFksg1UZNstHpPLHKFmEXURmwn5sl2rHZI-7Kal92dtC73GfV5nNYguGOd6gq45LBP+ay6t0Sw68WyJ76blz1aXflt3gb-UGVdLtW4z96GA7OkzEr1lKuA+42G7NwXKAGS8OAzjus+Jh2iL+inXepwfXFsIIADlVf2M-L4rmLrGsHrEaLBv69NxOHNX6YiTTgYip3rucluwyz8gDWqRcBQ3yvtOC+GsYo318LYHAhg2itAABoRznk0Q8qM+gZQ-gLdChosLuXFp3e2P194gPzkfb8J8oGj2vrAu+hAH5P2Sk0HoaUhq0BXkQ60acaA9H-gtKWPdnZyypnQ+qkDmEMXCgwieYEEF8CIFwKgAA1UQOQIBoPxI2TBtcqA4N1NZfEfCW6LA3lvOaoic5UKdrLGqCsIFuEUTORRyRjrwIvr4VR6itE4B0Xogx7Dczoh5q4RYRoCHN2xlhe0ZCAEUO7g4vOh9+7HxkW4uRHi5FeP9jA8+iDkH4hxhgsJmomg41wVExYFipjzlcpwAmHc7ZiLSb3SRhd6G5Kop4xcSYVF4DUZo7Ruj9GLEMc-ThkT8RCViaNCg+JcrNOwiI7OCtxFOLAS43pt95FOAGd4wgwzRmBOCZM6ZyUcbcLRA0ygAira9HxLbXelD5LUIyVIyi21ZEHLyQcgpk8QBsIRslDgrQjYonjg8msP9nmcESYTdp9jPmONAQXcB+zoHHMKWC2Cz9Uq1M3nCxYTzmmNg2e81J6L0l9x+YFbJp8+kKPyYM++j9wW5nzG-Ru9lCFiVToiv+ZDUVbM6RIkwaAkg9OZUIJgaglDQIVUquBwhFVKF8GoNo+IAAy1yrqtEiQ9JuSyOC4xFaQzOdiJV0q6dK2V2L5WapVa6lhVJNW+D1dgjgQRDXwQtbUzhcKegIrWda7etqSaSp2QOGVcq-luFVcqxhWZ3VKKTCmxBtBNEBr6pC2pyFFnJwoHaS8llqWAOWgfF2CbnVJtcCmt1aqPXpqVb4IItYegaPzfAQ2dz+hwstc0xYwixU0qARVelZF617Jda2w5GrF3ArAtmnVrR9V9paIO6JZLVn5VFTazZMb7VSo5HOgeC7U1Ls9Sujly6tUbq3ZUpGxqSVUDhddDekko0nr3meuNShL1ZMbc2tN4HM0xWzbYXNvbX39sLaY9KQwS3m2mBNRF5K3nVulhimhIHpFgYzTOSDq6s1etg2EeD3Kqko2Q0NBEoa9K-1abY-9HzgH4cPoR35StIOkYzeR6DXqfWHn9Qh66kTUNmtLT0YVzTN44ZSVOla5741OvncRxdgn70nLvU+3VBqEM9AGnyslmHFOvInbh7ZmLgOaavdpm9umb3CcfTm6jfaqBcNqeYtDX9uBt2Ux0wD9neNMucy2tzD6DPaqM9u9Ewa4VUBYyK397HJ01q+XWxzoH+MkaomR2L7bDObuM7RpGSHCwcFcJ4fzsn0MIgkiFtFXGZ2OsTQVnTRWhMlfXQlyTXBB0zFDZbNZ7dHTitPe1h1F68tEe6y53renCkDfK95rgkT8GNa-jQcbh6MtfRU9l7juWusaQEytmL+nSvxY25J+jAkomhss-lIRVaTt4Y6-Ni7tMrvhWK7d9bL7Ktai2+ZgL6F5mXnq61u17hYCaCIHoWt-ZEcwGR6jhtXwkco5wNAjHWOCdtqJ-jhD0TIk+a-QdhYk3juhbJ9js76O8fM6c7jzH5O01M5J1B2IbO+eRyq5EmJu3srhvylwZFf6suc+J2jgXXP2f5aVwrnngv1WAk12Dpo+3g0yYFXEteVjBH088l9tX3OWdW5V4t23fOgI6-59r5XQu57GO4TQA0cL8Q9EvFwSNU25cO8V679XWn5fW6d27rXyZnfC61DdBjfRzy+7S804bn3GfO5+-H2POPQ8a4Ly7-PEfE-TW4bCqH1Y3vsHUfD09vOw9l+txzovt7W-M-c+H63ifzyRPGmShTU0ZfB9s735nefm+F8n47xiCeSsz8JRwytKeDSmqN0smgkv69i2PSHufLfl-t6P8X8vS+E9z2mpEzwn6a9ngz+98dB+J9d759P53p-3+E8X7d5fFe54tSXAGMD+lAhsFaOor+luZ+NusB3+y+MeF+-+V+tc1Sg6lkoaI6UuR2Esh+P+OWrOJeCBzuSBfel+Je-eQa6+DWW+pam8AeY+DOaKy+n+xBqusBZB3eFB5eWCtYtSmBYB0w-uacXAuBxU+BrBc2BBkeHeXBQuPBfeWCnCRaYudB6Gu+CAge2eLBue0hJ+HBMh8hceABWCPQpCz2huT0xuZaIhiKC8jeAGUh6mBh9unBC+lBih3efBg03uGIAAuowAAMZ6BJAYBlAICIB0Eiy4Q5yEEXajwsKVa3T+GDBAA'));
samples.columns.push("RNAB_v0");
samples.columns.push("RNAB_Log_v0");

var genelist=JSON.parse(itg_decomp(''));

    

// Simple Functions
var capitalizeFirstLetter = function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
};

var titleCase = function titleCase(str) {
  return str.replace(/\w\S/g, function (t) {
      return t.toUpperCase();
  });
};

var delete_row = function delete_row(e) {
  e.parentNode.parentNode.parentNode.removeChild(e.parentNode.parentNode);
};

var round = function (value, exp) {
  if (typeof exp === 'undefined' || +exp === 0) return Math.round(value);
  value = +value;
  exp = +exp;
  if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) return NaN;
  value = value.toString().split('e');
  value = Math.round(+(value[0] + 'e' + (value[1] ? +value[1] + exp : exp)));
  value = value.toString().split('e');
  return +(value[0] + 'e' + (value[1] ? +value[1] - exp : -exp));
};

var chrgpos={'1':0,'2':250000000,'3':495000000,'4':695000000,'5':890000000,'6':1075000000,'7':1250000000,'8':1412000000,'9':1560000000,'10':1700000000,'11':1835000000,'12':1972000000,'13':2107000000,'14':2223000000,'15':2333000000,'16':2438000000,'17':2533000000,'18':2618000000,'19':2700000000,'20':2760000000,'21':2826000000,'22':2876000000,'X':2928000000,'Y':3088000000,'M':3148000000};
  
var browser = {
    'vgSpec': JSON.parse(itg_decomp("")),
    'header': {},
    'genenames': null,
    'table_render':false,
    'loaded': false,
    'LoadState': 0,
    'chr': 'chr1',
    'pos38':[-1,-1],
    'g38':[1,3200000000],
    'genetext': false,
    'state': [0, 0, 0],
    'gwas': [],
    'throttle':500,
    'eqtl': [],
    'samples': [],
    'gene_anchors':{"values":[]},
    'rnab_summaries':{"values":[]},
    'scrn_summaries':{"values":[]},
    'transcripts': {
        "values": []
    },
    'exons': {
        "values": []
    },
    'genes': {
        "values": []
    },
    'utrs': {
        "values": []
    },
    'cds': {
        "values": []
    },
    'junctions': {
        "values": []
    },
    "views": {
        "values": [1,320000000]
    },
    "location": {
        "values": [{
            "chr": "Un",
            "pos": 300000000,
            'pos38':[-1,-1],
            'g38':[-1,-1],
            "gene": "Un"
        }]
    },
    "global_api": global_api,
    'window': {g38:[1,3200000000]},
    'search': {
        
        'pos38':[89000000,89100000],
        'g38':[1,3200000000],
        
        'toLoad': true,
        'gene': "none",
        'chr': "none",
        'buffer': 1000000,
        'left': 89000000,
        'right': 89100000,
        'pleft': 8,
        'pright': 8
    }
};

var cluster_defs={"c0":"Astrocytes,EpendymalCells,ConnectiveTissue,Niche_Astrocytes_2,FloorPlateProgenitors,Niche_Astrocytes_1,Unknown_Neurons_2,NeuroepithelialCells,SerotoninergicNeurons,ChoroidPlexus,NPCs",
"c1":"ConnectiveTissue,Niche_Astrocytes_1,Unknown_Neurons_2,ChoroidPlexus,Astrocytes,SerotoninergicNeurons,ImmatureNeurons ,MuscleCells,Niche_Astrocytes_2,NeuroepithelialCells,FloorPlateProgenitors,NPCs,EpendymalCells",
"c2":"ImmatureNeurons ,Unknown_Neurons_1,Unknown_Neurons_2,DopaminergicNeurons,Niche_Astrocytes_1,NPCs,Niche_Astrocytes_2,SerotoninergicNeurons",
"c3":"DopaminergicNeurons,Unknown_Neurons_1,Unknown_Neurons_2,ImmatureNeurons ,Astrocytes,FloorPlateProgenitors,SerotoninergicNeurons",
"c4":"SerotoninergicNeurons,NPCs,Unknown_Neurons_2,DopaminergicNeurons,ImmatureNeurons ,NeuroepithelialCells,FloorPlateProgenitors,Unknown_Neurons_1,Astrocytes,ConnectiveTissue,Niche_Astrocytes_1,ChoroidPlexus",
"c5":"Astrocytes,EpendymalCells,NPCs,Unknown_Neurons_2,Niche_Astrocytes_1,ImmatureNeurons ,FloorPlateProgenitors,Niche_Astrocytes_2,ConnectiveTissue,NeuroepithelialCells",
"c6":"FloorPlateProgenitors,ImmatureNeurons ,Astrocytes,ConnectiveTissue,Niche_Astrocytes_1,EpendymalCells",
"c7":"Niche_Astrocytes_2,Unknown_Neurons_2,Niche_Astrocytes_1,Astrocytes,SerotoninergicNeurons,ImmatureNeurons ,ConnectiveTissue",
"c8":"NeuroepithelialCells,Unknown_Neurons_2,Astrocytes,ConnectiveTissue,ChoroidPlexus,Niche_Astrocytes_1",
"c9":"EpendymalCells,ChoroidPlexus,DopaminergicNeurons,Niche_Astrocytes_1,Astrocytes,NeuroepithelialCells",
"c10":"Unknown_Neurons_2,ConnectiveTissue,Astrocytes,SerotoninergicNeurons"};

var theme = {};
var Index = function Index(items, name) {
  var index = -1;    
  for (var i = 0; i < items.length; ++i) {
    if (items[i].name == name) {
      index = i;
      break;
    }
  }
  return index;
};


var setWidth = function setWidth(id) {
  var w = jQuery('#'+id).width();
  if (w==null || w<200) {w=jQuery('#itg-master-width').width();}
  if (w==null || w<200) {w=jQuery('#Home').width();}
  if (w==null || w<200) {w=jQuery('#Genes').width();}
  return w;
};

var setHeight = function setHeight() {
  var w = window.innerHeight;
  return w;
};

function toggle(id) {
  var x = document.getElementById(id);
  if (x.style.display === "none") {
    x.style.display = "block";
    document.getElementById("graph_button").innerHTML="View Graph";
  } else {
    x.style.display = "none";
    document.getElementById("graph_button").innerHTML="View Data";
  }
}



var loadData = function loadData(data) {
  jQuery("#gene").easyAutocomplete({
    data: data,
    getValue: "gene",
    list: {
      match: {
        enabled: true
      }
    },
    template: {
      type: "custom",
      method: function method(value, item) {
        return "<a href=#Gene?gene=" + item.gene + ">" + value + "</a>";
      }
    },
    theme: "square"
  });
};




var embed_vega = function embed_vega(vgspec, vgsignals, data, element, tooltips) {
    loader(1,'embed_vega start');
    var sdata=JSON.stringify(data);
    data=JSON.parse(sdata);
    var vgSpec = JSON.parse(JSON.stringify(vgspec)); 
    if (vgsignals != null) {
        var vgSignals = JSON.parse(JSON.stringify(vgsignals));
        for (var j in vgsignals) {
            var i = Index(vgSpec.signals, vgsignals[j].name);
            vgSpec.signals[i].value = vgsignals[j].value;
            vgSpec.signals[i].bind = vgsignals[j].bind;
        }
    }
    if (data != null) {
        vgSpec.data[Index(vgSpec.data, "mydata")].values = data;
    }
    vegaEmbed(element, vgSpec, {
        renderer: 'canvas',
        width: setWidth(),
        height: setHeight(),
        actions: {
            export: true,
            source: true,
            editor: true,
            editorURL:"https://itg.usc.edu/editor",
            scaleFactor: 1
        },
        config: theme,
        defaultStyle: true,
        tooltip: tooltips
    }).then(function (result) {
        loader(1,'start embed embed vega');
        jQuery(window).resize(function () {
            result.view.resize().width(setWidth()).height(setHeight()).run();
        });
        loader(0,'end vega embed vega');
    }).catch(console.error);
    loader(0,'end draw vega');
};



function displayWindowSize(){
  var a=setHeight();
  if (a>600) {
    document.getElementById('sciframe').setAttribute("height",a-200+"px");
  } else {
    document.getElementById('sciframe').setAttribute("height",600-200+"px");
  }
}


loadData(genelist);
setTimeout(function() {
	loader(1,'start of timeout');
 	jQuery(document).ready(function() {
		loader(1,'start of jquery');
		setTimeout(function () {
  var columns=["Age","Sex","Disease","Gene","Mutation","Pathology","Disease-Gene","Min pmd","pH"];
  var data=JSON.parse(JSON.stringify(samples.json));

  CrossCorrelate("example_graph","itg-browser-width",data,
      [
        {"name":"X_Axis","value":"Gene","bind":{"options":columns}},
        {"name":"Y_Axis","value":"None","bind":{"options":columns}},
        {"name":"Facet_Cols_By","value":"Pathology","bind":{"options":columns}},   
        {"name":"Facet_Rows_By","value":"None","bind":{"options":columns}},       
        {"name":"Color_By","value":"Mutation","bind":{"options":columns}},     
        {"name":"graph_title","value":"Sample Counts By "},
        {"name":"Dashes_","value":false},                
        {"name":"Palette","value":"Category10"},
        {"name":"Max_Plot_Height","value":150}, 
        {
          "name": "Max_Plot_Width",
          "value": 375
        },
        {"name":"Legend_Height","value":60}
      ]
    );  
}, 10);

		
function make_browser(browser, genes) {
    loader(1,"make_browser");
    browser=BrowserSearchWindow(browser);
    browser.transcripts.values.length = 0;
    browser.genes.values.length = 0;
    browser.utrs.values.length = 0;
    browser.cds.values.length = 0;
    browser.exons.values.length = 0;
    browser.views.values.length = 0;
    browser.location.values.length = 0; 
    browser.scrn_summaries.values.length = 0;
    browser.rnab_summaries.values.length = 0;
    var WindowSize=browser.search.gwin[1]-browser.search.gwin[0];
    var MinPosSize=Math.round(0.05*WindowSize);
    //console.log('MinPosSize',MinPosSize);
    if (genes) {
        min_track_count=40;
        genes.sort((a, b) => parseFloat(a.g38[0]) - parseFloat(b.g38[0]));
        var tracks=[[{'g0':0,'g1':0}]];
        var posCur=0;
        var trackCur=1;
        for (var g = 0; g < genes.length; g++) {
            var gene=genes[g];
            if (gene.g38[0]>gene.g38[1]){
                var a=gene.g38[0];
                gene.g38[0]=gene.g38[1];
                gene.g38[1]=a;
            }
            browser.views.values.push(gene.g38);
            browser.location.values.push(gene.g38);   
            var biotype=gene.biotype;         
            var chr = gene.chr; 
            chr = chr.replace("chr", "");
            var geneDir='+';    
            if ( "transcripts" in gene) {
                if (gene.transcripts[0]) {
                    if ("dir" in gene.transcripts[0]) {
                        geneDir=gene.transcripts[0].dir;
                    }                  
                }
            } else {                
                //console.log('No transcripts in', gene.gene);
                break;
            }                            
            gene.transcripts.sort((a, b) => parseFloat(b.g38[0]) - parseFloat(a.g38[0]));
            var inserted=false;
            for (t=0;t<tracks.length;++t) {
                var InsertGene=true;
                for (var j=0;j<tracks[t].length;++j) {
                    if (gene.g38[0]>tracks[t][j].g0 && gene.g38[0]<tracks[t][j].g1) { 
                        InsertGene=false;                        
                    }                                        
                }
                for (var zz=t;zz<=t+gene.transcripts.length+6;++zz) {
                    if (zz<tracks.length) {
                        for (var jz=0;jz<tracks[zz].length;++jz) {
                            if (gene.g38[0]>tracks[zz][jz].g0 && gene.g38[0]<tracks[zz][jz].g1) { 
                                InsertGene=false;                        
                            }                                        
                        }
                    } else {
                        break;
                    }                                                    
                }                   
                if (!InsertGene && t==tracks.length-1) {
                    tracks.push([{'g0':0,'g1':0}]);
                }
                if (InsertGene) {
                    for (var i = 0; i < gene.transcripts.length; i++) {                                                                                    
                        var g0=gene.transcripts[i].g38[0];
                        var gend=g0+Math.max(MinPosSize,Math.abs(gene.transcripts[i].g38[1]-gene.transcripts[i].g38[0]));
                        
                        if ( (t+i) > (tracks.length-1) ) {
                            tracks[i+t]=[{'g0':g0,'g1':gend}];
                        } else {
                            tracks[i+t][tracks[i+t].length]={'g0':g0,'g1':gend};
                        }
                        browser.transcripts.values.push({
                            "transcript_name": gene.transcripts[i].transcript_name,
                            "pos": (gene.transcripts[i].g38[1] - gene.transcripts[i].g38[0]) / 2 + gene.transcripts[i].g38[0],
                            "g": (gene.transcripts[i].g38[1] - gene.transcripts[i].g38[0]) / 2 + gene.transcripts[i].g38[0],
                            'g0':gene.transcripts[i].g38[0],
                            'g1':gene.transcripts[i].g38[1],
                            'gfp':gene.transcripts[i].g38[0],
                            'glp':gene.transcripts[i].g38[1],
                            'fp':gene.transcripts[i].pos38[0],
                            'lp':gene.transcripts[i].pos38[1],  
                            "exon_id": "Transcript",                                             
                            "chr": chr,  
                            "biotype": biotype,
                            "dir":gene.transcripts[i].dir,              
                            "transcript": gene.transcripts[i].transcript,
                            "track": t+i,
                            "gene": gene.gene
                        });
                        if (!!gene.transcripts[i].exons) {
                            for (var j = 0; j < gene.transcripts[i].exons.length; j++) {
                                browser.exons.values.push({
                                    "exon_id": "EXON",
                                    "biotype": biotype,
                                    'gfp':gene.transcripts[i].exons[j].g38[0],
                                    'g0':gene.transcripts[i].exons[j].g38[0],
                                    'g1':gene.transcripts[i].exons[j].g38[1],  
                                    'glp':gene.transcripts[i].exons[j].g38[1],
                                    'fp':gene.transcripts[i].exons[j].pos38[0],
                                    'lp':gene.transcripts[i].exons[j].pos38[1],                                     
                                    "chr": chr,"dir":geneDir, 
                                    "end_pos": gene.transcripts[i].exons[j].end_pos,
                                    "transcript": gene.transcripts[i].transcript,
                                    "track": t+i,
                                    "gene": gene.gene
                                });
                            }        
                        }
                        if (!!gene.transcripts[i].UTRS) {
                            for (var j = 0; j < gene.transcripts[i].UTRS.length; j++) {
                                browser.utrs.values.push({
                                    "exon_id": "UTR",
                                    "biotype": biotype,
                                    'gfp':gene.transcripts[i].UTRS[j].g38[0],
                                    'g0':gene.transcripts[i].UTRS[j].g38[0],
                                    'g1':gene.transcripts[i].UTRS[j].g38[1],  
                                    'glp':gene.transcripts[i].UTRS[j].g38[1],
                                    'fp':gene.transcripts[i].UTRS[j].pos38[0],
                                    'lp':gene.transcripts[i].UTRS[j].pos38[1],   
                                    "chr": chr,"dir":geneDir, 
                                    "transcript": gene.transcripts[i].transcript,
                                    "track": t+i,
                                    "gene": gene.gene
                                });
                            }
                        }
                        if (!!gene.transcripts[i].CDS) {
                            for (var j = 0; j < gene.transcripts[i].CDS.length; j++) {
                                if (!!gene.transcripts[i].CDS[j]) {
                                    browser.cds.values.push({
                                        'gfp':gene.transcripts[i].CDS[j].g38[0],
                                        "biotype": biotype,
                                        'g0':gene.transcripts[i].CDS[j].g38[0],
                                        'g1':gene.transcripts[i].CDS[j].g38[1], 
                                        'glp':gene.transcripts[i].CDS[j].g38[1],
                                        'fp':gene.transcripts[i].CDS[j].pos38[0],
                                        'lp':gene.transcripts[i].CDS[j].pos38[1],  
                                        "chr": chr,"dir":geneDir, 
                                        "exon_id": "CDS",  
                                        "transcript": gene.transcripts[i].transcript,
                                        "track": t+i,
                                        "gene": gene.gene
                                    });
                                }
                            }
                        }
                    }
                    var s=t+gene.transcripts.length;
                    if (gene.clusters_summaries) {
                        for (var n = 0; n < gene.clusters_summaries.length; n++) {
                            gene.clusters_summaries[n]['Annotation']=cluster_defs[gene.clusters_summaries[n]['cluster']];
                            gene.clusters_summaries[n]['g0']=gene.g38[0];
                            gene.clusters_summaries[n]['track']=s;
                            gene.clusters_summaries[n]['gene']=gene.gene;
                            browser.scrn_summaries.values.push( gene.clusters_summaries[n]);
                        }
                    }
                    if (gene.summaries_BulkRNA,gene.summaries_BulkRNA) {
                        //console.log('bulk rna summary found');
                        for (var o = 0; o < gene.summaries_BulkRNA.length; o++) {
                            gene.summaries_BulkRNA[o]['g0']=gene.g38[0];
                            gene.summaries_BulkRNA[o].track=s;
                            gene.summaries_BulkRNA[o]['gene']=gene.gene; 
                            browser.rnab_summaries.values.push( gene.summaries_BulkRNA[o]);
                        }
                    }
                    var gg0=gene.g38[0];
                    var ggend=gg0+Math.max(MinPosSize,Math.abs(gene.g38[1]-gene.g38[0]));
                    if (gene.clusters_summaries_BulkRNA||gene.summaries_BulkRNA) { 
                        for (x=0;x<=6;++x) {
                            if ( (t+gene.transcripts.length+x) > (tracks.length-1) ) {
                                tracks[t+gene.transcripts.length+x]=[{'g0':gg0,'g1':ggend}];
                            } else {
                                tracks[t+gene.transcripts.length+x][tracks[t+gene.transcripts.length+x].length]={'g0':gg0,'g1':ggend};
                            }                                    
                        }
                    }
                    t=5000; 
                }
            }
        }
    }
    loader(0,"done_make_browser");
    return browser;
}

var insert_API=function(result,name_values,url){    
    jQuery.ajax({
        type: 'GET',url: url,async: true,dataType: 'json',
        beforeSend: function beforeSend() {loader(1,'insert_API');},
        error: function error(xhr) {},
        complete: function complete() {loader(0,'jQuery');},
        success: function success(my_array) {            
            if (my_array.length>0) {
                browser.vgSpec.data[browser.vgSpec.data.findIndex(function(a) {return a.name == name_values;})].values=my_array;
                result.view.change(name_values, vega.changeset().remove(function () {return true;}).insert(my_array)).runAsync();
            }
            
        }
    });
};

var gpos_search=function(result,gene_url) {
    jQuery.ajax({
        type: 'GET',
        url: gene_url,
        async: true,
        dataType: 'json',
        beforeSend: function beforeSend() {loader(1,'gpos_search');},
        error: function error(xhr) {},
        complete: function complete() {loader(0,'gpos_search');},
        success: function success(Genes_array) {
            Genes_array = JSON.parse(itgz.decompressFromBase64(decodeURI(Genes_array.genepos)));
            browser = make_browser(browser, Genes_array); 
            browser.vgSpec.data[browser.vgSpec.data.findIndex(function(a) {return a.name == "geneDetail"})].values=browser.genes.values;
            browser.vgSpec.data[browser.vgSpec.data.findIndex(function(a) {return a.name == "exons"})].values=browser.exons.values;
            browser.vgSpec.data[browser.vgSpec.data.findIndex(function(a) {return a.name == "cds"})].values=browser.cds.values;
            browser.vgSpec.data[browser.vgSpec.data.findIndex(function(a) {return a.name == "utrs"})].values=browser.utrs.values;
            browser.vgSpec.data[browser.vgSpec.data.findIndex(function(a) {return a.name == "transcripts"})].values=browser.transcripts.values;
            browser.vgSpec.data[browser.vgSpec.data.findIndex(function(a) {return a.name == "RNAB_summary_values"})].values=browser.rnab_summaries.values;
            result.view.change('geneDetail', vega.changeset().insert(browser.genes.values).remove(function () {return true})).run();
            result.view.change('RNAB_summary_values', vega.changeset().insert(browser.rnab_summaries.values).remove(function () {return true})).run();
            result.view.change('exons', vega.changeset().insert(browser.exons.values).remove(function () {return true})).run();
            result.view.change('cds', vega.changeset().insert(browser.cds.values).remove(function () {return true})).run();
            result.view.change('utrs', vega.changeset().insert(browser.utrs.values).remove(function () {return true})).run();
            result.view.change('transcripts', vega.changeset().insert(browser.transcripts.values).remove(function () {return true})).run();
            return result.view.run();
        }
    });
};

var reformat_gene_description = function reformat_gene_description(genes) {
    var wordvalues = "";
    jQuery('#GeneLookup').show();
    jQuery("#gene_info").show();
    jQuery('#gene_name').empty();
    jQuery('#gene_name2').empty();
    jQuery('#gene_name3').empty();
    jQuery('#Gene_full_name').empty();
    jQuery('#Ensembl_gene').empty();
    jQuery('#Ensembl_gene_ref').empty();
    jQuery('#Gene_other_names').empty();
    jQuery('#chr').empty();
    jQuery('#Uniprot_ref').empty();
    jQuery('#Entrez_gene').empty();
    jQuery('#GeneLookup').empty();
    jQuery('#diseasemark').empty();
    jQuery('#transcript_list').empty();
    jQuery('#start_pos').empty();
    jQuery('#dir').empty();
    if (genes) {
        genes.genetext = true;
        if (genes.pubmed_text) {
            wordvalues = wordvalues + " " + genes.pubmed_text;            
        }
        if (genes.Disease_description) {wordvalues = wordvalues + " " + genes.Disease_description;}
        if (genes.ghrCondition) {wordvalues = wordvalues + " " + genes.ghrCondition;}
        if (genes.ghrFunction) {wordvalues = wordvalues + " " + genes.ghrFunction;}
        if (genes.refseq) {wordvalues = wordvalues + " " + genes.refseq;}
        if (genes.Pathway_ConsensusPathDB) {wordvalues = wordvalues + " " + genes.Pathway_ConsensusPathDB;}
        if (genes.GO_molecular_function) {wordvalues = wordvalues + " " + genes.GO_molecular_function;}
        if (genes.GO_cellular_component) {wordvalues = wordvalues + " " + genes.GO_cellular_component;}
        if (genes.cgdCondition) {wordvalues = wordvalues + " " + genes.cgdCondition;}
        if (genes.Pathway_KEGG_full) {wordvalues = wordvalues + " " + genes.Pathway_KEGG_full;}
        if (genes.Tissue_specificity_Uniprot) {wordvalues = wordvalues + " " + genes.Tissue_specificity_Uniprot;}
        if (genes.Trait_association_GWAS) {wordvalues = wordvalues + " " + genes.Trait_association_GWAS;}       
        if (genes.Function_description) {wordvalues = wordvalues + " " + genes.Function_description;}       
        if (genes.Function_description) {wordvalues = wordvalues + " " + genes.Function_description;}       
        if (genes.Gene_other_names) {
            var text = genes.Gene_other_names;
            text = text.replace(/\;/g, '<br>');
            genes.Gene_other_names = text;
            jQuery('#Gene_other_names').empty().append(genes.Gene_other_names);
        } else {
            jQuery('#Gene_other_names').parent('tr').hide();
        }
        if (genes.Gene_old_names) {
            var text = genes.Gene_old_names;
            text = text.replace(/\;/g, '<br>');
            genes.Gene_old_names = genes.Gene_old_names + ', ' + text;
            jQuery('#Gene_other_names').append(genes.Gene_old_names);
        }

        if (genes.transcripts) {
            jQuery("#transcript_list").append(genes.transcripts[0]['transcript']);
            jQuery.each(genes.transcripts, function (i, val) {
                if (i != 0) {
                    jQuery("#transcript_list").append('<br>' + genes.transcripts[i]['transcript']);
                }
            });
        }
    } else {
        genes = [];
        jQuery('#results').hide();
        genes.genetext = false;
        jQuery("#gene_info").hide();
        jQuery('#gene_name').empty().append('Data for ' +browser.search.gene+' is not available. Use HUGO gene names.');
        jQuery('#itg-wordcloud-parent').empty().hide();
        jQuery('#view_smartplot').empty().hide();
        jQuery('#GeneLookup').hide();
        return null;
    }
    delete genes._id;
    jQuery('#gene_name').empty().append(genes.gene);
    jQuery('#gene_name2').empty().append(genes.gene);
    jQuery('#gene_name3').empty().append(genes.gene);
    jQuery('#Gene_full_name').empty().append(genes.Gene_full_name);
    jQuery('#Ensembl_gene_ref').attr("href", "https://www.ensembl.org/Homo_sapiens/Gene/Summary?g=" + genes.Ensembl_gene).append(genes.Ensembl_gene);
    if (genes.pos38) {
        if (genes.pos38.constructor === Array) {
            jQuery('#chr').empty().append('chr'+genes.chr+':'+genes.pos38[0] + '-' + genes.pos38[1]);
        }
    }
    jQuery('#Uniprot_ref').attr("href", "http://www.uniprot.org/uniprot/" + genes['Uniprot_acc']).append(genes['Uniprot_id']);
    jQuery('#Entrez_gene_ref').attr("href", "https://www.ncbi.nlm.nih.gov/gene/" + genes['gene']).append(genes.gene);
    wordvalues = wordvalues.replace(/[^A-Za-z]/g, ' ');
    genes.wordvalues = wordvalues; 

    if (wordvalues.match(/parkinson/i)) {
     //  jQuery('#show_diseaseInsert').css('display', 'inline-block');
    } else {
        jQuery('#show_diseaseInsert').css('display', 'none');
    }

    return genes;
};

var render_gene_wordcloud = function render_gene_wordcloud(vals) {
    loader(1,"render gene cloud");
    var vgSpec = JSON.parse(itg_decomp(""));
    var newwidth = document.getElementById("itg-wordcloud-parent").offsetWidth - 10;
    if (newwidth < 205) {
        newwidth = setWidth();
    }
    var newheight = document.getElementById('firstcol').clientHeight - 15;
    vgSpec['marks'][0]['transform'][0]['size'][0] = newwidth;
    vgSpec['marks'][0]['transform'][0]['size'][1] = newheight;
    var wordcloud_view = new vega.View(vega.parse(vgSpec)).initialize('#gene_wordcloud');
    wordcloud_view.change('myvalues', vega.changeset().insert(vals)).width(newwidth).height(newheight).renderer('canvas').hover().run();
    jQuery(window).resize(function () {
        loader(1,'resize');
        wordcloud_view.resize().width(setWidth()).height(newheight).renderer('canvas').hover().run();
        loader(0,'resize');
    });
    loader(0,"done rendering wordcloud");
};


var get_gene = function get_gene(browser) {
    var query = window.location.search;
    if (browser.search.gene) {
        browser.search.gene = browser.search.gene.toUpperCase();
        //jQuery('#SC').show();
        jQuery("#gene").val("");
        jQuery('#gene').blur();
        window.location.replace("?gene=" + browser.search.gene+"#Genes"); 
        load_geneInfo(browser);
    }
    return(browser);
};

var load_geneInfo = function load_geneInfo(browser) {
    var geneview_signals=[        
    ];    
    var mygene = browser.search.gene;
    var gene_api_url = browser.global_api + "/gene/" + mygene;
    jQuery.ajax({
        'async': true,
        'crossDomain': true,
        'url': gene_api_url,
        beforeSend: function beforeSend() {loader(1,'geneInfo ajax start');},
        error: function error(xhr) {},
        complete: function complete() {loader(0,'geneinfo ajax end');},          
        "method": "GET",
        // "headers": browser.header,                                
        'dataType': "json",       
        'success': function success(data) {
            loader(1,'geneInfo just got data');
            data = JSON.parse(itgz.decompressFromBase64(decodeURI(data.gene))); 
            var Gene_array = reformat_gene_description(data);
            if (Gene_array) {
                if (Gene_array.genetext) {
                    browser.samples= data.samples_BulkRNA;
                    for (var g = 0; g < browser.samples.length; g++) {
                        browser.samples[g]['RNA Expression']=browser.samples[g]['BulkRNA_v0'];
                        browser.samples[g]['RNA Log(Expression)']=browser.samples[g]['BulkRNA_Log_v0'];
                    };

                    render_gene_wordcloud(Gene_array.wordvalues);
                    browser.search.genequery = browser.search.gene;
                    if ('chr' in Gene_array) {browser.search.chr = Gene_array.chr;}
                    if ('g38' in Gene_array) {
                      browser.g38=[Gene_array.g38[0],Gene_array.g38[1]];   
                    }
                    var cols=["RNA Expression","RNA Log(Expression)","BulkRNA_Log_v0","BulkRNA_v0","Age","Sex","Disease","Gene","Mutation","Pathology","Disease-Gene","Min pmd","pH"];
                    CrossCorrelate("expgraff","itg-browser-width",browser.samples,
                    [
                      {"name":"X_Axis","value":"Disease-Gene","bind":{"options":cols}},
                      {"name":"Y_Axis","value":"RNA Expression","bind":{"options":cols}},
                      {"name":"Facet_Cols_By","value":"None","bind":{"options":cols}},       
                      {"name":"Facet_Rows_By","value":"None","bind":{"options":cols}},       
                      {"name":"Color_By","value":"Disease-Gene","bind":{"options":cols}},    
                      {"name":"Filter_Out_From","value":"None","bind":{"options":cols}},       
                      {"name":"Filter_Additional","value":"None","bind":{"options":cols}},     
                      {"name":"graph_title","value":"Expression of "+mygene},
                      {"name":"Dash_Height","value":2},
                      {"name":"Palette","value":"tableau20"},
                      {"name":"Dash_Width","value":0.2},
                      {"name":"Dash_Radius","value":4},
                      {"name":"Max_Plot_Height","value":150},
                      {"name":"Max_Plot_Width","value":800},
                      {"name":"Opacity_","value":1},
                      {"name":"Xaxis_Height","value":120},
                      {"name":"Legend_Height","value":50},
                      {"name":"Jitter_","value":false},
                      {"name":"Violin_","value":false},
                      {"name":"Row_Header_Width","value":100},
                      {"name":"Dashes_","value":true},
                      {"name":"Feature_Size","value":30}    
                    ]
                  );  
                       
                    browser.loaded=false;
                    var newgenes=[{gene:data.gene,biotype:data.biotype,chr:data.chr,g38:data.g38,geneid:data.geneid,name:data.name,gpos:data.g38,pos38:data.pos38,t_index:data.t_index,transcripts:data.transcripts}];
                    browser=make_browser(browser,newgenes);                    
                    render_browser_full(browser);
                    jQuery("#Browser").show();
                    jQuery("#gene").val(browser.search.gene);
                    
                }
            }
            loader(0,'done with just got data');
        }
    });
    return browser;
};

var effect = function(i) {
    jQuery( "#wait" ).css("color","#660000");
    jQuery( "#wait" ).append("...Please wait...");
    return jQuery( i ).fadeTo(1000*1,0.5).delay( 1200 );    
};

jQuery( "#clickexcel" ).on( "click", function() {
  jQuery.when( effect("#gene_expression_table2") ).done(function() {
    jQuery("button.dt-button.buttons-excel.buttons-html5").click();
    jQuery( "#wait" ).css("color","black");
    jQuery( "#wait" ).append("Finished.");
    jQuery( "#gene_expression_table2" ).fadeTo(1000,1);  
  });
});

		var BrowserSearchWindow=function(browser) {    
    var range = (browser.g38[1] - browser.g38[0]);
    browser.search.chr =browser.chr.replace("chr", "");
    browser.search.gwin = [browser.g38[0] - round(range*3),browser.g38[1] + round(range*3)];
    browser.search.g38 = [browser.g38[0]- round(range*0.3),browser.g38[1]+ round(range*0.3)];
    browser.vgSpec.signals[Index(browser.vgSpec.signals, "gdom")].update = "[" + browser.search.g38[0] +"," +round(browser.search.g38[1])+"]";
    browser.vgSpec.signals[Index(browser.vgSpec.signals, "gwin")].update = "[" + browser.search.gwin[0] +"," +round(browser.search.gwin[1])+"]";
    
    return(browser);
};

function pulls (result,browser) {
    loader(1,"pulls");
    gpos_search(result,browser.global_api + '/genePos/first_pos/' + browser.search.gwin[0] + '/last_pos/' + browser.search.gwin[1]);
    insert_API(result,'cage_summary_values',browser.global_api + '/cage_summary/g0/' + browser.search.gwin[0]+ '/g1/' + browser.search.gwin[1]);
    //insert_API(result,'meth_summary_values',browser.global_api + '/meth_summary/g0/' + browser.search.gwin[0]+ '/g1/' + browser.search.gwin[1]);
    insert_API(result,'meth_summary_values',browser.global_api + '/meth_summary/g0/' + browser.search.gwin[0]+ '/g1/' + browser.search.gwin[1]);
    if (browser.vgSpec.signals[browser.vgSpec.signals.findIndex(function(a) {return a.name == 'meth_show_individual';})].value==true) {
        insert_API(result,'meth_values',browser.global_api + '/meth/g0/' + browser.search.gwin[0]+ '/g1/' + browser.search.gwin[1]);
    }
    loader(0,"pnoulls");
}

function render_browser_full(browser) {    
    browser=BrowserSearchWindow(browser);
    var range = (browser.g38[1] - browser.g38[0]);
    var res=range>10000000?10000000:range>1000000?1000000:range>100000?100000:range>10000?10000:range>1000?1000:1
    browser.res=res;
    //jQuery("#browser_accordian").addClass('active');
    //jQuery("#browser_accordian > div.accd-body.jsa-body").show();    
    var selectedIndex=Index(browser.vgSpec.signals, "selected");
    browser.vgSpec.signals[selectedIndex].update = "{'gene':'" + browser.search.gene+"'}";
    loader(1,"render browser");
    vegaEmbed("#foundinpd_browser_window", browser.vgSpec, {
            renderer: 'canvas',
            width: setWidth("menu"),
            tooltip: true,
            actions: {
                export: true,
                source: false,
                editor: false,
                scaleFactor: 2
            }
    }).then(function (result) {
        loader(1,"in middle of browser");
        browser.loaded = true;
        browser.lastCall = 0;
        pulls(result,browser);
        result.view.addSignalListener('trigger_load', function (name, value) {

            var m=value.match(/\"res\":\"(.*)\"/);

            if (/neg/i.test(value) ) {
            
                    browser.g38=result.view.signal('gdom');
                    browser=BrowserSearchWindow(browser);
                    pulls(result,browser);
                    browser.res=m[1];
                    result.view.signal('sgdom',browser.search.gwin).runAsync();                    
            } else if (m!=browser.res) {  
                
                browser.g38=result.view.signal('gdom');
                browser=BrowserSearchWindow(browser);
                pulls(result,browser);
                browser.res=m[1];
                result.view.signal('sgdom',browser.search.gwin).runAsync();                    
            }     
        });
        result.view.addSignalListener('user_click', function (name, value) {
            if (value.constructor === Object) {
                
                if (/Show_Individual_METH/i.test(value.e)) {
                    if (/Show/i.test(value.v)) {
                        result.view.signal('meth_show_individual',true);
                        insert_API(result,'meth_values',browser.global_api + '/meth/g0/' + browser.search.gwin[0]+ '/g1/' + browser.search.gwin[1]);
                    } else if (/Hide/i.test(value.v)) {
                        result.view.signal('meth_show_individual',false);
                        insert_API(result,'meth_values',browser.global_api + '/meth/g0/0/g1/0');
                    }
                }
                if (/Show_Individual_CAGE/i.test(value.e)) {
                    if (/Show/i.test(value.v)) {
                        result.view.signal('cage_show_individual',true);
                        insert_API(result,'cage_values',browser.global_api + '/cage/g0/' + browser.search.gwin[0]+ '/g1/' + browser.search.gwin[1]);
                        //insert_API(result,'atac_bed_values',browser.global_api + '/atac_bed/g0/' + browser.search.gwin[0]+ '/g1/' + browser.search.gwin[1]);
                    } else if (/Hide/i.test(value.v)) {
                        result.view.signal('cage_show_individual',false);            
                        insert_API(result,'cage_values',browser.global_api + '/cage/g0/0/g1/0');
                        //insert_API(result,'atac_bed_values',browser.global_api + '/atac_bed/g0/0/g1/0');
                    }
                }               
            }
        });
        jQuery(window).resize(function () {
            result.view.resize().width(setWidth("menu")).renderer('canvas').hover().run();
        });
        loader(0, "done with that"); 
        return result.view.run();    
                         
    }).catch(console.error);
    loader(0,"done rendering browser");
}   
    
		var accordion = function () {
    var $accordion = jQuery('.jsa');
    var $accordion_header = $accordion.find('.jsa-header');
    var $accordion_item = jQuery('.jsa-item'); // default settings 
    var settings = {
        speed: 400,
        oneOpen: true
    };
    return {
        // pass configurable object literal
        init: function init($settings) {
            $accordion_header.on('click', function () {
                accordion.toggle($(this));
            });
            $.extend(settings, $settings); // ensure only one accordion is active if oneOpen is true
            
            jQuery('.jsa-item.active').find('> .jsa-body').show();
        },
        toggle: function toggle($this) {
            //if (settings.oneOpen && $this[0] != $this.closest('.jsa').find('> .jsa-item.active > .jsa-header')[0]) {
                $this.closest('.jsa').find('> .jsa-item').removeClass('active').find('.jsa-body').slideUp();
            //} // show/hide the clicked accordion item
            $this.closest('.jsa-item').toggleClass('active');
            $this.next().stop().slideToggle(settings.speed);
        }
    };
}();

var pages=['#Home','#Genes',"#Browser"];
var parents={
    "#Rnaseq":"#Rnaseq",
    '#Home':"#Home",
    '#Foundinpd':'#Home',
    '#Genes':"#Genes",
    "#Browser":"#Browser"
};

var menufunction=function(selected) {
    
    browser.selected=selected;    
    Object.keys(parents).forEach(function (key) {
        if (selected!= key){
            jQuery(key+'Button').removeClass('active');
            jQuery(key).hide();
        }
     });
     jQuery(selected+'Button').addClass('active');
     jQuery(parents[selected]+'Button').addClass('active');
     jQuery(selected).show();
     if (selected=="#Genes") {
         jQuery("#Browser").show();  
         jQuery("#ExpressionButton").addClass('active');
         jQuery('#ExpressionBody').show();
     }
};

var readurl=function() {
    loader(1,"redurl");
    var url_hash = window.location.hash.substr();
    var found=0;
    jQuery.each(parents, function( index, value ) {
        if (url_hash == value) {
            
            menufunction(value);
            found=1;
        }
    });
    if (found==0) {menufunction("#Home");}
    var url_search = window.location.search.substr();
    if (url_hash == "#Genes" || url_hash == "#Browser") {
        
        if (window.location.search.indexOf("?gene=") > -1) {
            var res = window.location.search.split("?gene=");
            if (typeof res[1]) {            
                browser.search.gene=res[1];
                window.location.replace("?gene=" + browser.search.gene+"#Genes");
                //jQuery("#gene").val(browser.search.gene);
                browser=get_gene(browser);               
                menufunction('#Genes');
            }
        } else if (window.location.search.indexOf("?coord=") > -1) {
            var textfield=window.location.search;
            var urlPattern=/\?coord=(chr)*(.*?):(.*?)-(.*)/;
            var matches=textfield.match(urlPattern);
            //console.log(matches);
            if (matches[2] in chrgpos) {
                var g0=chrgpos[matches[2]]+Number(matches[3]);
                var g1=chrgpos[matches[2]]+Number(matches[4]);
                browser.search.chr =matches[2];
                var range = (g1 - g0);
                browser.search.g38 = [g0 - round(range*0.2),g1+ round(range*0.2)];
                browser.window.g38 = [g0 - round(range*2.2),g1+ round(range*2.2)];
                browser.g38=[g0,g1];  
                //console.log(browser); 
                browser=render_browser_full(browser);

                menufunction('#Browser');
            }
        }else if (window.location.search.indexOf("?dbsnp=") > -1) {
            var snpsearch=window.location.search.toUpperCase();
            var rsPattern=/(RS[0-9]*)/;
            var dbmatch=snpsearch.match(rsPattern);
            browser.search.value=dbmatch[1]               
            get_snp(browser.search.value);
            browser=render_browser_full(browser);
            menufunction('#Browser');
        }else {
            browser.search.value="rs356129";
            get_snp(browser.search.value);
        }
    }
    loader(0,"read url end");
};

function cincludes(container, value) {
    var returnValue = false;
    var pos = container.indexOf(value);
    if (pos >= 0) {
        returnValue = true;
    }
    return returnValue;
}

var pathname = window.location.search;

accordion.init({
    speed: 300,
    oneOpen: true
});   

jQuery.each(pages, function( index, value ) {
    var aval=value+'Button';
    jQuery(value+'Button').on('click', function () {
        var myclickedbutton = "#"+jQuery(this).attr('id');
        var mypage = myclickedbutton.replace("Button", "");
        jQuery(mypage).hide();
        menufunction(mypage);
        window.location.replace(mypage);
    });           
});


jQuery.fn.scrollView = function () {
    return this.each(function () {
        jQuery('html, body').animate({
            scrollTop: jQuery(this).offset().top
        }, 0);
    });
};

jQuery("#gene").on("keypress", function (e) {
    if (e.which == 13) {
        var textfield=jQuery("#gene").val().toUpperCase();
        //console.log(textfield);
        var urlPattern=/CHR(.*?):(.*?)-(.*)/;
        var rsPattern=/RS([0-9]*)/;
        var genePattern=/,?([a-zA-Z][a-zA-Z0-9-]*),?/g;
        //console.log('genePattern',genePattern,'textfield',textfield);
        
        //console.log(matches);
        if (urlPattern.test(textfield)) {
            
            var matches=textfield.match(urlPattern);
            //console.log('matches chr',matches);
            if (matches.length>=2) {
                if (matches[1] in chrgpos) {
                    var g0=chrgpos[matches[1]]+Number(matches[2]);
                    var g1=chrgpos[matches[1]]+Number(matches[3]);
                    browser.search.chr =matches[1];
                    var range = (g1 - g0)+1000;                    
                    browser.search.g38 = [g0 - round(range*0.2),g1+ round(range*0.2)];
                    //console.log('found',browser.search.g38 );
                    browser.window.g38 = [g0 - round(range*2.2),g1+ round(range*2.2)];
                    browser.g38=[g0,g1];  
                    menufunction('#Browser');
                }
            }
        } else if (rsPattern.test(textfield)) {
                var dbmatch=textfield.match(rsPattern);
                //console.log('dbmatch',dbmatch);
                browser.search.value=dbmatch[1];                
                get_snp(browser.search.value);
                menufunction('#Browser');
       // } else if (genePattern.test(textfield)) {
       //         var genes=textfield.match(genePattern);
       //         console.log('mygenes',genes);
       //         get_genes(genes);
                //menufunction('#Genes');
        }    else {
            //console.log('no match'+textfield);
            browser.search.value=textfield;
            browser.search.gene=browser.search.value;
            browser=get_gene(browser);
            menufunction('#Genes');
        }
    }
});    
readurl();
//window.onhashchange = function() { 
//    readurl();
//    console.log('location changed!');
//};


		(function($) {
			$(function() {
				$("#accordion > div").accordion({ header: "h3", collapsible: true });
			})
		})(jQuery);
		
		loader(0,'end of Jquery');
	 });	 
	 loader(0,'set timeout');
},10);
loader(0,'end');


server.append(jQuery.parseHTML("<style>#long_switch1:checked~#long_switch1_container,#long_switch2:checked~#long_switch2_container,#long_switch3:checked~#long_switch3_container,#long_switch4:checked~#long_switch4_container,#long_switch5:checked~#long_switch5_container{display:table}#expr_switch1:checked~#expr_switch1_container,#expr_switch2:checked~#expr_switch2_container{display:table}</style>"));